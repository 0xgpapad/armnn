<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/test/UtilityTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_utility_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">UtilityTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;boost/test/unit_test.hpp&gt;</code><br />
<code>#include &lt;boost/core/lightweight_test.hpp&gt;</code><br />
<code>#include &lt;boost/polymorphic_cast.hpp&gt;</code><br />
<code>#include &lt;<a class="el" href="_ignore_unused_8hpp_source.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_polymorphic_downcast_8hpp_source.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_numeric_cast_8hpp_source.xhtml">armnn/utility/NumericCast.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_exceptions_8hpp_source.xhtml">armnn/Exceptions.hpp</a>&gt;</code><br />
</div>
<p><a href="_utility_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:a9c8843f2e977396dc97773ea9e7f0591"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_utility_tests_8cpp.xhtml#a9c8843f2e977396dc97773ea9e7f0591">ARMNN_POLYMORPHIC_CAST_TESTABLE</a></td></tr>
<tr class="separator:a9c8843f2e977396dc97773ea9e7f0591"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a399b20063c50329f7f7078d26e9cac4e"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_utility_tests_8cpp.xhtml#a399b20063c50329f7f7078d26e9cac4e">ARMNN_NUMERIC_CAST_TESTABLE</a></td></tr>
<tr class="separator:a399b20063c50329f7f7078d26e9cac4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a72ca2244ed7dc1b3ffde2ac0ced73b03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_utility_tests_8cpp.xhtml#a72ca2244ed7dc1b3ffde2ac0ced73b03">BOOST_AUTO_TEST_CASE</a> (PolymorphicDowncast)</td></tr>
<tr class="separator:a72ca2244ed7dc1b3ffde2ac0ced73b03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96c31e87cba45ea455f33fd0d86d6222"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_utility_tests_8cpp.xhtml#a96c31e87cba45ea455f33fd0d86d6222">BOOST_AUTO_TEST_CASE</a> (NumericCast)</td></tr>
<tr class="separator:a96c31e87cba45ea455f33fd0d86d6222"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="a399b20063c50329f7f7078d26e9cac4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a399b20063c50329f7f7078d26e9cac4e">&#9670;&nbsp;</a></span>ARMNN_NUMERIC_CAST_TESTABLE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARMNN_NUMERIC_CAST_TESTABLE</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_utility_tests_8cpp_source.xhtml#l00011">11</a> of file <a class="el" href="_utility_tests_8cpp_source.xhtml">UtilityTests.cpp</a>.</p>

</div>
</div>
<a id="a9c8843f2e977396dc97773ea9e7f0591"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c8843f2e977396dc97773ea9e7f0591">&#9670;&nbsp;</a></span>ARMNN_POLYMORPHIC_CAST_TESTABLE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARMNN_POLYMORPHIC_CAST_TESTABLE</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_utility_tests_8cpp_source.xhtml#l00010">10</a> of file <a class="el" href="_utility_tests_8cpp_source.xhtml">UtilityTests.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a72ca2244ed7dc1b3ffde2ac0ced73b03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72ca2244ed7dc1b3ffde2ac0ced73b03">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">PolymorphicDowncast&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_utility_tests_8cpp_source.xhtml#l00022">22</a> of file <a class="el" href="_utility_tests_8cpp_source.xhtml">UtilityTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a0c262ba6f6c189a2d092d127c1b7627b">BOOST_CHECK()</a>, and <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>
<div class="fragment"><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">class </span>Base</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keyword">virtual</span> ~Base(){}</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keywordtype">float</span> v;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    };</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keyword">class </span>Child1 : <span class="keyword">public</span> Base</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordtype">int</span> j;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    };</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">class </span>Child2 : <span class="keyword">public</span> Base</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordtype">char</span> b;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    };</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    Child1 child1;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    Base* base1 = &amp;child1;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">auto</span> ptr1 = <span class="keyword">dynamic_cast&lt;</span>Child1*<span class="keyword">&gt;</span>(base1);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a0c262ba6f6c189a2d092d127c1b7627b">BOOST_CHECK</a>(ptr1 != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    BOOST_CHECK_NO_THROW(polymorphic_downcast&lt;Child1*&gt;(base1));</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a0c262ba6f6c189a2d092d127c1b7627b">BOOST_CHECK</a>(polymorphic_downcast&lt;Child1*&gt;(base1) == ptr1);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">auto</span> ptr2 = <span class="keyword">dynamic_cast&lt;</span>Child2*<span class="keyword">&gt;</span>(base1);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a0c262ba6f6c189a2d092d127c1b7627b">BOOST_CHECK</a>(ptr2 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    BOOST_CHECK_THROW(polymorphic_downcast&lt;Child2*&gt;(base1), std::bad_cast);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(ptr1, ptr2);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="_file_only_profiling_decorator_tests_8cpp_xhtml_a0c262ba6f6c189a2d092d127c1b7627b"><div class="ttname"><a href="_file_only_profiling_decorator_tests_8cpp.xhtml#a0c262ba6f6c189a2d092d127c1b7627b">BOOST_CHECK</a></div><div class="ttdeci">BOOST_CHECK(profilingService.GetCurrentState()==ProfilingState::WaitingForAck)</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a96c31e87cba45ea455f33fd0d86d6222"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96c31e87cba45ea455f33fd0d86d6222">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">NumericCast&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_utility_tests_8cpp_source.xhtml#l00059">59</a> of file <a class="el" href="_utility_tests_8cpp_source.xhtml">UtilityTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="comment">// To 8 bit</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    BOOST_CHECK_THROW(numeric_cast&lt;unsigned char&gt;(-1), std::bad_cast);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    BOOST_CHECK_THROW(numeric_cast&lt;unsigned char&gt;(1 &lt;&lt; 8), std::bad_cast);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    BOOST_CHECK_THROW(numeric_cast&lt;unsigned char&gt;(1L &lt;&lt; 16), std::bad_cast);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    BOOST_CHECK_THROW(numeric_cast&lt;unsigned char&gt;(1LL &lt;&lt; 32), std::bad_cast);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    BOOST_CHECK_THROW(numeric_cast&lt;signed char&gt;((1L &lt;&lt; 8)*-1), std::bad_cast);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    BOOST_CHECK_THROW(numeric_cast&lt;signed char&gt;((1L &lt;&lt; 15)*-1), std::bad_cast);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    BOOST_CHECK_THROW(numeric_cast&lt;signed char&gt;((1LL &lt;&lt; 31)*-1), std::bad_cast);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;unsigned char&gt;(1U));</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;unsigned char&gt;(1L));</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;signed char&gt;(-1));</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;signed char&gt;(-1L));</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;signed char&gt;((1 &lt;&lt; 7)*-1));</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// To 16 bit</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    BOOST_CHECK_THROW(numeric_cast&lt;uint16_t&gt;(-1), std::bad_cast);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    BOOST_CHECK_THROW(numeric_cast&lt;uint16_t&gt;(1L &lt;&lt; 16), std::bad_cast);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    BOOST_CHECK_THROW(numeric_cast&lt;uint16_t&gt;(1LL &lt;&lt; 32), std::bad_cast);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    BOOST_CHECK_THROW(numeric_cast&lt;int16_t&gt;(1L &lt;&lt; 15), std::bad_cast);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    BOOST_CHECK_THROW(numeric_cast&lt;int16_t&gt;(1LL &lt;&lt; 31), std::bad_cast);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;uint16_t&gt;(1L &lt;&lt; 8));</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;int16_t&gt;(1L &lt;&lt; 7));</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;int16_t&gt;((1L &lt;&lt; 15)*-1));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">// To 32 bit</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;uint32_t&gt;(1));</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;uint32_t&gt;(1 &lt;&lt; 8));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;uint32_t&gt;(1L &lt;&lt; 16));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;uint32_t&gt;(1LL &lt;&lt; 31));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;int32_t&gt;(-1));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;int32_t&gt;((1L &lt;&lt; 8)*-1));</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;int32_t&gt;((1L &lt;&lt; 16)*-1));</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    BOOST_CHECK_NO_THROW(numeric_cast&lt;int32_t&gt;((1LL &lt;&lt; 31)*-1));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9d86fd1fbecbedf5bdb69c7e7235fe5f.xhtml">test</a></li><li class="navelem"><a class="el" href="_utility_tests_8cpp.xhtml">UtilityTests.cpp</a></li>
    <li class="footer">Generated on Fri Mar 13 2020 16:09:14 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
