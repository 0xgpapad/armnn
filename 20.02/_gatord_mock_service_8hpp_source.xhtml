<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/profiling/gatordmock/GatordMockService.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_gatord_mock_service_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">GatordMockService.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_gatord_mock_service_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2019 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_command_handler_registry_8hpp.xhtml">CommandHandlerRegistry.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_packet_8hpp.xhtml">Packet.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_network_sockets_8hpp.xhtml">NetworkSockets.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;atomic&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;thread&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">namespace </span>gatordmock</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1gatordmock.xhtml#a006732ecc1f16712db06bf622eb79651">   22</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearmnn_1_1gatordmock.xhtml#a006732ecc1f16712db06bf622eb79651">TargetEndianness</a></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <a class="code" href="namespacearmnn_1_1gatordmock.xhtml#a006732ecc1f16712db06bf622eb79651aefe19217ee8d2186e7bbecbf2f171eb9">BeWire</a>,</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="namespacearmnn_1_1gatordmock.xhtml#a006732ecc1f16712db06bf622eb79651ab2db365e5027e9a57988c7054e9bd6b7">LeWire</a></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;};</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1gatordmock.xhtml#aec1b34297cc8e184a2d3d2c6e20da955">   28</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearmnn_1_1gatordmock.xhtml#aec1b34297cc8e184a2d3d2c6e20da955">PacketDirection</a></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="namespacearmnn_1_1gatordmock.xhtml#aec1b34297cc8e184a2d3d2c6e20da955ae4b0c2b6d59cb4cf3e169a9886008087">Sending</a>,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <a class="code" href="namespacearmnn_1_1gatordmock.xhtml#aec1b34297cc8e184a2d3d2c6e20da955a2855fc8ecb116f85a4b09600fd1cd75f">ReceivedHeader</a>,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <a class="code" href="namespacearmnn_1_1gatordmock.xhtml#aec1b34297cc8e184a2d3d2c6e20da955af44b1a9eb8e6ef1bea10617c1dfef07f">ReceivedData</a></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;};</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">///  A class that implements a Mock Gatord server. It will listen on a specified Unix domain socket (UDS)</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">///  namespace for client connections. It will then allow opertaions to manage coutners while receiving counter data.</span></div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">   37</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">    /// @param registry reference to a command handler registry.</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">    /// @param echoPackets if true the raw packets will be printed to stdout.</span></div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a316aee098329a282e05c9beae9f67b58">   42</a></span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a316aee098329a282e05c9beae9f67b58">GatordMockService</a>(<a class="code" href="classarmnn_1_1profiling_1_1_command_handler_registry.xhtml">armnn::profiling::CommandHandlerRegistry</a>&amp; registry, <span class="keywordtype">bool</span> echoPackets)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        : m_HandlerRegistry(registry)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        , m_EchoPackets(echoPackets)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        , m_CloseReceivingThread(<a class="code" href="_cl_layer_tests_8cpp.xhtml#af3b727ae5a13ff472892ab8bda2eb1b5">false</a>)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        m_PacketsReceivedCount.store(0, std::memory_order_relaxed);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#ae1a11e5360cb7940eb34f80ed0dba57b">   50</a></span>&#160;    <a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#ae1a11e5360cb7940eb34f80ed0dba57b">~GatordMockService</a>()</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="comment">// We have set SOCK_CLOEXEC on these sockets but we&#39;ll close them to be good citizens.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="namespacearmnn_utils_1_1_sockets.xhtml#a72e0661331d20d0a352fb49c388a1b05">armnnUtils::Sockets::Close</a>(m_ClientConnection);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <a class="code" href="namespacearmnn_utils_1_1_sockets.xhtml#a72e0661331d20d0a352fb49c388a1b05">armnnUtils::Sockets::Close</a>(m_ListeningSocket);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    /// Establish the Unix domain socket and set it to listen for connections.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">    /// @param udsNamespace the namespace (socket address) associated with the listener.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">    /// @return true only if the socket has been correctly setup.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> OpenListeningSocket(std::string udsNamespace);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">    /// Block waiting to accept one client to connect to the UDS.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">    /// @return the file descriptor of the client connection.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"></span>    armnnUtils::Sockets::Socket BlockForOneClient();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">    /// Once the connection is open wait to receive the stream meta data packet from the client. Reading this</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">    /// packet differs from others as we need to determine endianness.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">    /// @return true only if a valid stream met data packet has been received.</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> WaitForStreamMetaData();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">    /// Send a connection acknowledged packet back to the client.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> SendConnectionAck();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">    /// Send a request counter directory packet back to the client.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> SendRequestCounterDir();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">    /// Start the thread that will receive all packets and print them nicely to stdout.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> LaunchReceivingThread();</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">    /// Return the total number of periodic counter capture packets received since the receive thread started.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">    /// @return number of periodic counter capture packets received.</span></div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a4c9761eec8e1cd0bd73c6cdf2c2eda89">   82</a></span>&#160;<span class="comment"></span>    uint32_t <a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a4c9761eec8e1cd0bd73c6cdf2c2eda89">GetPacketsReceivedCount</a>()</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">return</span> m_PacketsReceivedCount.load(std::memory_order_acquire);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">    /// This is a placeholder method to prevent main exiting. It can be removed once the</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">    /// command handling code is added.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> WaitForReceivingThread();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">// @return true only if the receive thread is closed or closing.</span></div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a82bd11e044b4bc9c647fcaa9ce5b3e55">   92</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a82bd11e044b4bc9c647fcaa9ce5b3e55">ReceiveThreadRunning</a>()</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">return</span> !m_CloseReceivingThread.load();</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">    /// Send the counter list to ArmNN.</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> SendPeriodicCounterSelectionList(uint32_t period, std::vector&lt;uint16_t&gt; counters);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">    /// Execute the WAIT command from the comamnd file.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> WaitCommand(uint32_t timeout);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#aaf9805c78f5073622573dd3d4ce1e188">  103</a></span>&#160;    uint32_t <a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#aaf9805c78f5073622573dd3d4ce1e188">GetStreamMetadataVersion</a>()</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> m_StreamMetaDataVersion;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#ab8fa64e5465395276e19780848dca811">  108</a></span>&#160;    uint32_t <a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#ab8fa64e5465395276e19780848dca811">GetStreamMetadataMaxDataLen</a>()</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">return</span> m_StreamMetaDataMaxDataLen;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#ad7330665da0f97c753eddeee2a09a1d9">  113</a></span>&#160;    uint32_t <a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#ad7330665da0f97c753eddeee2a09a1d9">GetStreamMetadataPid</a>()</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">return</span> m_StreamMetaDataPid;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordtype">void</span> ReceiveLoop(<a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a>&amp; mockService);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">    /// Block on the client connection until a complete packet has been received. This is a placeholder function to</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">    /// enable early testing of the tool.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">    /// @return true if a valid packet has been received.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1profiling_1_1_packet.xhtml">armnn::profiling::Packet</a> WaitForPacket(uint32_t timeoutMs);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_packet.xhtml">armnn::profiling::Packet</a> ReceivePacket();</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">bool</span> SendPacket(uint32_t packetFamily, uint32_t packetId, <span class="keyword">const</span> uint8_t* data, uint32_t dataLength);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordtype">void</span> EchoPacket(<a class="code" href="namespacearmnn_1_1gatordmock.xhtml#aec1b34297cc8e184a2d3d2c6e20da955">PacketDirection</a> direction, uint8_t* packet, <span class="keywordtype">size_t</span> lengthInBytes);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordtype">bool</span> ReadHeader(uint32_t headerAsWords[2]);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordtype">bool</span> ReadFromSocket(uint8_t* packetData, uint32_t expectedLength);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    uint32_t ToUint32(uint8_t* data, <a class="code" href="namespacearmnn_1_1gatordmock.xhtml#a006732ecc1f16712db06bf622eb79651">TargetEndianness</a> endianness);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordtype">void</span> InsertU32(uint32_t value, uint8_t* data, <a class="code" href="namespacearmnn_1_1gatordmock.xhtml#a006732ecc1f16712db06bf622eb79651">TargetEndianness</a> endianness);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> uint32_t PIPE_MAGIC = 0x45495434;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::atomic&lt;uint32_t&gt; m_PacketsReceivedCount;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="namespacearmnn_1_1gatordmock.xhtml#a006732ecc1f16712db06bf622eb79651">TargetEndianness</a> m_Endianness;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    uint32_t m_StreamMetaDataVersion;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    uint32_t m_StreamMetaDataMaxDataLen;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    uint32_t m_StreamMetaDataPid;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_command_handler_registry.xhtml">armnn::profiling::CommandHandlerRegistry</a>&amp; m_HandlerRegistry;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordtype">bool</span> m_EchoPackets;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    armnnUtils::Sockets::Socket m_ListeningSocket;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    armnnUtils::Sockets::Socket m_ClientConnection;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    std::thread m_ListeningThread;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    std::atomic&lt;bool&gt; m_CloseReceivingThread;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;};</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}    <span class="comment">// namespace gatordmock</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}    <span class="comment">// namespace armnn</span></div><div class="ttc" id="namespacearmnn_1_1gatordmock_xhtml_a006732ecc1f16712db06bf622eb79651"><div class="ttname"><a href="namespacearmnn_1_1gatordmock.xhtml#a006732ecc1f16712db06bf622eb79651">armnn::gatordmock::TargetEndianness</a></div><div class="ttdeci">TargetEndianness</div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8hpp_source.xhtml#l00022">GatordMockService.hpp:22</a></div></div>
<div class="ttc" id="namespacearmnn_1_1gatordmock_xhtml_a006732ecc1f16712db06bf622eb79651ab2db365e5027e9a57988c7054e9bd6b7"><div class="ttname"><a href="namespacearmnn_1_1gatordmock.xhtml#a006732ecc1f16712db06bf622eb79651ab2db365e5027e9a57988c7054e9bd6b7">armnn::gatordmock::TargetEndianness::LeWire</a></div></div>
<div class="ttc" id="namespacearmnn_1_1gatordmock_xhtml_aec1b34297cc8e184a2d3d2c6e20da955"><div class="ttname"><a href="namespacearmnn_1_1gatordmock.xhtml#aec1b34297cc8e184a2d3d2c6e20da955">armnn::gatordmock::PacketDirection</a></div><div class="ttdeci">PacketDirection</div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8hpp_source.xhtml#l00028">GatordMockService.hpp:28</a></div></div>
<div class="ttc" id="_network_sockets_8hpp_xhtml"><div class="ttname"><a href="_network_sockets_8hpp.xhtml">NetworkSockets.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1gatordmock_xhtml_a006732ecc1f16712db06bf622eb79651aefe19217ee8d2186e7bbecbf2f171eb9"><div class="ttname"><a href="namespacearmnn_1_1gatordmock.xhtml#a006732ecc1f16712db06bf622eb79651aefe19217ee8d2186e7bbecbf2f171eb9">armnn::gatordmock::TargetEndianness::BeWire</a></div></div>
<div class="ttc" id="_packet_8hpp_xhtml"><div class="ttname"><a href="_packet_8hpp.xhtml">Packet.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="_cl_layer_tests_8cpp_xhtml_af3b727ae5a13ff472892ab8bda2eb1b5"><div class="ttname"><a href="_cl_layer_tests_8cpp.xhtml#af3b727ae5a13ff472892ab8bda2eb1b5">false</a></div><div class="ttdeci">DataLayout::NHWC false</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_tests_8cpp_source.xhtml#l00129">ClLayerTests.cpp:129</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_command_handler_registry_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_command_handler_registry.xhtml">armnn::profiling::CommandHandlerRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_command_handler_registry_8hpp_source.xhtml#l00032">CommandHandlerRegistry.hpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_ad7330665da0f97c753eddeee2a09a1d9"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#ad7330665da0f97c753eddeee2a09a1d9">armnn::gatordmock::GatordMockService::GetStreamMetadataPid</a></div><div class="ttdeci">uint32_t GetStreamMetadataPid()</div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8hpp_source.xhtml#l00113">GatordMockService.hpp:113</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_a82bd11e044b4bc9c647fcaa9ce5b3e55"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a82bd11e044b4bc9c647fcaa9ce5b3e55">armnn::gatordmock::GatordMockService::ReceiveThreadRunning</a></div><div class="ttdeci">bool ReceiveThreadRunning()</div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8hpp_source.xhtml#l00092">GatordMockService.hpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_a316aee098329a282e05c9beae9f67b58"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a316aee098329a282e05c9beae9f67b58">armnn::gatordmock::GatordMockService::GatordMockService</a></div><div class="ttdeci">GatordMockService(armnn::profiling::CommandHandlerRegistry &amp;registry, bool echoPackets)</div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8hpp_source.xhtml#l00042">GatordMockService.hpp:42</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_packet_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_packet.xhtml">armnn::profiling::Packet</a></div><div class="ttdef"><b>Definition:</b> <a href="_packet_8hpp_source.xhtml#l00018">Packet.hpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_utils_1_1_sockets_xhtml_a72e0661331d20d0a352fb49c388a1b05"><div class="ttname"><a href="namespacearmnn_utils_1_1_sockets.xhtml#a72e0661331d20d0a352fb49c388a1b05">armnnUtils::Sockets::Close</a></div><div class="ttdeci">int Close(Socket s)</div><div class="ttdef"><b>Definition:</b> <a href="_network_sockets_8cpp_source.xhtml#l00028">NetworkSockets.cpp:28</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_aaf9805c78f5073622573dd3d4ce1e188"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#aaf9805c78f5073622573dd3d4ce1e188">armnn::gatordmock::GatordMockService::GetStreamMetadataVersion</a></div><div class="ttdeci">uint32_t GetStreamMetadataVersion()</div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8hpp_source.xhtml#l00103">GatordMockService.hpp:103</a></div></div>
<div class="ttc" id="namespacearmnn_1_1gatordmock_xhtml_aec1b34297cc8e184a2d3d2c6e20da955af44b1a9eb8e6ef1bea10617c1dfef07f"><div class="ttname"><a href="namespacearmnn_1_1gatordmock.xhtml#aec1b34297cc8e184a2d3d2c6e20da955af44b1a9eb8e6ef1bea10617c1dfef07f">armnn::gatordmock::PacketDirection::ReceivedData</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">armnn::gatordmock::GatordMockService</a></div><div class="ttdoc">A class that implements a Mock Gatord server. </div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8hpp_source.xhtml#l00037">GatordMockService.hpp:37</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_a4c9761eec8e1cd0bd73c6cdf2c2eda89"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a4c9761eec8e1cd0bd73c6cdf2c2eda89">armnn::gatordmock::GatordMockService::GetPacketsReceivedCount</a></div><div class="ttdeci">uint32_t GetPacketsReceivedCount()</div><div class="ttdoc">Return the total number of periodic counter capture packets received since the receive thread started...</div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8hpp_source.xhtml#l00082">GatordMockService.hpp:82</a></div></div>
<div class="ttc" id="namespacearmnn_1_1gatordmock_xhtml_aec1b34297cc8e184a2d3d2c6e20da955a2855fc8ecb116f85a4b09600fd1cd75f"><div class="ttname"><a href="namespacearmnn_1_1gatordmock.xhtml#aec1b34297cc8e184a2d3d2c6e20da955a2855fc8ecb116f85a4b09600fd1cd75f">armnn::gatordmock::PacketDirection::ReceivedHeader</a></div></div>
<div class="ttc" id="namespacearmnn_1_1gatordmock_xhtml_aec1b34297cc8e184a2d3d2c6e20da955ae4b0c2b6d59cb4cf3e169a9886008087"><div class="ttname"><a href="namespacearmnn_1_1gatordmock.xhtml#aec1b34297cc8e184a2d3d2c6e20da955ae4b0c2b6d59cb4cf3e169a9886008087">armnn::gatordmock::PacketDirection::Sending</a></div></div>
<div class="ttc" id="_command_handler_registry_8hpp_xhtml"><div class="ttname"><a href="_command_handler_registry_8hpp.xhtml">CommandHandlerRegistry.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_ae1a11e5360cb7940eb34f80ed0dba57b"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#ae1a11e5360cb7940eb34f80ed0dba57b">armnn::gatordmock::GatordMockService::~GatordMockService</a></div><div class="ttdeci">~GatordMockService()</div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8hpp_source.xhtml#l00050">GatordMockService.hpp:50</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_ab8fa64e5465395276e19780848dca811"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#ab8fa64e5465395276e19780848dca811">armnn::gatordmock::GatordMockService::GetStreamMetadataMaxDataLen</a></div><div class="ttdeci">uint32_t GetStreamMetadataMaxDataLen()</div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8hpp_source.xhtml#l00108">GatordMockService.hpp:108</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_659c7018c274c4a27f289b6765351cd5.xhtml">profiling</a></li><li class="navelem"><a class="el" href="dir_0f843ccd982e68996492857574f1c0de.xhtml">gatordmock</a></li><li class="navelem"><a class="el" href="_gatord_mock_service_8hpp.xhtml">GatordMockService.hpp</a></li>
    <li class="footer">Generated on Fri Mar 13 2020 16:09:13 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
