<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: armnn::profiling Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearmnn_1_1profiling.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">armnn::profiling Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_backend_profiling.xhtml">BackendProfiling</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_exhaustion.xhtml">BufferExhaustion</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">BufferManager</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_capture_data.xhtml">CaptureData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_category.xhtml">Category</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_command_handler.xhtml">CommandHandler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_command_handler_functor.xhtml">CommandHandlerFunctor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_command_handler_hash.xhtml">CommandHandlerHash</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_command_handler_key.xhtml">CommandHandlerKey</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_command_handler_registry.xhtml">CommandHandlerRegistry</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_connection_acknowledged_command_handler.xhtml">ConnectionAcknowledgedCommandHandler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml">CounterDirectory</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_counter_directory_event_record.xhtml">CounterDirectoryEventRecord</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_id_map.xhtml">CounterIdMap</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_set.xhtml">CounterSet</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_counter_status.xhtml">CounterStatus</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_counter_value.xhtml">CounterValue</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_device.xhtml">Device</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_directory_capture_command_handler.xhtml">DirectoryCaptureCommandHandler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_file_only_profiling_connection.xhtml">FileOnlyProfilingConnection</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_holder.xhtml">Holder</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_backend_profiling.xhtml">IBackendProfiling</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_backend_profiling_context.xhtml">IBackendProfilingContext</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml">IBufferManager</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_consumer.xhtml">IConsumer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml">ICounterDirectory</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_counter_mappings.xhtml">ICounterMappings</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_counter_registry.xhtml">ICounterRegistry</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_packet_buffer.xhtml">IPacketBuffer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_periodic_counter_capture.xhtml">IPeriodicCounterCapture</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml">IProfilingConnection</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection_factory.xhtml">IProfilingConnectionFactory</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_guid_generator.xhtml">IProfilingGuidGenerator</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_service.xhtml">IProfilingService</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_read_counter_values.xhtml">IReadCounterValues</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_read_only_packet_buffer.xhtml">IReadOnlyPacketBuffer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_read_write_counter_values.xhtml">IReadWriteCounterValues</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_register_backend_counters.xhtml">IRegisterBackendCounters</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_register_counter_mapping.xhtml">IRegisterCounterMapping</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_send_counter_packet.xhtml">ISendCounterPacket</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_send_thread.xhtml">ISendThread</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_send_timeline_packet.xhtml">ISendTimelinePacket</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_write_counter_values.xhtml">IWriteCounterValues</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_labels_and_event_classes.xhtml">LabelsAndEventClasses</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_log_level_swapper.xhtml">LogLevelSwapper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml">MockBufferManager</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_counter_directory.xhtml">MockCounterDirectory</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_packet_buffer.xhtml">MockPacketBuffer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection_factory.xhtml">MockProfilingConnectionFactory</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_service.xhtml">MockProfilingService</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_send_counter_packet.xhtml">MockSendCounterPacket</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_stream_counter_buffer.xhtml">MockStreamCounterBuffer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_packet.xhtml">Packet</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_packet_buffer.xhtml">PacketBuffer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_packet_key.xhtml">PacketKey</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_packet_version_resolver.xhtml">PacketVersionResolver</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_periodic_counter_capture.xhtml">PeriodicCounterCapture</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_periodic_counter_selection_command_handler.xhtml">PeriodicCounterSelectionCommandHandler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_per_job_counter_selection_command_handler.xhtml">PerJobCounterSelectionCommandHandler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_profiling_connection_dump_to_file_decorator.xhtml">ProfilingConnectionDumpToFileDecorator</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_profiling_connection_factory.xhtml">ProfilingConnectionFactory</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_profiling_dynamic_guid.xhtml">ProfilingDynamicGuid</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Strongly typed guids to distinguish between those generated at runtime, and those that are statically defined.  <a href="structarmnn_1_1profiling_1_1_profiling_dynamic_guid.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_profiling_guid.xhtml">ProfilingGuid</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_profiling_guid_generator.xhtml">ProfilingGuidGenerator</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">ProfilingService</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_profiling_service_runtime_helper.xhtml">ProfilingServiceRuntimeHelper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml">ProfilingStateMachine</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_profiling_static_guid.xhtml">ProfilingStaticGuid</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_register_backend_counters.xhtml">RegisterBackendCounters</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_request_counter_directory_command_handler.xhtml">RequestCounterDirectoryCommandHandler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_send_counter_packet.xhtml">SendCounterPacket</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_send_counter_packet_test.xhtml">SendCounterPacketTest</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_send_thread.xhtml">SendThread</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_send_timeline_packet.xhtml">SendTimelinePacket</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml">SocketProfilingConnection</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_stream_redirector.xhtml">StreamRedirector</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_swap_profiling_connection_factory_helper.xhtml">SwapProfilingConnectionFactoryHelper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_sw_trace_char_policy.xhtml">SwTraceCharPolicy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_sw_trace_header.xhtml">SwTraceHeader</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_sw_trace_message.xhtml">SwTraceMessage</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_sw_trace_name_char_policy.xhtml">SwTraceNameCharPolicy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_sw_trace_type_char_policy.xhtml">SwTraceTypeCharPolicy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_test_functor_a.xhtml">TestFunctorA</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_test_functor_b.xhtml">TestFunctorB</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_test_functor_c.xhtml">TestFunctorC</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_test_profiling_connection_armnn_error.xhtml">TestProfilingConnectionArmnnError</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_test_profiling_connection_bad_ack_packet.xhtml">TestProfilingConnectionBadAckPacket</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_test_profiling_connection_base.xhtml">TestProfilingConnectionBase</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_test_profiling_connection_timeout_error.xhtml">TestProfilingConnectionTimeoutError</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_timeline_packet_writer_factory.xhtml">TimelinePacketWriterFactory</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml">TimelineUtilityMethods</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1profiling_1_1_timestamp.xhtml">Timestamp</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_version.xhtml">Version</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a279ea800bb05b316615dab6857187fe6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a279ea800bb05b316615dab6857187fe6">IBackendProfilingContextUniquePtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_i_backend_profiling_context.xhtml">IBackendProfilingContext</a> &gt;</td></tr>
<tr class="separator:a279ea800bb05b316615dab6857187fe6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8adee535828386656b4c8acfa8bcf871"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a8adee535828386656b4c8acfa8bcf871">CategoryPtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_category.xhtml">Category</a> &gt;</td></tr>
<tr class="separator:a8adee535828386656b4c8acfa8bcf871"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22a0d730c0d08335585e6e8999be8f8b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a22a0d730c0d08335585e6e8999be8f8b">DevicePtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_device.xhtml">Device</a> &gt;</td></tr>
<tr class="separator:a22a0d730c0d08335585e6e8999be8f8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abaedc7fcb8ecb2e086482afe10737fb7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#abaedc7fcb8ecb2e086482afe10737fb7">CounterSetPtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_counter_set.xhtml">CounterSet</a> &gt;</td></tr>
<tr class="separator:abaedc7fcb8ecb2e086482afe10737fb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38de53725b010ce63ea7557bb1d270e7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a38de53725b010ce63ea7557bb1d270e7">CounterPtr</a> = std::shared_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a> &gt;</td></tr>
<tr class="separator:a38de53725b010ce63ea7557bb1d270e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af55bc6e5233a4720fe8a813db470b06f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#af55bc6e5233a4720fe8a813db470b06f">Categories</a> = std::unordered_set&lt; <a class="el" href="namespacearmnn_1_1profiling.xhtml#a8adee535828386656b4c8acfa8bcf871">CategoryPtr</a> &gt;</td></tr>
<tr class="separator:af55bc6e5233a4720fe8a813db470b06f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ff1066867cb9bd3b08338957c414401"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a3ff1066867cb9bd3b08338957c414401">Devices</a> = std::unordered_map&lt; uint16_t, <a class="el" href="namespacearmnn_1_1profiling.xhtml#a22a0d730c0d08335585e6e8999be8f8b">DevicePtr</a> &gt;</td></tr>
<tr class="separator:a3ff1066867cb9bd3b08338957c414401"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfe20da73b5dc66439a65b49f04f7a21"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acfe20da73b5dc66439a65b49f04f7a21">CounterSets</a> = std::unordered_map&lt; uint16_t, <a class="el" href="namespacearmnn_1_1profiling.xhtml#abaedc7fcb8ecb2e086482afe10737fb7">CounterSetPtr</a> &gt;</td></tr>
<tr class="separator:acfe20da73b5dc66439a65b49f04f7a21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeeb6904ffbae435c8d0a7138427688f4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#aeeb6904ffbae435c8d0a7138427688f4">Counters</a> = std::unordered_map&lt; uint16_t, <a class="el" href="namespacearmnn_1_1profiling.xhtml#a38de53725b010ce63ea7557bb1d270e7">CounterPtr</a> &gt;</td></tr>
<tr class="separator:aeeb6904ffbae435c8d0a7138427688f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0e827b027dec7961cafe031a6db4a3a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#ae0e827b027dec7961cafe031a6db4a3a">CategoriesIt</a> = Categories::const_iterator</td></tr>
<tr class="separator:ae0e827b027dec7961cafe031a6db4a3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9910176873fe91e4be8ea1eaf546f6c4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a9910176873fe91e4be8ea1eaf546f6c4">DevicesIt</a> = Devices::const_iterator</td></tr>
<tr class="separator:a9910176873fe91e4be8ea1eaf546f6c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a9b5858b458649152c82e295a6683c1"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a2a9b5858b458649152c82e295a6683c1">CounterSetsIt</a> = CounterSets::const_iterator</td></tr>
<tr class="separator:a2a9b5858b458649152c82e295a6683c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0ab9a50fa6e07232065ebd5a8da6fbd"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#af0ab9a50fa6e07232065ebd5a8da6fbd">CountersIt</a> = Counters::const_iterator</td></tr>
<tr class="separator:af0ab9a50fa6e07232065ebd5a8da6fbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14328d977cec3abadcfd5935f04f3409"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_i_packet_buffer.xhtml">IPacketBuffer</a> &gt;</td></tr>
<tr class="separator:a14328d977cec3abadcfd5935f04f3409"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ab805f5aa9f101e7f6d971daba044c3c2"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2">ProfilingRelationshipType</a> { <a class="el" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2afc04d023850b425f3b9c62b3a55dc110">RetentionLink</a>, 
<a class="el" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a5265db1a79410fbe447a3faa98e7b914">ExecutionLink</a>, 
<a class="el" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a77ac530ff577e3b84e0761fa02b2520b">DataLink</a>, 
<a class="el" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a47d6c060a0aa40c6fd018f12b7c96f1f">LabelLink</a>
 }</td></tr>
<tr class="separator:ab805f5aa9f101e7f6d971daba044c3c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a006732ecc1f16712db06bf622eb79651"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a006732ecc1f16712db06bf622eb79651">TargetEndianness</a> { <a class="el" href="namespacearmnn_1_1profiling.xhtml#a006732ecc1f16712db06bf622eb79651aefe19217ee8d2186e7bbecbf2f171eb9">BeWire</a>, 
<a class="el" href="namespacearmnn_1_1profiling.xhtml#a006732ecc1f16712db06bf622eb79651ab2db365e5027e9a57988c7054e9bd6b7">LeWire</a>
 }</td></tr>
<tr class="separator:a006732ecc1f16712db06bf622eb79651"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a083225fb2313ee056142bbee0c44de36"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a083225fb2313ee056142bbee0c44de36">PackageActivity</a> { <a class="el" href="namespacearmnn_1_1profiling.xhtml#a083225fb2313ee056142bbee0c44de36ae43273a3645f4894a1088081feb9827d">StreamMetaData</a>, 
<a class="el" href="namespacearmnn_1_1profiling.xhtml#a083225fb2313ee056142bbee0c44de36ad2cacb6bc37a3363ae810b656e3b6190">CounterDirectory</a>, 
<a class="el" href="namespacearmnn_1_1profiling.xhtml#a083225fb2313ee056142bbee0c44de36a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>
 }</td></tr>
<tr class="separator:a083225fb2313ee056142bbee0c44de36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb0c054138599582d5a5f537e9798806"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806">ProfilingState</a> { <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820">Uninitialised</a>, 
<a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">NotConnected</a>, 
<a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">WaitingForAck</a>, 
<a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d">Active</a>
 }</td></tr>
<tr class="separator:acb0c054138599582d5a5f537e9798806"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdfc0158f71b04526602ef51444da4c0"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a> { <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0aa60852f204ed8028c1c58808b746d115">Ok</a>, 
<a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0a902b0d55fddef6f8d651fe1035b7d4bd">Error</a>, 
<a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0ad0863d6c0a071cb52079344e64425773">BufferExhaustion</a>
 }</td></tr>
<tr class="separator:acdfc0158f71b04526602ef51444da4c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab2199204c88b5456af0e820b8e821bc6"><td class="memItemLeft" align="right" valign="top">constexpr uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#ab2199204c88b5456af0e820b8e821bc6">EncodeVersion</a> (uint32_t major, uint32_t minor, uint32_t patch)</td></tr>
<tr class="separator:ab2199204c88b5456af0e820b8e821bc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4614388c6a708b8efe76b883a046ffaf"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a4614388c6a708b8efe76b883a046ffaf">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="classarmnn_1_1profiling_1_1_version.xhtml">Version</a> &amp;version)</td></tr>
<tr class="separator:a4614388c6a708b8efe76b883a046ffaf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6851e58c103f77fcf83b722b4b81e9d"><td class="memItemLeft" align="right" valign="top">constexpr char const  *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#aa6851e58c103f77fcf83b722b4b81e9d">GetProfilingStateName</a> (<a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806">ProfilingState</a> state)</td></tr>
<tr class="separator:aa6851e58c103f77fcf83b722b4b81e9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a982b094fe2faa67a3560cdaf3901d0f8"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a982b094fe2faa67a3560cdaf3901d0f8">GetNextUid</a> (bool peekOnly)</td></tr>
<tr class="separator:a982b094fe2faa67a3560cdaf3901d0f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6605c82bc625fbd40f24d35edee15fe3"><td class="memItemLeft" align="right" valign="top">std::vector&lt; uint16_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a6605c82bc625fbd40f24d35edee15fe3">GetNextCounterUids</a> (uint16_t firstUid, uint16_t cores)</td></tr>
<tr class="separator:a6605c82bc625fbd40f24d35edee15fe3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0cddaa4e116d294dacaaced90ca341c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#af0cddaa4e116d294dacaaced90ca341c">WriteBytes</a> (const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;packetBuffer, unsigned int offset, const void *value, unsigned int valueSize)</td></tr>
<tr class="separator:af0cddaa4e116d294dacaaced90ca341c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a750935094e7dc62a6ce69be8688ee9fc"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a750935094e7dc62a6ce69be8688ee9fc">ConstructHeader</a> (uint32_t packetFamily, uint32_t packetId)</td></tr>
<tr class="separator:a750935094e7dc62a6ce69be8688ee9fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59d5594b6e4e7d3fe9dbde5febd8da81"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a59d5594b6e4e7d3fe9dbde5febd8da81">ConstructHeader</a> (uint32_t packetFamily, uint32_t packetClass, uint32_t packetType)</td></tr>
<tr class="separator:a59d5594b6e4e7d3fe9dbde5febd8da81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79be042e55fdf16ca562f14cd15d9aa6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a79be042e55fdf16ca562f14cd15d9aa6">WriteUint64</a> (const std::unique_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_i_packet_buffer.xhtml">IPacketBuffer</a> &gt; &amp;packetBuffer, unsigned int offset, uint64_t value)</td></tr>
<tr class="separator:a79be042e55fdf16ca562f14cd15d9aa6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e638748a39d46e2943dfcef94dcb828"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">WriteUint32</a> (const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;packetBuffer, unsigned int offset, uint32_t value)</td></tr>
<tr class="separator:a3e638748a39d46e2943dfcef94dcb828"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5ace88c65e65ab7cf5572613601a60d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#ae5ace88c65e65ab7cf5572613601a60d">WriteUint16</a> (const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;packetBuffer, unsigned int offset, uint16_t value)</td></tr>
<tr class="separator:ae5ace88c65e65ab7cf5572613601a60d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af63b6e5ffc769286c32d55a090b1602a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#af63b6e5ffc769286c32d55a090b1602a">WriteUint8</a> (const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;packetBuffer, unsigned int offset, uint8_t value)</td></tr>
<tr class="separator:af63b6e5ffc769286c32d55a090b1602a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c81dacff6eb2062571f7f4db1cb7617"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a1c81dacff6eb2062571f7f4db1cb7617">WriteBytes</a> (unsigned char *buffer, unsigned int offset, const void *value, unsigned int valueSize)</td></tr>
<tr class="separator:a1c81dacff6eb2062571f7f4db1cb7617"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2bb4db604c56391c1361b32402c65a7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">WriteUint64</a> (unsigned char *buffer, unsigned int offset, uint64_t value)</td></tr>
<tr class="separator:af2bb4db604c56391c1361b32402c65a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3e447531d9bdaad3da25f23edf18fb4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">WriteUint32</a> (unsigned char *buffer, unsigned int offset, uint32_t value)</td></tr>
<tr class="separator:aa3e447531d9bdaad3da25f23edf18fb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cf33f59f4e39a415e08497644b0b6f8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a0cf33f59f4e39a415e08497644b0b6f8">WriteUint16</a> (unsigned char *buffer, unsigned int offset, uint16_t value)</td></tr>
<tr class="separator:a0cf33f59f4e39a415e08497644b0b6f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae00e76f4552e2dad3bdcf1dd72100b4f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#ae00e76f4552e2dad3bdcf1dd72100b4f">WriteUint8</a> (unsigned char *buffer, unsigned int offset, uint8_t value)</td></tr>
<tr class="separator:ae00e76f4552e2dad3bdcf1dd72100b4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a097646e1b460c992b553061a3436fb47"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a097646e1b460c992b553061a3436fb47">ReadBytes</a> (const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;packetBuffer, unsigned int offset, unsigned int valueSize, uint8_t outValue[])</td></tr>
<tr class="separator:a097646e1b460c992b553061a3436fb47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4de2b511faa41accc2c35cadf051124"><td class="memItemLeft" align="right" valign="top">uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#aa4de2b511faa41accc2c35cadf051124">ReadUint64</a> (const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;packetBuffer, unsigned int offset)</td></tr>
<tr class="separator:aa4de2b511faa41accc2c35cadf051124"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad56f4c3ea5e88279bb6ef1f31d9dc6df"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">ReadUint32</a> (const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;packetBuffer, unsigned int offset)</td></tr>
<tr class="separator:ad56f4c3ea5e88279bb6ef1f31d9dc6df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ffb94cb0085a54a92f1c4eeaa6cf772"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a0ffb94cb0085a54a92f1c4eeaa6cf772">ReadUint16</a> (const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;packetBuffer, unsigned int offset)</td></tr>
<tr class="separator:a0ffb94cb0085a54a92f1c4eeaa6cf772"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74b483b652cc32f03151b10a1366d607"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a74b483b652cc32f03151b10a1366d607">ReadUint8</a> (const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;packetBuffer, unsigned int offset)</td></tr>
<tr class="separator:a74b483b652cc32f03151b10a1366d607"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaeaa3d9d5e1f03bc8966f1428e1cb672"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#aaeaa3d9d5e1f03bc8966f1428e1cb672">ReadBytes</a> (const unsigned char *buffer, unsigned int offset, unsigned int valueSize, uint8_t outValue[])</td></tr>
<tr class="separator:aaeaa3d9d5e1f03bc8966f1428e1cb672"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6226b639a80d73acb1e66c622beed309"><td class="memItemLeft" align="right" valign="top">uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a6226b639a80d73acb1e66c622beed309">ReadUint64</a> (const unsigned char *buffer, unsigned int offset)</td></tr>
<tr class="separator:a6226b639a80d73acb1e66c622beed309"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a100e71143e7c9abe8fb6f3ec9a810c63"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a100e71143e7c9abe8fb6f3ec9a810c63">ReadUint32</a> (const unsigned char *buffer, unsigned int offset)</td></tr>
<tr class="separator:a100e71143e7c9abe8fb6f3ec9a810c63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a727b3d8a62d5910f2d2efe321748ee15"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a727b3d8a62d5910f2d2efe321748ee15">ReadUint16</a> (const unsigned char *buffer, unsigned int offset)</td></tr>
<tr class="separator:a727b3d8a62d5910f2d2efe321748ee15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f91fd7ff84cd6bbfbc8dd065bf493dd"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a4f91fd7ff84cd6bbfbc8dd065bf493dd">ReadUint8</a> (const unsigned char *buffer, unsigned int offset)</td></tr>
<tr class="separator:a4f91fd7ff84cd6bbfbc8dd065bf493dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af38e9c5d82c9317255665a6315842166"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#af38e9c5d82c9317255665a6315842166">GetSoftwareInfo</a> ()</td></tr>
<tr class="separator:af38e9c5d82c9317255665a6315842166"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66ccd202fa7bf1e52476e61d49a45ee6"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a66ccd202fa7bf1e52476e61d49a45ee6">GetHardwareVersion</a> ()</td></tr>
<tr class="separator:a66ccd202fa7bf1e52476e61d49a45ee6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a90cae723e311b3b71272a7f5ecccbb"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a1a90cae723e311b3b71272a7f5ecccbb">GetSoftwareVersion</a> ()</td></tr>
<tr class="separator:a1a90cae723e311b3b71272a7f5ecccbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52fbcd350a9f12a385a7c5562c1efd9a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a52fbcd350a9f12a385a7c5562c1efd9a">GetProcessName</a> ()</td></tr>
<tr class="separator:a52fbcd350a9f12a385a7c5562c1efd9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9eb13006d20d612855b0eb00bd7b1f0"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#af9eb13006d20d612855b0eb00bd7b1f0">CalculateSizeOfPaddedSwString</a> (const std::string &amp;str)</td></tr>
<tr class="separator:af9eb13006d20d612855b0eb00bd7b1f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa7e58f376ab96ad3fb6dbd16074a5cb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarmnn_1_1profiling_1_1_sw_trace_message.xhtml">SwTraceMessage</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#aaa7e58f376ab96ad3fb6dbd16074a5cb">ReadSwTraceMessage</a> (const unsigned char *packetBuffer, unsigned int &amp;offset)</td></tr>
<tr class="separator:aaa7e58f376ab96ad3fb6dbd16074a5cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca8b4bad45009e1d42dc8de69a0b7e2c"><td class="memItemLeft" align="right" valign="top">std::pair&lt; uint32_t, uint32_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#aca8b4bad45009e1d42dc8de69a0b7e2c">CreateTimelinePacketHeader</a> (uint32_t packetFamily, uint32_t packetClass, uint32_t packetType, uint32_t streamId, uint32_t sequenceNumbered, uint32_t dataLength)</td></tr>
<tr class="memdesc:aca8b4bad45009e1d42dc8de69a0b7e2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a timeline packet header.  <a href="#aca8b4bad45009e1d42dc8de69a0b7e2c">More...</a><br /></td></tr>
<tr class="separator:aca8b4bad45009e1d42dc8de69a0b7e2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4295e2d34b34c57b2065b80fcad431c9"><td class="memItemLeft" align="right" valign="top">std::pair&lt; uint32_t, uint32_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a4295e2d34b34c57b2065b80fcad431c9">CreateTimelineMessagePacketHeader</a> (unsigned int dataLength)</td></tr>
<tr class="memdesc:a4295e2d34b34c57b2065b80fcad431c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a packet header for the timeline messages:  <a href="#a4295e2d34b34c57b2065b80fcad431c9">More...</a><br /></td></tr>
<tr class="separator:a4295e2d34b34c57b2065b80fcad431c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3583b5fbfe555acc552a63458e665939"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a3583b5fbfe555acc552a63458e665939">WriteTimelineLabelBinaryPacket</a> (uint64_t profilingGuid, const std::string &amp;label, unsigned char *buffer, unsigned int remainingBufferSize, unsigned int &amp;numberOfBytesWritten)</td></tr>
<tr class="separator:a3583b5fbfe555acc552a63458e665939"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27d1c992711722739250e2bbd9ce7ede"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a27d1c992711722739250e2bbd9ce7ede">WriteTimelineEntityBinary</a> (uint64_t profilingGuid, unsigned char *buffer, unsigned int remainingBufferSize, unsigned int &amp;numberOfBytesWritten)</td></tr>
<tr class="separator:a27d1c992711722739250e2bbd9ce7ede"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2af6f2d1806265a2c84ca05ea8a62fb8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a2af6f2d1806265a2c84ca05ea8a62fb8">WriteTimelineRelationshipBinary</a> (<a class="el" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2">ProfilingRelationshipType</a> relationshipType, uint64_t relationshipGuid, uint64_t headGuid, uint64_t tailGuid, unsigned char *buffer, unsigned int remainingBufferSize, unsigned int &amp;numberOfBytesWritten)</td></tr>
<tr class="separator:a2af6f2d1806265a2c84ca05ea8a62fb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecc8787efb41f033785074f2d362895a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#aecc8787efb41f033785074f2d362895a">WriteTimelineMessageDirectoryPackage</a> (unsigned char *buffer, unsigned int remainingBufferSize, unsigned int &amp;numberOfBytesWritten)</td></tr>
<tr class="separator:aecc8787efb41f033785074f2d362895a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac42b224ad252c5c31ee01c6b77fa4737"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#ac42b224ad252c5c31ee01c6b77fa4737">WriteTimelineEventClassBinary</a> (uint64_t profilingGuid, unsigned char *buffer, unsigned int remainingBufferSize, unsigned int &amp;numberOfBytesWritten)</td></tr>
<tr class="separator:ac42b224ad252c5c31ee01c6b77fa4737"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a84cb02cb3580ed0bf872cf6b5c09ae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a0a84cb02cb3580ed0bf872cf6b5c09ae">WriteTimelineEventBinary</a> (uint64_t timestamp, std::thread::id threadId, uint64_t profilingGuid, unsigned char *buffer, unsigned int remainingBufferSize, unsigned int &amp;numberOfBytesWritten)</td></tr>
<tr class="separator:a0a84cb02cb3580ed0bf872cf6b5c09ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c000fcf0c62f7bc417fef72be783129"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a> (const std::string &amp;stringToPass, const int spacingWidth)</td></tr>
<tr class="separator:a6c000fcf0c62f7bc417fef72be783129"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea08b4cb21e58d159630a6929c90bf64"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#aea08b4cb21e58d159630a6929c90bf64">PrintDeviceDetails</a> (const std::pair&lt; const unsigned short, std::unique_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_device.xhtml">Device</a> &gt;&gt; &amp;devicePair)</td></tr>
<tr class="separator:aea08b4cb21e58d159630a6929c90bf64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd2137ee62a2c96882f3d8d9e665ed09"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#abd2137ee62a2c96882f3d8d9e665ed09">PrintCounterSetDetails</a> (const std::pair&lt; const unsigned short, std::unique_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_counter_set.xhtml">CounterSet</a> &gt;&gt; &amp;counterSetPair)</td></tr>
<tr class="separator:abd2137ee62a2c96882f3d8d9e665ed09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e7c9cd02bf5ed5b588b24b0a8b8a2b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a3e7c9cd02bf5ed5b588b24b0a8b8a2b1">PrintCounterDetails</a> (std::shared_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a> &gt; &amp;counter)</td></tr>
<tr class="separator:a3e7c9cd02bf5ed5b588b24b0a8b8a2b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af33888588c5afaab1eb0d0bfbed2f6ee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#af33888588c5afaab1eb0d0bfbed2f6ee">PrintCategoryDetails</a> (const std::unique_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_category.xhtml">Category</a> &gt; &amp;category, std::unordered_map&lt; unsigned short, std::shared_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a> &gt;&gt; counterMap)</td></tr>
<tr class="separator:af33888588c5afaab1eb0d0bfbed2f6ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02f98a63d0ef3a10bb359c3ac525f330"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a02f98a63d0ef3a10bb359c3ac525f330">PrintCounterDirectory</a> (<a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml">ICounterDirectory</a> &amp;counterDirectory)</td></tr>
<tr class="separator:a02f98a63d0ef3a10bb359c3ac525f330"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77a41a7625d3134c0cccdf11d169acb4"><td class="memItemLeft" align="right" valign="top">uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a77a41a7625d3134c0cccdf11d169acb4">GetTimestamp</a> ()</td></tr>
<tr class="separator:a77a41a7625d3134c0cccdf11d169acb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88c92fd3fdbf9deb6f1606eb14818ea9"><td class="memTemplParams" colspan="2">template&lt;typename SwTracePolicy &gt; </td></tr>
<tr class="memitem:a88c92fd3fdbf9deb6f1606eb14818ea9"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a88c92fd3fdbf9deb6f1606eb14818ea9">IsValidSwTraceString</a> (const std::string &amp;s)</td></tr>
<tr class="separator:a88c92fd3fdbf9deb6f1606eb14818ea9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e25734c0aca661f0fe02479743719a1"><td class="memTemplParams" colspan="2">template&lt;typename SwTracePolicy &gt; </td></tr>
<tr class="memitem:a5e25734c0aca661f0fe02479743719a1"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a5e25734c0aca661f0fe02479743719a1">StringToSwTraceString</a> (const std::string &amp;s, std::vector&lt; uint32_t &gt; &amp;outputBuffer)</td></tr>
<tr class="separator:a5e25734c0aca661f0fe02479743719a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c4f707828a9d965b59f4ec3414cb490"><td class="memTemplParams" colspan="2">template&lt;typename SwTracePolicy , typename SwTraceBuffer  = std::vector&lt;uint32_t&gt;&gt; </td></tr>
<tr class="memitem:a8c4f707828a9d965b59f4ec3414cb490"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a8c4f707828a9d965b59f4ec3414cb490">ConvertDirectoryComponent</a> (const std::string &amp;directoryComponent, SwTraceBuffer &amp;swTraceBuffer)</td></tr>
<tr class="separator:a8c4f707828a9d965b59f4ec3414cb490"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7024ffa58173d70426a51899d35266d7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a7024ffa58173d70426a51899d35266d7">WriteBytes</a> (const <a class="el" href="classarmnn_1_1profiling_1_1_i_packet_buffer.xhtml">IPacketBuffer</a> &amp;packetBuffer, unsigned int offset, const void *value, unsigned int valueSize)</td></tr>
<tr class="separator:a7024ffa58173d70426a51899d35266d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b0223f6d6877fe5852c93c4670e32c6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a3b0223f6d6877fe5852c93c4670e32c6">WriteUint64</a> (const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;packetBuffer, unsigned int offset, uint64_t value)</td></tr>
<tr class="separator:a3b0223f6d6877fe5852c93c4670e32c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a2fd55777ec061a6c6df855677c165a03"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a2fd55777ec061a6c6df855677c165a03">uint16_t_size</a> = sizeof(uint16_t)</td></tr>
<tr class="separator:a2fd55777ec061a6c6df855677c165a03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabcf5c25522e8a0542c95174056cfcac"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a> = sizeof(uint32_t)</td></tr>
<tr class="separator:aabcf5c25522e8a0542c95174056cfcac"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="af55bc6e5233a4720fe8a813db470b06f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af55bc6e5233a4720fe8a813db470b06f">&#9670;&nbsp;</a></span>Categories</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#af55bc6e5233a4720fe8a813db470b06f">Categories</a> =  std::unordered_set&lt;<a class="el" href="namespacearmnn_1_1profiling.xhtml#a8adee535828386656b4c8acfa8bcf871">CategoryPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00037">37</a> of file <a class="el" href="_i_counter_directory_8hpp_source.xhtml">ICounterDirectory.hpp</a>.</p>

</div>
</div>
<a id="ae0e827b027dec7961cafe031a6db4a3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0e827b027dec7961cafe031a6db4a3a">&#9670;&nbsp;</a></span>CategoriesIt</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#ae0e827b027dec7961cafe031a6db4a3a">CategoriesIt</a> =  Categories::const_iterator</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00043">43</a> of file <a class="el" href="_i_counter_directory_8hpp_source.xhtml">ICounterDirectory.hpp</a>.</p>

</div>
</div>
<a id="a8adee535828386656b4c8acfa8bcf871"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8adee535828386656b4c8acfa8bcf871">&#9670;&nbsp;</a></span>CategoryPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#a8adee535828386656b4c8acfa8bcf871">CategoryPtr</a> =  std::unique_ptr&lt;<a class="el" href="classarmnn_1_1profiling_1_1_category.xhtml">Category</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00031">31</a> of file <a class="el" href="_i_counter_directory_8hpp_source.xhtml">ICounterDirectory.hpp</a>.</p>

</div>
</div>
<a id="a38de53725b010ce63ea7557bb1d270e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38de53725b010ce63ea7557bb1d270e7">&#9670;&nbsp;</a></span>CounterPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#a38de53725b010ce63ea7557bb1d270e7">CounterPtr</a> =  std::shared_ptr&lt;<a class="el" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00034">34</a> of file <a class="el" href="_i_counter_directory_8hpp_source.xhtml">ICounterDirectory.hpp</a>.</p>

</div>
</div>
<a id="aeeb6904ffbae435c8d0a7138427688f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeeb6904ffbae435c8d0a7138427688f4">&#9670;&nbsp;</a></span>Counters</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#aeeb6904ffbae435c8d0a7138427688f4">Counters</a> =  std::unordered_map&lt;uint16_t, <a class="el" href="namespacearmnn_1_1profiling.xhtml#a38de53725b010ce63ea7557bb1d270e7">CounterPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00040">40</a> of file <a class="el" href="_i_counter_directory_8hpp_source.xhtml">ICounterDirectory.hpp</a>.</p>

</div>
</div>
<a id="abaedc7fcb8ecb2e086482afe10737fb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abaedc7fcb8ecb2e086482afe10737fb7">&#9670;&nbsp;</a></span>CounterSetPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#abaedc7fcb8ecb2e086482afe10737fb7">CounterSetPtr</a> =  std::unique_ptr&lt;<a class="el" href="classarmnn_1_1profiling_1_1_counter_set.xhtml">CounterSet</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00033">33</a> of file <a class="el" href="_i_counter_directory_8hpp_source.xhtml">ICounterDirectory.hpp</a>.</p>

</div>
</div>
<a id="acfe20da73b5dc66439a65b49f04f7a21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfe20da73b5dc66439a65b49f04f7a21">&#9670;&nbsp;</a></span>CounterSets</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#acfe20da73b5dc66439a65b49f04f7a21">CounterSets</a> =  std::unordered_map&lt;uint16_t, <a class="el" href="namespacearmnn_1_1profiling.xhtml#abaedc7fcb8ecb2e086482afe10737fb7">CounterSetPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00039">39</a> of file <a class="el" href="_i_counter_directory_8hpp_source.xhtml">ICounterDirectory.hpp</a>.</p>

</div>
</div>
<a id="a2a9b5858b458649152c82e295a6683c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a9b5858b458649152c82e295a6683c1">&#9670;&nbsp;</a></span>CounterSetsIt</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#a2a9b5858b458649152c82e295a6683c1">CounterSetsIt</a> =  CounterSets::const_iterator</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00045">45</a> of file <a class="el" href="_i_counter_directory_8hpp_source.xhtml">ICounterDirectory.hpp</a>.</p>

</div>
</div>
<a id="af0ab9a50fa6e07232065ebd5a8da6fbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0ab9a50fa6e07232065ebd5a8da6fbd">&#9670;&nbsp;</a></span>CountersIt</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#af0ab9a50fa6e07232065ebd5a8da6fbd">CountersIt</a> =  Counters::const_iterator</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00046">46</a> of file <a class="el" href="_i_counter_directory_8hpp_source.xhtml">ICounterDirectory.hpp</a>.</p>

</div>
</div>
<a id="a22a0d730c0d08335585e6e8999be8f8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22a0d730c0d08335585e6e8999be8f8b">&#9670;&nbsp;</a></span>DevicePtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#a22a0d730c0d08335585e6e8999be8f8b">DevicePtr</a> =  std::unique_ptr&lt;<a class="el" href="classarmnn_1_1profiling_1_1_device.xhtml">Device</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00032">32</a> of file <a class="el" href="_i_counter_directory_8hpp_source.xhtml">ICounterDirectory.hpp</a>.</p>

</div>
</div>
<a id="a3ff1066867cb9bd3b08338957c414401"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ff1066867cb9bd3b08338957c414401">&#9670;&nbsp;</a></span>Devices</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#a3ff1066867cb9bd3b08338957c414401">Devices</a> =  std::unordered_map&lt;uint16_t, <a class="el" href="namespacearmnn_1_1profiling.xhtml#a22a0d730c0d08335585e6e8999be8f8b">DevicePtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00038">38</a> of file <a class="el" href="_i_counter_directory_8hpp_source.xhtml">ICounterDirectory.hpp</a>.</p>

</div>
</div>
<a id="a9910176873fe91e4be8ea1eaf546f6c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9910176873fe91e4be8ea1eaf546f6c4">&#9670;&nbsp;</a></span>DevicesIt</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#a9910176873fe91e4be8ea1eaf546f6c4">DevicesIt</a> =  Devices::const_iterator</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00044">44</a> of file <a class="el" href="_i_counter_directory_8hpp_source.xhtml">ICounterDirectory.hpp</a>.</p>

</div>
</div>
<a id="a279ea800bb05b316615dab6857187fe6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a279ea800bb05b316615dab6857187fe6">&#9670;&nbsp;</a></span>IBackendProfilingContextUniquePtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#a279ea800bb05b316615dab6857187fe6">IBackendProfilingContextUniquePtr</a> =  std::unique_ptr&lt;<a class="el" href="classarmnn_1_1profiling_1_1_i_backend_profiling_context.xhtml">IBackendProfilingContext</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_backend_profiling_context_8hpp_source.xhtml#l00027">27</a> of file <a class="el" href="_i_backend_profiling_context_8hpp_source.xhtml">IBackendProfilingContext.hpp</a>.</p>

</div>
</div>
<a id="a14328d977cec3abadcfd5935f04f3409"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14328d977cec3abadcfd5935f04f3409">&#9670;&nbsp;</a></span>IPacketBufferPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> =  std::unique_ptr&lt;<a class="el" href="classarmnn_1_1profiling_1_1_i_packet_buffer.xhtml">IPacketBuffer</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_packet_buffer_8hpp_source.xhtml#l00040">40</a> of file <a class="el" href="_i_packet_buffer_8hpp_source.xhtml">IPacketBuffer.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a083225fb2313ee056142bbee0c44de36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a083225fb2313ee056142bbee0c44de36">&#9670;&nbsp;</a></span>PackageActivity</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearmnn_1_1profiling.xhtml#a083225fb2313ee056142bbee0c44de36">PackageActivity</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a083225fb2313ee056142bbee0c44de36ae43273a3645f4894a1088081feb9827d"></a>StreamMetaData&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a083225fb2313ee056142bbee0c44de36ad2cacb6bc37a3363ae810b656e3b6190"></a>CounterDirectory&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a083225fb2313ee056142bbee0c44de36a88183b946cc5f0e8c96b2e66e1c74a7e"></a>Unknown&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_file_only_profiling_connection_8hpp_source.xhtml#l00030">30</a> of file <a class="el" href="_file_only_profiling_connection_8hpp_source.xhtml">FileOnlyProfilingConnection.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a083225fb2313ee056142bbee0c44de36ae43273a3645f4894a1088081feb9827d">StreamMetaData</a>,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a083225fb2313ee056142bbee0c44de36ad2cacb6bc37a3363ae810b656e3b6190">CounterDirectory</a>,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a083225fb2313ee056142bbee0c44de36a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;};</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a083225fb2313ee056142bbee0c44de36a88183b946cc5f0e8c96b2e66e1c74a7e"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a083225fb2313ee056142bbee0c44de36a88183b946cc5f0e8c96b2e66e1c74a7e">armnn::profiling::PackageActivity::Unknown</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a083225fb2313ee056142bbee0c44de36ae43273a3645f4894a1088081feb9827d"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a083225fb2313ee056142bbee0c44de36ae43273a3645f4894a1088081feb9827d">armnn::profiling::PackageActivity::StreamMetaData</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a083225fb2313ee056142bbee0c44de36ad2cacb6bc37a3363ae810b656e3b6190"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a083225fb2313ee056142bbee0c44de36ad2cacb6bc37a3363ae810b656e3b6190">armnn::profiling::PackageActivity::CounterDirectory</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab805f5aa9f101e7f6d971daba044c3c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab805f5aa9f101e7f6d971daba044c3c2">&#9670;&nbsp;</a></span>ProfilingRelationshipType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2">ProfilingRelationshipType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ab805f5aa9f101e7f6d971daba044c3c2afc04d023850b425f3b9c62b3a55dc110"></a>RetentionLink&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab805f5aa9f101e7f6d971daba044c3c2a5265db1a79410fbe447a3faa98e7b914"></a>ExecutionLink&#160;</td><td class="fielddoc"><p>Head retains(parents) Tail. </p>
</td></tr>
<tr><td class="fieldname"><a id="ab805f5aa9f101e7f6d971daba044c3c2a77ac530ff577e3b84e0761fa02b2520b"></a>DataLink&#160;</td><td class="fielddoc"><p>Head execution start depends on Tail execution completion. </p>
</td></tr>
<tr><td class="fieldname"><a id="ab805f5aa9f101e7f6d971daba044c3c2a47d6c060a0aa40c6fd018f12b7c96f1f"></a>LabelLink&#160;</td><td class="fielddoc"><p>Head uses data of Tail. </p>
<p>Head uses label Tail (Tail MUST be a guid of a label). </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_i_send_timeline_packet_8hpp_source.xhtml#l00019">19</a> of file <a class="el" href="_i_send_timeline_packet_8hpp_source.xhtml">ISendTimelinePacket.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2afc04d023850b425f3b9c62b3a55dc110">RetentionLink</a>,    <span class="comment">/// Head retains(parents) Tail</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a5265db1a79410fbe447a3faa98e7b914">ExecutionLink</a>,    <span class="comment">/// Head execution start depends on Tail execution completion</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a77ac530ff577e3b84e0761fa02b2520b">DataLink</a>,         <span class="comment">/// Head uses data of Tail</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a47d6c060a0aa40c6fd018f12b7c96f1f">LabelLink</a>         <span class="comment">/// Head uses label Tail (Tail MUST be a guid of a label).</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"></span>};</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ab805f5aa9f101e7f6d971daba044c3c2a5265db1a79410fbe447a3faa98e7b914"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a5265db1a79410fbe447a3faa98e7b914">armnn::profiling::ProfilingRelationshipType::ExecutionLink</a></div><div class="ttdoc">Head retains(parents) Tail. </div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ab805f5aa9f101e7f6d971daba044c3c2a77ac530ff577e3b84e0761fa02b2520b"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a77ac530ff577e3b84e0761fa02b2520b">armnn::profiling::ProfilingRelationshipType::DataLink</a></div><div class="ttdoc">Head execution start depends on Tail execution completion. </div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ab805f5aa9f101e7f6d971daba044c3c2a47d6c060a0aa40c6fd018f12b7c96f1f"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a47d6c060a0aa40c6fd018f12b7c96f1f">armnn::profiling::ProfilingRelationshipType::LabelLink</a></div><div class="ttdoc">Head uses data of Tail. </div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ab805f5aa9f101e7f6d971daba044c3c2afc04d023850b425f3b9c62b3a55dc110"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2afc04d023850b425f3b9c62b3a55dc110">armnn::profiling::ProfilingRelationshipType::RetentionLink</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acb0c054138599582d5a5f537e9798806"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb0c054138599582d5a5f537e9798806">&#9670;&nbsp;</a></span>ProfilingState</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806">ProfilingState</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820"></a>Uninitialised&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463"></a>NotConnected&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5"></a>WaitingForAck&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d"></a>Active&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_profiling_state_machine_8hpp_source.xhtml#l00018">18</a> of file <a class="el" href="_profiling_state_machine_8hpp_source.xhtml">ProfilingStateMachine.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820">Uninitialised</a>,</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">NotConnected</a>,</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">WaitingForAck</a>,</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d">Active</a></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;};</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">armnn::profiling::ProfilingState::NotConnected</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d">armnn::profiling::ProfilingState::Active</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">armnn::profiling::ProfilingState::WaitingForAck</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820">armnn::profiling::ProfilingState::Uninitialised</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a006732ecc1f16712db06bf622eb79651"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a006732ecc1f16712db06bf622eb79651">&#9670;&nbsp;</a></span>TargetEndianness</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearmnn_1_1profiling.xhtml#a006732ecc1f16712db06bf622eb79651">TargetEndianness</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a006732ecc1f16712db06bf622eb79651aefe19217ee8d2186e7bbecbf2f171eb9"></a>BeWire&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a006732ecc1f16712db06bf622eb79651ab2db365e5027e9a57988c7054e9bd6b7"></a>LeWire&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_file_only_profiling_connection_8hpp_source.xhtml#l00024">24</a> of file <a class="el" href="_file_only_profiling_connection_8hpp_source.xhtml">FileOnlyProfilingConnection.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a006732ecc1f16712db06bf622eb79651aefe19217ee8d2186e7bbecbf2f171eb9">BeWire</a>,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a006732ecc1f16712db06bf622eb79651ab2db365e5027e9a57988c7054e9bd6b7">LeWire</a></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;};</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a006732ecc1f16712db06bf622eb79651ab2db365e5027e9a57988c7054e9bd6b7"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a006732ecc1f16712db06bf622eb79651ab2db365e5027e9a57988c7054e9bd6b7">armnn::profiling::TargetEndianness::LeWire</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a006732ecc1f16712db06bf622eb79651aefe19217ee8d2186e7bbecbf2f171eb9"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a006732ecc1f16712db06bf622eb79651aefe19217ee8d2186e7bbecbf2f171eb9">armnn::profiling::TargetEndianness::BeWire</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acdfc0158f71b04526602ef51444da4c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acdfc0158f71b04526602ef51444da4c0">&#9670;&nbsp;</a></span>TimelinePacketStatus</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="acdfc0158f71b04526602ef51444da4c0aa60852f204ed8028c1c58808b746d115"></a>Ok&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acdfc0158f71b04526602ef51444da4c0a902b0d55fddef6f8d651fe1035b7d4bd"></a>Error&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acdfc0158f71b04526602ef51444da4c0ad0863d6c0a071cb52079344e64425773"></a>BufferExhaustion&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00204">204</a> of file <a class="el" href="_profiling_utils_8hpp_source.xhtml">ProfilingUtils.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;{</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0aa60852f204ed8028c1c58808b746d115">Ok</a>,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da902b0d55fddef6f8d651fe1035b7d4bd">Error</a>,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0ad0863d6c0a071cb52079344e64425773">BufferExhaustion</a></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;};</div><div class="ttc" id="namespacearmnn_xhtml_a93a3ba385cad27c4774e5fe64c025d3da902b0d55fddef6f8d651fe1035b7d4bd"><div class="ttname"><a href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da902b0d55fddef6f8d651fe1035b7d4bd">armnn::LogSeverity::Error</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acdfc0158f71b04526602ef51444da4c0aa60852f204ed8028c1c58808b746d115"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0aa60852f204ed8028c1c58808b746d115">armnn::profiling::TimelinePacketStatus::Ok</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acdfc0158f71b04526602ef51444da4c0ad0863d6c0a071cb52079344e64425773"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0ad0863d6c0a071cb52079344e64425773">armnn::profiling::TimelinePacketStatus::BufferExhaustion</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="af9eb13006d20d612855b0eb00bd7b1f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9eb13006d20d612855b0eb00bd7b1f0">&#9670;&nbsp;</a></span>CalculateSizeOfPaddedSwString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t CalculateSizeOfPaddedSwString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00310">310</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00033">armnn::numeric_cast()</a>, and <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">uint32_t_size</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00320">ReadSwTraceMessage()</a>.</p>
<div class="fragment"><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;{</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    std::vector&lt;uint32_t&gt; swTraceString;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    StringToSwTraceString&lt;SwTraceCharPolicy&gt;(str, swTraceString);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a> = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    uint32_t size = (<a class="code" href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">boost::numeric_cast</a>&lt;uint32_t&gt;(swTraceString.size()) - 1) * <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordflow">return</span> size;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a37fa39012e90d568df7f774cd6d1e956"><div class="ttname"><a href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00033">NumericCast.hpp:33</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aabcf5c25522e8a0542c95174056cfcac"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">armnn::profiling::uint32_t_size</a></div><div class="ttdeci">uint32_t uint32_t_size</div><div class="ttdef"><b>Definition:</b> <a href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">DirectoryCaptureCommandHandler.cpp:21</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6c000fcf0c62f7bc417fef72be783129"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c000fcf0c62f7bc417fef72be783129">&#9670;&nbsp;</a></span>CentreAlignFormatting()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string CentreAlignFormatting </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>stringToPass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>spacingWidth</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00858">858</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_periodic_counter_capture_command_handler_8cpp_source.xhtml#l00077">PeriodicCounterCaptureCommandHandler::operator()()</a>, <a class="el" href="_timeline_decoder_8cpp_source.xhtml#l00123">TimelineDecoder::print()</a>, <a class="el" href="tests_2profiling_2gatordmock_2_counter_directory_8hpp_source.xhtml#l00113">CategoryRecord::print()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00940">PrintCategoryDetails()</a>, <a class="el" href="tests_2profiling_2gatordmock_2_counter_directory_8hpp_source.xhtml#l00075">EventRecord::printContents()</a>, <a class="el" href="tests_2profiling_2gatordmock_2_counter_directory_8hpp_source.xhtml#l00172">CounterSetRecord::printContents()</a>, <a class="el" href="tests_2profiling_2gatordmock_2_counter_directory_8hpp_source.xhtml#l00213">DeviceRecord::printContents()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00909">PrintCounterDetails()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l01003">PrintCounterDirectory()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00893">PrintCounterSetDetails()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00878">PrintDeviceDetails()</a>, <a class="el" href="tests_2profiling_2gatordmock_2_counter_directory_8hpp_source.xhtml#l00042">EventRecord::printHeader()</a>, <a class="el" href="tests_2profiling_2gatordmock_2_counter_directory_8hpp_source.xhtml#l00153">CounterSetRecord::printHeader()</a>, and <a class="el" href="tests_2profiling_2gatordmock_2_counter_directory_8hpp_source.xhtml#l00195">DeviceRecord::printHeader()</a>.</p>
<div class="fragment"><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;{</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    std::stringstream outputStream, centrePadding;</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <span class="keywordtype">int</span> padding = spacingWidth - <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(stringToPass.size());</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; padding / 2; ++i)</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    {</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        centrePadding &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    }</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    outputStream &lt;&lt; centrePadding.str() &lt;&lt; stringToPass &lt;&lt; centrePadding.str();</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    <span class="keywordflow">if</span> (padding &gt; 0 &amp;&amp; padding %2 != 0)</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    {</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        outputStream &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    }</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    <span class="keywordflow">return</span> outputStream.str();</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a750935094e7dc62a6ce69be8688ee9fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a750935094e7dc62a6ce69be8688ee9fc">&#9670;&nbsp;</a></span>ConstructHeader() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t ConstructHeader </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>packetFamily</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>packetId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00096">96</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>.</p>
<div class="fragment"><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> ((packetFamily &amp; 0x3F) &lt;&lt; 26)|</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;           ((packetId &amp; 0x3FF) &lt;&lt; 16);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a59d5594b6e4e7d3fe9dbde5febd8da81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59d5594b6e4e7d3fe9dbde5febd8da81">&#9670;&nbsp;</a></span>ConstructHeader() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t ConstructHeader </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>packetFamily</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>packetClass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>packetType</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00103">103</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">return</span> ((packetFamily &amp; 0x3F) &lt;&lt; 26)|</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;           ((packetClass &amp; 0x3FF) &lt;&lt; 19)|</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;           ((packetType &amp; 0x3FFF) &lt;&lt; 16);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8c4f707828a9d965b59f4ec3414cb490"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c4f707828a9d965b59f4ec3414cb490">&#9670;&nbsp;</a></span>ConvertDirectoryComponent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool armnn::profiling::ConvertDirectoryComponent </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>directoryComponent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SwTraceBuffer &amp;&#160;</td>
          <td class="paramname"><em>swTraceBuffer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">126</a> of file <a class="el" href="_profiling_utils_8hpp_source.xhtml">ProfilingUtils.hpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00096">ConstructHeader()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00404">CreateTimelinePacketHeader()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00287">GetHardwareVersion()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00074">GetNextCounterUids()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00054">GetNextUid()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00299">GetProcessName()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00282">GetSoftwareInfo()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00292">GetSoftwareVersion()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00190">ReadBytes()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00211">ReadUint16()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00204">ReadUint32()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00197">ReadUint64()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00218">ReadUint8()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00089">WriteBytes()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00126">WriteUint16()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00119">WriteUint32()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00112">WriteUint64()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00133">WriteUint8()</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// Convert the directory component using the given policy</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    SwTraceBuffer tempSwTraceBuffer;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordtype">bool</span> result = StringToSwTraceString&lt;SwTracePolicy&gt;(directoryComponent, tempSwTraceBuffer);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">if</span> (!result)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    swTraceBuffer.insert(swTraceBuffer.end(), tempSwTraceBuffer.begin(), tempSwTraceBuffer.end());</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4295e2d34b34c57b2065b80fcad431c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4295e2d34b34c57b2065b80fcad431c9">&#9670;&nbsp;</a></span>CreateTimelineMessagePacketHeader()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;uint32_t, uint32_t&gt; armnn::profiling::CreateTimelineMessagePacketHeader </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>dataLength</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a packet header for the timeline messages: </p>
<ul>
<li>declareLabel</li>
<li>declareEntity</li>
<li>declareEventClass</li>
<li>declareRelationship</li>
<li>declareEvent</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dataLength</td><td>The length of the message body in bytes</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pair of uint32_t containing word0 and word1 of the header </dd></dl>

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00444">444</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00404">CreateTimelinePacketHeader()</a>.</p>
<div class="fragment"><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;{</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#aca8b4bad45009e1d42dc8de69a0b7e2c">CreateTimelinePacketHeader</a>(1,           <span class="comment">// Packet family</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                                      0,           <span class="comment">// Packet class</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                      1,           <span class="comment">// Packet type</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                      0,           <span class="comment">// Stream id</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                      0,           <span class="comment">// Sequence number</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                                      dataLength); <span class="comment">// Data length</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aca8b4bad45009e1d42dc8de69a0b7e2c"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aca8b4bad45009e1d42dc8de69a0b7e2c">armnn::profiling::CreateTimelinePacketHeader</a></div><div class="ttdeci">std::pair&lt; uint32_t, uint32_t &gt; CreateTimelinePacketHeader(uint32_t packetFamily, uint32_t packetClass, uint32_t packetType, uint32_t streamId, uint32_t sequenceNumbered, uint32_t dataLength)</div><div class="ttdoc">Creates a timeline packet header. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00404">ProfilingUtils.cpp:404</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aca8b4bad45009e1d42dc8de69a0b7e2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca8b4bad45009e1d42dc8de69a0b7e2c">&#9670;&nbsp;</a></span>CreateTimelinePacketHeader()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; uint32_t, uint32_t &gt; CreateTimelinePacketHeader </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>packetFamily</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>packetClass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>packetType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>streamId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>sequenceNumbered</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dataLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a timeline packet header. </p>
<p>packetFamiliy Timeline <a class="el" href="classarmnn_1_1profiling_1_1_packet.xhtml">Packet</a> Family packetClass Timeline <a class="el" href="classarmnn_1_1profiling_1_1_packet.xhtml">Packet</a> Class packetType Timeline <a class="el" href="classarmnn_1_1profiling_1_1_packet.xhtml">Packet</a> Type streamId Stream identifier seqeunceNumbered When non-zero the 4 bytes following the header is a u32 sequence number dataLength Unsigned 24-bit integer. Length of data, in bytes. Zero is permitted</p>
<dl class="section return"><dt>Returns</dt><dd>Pair of uint32_t containing word0 and word1 of the header </dd></dl>

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00404">404</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_send_timeline_packet_8cpp_source.xhtml#l00014">SendTimelinePacket::Commit()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00444">CreateTimelineMessagePacketHeader()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00633">WriteTimelineMessageDirectoryPackage()</a>.</p>
<div class="fragment"><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;{</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="comment">// Packet header word 0:</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="comment">// 26:31 [6] packet_family: timeline Packet Family, value 0b000001</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="comment">// 19:25 [7] packet_class: packet class</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="comment">// 16:18 [3] packet_type: packet type</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="comment">// 8:15  [8] reserved: all zeros</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="comment">// 0:7   [8] stream_id: stream identifier</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    uint32_t packetHeaderWord0 = ((packetFamily &amp; 0x0000003F) &lt;&lt; 26) |</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                 ((packetClass  &amp; 0x0000007F) &lt;&lt; 19) |</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                 ((packetType   &amp; 0x00000007) &lt;&lt; 16) |</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                 ((streamId     &amp; 0x00000007) &lt;&lt;  0);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="comment">// Packet header word 1:</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="comment">// 25:31 [7]  reserved: all zeros</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="comment">// 24    [1]  sequence_numbered: when non-zero the 4 bytes following the header is a u32 sequence number</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="comment">// 0:23  [24] data_length: unsigned 24-bit integer. Length of data, in bytes. Zero is permitted</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    uint32_t packetHeaderWord1 = ((sequenceNumbered &amp; 0x00000001) &lt;&lt; 24) |</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                 ((dataLength       &amp; 0x00FFFFFF) &lt;&lt;  0);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keywordflow">return</span> std::make_pair(packetHeaderWord0, packetHeaderWord1);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab2199204c88b5456af0e820b8e821bc6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2199204c88b5456af0e820b8e821bc6">&#9670;&nbsp;</a></span>EncodeVersion()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr uint32_t armnn::profiling::EncodeVersion </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>major</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>minor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>patch</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_encode_version_8hpp_source.xhtml#l00018">18</a> of file <a class="el" href="_encode_version_8hpp_source.xhtml">EncodeVersion.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_send_counter_packet_tests_8cpp_source.xhtml#l00286">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_encode_version_8hpp_source.xhtml#l00045">Version::GetEncodedValue()</a>, and <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00029">SendCounterPacket::SendStreamMetaDataPacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keywordflow">return</span> (major &lt;&lt; 22) | (minor &lt;&lt; 12) | patch;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a66ccd202fa7bf1e52476e61d49a45ee6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66ccd202fa7bf1e52476e61d49a45ee6">&#9670;&nbsp;</a></span>GetHardwareVersion()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetHardwareVersion </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00287">287</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_send_counter_packet_tests_8cpp_source.xhtml#l00286">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, and <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00029">SendCounterPacket::SendStreamMetaDataPacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;{</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">return</span> std::string();</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6605c82bc625fbd40f24d35edee15fe3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6605c82bc625fbd40f24d35edee15fe3">&#9670;&nbsp;</a></span>GetNextCounterUids()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; uint16_t &gt; GetNextCounterUids </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>firstUid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>cores</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00074">74</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00732">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00181">CounterDirectory::RegisterCounter()</a>, and <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00503">MockCounterDirectory::RegisterCounter()</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">// Check that it is possible to generate the next counter UID without causing an overflow (throws in case of error)</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    ThrowIfCantGenerateNextUid(firstUid, cores);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// Get the next counter UIDs</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">size_t</span> counterUidsSize = cores == 0 ? 1 : cores;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    std::vector&lt;uint16_t&gt; counterUids(counterUidsSize, 0);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; counterUidsSize; i++)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        counterUids[i] = firstUid++;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> counterUids;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a982b094fe2faa67a3560cdaf3901d0f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a982b094fe2faa67a3560cdaf3901d0f8">&#9670;&nbsp;</a></span>GetNextUid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t GetNextUid </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>peekOnly</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00054">54</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00732">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00114">CounterDirectory::RegisterCounterSet()</a>, <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00482">MockCounterDirectory::RegisterCounterSet()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00052">CounterDirectory::RegisterDevice()</a>, and <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00462">MockCounterDirectory::RegisterDevice()</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// The UID used for profiling objects and events. The first valid UID is 1, as 0 is a reserved value</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">static</span> uint16_t uid = 1;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// Check that it is possible to generate the next UID without causing an overflow (throws in case of error)</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    ThrowIfCantGenerateNextUid(uid);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">if</span> (peekOnly)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="comment">// Peek only</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">return</span> uid;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="comment">// Get the next UID</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">return</span> uid++;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a52fbcd350a9f12a385a7c5562c1efd9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52fbcd350a9f12a385a7c5562c1efd9a">&#9670;&nbsp;</a></span>GetProcessName()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetProcessName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00299">299</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_tests_8cpp_source.xhtml#l02333">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, and <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00029">SendCounterPacket::SendStreamMetaDataPacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;{</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    std::ifstream comm(<span class="stringliteral">&quot;/proc/self/comm&quot;</span>);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    std::string name;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    getline(comm, name);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordflow">return</span> name;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa6851e58c103f77fcf83b722b4b81e9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6851e58c103f77fcf83b722b4b81e9d">&#9670;&nbsp;</a></span>GetProfilingStateName()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr char const* armnn::profiling::GetProfilingStateName </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806">ProfilingState</a>&#160;</td>
          <td class="paramname"><em>state</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_state_machine_8hpp_source.xhtml#l00059">59</a> of file <a class="el" href="_profiling_state_machine_8hpp_source.xhtml">ProfilingStateMachine.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d">Active</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">NotConnected</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820">Uninitialised</a>, and <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">WaitingForAck</a>.</p>

<p class="reference">Referenced by <a class="el" href="_per_job_counter_selection_command_handler_8cpp_source.xhtml#l00016">PerJobCounterSelectionCommandHandler::operator()()</a>, <a class="el" href="_request_counter_directory_command_handler_8cpp_source.xhtml#l00016">RequestCounterDirectoryCommandHandler::operator()()</a>, <a class="el" href="_connection_acknowledged_command_handler_8cpp_source.xhtml#l00018">ConnectionAcknowledgedCommandHandler::operator()()</a>, and <a class="el" href="_periodic_counter_selection_command_handler_8cpp_source.xhtml#l00059">PeriodicCounterSelectionCommandHandler::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">switch</span> (state)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">case</span> ProfilingState::Uninitialised: <span class="keywordflow">return</span> <span class="stringliteral">&quot;Uninitialised&quot;</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">case</span> ProfilingState::NotConnected:  <span class="keywordflow">return</span> <span class="stringliteral">&quot;NotConnected&quot;</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">case</span> ProfilingState::WaitingForAck: <span class="keywordflow">return</span> <span class="stringliteral">&quot;WaitingForAck&quot;</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">case</span> ProfilingState::Active:        <span class="keywordflow">return</span> <span class="stringliteral">&quot;Active&quot;</span>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">default</span>:                            <span class="keywordflow">return</span> <span class="stringliteral">&quot;Unknown&quot;</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af38e9c5d82c9317255665a6315842166"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af38e9c5d82c9317255665a6315842166">&#9670;&nbsp;</a></span>GetSoftwareInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetSoftwareInfo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00282">282</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_send_counter_packet_tests_8cpp_source.xhtml#l00286">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, and <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00029">SendCounterPacket::SendStreamMetaDataPacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;{</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">return</span> std::string(<span class="stringliteral">&quot;ArmNN&quot;</span>);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1a90cae723e311b3b71272a7f5ecccbb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a90cae723e311b3b71272a7f5ecccbb">&#9670;&nbsp;</a></span>GetSoftwareVersion()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetSoftwareVersion </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00292">292</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_version_8hpp_source.xhtml#l00024">ARMNN_VERSION</a>.</p>

<p class="reference">Referenced by <a class="el" href="_send_counter_packet_tests_8cpp_source.xhtml#l00286">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, and <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00029">SendCounterPacket::SendStreamMetaDataPacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;{</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    std::string armnnVersion(<a class="code" href="_version_8hpp.xhtml#a50bf0553d5c4b76d18a3d37e155b4d11">ARMNN_VERSION</a>);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    std::string result = <span class="stringliteral">&quot;Armnn &quot;</span> + armnnVersion.substr(2,2) + <span class="stringliteral">&quot;.&quot;</span> + armnnVersion.substr(4,2);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;}</div><div class="ttc" id="_version_8hpp_xhtml_a50bf0553d5c4b76d18a3d37e155b4d11"><div class="ttname"><a href="_version_8hpp.xhtml#a50bf0553d5c4b76d18a3d37e155b4d11">ARMNN_VERSION</a></div><div class="ttdeci">#define ARMNN_VERSION</div><div class="ttdoc">ARMNN_VERSION: &quot;YYYYMMPP&quot; where: YYYY = 4-digit year number MM = 2-digit month number PP = 2-digit pa...</div><div class="ttdef"><b>Definition:</b> <a href="_version_8hpp_source.xhtml#l00024">Version.hpp:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a77a41a7625d3134c0cccdf11d169acb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77a41a7625d3134c0cccdf11d169acb4">&#9670;&nbsp;</a></span>GetTimestamp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint64_t GetTimestamp </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l01050">1050</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_timeline_utility_methods_8cpp_source.xhtml#l00362">TimelineUtilityMethods::RecordEvent()</a>, and <a class="el" href="_periodic_counter_capture_8cpp_source.xhtml#l00037">PeriodicCounterCapture::Stop()</a>.</p>
<div class="fragment"><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;{</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;<span class="preprocessor">#if USE_CLOCK_MONOTONIC_RAW</span></div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    <span class="keyword">using</span> clock = MonotonicClockRaw;</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;    <span class="keyword">using</span> clock = std::chrono::steady_clock;</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    <span class="comment">// Take a timestamp</span></div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;    <span class="keyword">auto</span> timestamp = clock::now();</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(timestamp.time_since_epoch().count());</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a88c92fd3fdbf9deb6f1606eb14818ea9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88c92fd3fdbf9deb6f1606eb14818ea9">&#9670;&nbsp;</a></span>IsValidSwTraceString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool armnn::profiling::IsValidSwTraceString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00087">87</a> of file <a class="el" href="_profiling_utils_8hpp_source.xhtml">ProfilingUtils.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// Check that all the characters in the given string conform to the given policy</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">return</span> std::all_of(s.begin(), s.end(), [](<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c) { <span class="keywordflow">return</span> SwTracePolicy::IsValidChar(c); });</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4614388c6a708b8efe76b883a046ffaf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4614388c6a708b8efe76b883a046ffaf">&#9670;&nbsp;</a></span>operator<<()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; armnn::profiling::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1profiling_1_1_version.xhtml">Version</a> &amp;&#160;</td>
          <td class="paramname"><em>version</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_encode_version_8hpp_source.xhtml#l00075">75</a> of file <a class="el" href="_encode_version_8hpp_source.xhtml">EncodeVersion.hpp</a>.</p>

<p class="reference">References <a class="el" href="_encode_version_8hpp_source.xhtml#l00059">Version::ToString()</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    os &lt;&lt; version.ToString();</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af33888588c5afaab1eb0d0bfbed2f6ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af33888588c5afaab1eb0d0bfbed2f6ee">&#9670;&nbsp;</a></span>PrintCategoryDetails()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void armnn::profiling::PrintCategoryDetails </td>
          <td>(</td>
          <td class="paramtype">const std::unique_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_category.xhtml">Category</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>category</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::unordered_map&lt; unsigned short, std::shared_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a> &gt;&gt;&#160;</td>
          <td class="paramname"><em>counterMap</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00940">940</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00858">CentreAlignFormatting()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00909">PrintCounterDetails()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_utils_8cpp_source.xhtml#l01003">PrintCounterDirectory()</a>.</p>
<div class="fragment"><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;{</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    std::string categoryBody;</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    std::string categoryHeader;</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    categoryHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Name&quot;</span>, 20));</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    categoryHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    categoryHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Event Count&quot;</span>, 14));</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    categoryHeader.append(<span class="stringliteral">&quot;\n&quot;</span>);</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    categoryBody.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(category-&gt;m_Name, 20));</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    categoryBody.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    categoryBody.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(std::to_string(category-&gt;m_Counters.size()), 14));</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    std::cout &lt;&lt; <a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;CATEGORY&quot;</span>, static_cast&lt;int&gt;(categoryHeader.size()));</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    std::cout &lt;&lt; std::string(categoryHeader.size(), <span class="charliteral">&#39;=&#39;</span>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    std::cout &lt;&lt; categoryHeader;</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    std::cout &lt;&lt; std::string(categoryBody.size(), <span class="charliteral">&#39;-&#39;</span>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    std::cout &lt;&lt; categoryBody;</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    std::string counterHeader;</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    counterHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Counter Name&quot;</span>, 20));</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    counterHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    counterHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Description&quot;</span>, 50));</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    counterHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    counterHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Units&quot;</span>, 14));</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    counterHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    counterHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;UID&quot;</span>, 6));</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    counterHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    counterHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Max UID&quot;</span>, 10));</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    counterHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    counterHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Class&quot;</span>, 8));</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    counterHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    counterHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Interpolation&quot;</span>, 14));</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    counterHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    counterHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Multiplier&quot;</span>, 20));</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    counterHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    counterHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Counter set UID&quot;</span>, 16));</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    counterHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    counterHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Device UID&quot;</span>, 14));</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    counterHeader.append(<span class="stringliteral">&quot;\n&quot;</span>);</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    std::cout &lt;&lt; <a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;EVENTS IN CATEGORY: &quot;</span> + category-&gt;m_Name,</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                                       static_cast&lt;int&gt;(counterHeader.size()));</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    std::cout &lt;&lt; std::string(counterHeader.size(), <span class="charliteral">&#39;=&#39;</span>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;    std::cout &lt;&lt; counterHeader;</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; it: category-&gt;m_Counters) {</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;        <span class="keyword">auto</span> search = counterMap.find(it);</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;        <span class="keywordflow">if</span>(search != counterMap.end()) {</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;            <a class="code" href="namespacearmnn_1_1profiling.xhtml#a3e7c9cd02bf5ed5b588b24b0a8b8a2b1">PrintCounterDetails</a>(search-&gt;second);</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;        }</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    }</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a3e7c9cd02bf5ed5b588b24b0a8b8a2b1"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a3e7c9cd02bf5ed5b588b24b0a8b8a2b1">armnn::profiling::PrintCounterDetails</a></div><div class="ttdeci">void PrintCounterDetails(std::shared_ptr&lt; Counter &gt; &amp;counter)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00909">ProfilingUtils.cpp:909</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a6c000fcf0c62f7bc417fef72be783129"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">armnn::profiling::CentreAlignFormatting</a></div><div class="ttdeci">std::string CentreAlignFormatting(const std::string &amp;stringToPass, const int spacingWidth)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00858">ProfilingUtils.cpp:858</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3e7c9cd02bf5ed5b588b24b0a8b8a2b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e7c9cd02bf5ed5b588b24b0a8b8a2b1">&#9670;&nbsp;</a></span>PrintCounterDetails()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void armnn::profiling::PrintCounterDetails </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>counter</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00909">909</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00858">CentreAlignFormatting()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00940">PrintCategoryDetails()</a>.</p>
<div class="fragment"><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;{</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    std::string body;</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(counter-&gt;m_Name, 20));</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(counter-&gt;m_Description, 50));</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(counter-&gt;m_Units, 14));</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(std::to_string(counter-&gt;m_Uid), 6));</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(std::to_string(counter-&gt;m_MaxCounterUid), 10));</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(std::to_string(counter-&gt;m_Class), 8));</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(std::to_string(counter-&gt;m_Interpolation), 14));</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(std::to_string(counter-&gt;m_Multiplier), 20));</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(std::to_string(counter-&gt;m_CounterSetUid), 16));</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(std::to_string(counter-&gt;m_DeviceUid), 14));</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    body.append(<span class="stringliteral">&quot;\n&quot;</span>);</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    std::cout &lt;&lt; std::string(body.size(), <span class="charliteral">&#39;-&#39;</span>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    std::cout &lt;&lt; body;</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a6c000fcf0c62f7bc417fef72be783129"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">armnn::profiling::CentreAlignFormatting</a></div><div class="ttdeci">std::string CentreAlignFormatting(const std::string &amp;stringToPass, const int spacingWidth)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00858">ProfilingUtils.cpp:858</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a02f98a63d0ef3a10bb359c3ac525f330"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a02f98a63d0ef3a10bb359c3ac525f330">&#9670;&nbsp;</a></span>PrintCounterDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PrintCounterDirectory </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml">ICounterDirectory</a> &amp;&#160;</td>
          <td class="paramname"><em>counterDirectory</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l01003">1003</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00858">CentreAlignFormatting()</a>, <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#a718a75d4c178cf3f687b3f27b8f55091">ICounterDirectory::GetCategories()</a>, <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#ad9fa9b8364fcaa2c940ef8e78eff8df2">ICounterDirectory::GetCounters()</a>, <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#a8908490db3b8a0003a639ac56b956cee">ICounterDirectory::GetCounterSets()</a>, <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#a98e6769cb933d30bfd3ca25f61bd8438">ICounterDirectory::GetDevices()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00940">PrintCategoryDetails()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00893">PrintCounterSetDetails()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00878">PrintDeviceDetails()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml#l00290">DirectoryCaptureCommandHandler::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;{</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    std::string devicesHeader;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    devicesHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Device name&quot;</span>, 20));</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    devicesHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    devicesHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;UID&quot;</span>, 13));</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    devicesHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    devicesHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Cores&quot;</span>, 10));</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    devicesHeader.append(<span class="stringliteral">&quot;\n&quot;</span>);</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    std::cout &lt;&lt; <a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;DEVICES&quot;</span>, static_cast&lt;int&gt;(devicesHeader.size()));</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    std::cout &lt;&lt; std::string(devicesHeader.size(), <span class="charliteral">&#39;=&#39;</span>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    std::cout &lt;&lt; devicesHeader;</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; it: counterDirectory.GetDevices()) {</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;        <a class="code" href="namespacearmnn_1_1profiling.xhtml#aea08b4cb21e58d159630a6929c90bf64">PrintDeviceDetails</a>(it);</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    }</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    std::string counterSetHeader;</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    counterSetHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Counter set name&quot;</span>, 20));</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    counterSetHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    counterSetHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;UID&quot;</span>, 13));</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    counterSetHeader.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    counterSetHeader.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;Count&quot;</span>, 10));</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    counterSetHeader.append(<span class="stringliteral">&quot;\n&quot;</span>);</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    std::cout &lt;&lt; <a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(<span class="stringliteral">&quot;COUNTER SETS&quot;</span>, static_cast&lt;int&gt;(counterSetHeader.size()));</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    std::cout &lt;&lt; std::string(counterSetHeader.size(), <span class="charliteral">&#39;=&#39;</span>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    std::cout &lt;&lt; counterSetHeader;</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; it: counterDirectory.GetCounterSets()) {</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;        <a class="code" href="namespacearmnn_1_1profiling.xhtml#abd2137ee62a2c96882f3d8d9e665ed09">PrintCounterSetDetails</a>(it);</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;    }</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;    <span class="keyword">auto</span> counters = counterDirectory.GetCounters();</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; it: counterDirectory.GetCategories()) {</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;        <a class="code" href="namespacearmnn_1_1profiling.xhtml#af33888588c5afaab1eb0d0bfbed2f6ee">PrintCategoryDetails</a>(it, counters);</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;    }</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aea08b4cb21e58d159630a6929c90bf64"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aea08b4cb21e58d159630a6929c90bf64">armnn::profiling::PrintDeviceDetails</a></div><div class="ttdeci">void PrintDeviceDetails(const std::pair&lt; const unsigned short, std::unique_ptr&lt; Device &gt;&gt; &amp;devicePair)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00878">ProfilingUtils.cpp:878</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_af33888588c5afaab1eb0d0bfbed2f6ee"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#af33888588c5afaab1eb0d0bfbed2f6ee">armnn::profiling::PrintCategoryDetails</a></div><div class="ttdeci">void PrintCategoryDetails(const std::unique_ptr&lt; Category &gt; &amp;category, std::unordered_map&lt; unsigned short, std::shared_ptr&lt; Counter &gt;&gt; counterMap)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00940">ProfilingUtils.cpp:940</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_abd2137ee62a2c96882f3d8d9e665ed09"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#abd2137ee62a2c96882f3d8d9e665ed09">armnn::profiling::PrintCounterSetDetails</a></div><div class="ttdeci">void PrintCounterSetDetails(const std::pair&lt; const unsigned short, std::unique_ptr&lt; CounterSet &gt;&gt; &amp;counterSetPair)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00893">ProfilingUtils.cpp:893</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a6c000fcf0c62f7bc417fef72be783129"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">armnn::profiling::CentreAlignFormatting</a></div><div class="ttdeci">std::string CentreAlignFormatting(const std::string &amp;stringToPass, const int spacingWidth)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00858">ProfilingUtils.cpp:858</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abd2137ee62a2c96882f3d8d9e665ed09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd2137ee62a2c96882f3d8d9e665ed09">&#9670;&nbsp;</a></span>PrintCounterSetDetails()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void armnn::profiling::PrintCounterSetDetails </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; const unsigned short, std::unique_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_counter_set.xhtml">CounterSet</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>counterSetPair</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00893">893</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00858">CentreAlignFormatting()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_utils_8cpp_source.xhtml#l01003">PrintCounterDirectory()</a>.</p>
<div class="fragment"><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;{</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    std::string body;</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(counterSetPair.second-&gt;m_Name, 20));</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(std::to_string(counterSetPair.first), 13));</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(std::to_string(counterSetPair.second-&gt;m_Count), 10));</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    body.append(<span class="stringliteral">&quot;\n&quot;</span>);</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    std::cout &lt;&lt; std::string(body.size(), <span class="charliteral">&#39;-&#39;</span>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    std::cout&lt;&lt; body;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a6c000fcf0c62f7bc417fef72be783129"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">armnn::profiling::CentreAlignFormatting</a></div><div class="ttdeci">std::string CentreAlignFormatting(const std::string &amp;stringToPass, const int spacingWidth)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00858">ProfilingUtils.cpp:858</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aea08b4cb21e58d159630a6929c90bf64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea08b4cb21e58d159630a6929c90bf64">&#9670;&nbsp;</a></span>PrintDeviceDetails()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void armnn::profiling::PrintDeviceDetails </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; const unsigned short, std::unique_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_device.xhtml">Device</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>devicePair</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00878">878</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00858">CentreAlignFormatting()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_utils_8cpp_source.xhtml#l01003">PrintCounterDirectory()</a>.</p>
<div class="fragment"><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;{</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    std::string body;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(devicePair.second-&gt;m_Name, 20));</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(std::to_string(devicePair.first), 13));</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">CentreAlignFormatting</a>(std::to_string(devicePair.second-&gt;m_Cores), 10));</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    body.append(<span class="stringliteral">&quot;\n&quot;</span>);</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    std::cout &lt;&lt; std::string(body.size(), <span class="charliteral">&#39;-&#39;</span>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    std::cout&lt;&lt; body;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a6c000fcf0c62f7bc417fef72be783129"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">armnn::profiling::CentreAlignFormatting</a></div><div class="ttdeci">std::string CentreAlignFormatting(const std::string &amp;stringToPass, const int spacingWidth)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00858">ProfilingUtils.cpp:858</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a097646e1b460c992b553061a3436fb47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a097646e1b460c992b553061a3436fb47">&#9670;&nbsp;</a></span>ReadBytes() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ReadBytes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valueSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>outValue</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00190">190</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_send_timeline_packet_tests_8cpp_source.xhtml#l00209">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, and <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00232">VerifyTimelineEventBinaryPacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    BOOST_ASSERT(packetBuffer);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#aaeaa3d9d5e1f03bc8966f1428e1cb672">ReadBytes</a>(packetBuffer-&gt;GetReadableData(), offset, valueSize, outValue);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aaeaa3d9d5e1f03bc8966f1428e1cb672"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aaeaa3d9d5e1f03bc8966f1428e1cb672">armnn::profiling::ReadBytes</a></div><div class="ttdeci">void ReadBytes(const unsigned char *buffer, unsigned int offset, unsigned int valueSize, uint8_t outValue[])</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00225">ProfilingUtils.cpp:225</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaeaa3d9d5e1f03bc8966f1428e1cb672"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaeaa3d9d5e1f03bc8966f1428e1cb672">&#9670;&nbsp;</a></span>ReadBytes() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ReadBytes </td>
          <td>(</td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valueSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>outValue</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00225">225</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;{</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    BOOST_ASSERT(buffer);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    BOOST_ASSERT(outValue);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; valueSize; i++, offset++)</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        outValue[i] = <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(buffer[offset]);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaa7e58f376ab96ad3fb6dbd16074a5cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa7e58f376ab96ad3fb6dbd16074a5cb">&#9670;&nbsp;</a></span>ReadSwTraceMessage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarmnn_1_1profiling_1_1_sw_trace_message.xhtml">SwTraceMessage</a> ReadSwTraceMessage </td>
          <td>(</td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00320">320</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00310">CalculateSizeOfPaddedSwString()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00042">SwTraceMessage::m_ArgNames</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00041">SwTraceMessage::m_ArgTypes</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00038">SwTraceMessage::m_Id</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00039">SwTraceMessage::m_Name</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00040">SwTraceMessage::m_UiName</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00204">ReadUint32()</a>, and <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">uint32_t_size</a>.</p>

<p class="reference">Referenced by <a class="el" href="_send_timeline_packet_tests_8cpp_source.xhtml#l00023">BOOST_AUTO_TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;{</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    BOOST_ASSERT(packetBuffer);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a> = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    SwTraceMessage swTraceMessage;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="comment">// Read the decl_id</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    uint32_t readDeclId = <a class="code" href="namespacearmnn_1_1profiling.xhtml#a100e71143e7c9abe8fb6f3ec9a810c63">ReadUint32</a>(packetBuffer, offset);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    swTraceMessage.m_Id = readDeclId;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="comment">// SWTrace &quot;namestring&quot; format</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="comment">// length of the string (first 4 bytes) + string + null terminator</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="comment">// Check the decl_name</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    uint32_t swTraceDeclNameLength = <a class="code" href="namespacearmnn_1_1profiling.xhtml#a100e71143e7c9abe8fb6f3ec9a810c63">ReadUint32</a>(packetBuffer, offset);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    std::vector&lt;unsigned char&gt; swTraceStringBuffer(swTraceDeclNameLength - 1);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    std::memcpy(swTraceStringBuffer.data(),</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                packetBuffer + offset, swTraceStringBuffer.size());</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    swTraceMessage.m_Name.assign(swTraceStringBuffer.begin(), swTraceStringBuffer.end()); <span class="comment">// name</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="comment">// Check the ui_name</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#af9eb13006d20d612855b0eb00bd7b1f0">CalculateSizeOfPaddedSwString</a>(swTraceMessage.m_Name);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    uint32_t swTraceUINameLength = <a class="code" href="namespacearmnn_1_1profiling.xhtml#a100e71143e7c9abe8fb6f3ec9a810c63">ReadUint32</a>(packetBuffer, offset);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    swTraceStringBuffer.resize(swTraceUINameLength - 1);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    std::memcpy(swTraceStringBuffer.data(),</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                packetBuffer  + offset, swTraceStringBuffer.size());</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    swTraceMessage.m_UiName.assign(swTraceStringBuffer.begin(), swTraceStringBuffer.end()); <span class="comment">// ui_name</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="comment">// Check arg_types</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#af9eb13006d20d612855b0eb00bd7b1f0">CalculateSizeOfPaddedSwString</a>(swTraceMessage.m_UiName);</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    uint32_t swTraceArgTypesLength = <a class="code" href="namespacearmnn_1_1profiling.xhtml#a100e71143e7c9abe8fb6f3ec9a810c63">ReadUint32</a>(packetBuffer, offset);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    swTraceStringBuffer.resize(swTraceArgTypesLength - 1);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    std::memcpy(swTraceStringBuffer.data(),</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                packetBuffer  + offset, swTraceStringBuffer.size());</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    swTraceMessage.m_ArgTypes.assign(swTraceStringBuffer.begin(), swTraceStringBuffer.end()); <span class="comment">// arg_types</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    std::string swTraceString(swTraceStringBuffer.begin(), swTraceStringBuffer.end());</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="comment">// Check arg_names</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#af9eb13006d20d612855b0eb00bd7b1f0">CalculateSizeOfPaddedSwString</a>(swTraceString);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    uint32_t swTraceArgNamesLength = <a class="code" href="namespacearmnn_1_1profiling.xhtml#a100e71143e7c9abe8fb6f3ec9a810c63">ReadUint32</a>(packetBuffer, offset);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    swTraceStringBuffer.resize(swTraceArgNamesLength - 1);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    std::memcpy(swTraceStringBuffer.data(),</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                packetBuffer  + offset, swTraceStringBuffer.size());</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    swTraceString.assign(swTraceStringBuffer.begin(), swTraceStringBuffer.end());</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    std::stringstream stringStream(swTraceString);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    std::string argName;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordflow">while</span> (std::getline(stringStream, argName, <span class="charliteral">&#39;,&#39;</span>))</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    {</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        swTraceMessage.m_ArgNames.push_back(argName);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    }</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#af9eb13006d20d612855b0eb00bd7b1f0">CalculateSizeOfPaddedSwString</a>(swTraceString);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">return</span> swTraceMessage;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a100e71143e7c9abe8fb6f3ec9a810c63"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a100e71143e7c9abe8fb6f3ec9a810c63">armnn::profiling::ReadUint32</a></div><div class="ttdeci">uint32_t ReadUint32(const unsigned char *buffer, unsigned int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00253">ProfilingUtils.cpp:253</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_af9eb13006d20d612855b0eb00bd7b1f0"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#af9eb13006d20d612855b0eb00bd7b1f0">armnn::profiling::CalculateSizeOfPaddedSwString</a></div><div class="ttdeci">uint32_t CalculateSizeOfPaddedSwString(const std::string &amp;str)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00310">ProfilingUtils.cpp:310</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aabcf5c25522e8a0542c95174056cfcac"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">armnn::profiling::uint32_t_size</a></div><div class="ttdeci">uint32_t uint32_t_size</div><div class="ttdef"><b>Definition:</b> <a href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">DirectoryCaptureCommandHandler.cpp:21</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0ffb94cb0085a54a92f1c4eeaa6cf772"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ffb94cb0085a54a92f1c4eeaa6cf772">&#9670;&nbsp;</a></span>ReadUint16() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t ReadUint16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00211">211</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_tests_8cpp_source.xhtml#l01683">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, and <a class="el" href="_stream_metadata_command_handler_8cpp_source.xhtml#l00057">armnn::gatordmock::ReadString()</a>.</p>
<div class="fragment"><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;{</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    BOOST_ASSERT(packetBuffer);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#a727b3d8a62d5910f2d2efe321748ee15">ReadUint16</a>(packetBuffer-&gt;GetReadableData(), offset);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a727b3d8a62d5910f2d2efe321748ee15"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a727b3d8a62d5910f2d2efe321748ee15">armnn::profiling::ReadUint16</a></div><div class="ttdeci">uint16_t ReadUint16(const unsigned char *buffer, unsigned int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00265">ProfilingUtils.cpp:265</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a727b3d8a62d5910f2d2efe321748ee15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a727b3d8a62d5910f2d2efe321748ee15">&#9670;&nbsp;</a></span>ReadUint16() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t ReadUint16 </td>
          <td>(</td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00265">265</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;{</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    BOOST_ASSERT(buffer);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    uint32_t value = 0;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    value  = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(buffer[offset]);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    value |= <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(buffer[offset + 1]) &lt;&lt; 8;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(value);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad56f4c3ea5e88279bb6ef1f31d9dc6df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad56f4c3ea5e88279bb6ef1f31d9dc6df">&#9670;&nbsp;</a></span>ReadUint32() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t ReadUint32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00204">204</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00018">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, <a class="el" href="_periodic_counter_selection_response_handler_8cpp_source.xhtml#l00018">PeriodicCounterSelectionResponseHandler::operator()()</a>, <a class="el" href="_timeline_capture_command_handler_8cpp_source.xhtml#l00105">TimelineCaptureCommandHandler::ReadEvent()</a>, <a class="el" href="_timeline_capture_command_handler_8cpp_source.xhtml#l00049">TimelineCaptureCommandHandler::ReadLabel()</a>, <a class="el" href="_timeline_capture_command_handler_8cpp_source.xhtml#l00087">TimelineCaptureCommandHandler::ReadRelationship()</a>, <a class="el" href="_stream_metadata_command_handler_8cpp_source.xhtml#l00057">armnn::gatordmock::ReadString()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00320">ReadSwTraceMessage()</a>, <a class="el" href="_timeline_tests_8cpp_source.xhtml#l00023">SendTimelinePacketToCommandHandler()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00201">VerifyTimelineEntityBinaryPacketData()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00232">VerifyTimelineEventBinaryPacket()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00097">VerifyTimelineEventClassBinaryPacketData()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00028">VerifyTimelineHeaderBinary()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00056">VerifyTimelineLabelBinaryPacketData()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00120">VerifyTimelineRelationshipBinaryPacketData()</a>, and <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00071">MockProfilingConnection::WritePacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;{</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    BOOST_ASSERT(packetBuffer);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#a100e71143e7c9abe8fb6f3ec9a810c63">ReadUint32</a>(packetBuffer-&gt;GetReadableData(), offset);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a100e71143e7c9abe8fb6f3ec9a810c63"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a100e71143e7c9abe8fb6f3ec9a810c63">armnn::profiling::ReadUint32</a></div><div class="ttdeci">uint32_t ReadUint32(const unsigned char *buffer, unsigned int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00253">ProfilingUtils.cpp:253</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a100e71143e7c9abe8fb6f3ec9a810c63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a100e71143e7c9abe8fb6f3ec9a810c63">&#9670;&nbsp;</a></span>ReadUint32() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t ReadUint32 </td>
          <td>(</td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00253">253</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    BOOST_ASSERT(buffer);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    uint32_t value = 0;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    value  = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(buffer[offset]);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    value |= <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(buffer[offset + 1]) &lt;&lt; 8;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    value |= <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(buffer[offset + 2]) &lt;&lt; 16;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    value |= <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(buffer[offset + 3]) &lt;&lt; 24;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa4de2b511faa41accc2c35cadf051124"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4de2b511faa41accc2c35cadf051124">&#9670;&nbsp;</a></span>ReadUint64() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint64_t ReadUint64 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00197">197</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_tests_8cpp_source.xhtml#l03382">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, <a class="el" href="_timeline_capture_command_handler_8cpp_source.xhtml#l00071">TimelineCaptureCommandHandler::ReadEntity()</a>, <a class="el" href="_timeline_capture_command_handler_8cpp_source.xhtml#l00105">TimelineCaptureCommandHandler::ReadEvent()</a>, <a class="el" href="_timeline_capture_command_handler_8cpp_source.xhtml#l00079">TimelineCaptureCommandHandler::ReadEventClass()</a>, <a class="el" href="_timeline_capture_command_handler_8cpp_source.xhtml#l00049">TimelineCaptureCommandHandler::ReadLabel()</a>, <a class="el" href="_timeline_capture_command_handler_8cpp_source.xhtml#l00087">TimelineCaptureCommandHandler::ReadRelationship()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00201">VerifyTimelineEntityBinaryPacketData()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00232">VerifyTimelineEventBinaryPacket()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00097">VerifyTimelineEventClassBinaryPacketData()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00056">VerifyTimelineLabelBinaryPacketData()</a>, and <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00120">VerifyTimelineRelationshipBinaryPacketData()</a>.</p>
<div class="fragment"><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;{</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    BOOST_ASSERT(packetBuffer);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#a6226b639a80d73acb1e66c622beed309">ReadUint64</a>(packetBuffer-&gt;GetReadableData(), offset);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a6226b639a80d73acb1e66c622beed309"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a6226b639a80d73acb1e66c622beed309">armnn::profiling::ReadUint64</a></div><div class="ttdeci">uint64_t ReadUint64(const unsigned char *buffer, unsigned int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00236">ProfilingUtils.cpp:236</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6226b639a80d73acb1e66c622beed309"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6226b639a80d73acb1e66c622beed309">&#9670;&nbsp;</a></span>ReadUint64() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint64_t ReadUint64 </td>
          <td>(</td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00236">236</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    BOOST_ASSERT(buffer);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    uint64_t value = 0;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    value  = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(buffer[offset]);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    value |= <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(buffer[offset + 1]) &lt;&lt; 8;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    value |= <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(buffer[offset + 2]) &lt;&lt; 16;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    value |= <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(buffer[offset + 3]) &lt;&lt; 24;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    value |= <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(buffer[offset + 4]) &lt;&lt; 32;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    value |= <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(buffer[offset + 5]) &lt;&lt; 40;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    value |= <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(buffer[offset + 6]) &lt;&lt; 48;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    value |= <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(buffer[offset + 7]) &lt;&lt; 56;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a74b483b652cc32f03151b10a1366d607"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74b483b652cc32f03151b10a1366d607">&#9670;&nbsp;</a></span>ReadUint8() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t ReadUint8 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00218">218</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_send_counter_packet_tests_8cpp_source.xhtml#l01135">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml#l00310">DirectoryCaptureCommandHandler::GetCounterDirectory()</a>, and <a class="el" href="_timeline_capture_command_handler_8cpp_source.xhtml#l00049">TimelineCaptureCommandHandler::ReadLabel()</a>.</p>
<div class="fragment"><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;{</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    BOOST_ASSERT(packetBuffer);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#a4f91fd7ff84cd6bbfbc8dd065bf493dd">ReadUint8</a>(packetBuffer-&gt;GetReadableData(), offset);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a4f91fd7ff84cd6bbfbc8dd065bf493dd"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a4f91fd7ff84cd6bbfbc8dd065bf493dd">armnn::profiling::ReadUint8</a></div><div class="ttdeci">uint8_t ReadUint8(const unsigned char *buffer, unsigned int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00275">ProfilingUtils.cpp:275</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4f91fd7ff84cd6bbfbc8dd065bf493dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f91fd7ff84cd6bbfbc8dd065bf493dd">&#9670;&nbsp;</a></span>ReadUint8() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t ReadUint8 </td>
          <td>(</td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00275">275</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    BOOST_ASSERT(buffer);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordflow">return</span> buffer[offset];</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a5e25734c0aca661f0fe02479743719a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e25734c0aca661f0fe02479743719a1">&#9670;&nbsp;</a></span>StringToSwTraceString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool armnn::profiling::StringToSwTraceString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; uint32_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputBuffer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00094">94</a> of file <a class="el" href="_profiling_utils_8hpp_source.xhtml">ProfilingUtils.hpp</a>.</p>

<p class="reference">References <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00033">armnn::numeric_cast()</a>, and <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">uint32_t_size</a>.</p>
<div class="fragment"><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="comment">// Converts the given string to an SWTrace &quot;string&quot; (i.e. a string of &quot;chars&quot;), and writes it into</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// the given buffer including the null-terminator. It also pads it to the next uint32_t if necessary</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// Clear the output buffer</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    outputBuffer.clear();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">// Check that the given string is a valid SWTrace &quot;string&quot; (i.e. a string of &quot;chars&quot;)</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">if</span> (!IsValidSwTraceString&lt;SwTracePolicy&gt;(s))</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// Prepare the output buffer</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordtype">size_t</span> s_size        = s.size() + 1;    <span class="comment">// The size of the string (in chars) plus the null-terminator</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a> = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="comment">// Output buffer size = StringLength (32 bit) + amount of complete 32bit words that fit into the string</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="comment">//                      + an additional 32bit word if there are remaining chars to complete the string</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">//                      (The rest of the 32bit word is then filled with the NULL terminator)</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">size_t</span> outBufferSize = 1 + (s_size / <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>) + (s_size % uint32_t_size != 0 ? 1 : 0);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    outputBuffer.resize(outBufferSize, <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// Write the SWTrace string to the output buffer</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    outputBuffer[0] = <a class="code" href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">boost::numeric_cast</a>&lt;uint32_t&gt;(s_size);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    std::memcpy(outputBuffer.data() + 1, s.data(), s_size);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a37fa39012e90d568df7f774cd6d1e956"><div class="ttname"><a href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00033">NumericCast.hpp:33</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aabcf5c25522e8a0542c95174056cfcac"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">armnn::profiling::uint32_t_size</a></div><div class="ttdeci">uint32_t uint32_t_size</div><div class="ttdef"><b>Definition:</b> <a href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">DirectoryCaptureCommandHandler.cpp:21</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af0cddaa4e116d294dacaaced90ca341c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0cddaa4e116d294dacaaced90ca341c">&#9670;&nbsp;</a></span>WriteBytes() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void armnn::profiling::WriteBytes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valueSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00089">89</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_timeline_tests_8cpp_source.xhtml#l00140">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00805">WriteTimelineEventBinary()</a>.</p>
<div class="fragment"><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    BOOST_ASSERT(packetBuffer);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a1c81dacff6eb2062571f7f4db1cb7617">WriteBytes</a>(packetBuffer-&gt;GetWritableData(), offset, value, valueSize);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a1c81dacff6eb2062571f7f4db1cb7617"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a1c81dacff6eb2062571f7f4db1cb7617">armnn::profiling::WriteBytes</a></div><div class="ttdeci">void WriteBytes(unsigned char *buffer, unsigned int offset, const void *value, unsigned int valueSize)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00140">ProfilingUtils.cpp:140</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1c81dacff6eb2062571f7f4db1cb7617"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c81dacff6eb2062571f7f4db1cb7617">&#9670;&nbsp;</a></span>WriteBytes() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WriteBytes </td>
          <td>(</td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valueSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00140">140</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    BOOST_ASSERT(buffer);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    BOOST_ASSERT(value);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; valueSize; i++, offset++)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        buffer[offset] = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(value) + i);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7024ffa58173d70426a51899d35266d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7024ffa58173d70426a51899d35266d7">&#9670;&nbsp;</a></span>WriteBytes() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void armnn::profiling::WriteBytes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1profiling_1_1_i_packet_buffer.xhtml">IPacketBuffer</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valueSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a27d1c992711722739250e2bbd9ce7ede"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27d1c992711722739250e2bbd9ce7ede">&#9670;&nbsp;</a></span>WriteTimelineEntityBinary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a> WriteTimelineEntityBinary </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>profilingGuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>remainingBufferSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>numberOfBytesWritten</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00517">517</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0ad0863d6c0a071cb52079344e64425773">BufferExhaustion</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0aa60852f204ed8028c1c58808b746d115">Ok</a>, <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">uint32_t_size</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00119">WriteUint32()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00112">WriteUint64()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_timeline_packet_tests_8cpp_source.xhtml#l00543">BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="_send_timeline_packet_8cpp_source.xhtml#l00081">SendTimelinePacket::SendTimelineEntityBinaryPacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;{</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="comment">// Initialize the output value</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    numberOfBytesWritten = 0;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="comment">// Check that the given buffer is valid</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordflow">if</span> (buffer == <span class="keyword">nullptr</span> || remainingBufferSize == 0)</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    {</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::BufferExhaustion;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    }</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="comment">// Utils</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a> = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint64_t_size = <span class="keyword">sizeof</span>(uint64_t);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="comment">// Calculate the length of the data (in bytes)</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timelineEntityDataLength = uint32_t_size + uint64_t_size;  <span class="comment">// decl_id + Profiling GUID</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="comment">// Check whether the timeline binary packet fits in the given buffer</span></div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keywordflow">if</span> (timelineEntityDataLength &gt; remainingBufferSize)</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    {</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::BufferExhaustion;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    }</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="comment">// Initialize the offset for writing in the buffer</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="comment">// Write the decl_Id to the buffer</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">WriteUint32</a>(buffer, offset, 1u);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="comment">// Write the timeline binary packet payload to the buffer</span></div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">WriteUint64</a>(buffer, offset, profilingGuid); <span class="comment">// Profiling GUID</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="comment">// Update the number of bytes written</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    numberOfBytesWritten = timelineEntityDataLength;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keywordflow">return</span> TimelinePacketStatus::Ok;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aa3e447531d9bdaad3da25f23edf18fb4"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">armnn::profiling::WriteUint32</a></div><div class="ttdeci">void WriteUint32(unsigned char *buffer, unsigned int offset, uint32_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00165">ProfilingUtils.cpp:165</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aabcf5c25522e8a0542c95174056cfcac"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">armnn::profiling::uint32_t_size</a></div><div class="ttdeci">uint32_t uint32_t_size</div><div class="ttdef"><b>Definition:</b> <a href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">DirectoryCaptureCommandHandler.cpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_af2bb4db604c56391c1361b32402c65a7"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">armnn::profiling::WriteUint64</a></div><div class="ttdeci">void WriteUint64(unsigned char *buffer, unsigned int offset, uint64_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00151">ProfilingUtils.cpp:151</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0a84cb02cb3580ed0bf872cf6b5c09ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a84cb02cb3580ed0bf872cf6b5c09ae">&#9670;&nbsp;</a></span>WriteTimelineEventBinary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a> WriteTimelineEventBinary </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>timestamp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::thread::id&#160;</td>
          <td class="paramname"><em>threadId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>profilingGuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>remainingBufferSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>numberOfBytesWritten</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00805">805</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0ad0863d6c0a071cb52079344e64425773">BufferExhaustion</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0aa60852f204ed8028c1c58808b746d115">Ok</a>, <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">uint32_t_size</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00089">WriteBytes()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00119">WriteUint32()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00112">WriteUint64()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_timeline_packet_tests_8cpp_source.xhtml#l00675">BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="_send_timeline_packet_8cpp_source.xhtml#l00087">SendTimelinePacket::SendTimelineEventBinaryPacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;{</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    <span class="comment">// Initialize the output value</span></div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    numberOfBytesWritten = 0;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <span class="comment">// Check that the given buffer is valid</span></div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    <span class="keywordflow">if</span> (buffer == <span class="keyword">nullptr</span> || remainingBufferSize == 0)</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    {</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::BufferExhaustion;</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    }</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    <span class="comment">// Utils</span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a> = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint64_t_size = <span class="keyword">sizeof</span>(uint64_t);</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> threadId_size = <span class="keyword">sizeof</span>(std::thread::id);</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    <span class="comment">// decl_id of the timeline message</span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    uint32_t declId = 4;</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    <span class="comment">// Calculate the length of the data (in bytes)</span></div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timelineEventDataLength = uint32_t_size + <span class="comment">// decl_id</span></div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                                           uint64_t_size + <span class="comment">// Timestamp</span></div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                                           threadId_size + <span class="comment">// Thread id</span></div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                                           uint64_t_size;  <span class="comment">// Profiling GUID</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <span class="comment">// Check whether the timeline binary packet fits in the given buffer</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <span class="keywordflow">if</span> (timelineEventDataLength &gt; remainingBufferSize)</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    {</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::BufferExhaustion;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    }</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <span class="comment">// Initialize the offset for writing in the buffer</span></div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <span class="comment">// Write the timeline binary payload to the buffer</span></div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">WriteUint32</a>(buffer, offset, declId); <span class="comment">// decl_id</span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">WriteUint64</a>(buffer, offset, timestamp); <span class="comment">// Timestamp</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    offset += uint64_t_size;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a1c81dacff6eb2062571f7f4db1cb7617">WriteBytes</a>(buffer, offset, &amp;threadId, threadId_size); <span class="comment">// Thread id</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    offset += threadId_size;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">WriteUint64</a>(buffer, offset, profilingGuid); <span class="comment">// Profiling GUID</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    offset += uint64_t_size;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <span class="comment">// Update the number of bytes written</span></div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    numberOfBytesWritten = timelineEventDataLength;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    <span class="keywordflow">return</span> TimelinePacketStatus::Ok;</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a1c81dacff6eb2062571f7f4db1cb7617"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a1c81dacff6eb2062571f7f4db1cb7617">armnn::profiling::WriteBytes</a></div><div class="ttdeci">void WriteBytes(unsigned char *buffer, unsigned int offset, const void *value, unsigned int valueSize)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00140">ProfilingUtils.cpp:140</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aa3e447531d9bdaad3da25f23edf18fb4"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">armnn::profiling::WriteUint32</a></div><div class="ttdeci">void WriteUint32(unsigned char *buffer, unsigned int offset, uint32_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00165">ProfilingUtils.cpp:165</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aabcf5c25522e8a0542c95174056cfcac"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">armnn::profiling::uint32_t_size</a></div><div class="ttdeci">uint32_t uint32_t_size</div><div class="ttdef"><b>Definition:</b> <a href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">DirectoryCaptureCommandHandler.cpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_af2bb4db604c56391c1361b32402c65a7"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">armnn::profiling::WriteUint64</a></div><div class="ttdeci">void WriteUint64(unsigned char *buffer, unsigned int offset, uint64_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00151">ProfilingUtils.cpp:151</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac42b224ad252c5c31ee01c6b77fa4737"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac42b224ad252c5c31ee01c6b77fa4737">&#9670;&nbsp;</a></span>WriteTimelineEventClassBinary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a> WriteTimelineEventClassBinary </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>profilingGuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>remainingBufferSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>numberOfBytesWritten</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00761">761</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0ad0863d6c0a071cb52079344e64425773">BufferExhaustion</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0aa60852f204ed8028c1c58808b746d115">Ok</a>, <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">uint32_t_size</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00119">WriteUint32()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00112">WriteUint64()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_timeline_packet_tests_8cpp_source.xhtml#l00609">BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="_send_timeline_packet_8cpp_source.xhtml#l00097">SendTimelinePacket::SendTimelineEventClassBinaryPacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;{</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <span class="comment">// Initialize the output value</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    numberOfBytesWritten = 0;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    <span class="comment">// Check that the given buffer is valid</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    <span class="keywordflow">if</span> (buffer == <span class="keyword">nullptr</span> || remainingBufferSize == 0)</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    {</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::BufferExhaustion;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    }</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="comment">// Utils</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a> = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint64_t_size = <span class="keyword">sizeof</span>(uint64_t);</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="comment">// decl_id of the timeline message</span></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    uint32_t declId = 2;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <span class="comment">// Calculate the length of the data (in bytes)</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dataSize = uint32_t_size + uint64_t_size; <span class="comment">// decl_id + Profiling GUID</span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <span class="comment">// Check whether the timeline binary fits in the given buffer</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <span class="keywordflow">if</span> (dataSize &gt; remainingBufferSize)</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    {</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::BufferExhaustion;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    }</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="comment">// Initialize the offset for writing in the buffer</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <span class="comment">// Write the timeline binary payload to the buffer</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">WriteUint32</a>(buffer, offset, declId);        <span class="comment">// decl_id</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">WriteUint64</a>(buffer, offset, profilingGuid); <span class="comment">// Profiling GUID</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <span class="comment">// Update the number of bytes written</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    numberOfBytesWritten = dataSize;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    <span class="keywordflow">return</span> TimelinePacketStatus::Ok;</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aa3e447531d9bdaad3da25f23edf18fb4"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">armnn::profiling::WriteUint32</a></div><div class="ttdeci">void WriteUint32(unsigned char *buffer, unsigned int offset, uint32_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00165">ProfilingUtils.cpp:165</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aabcf5c25522e8a0542c95174056cfcac"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">armnn::profiling::uint32_t_size</a></div><div class="ttdeci">uint32_t uint32_t_size</div><div class="ttdef"><b>Definition:</b> <a href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">DirectoryCaptureCommandHandler.cpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_af2bb4db604c56391c1361b32402c65a7"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">armnn::profiling::WriteUint64</a></div><div class="ttdeci">void WriteUint64(unsigned char *buffer, unsigned int offset, uint64_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00151">ProfilingUtils.cpp:151</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3583b5fbfe555acc552a63458e665939"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3583b5fbfe555acc552a63458e665939">&#9670;&nbsp;</a></span>WriteTimelineLabelBinaryPacket()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a> WriteTimelineLabelBinaryPacket </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>profilingGuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>label</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>remainingBufferSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>numberOfBytesWritten</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00454">454</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0ad0863d6c0a071cb52079344e64425773">BufferExhaustion</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0a902b0d55fddef6f8d651fe1035b7d4bd">Error</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00033">armnn::numeric_cast()</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0aa60852f204ed8028c1c58808b746d115">Ok</a>, <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">uint32_t_size</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00119">WriteUint32()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00112">WriteUint64()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_timeline_packet_tests_8cpp_source.xhtml#l00015">BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="_send_timeline_packet_8cpp_source.xhtml#l00103">SendTimelinePacket::SendTimelineLabelBinaryPacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;{</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="comment">// Initialize the output value</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    numberOfBytesWritten = 0;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="comment">// Check that the given buffer is valid</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keywordflow">if</span> (buffer == <span class="keyword">nullptr</span> || remainingBufferSize == 0)</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    {</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::BufferExhaustion;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    }</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="comment">// Utils</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a> = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint64_t_size = <span class="keyword">sizeof</span>(uint64_t);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="comment">// Convert the label into a SWTrace string</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    std::vector&lt;uint32_t&gt; swTraceLabel;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keywordtype">bool</span> result = StringToSwTraceString&lt;SwTraceCharPolicy&gt;(label, swTraceLabel);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordflow">if</span> (!result)</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    {</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::Error;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    }</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="comment">// Calculate the size of the SWTrace string label (in bytes)</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> swTraceLabelSize = <a class="code" href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">boost::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(swTraceLabel.size()) * uint32_t_size;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="comment">// Calculate the length of the data (in bytes)</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timelineLabelPacketDataLength = uint32_t_size +   <span class="comment">// decl_Id</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                                                 uint64_t_size +   <span class="comment">// Profiling GUID</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                                                 swTraceLabelSize; <span class="comment">// Label</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="comment">// Check whether the timeline binary packet fits in the given buffer</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keywordflow">if</span> (timelineLabelPacketDataLength &gt; remainingBufferSize)</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    {</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::BufferExhaustion;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    }</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="comment">// Initialize the offset for writing in the buffer</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="comment">// Write decl_Id to the buffer</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">WriteUint32</a>(buffer, offset, 0u);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="comment">// Write the timeline binary packet payload to the buffer</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">WriteUint64</a>(buffer, offset, profilingGuid); <span class="comment">// Profiling GUID</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    offset += uint64_t_size;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="keywordflow">for</span> (uint32_t swTraceLabelWord : swTraceLabel)</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    {</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">WriteUint32</a>(buffer, offset, swTraceLabelWord); <span class="comment">// Label</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    }</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="comment">// Update the number of bytes written</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    numberOfBytesWritten = timelineLabelPacketDataLength;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keywordflow">return</span> TimelinePacketStatus::Ok;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aa3e447531d9bdaad3da25f23edf18fb4"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">armnn::profiling::WriteUint32</a></div><div class="ttdeci">void WriteUint32(unsigned char *buffer, unsigned int offset, uint32_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00165">ProfilingUtils.cpp:165</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a37fa39012e90d568df7f774cd6d1e956"><div class="ttname"><a href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00033">NumericCast.hpp:33</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aabcf5c25522e8a0542c95174056cfcac"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">armnn::profiling::uint32_t_size</a></div><div class="ttdeci">uint32_t uint32_t_size</div><div class="ttdef"><b>Definition:</b> <a href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">DirectoryCaptureCommandHandler.cpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_af2bb4db604c56391c1361b32402c65a7"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">armnn::profiling::WriteUint64</a></div><div class="ttdeci">void WriteUint64(unsigned char *buffer, unsigned int offset, uint64_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00151">ProfilingUtils.cpp:151</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aecc8787efb41f033785074f2d362895a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aecc8787efb41f033785074f2d362895a">&#9670;&nbsp;</a></span>WriteTimelineMessageDirectoryPackage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a> WriteTimelineMessageDirectoryPackage </td>
          <td>(</td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>remainingBufferSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>numberOfBytesWritten</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00633">633</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0ad0863d6c0a071cb52079344e64425773">BufferExhaustion</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00404">CreateTimelinePacketHeader()</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0a902b0d55fddef6f8d651fe1035b7d4bd">Error</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00033">armnn::numeric_cast()</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0aa60852f204ed8028c1c58808b746d115">Ok</a>, <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">uint32_t_size</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00119">WriteUint32()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00133">WriteUint8()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_timeline_packet_tests_8cpp_source.xhtml#l00396">BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="_send_timeline_packet_8cpp_source.xhtml#l00122">SendTimelinePacket::SendTimelineMessageDirectoryPackage()</a>.</p>
<div class="fragment"><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;{</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="comment">// Initialize the output value</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    numberOfBytesWritten = 0;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="comment">// Check that the given buffer is valid</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keywordflow">if</span> (buffer == <span class="keyword">nullptr</span> || remainingBufferSize == 0)</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    {</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::BufferExhaustion;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    }</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="comment">// Utils</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint8_t_size  = <span class="keyword">sizeof</span>(uint8_t);</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a> = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint64_t_size = <span class="keyword">sizeof</span>(uint64_t);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> threadId_size = <span class="keyword">sizeof</span>(std::thread::id);</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="comment">// The payload/data of the packet consists of swtrace event definitions encoded according</span></div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="comment">// to the swtrace directory specification. The messages being the five defined below:</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="comment">// |  decl_id  |     decl_name       |      ui_name          |  arg_types  |            arg_names                |</span></div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <span class="comment">// |-----------|---------------------|-----------------------|-------------|-------------------------------------|</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="comment">// |    0      |   declareLabel      |   declare label       |    ps       |  guid,value                         |</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="comment">// |    1      |   declareEntity     |   declare entity      |    p        |  guid                               |</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="comment">// |    2      | declareEventClass   |  declare event class  |    p        |  guid                               |</span></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="comment">// |    3      | declareRelationship | declare relationship  |    Ippp     |  relationshipType,relationshipGuid, |</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="comment">// |           |                     |                       |             |  headGuid,tailGuid                  |</span></div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="comment">// |    4      |   declareEvent      |   declare event       |    @tp      |  timestamp,threadId,eventGuid       |</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    std::vector&lt;std::vector&lt;std::string&gt;&gt; timelineDirectoryMessages</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    {</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        { <span class="stringliteral">&quot;0&quot;</span>, <span class="stringliteral">&quot;declareLabel&quot;</span>, <span class="stringliteral">&quot;declare label&quot;</span>, <span class="stringliteral">&quot;ps&quot;</span>, <span class="stringliteral">&quot;guid,value&quot;</span> },</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        { <span class="stringliteral">&quot;1&quot;</span>, <span class="stringliteral">&quot;declareEntity&quot;</span>, <span class="stringliteral">&quot;declare entity&quot;</span>, <span class="stringliteral">&quot;p&quot;</span>, <span class="stringliteral">&quot;guid&quot;</span> },</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        { <span class="stringliteral">&quot;2&quot;</span>, <span class="stringliteral">&quot;declareEventClass&quot;</span>, <span class="stringliteral">&quot;declare event class&quot;</span>, <span class="stringliteral">&quot;p&quot;</span>, <span class="stringliteral">&quot;guid&quot;</span> },</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        { <span class="stringliteral">&quot;3&quot;</span>, <span class="stringliteral">&quot;declareRelationship&quot;</span>, <span class="stringliteral">&quot;declare relationship&quot;</span>, <span class="stringliteral">&quot;Ippp&quot;</span>,</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;          <span class="stringliteral">&quot;relationshipType,relationshipGuid,headGuid,tailGuid&quot;</span> },</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        { <span class="stringliteral">&quot;4&quot;</span>, <span class="stringliteral">&quot;declareEvent&quot;</span>, <span class="stringliteral">&quot;declare event&quot;</span>, <span class="stringliteral">&quot;@tp&quot;</span>, <span class="stringliteral">&quot;timestamp,threadId,eventGuid&quot;</span> }</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    };</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <span class="comment">// Build the message declarations</span></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    std::vector&lt;uint32_t&gt; swTraceBuffer;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; directoryComponent : timelineDirectoryMessages)</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    {</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        <span class="comment">// decl_id</span></div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        uint32_t declId = 0;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        {</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;            declId = <a class="code" href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">boost::numeric_cast</a>&lt;uint32_t&gt;(std::stoul(directoryComponent[0]));</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        }</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp;)</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        {</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            <span class="keywordflow">return</span> TimelinePacketStatus::Error;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        }</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        swTraceBuffer.push_back(declId);</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        <span class="keywordtype">bool</span> result = <span class="keyword">true</span>;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        result &amp;= ConvertDirectoryComponent&lt;SwTraceNameCharPolicy&gt;(directoryComponent[1], swTraceBuffer); <span class="comment">// decl_name</span></div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        result &amp;= ConvertDirectoryComponent&lt;SwTraceCharPolicy&gt;    (directoryComponent[2], swTraceBuffer); <span class="comment">// ui_name</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        result &amp;= ConvertDirectoryComponent&lt;SwTraceTypeCharPolicy&gt;(directoryComponent[3], swTraceBuffer); <span class="comment">// arg_types</span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        result &amp;= ConvertDirectoryComponent&lt;SwTraceCharPolicy&gt;    (directoryComponent[4], swTraceBuffer); <span class="comment">// arg_names</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        <span class="keywordflow">if</span> (!result)</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        {</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;            <span class="keywordflow">return</span> TimelinePacketStatus::Error;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        }</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    }</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dataLength = 3 * uint8_t_size +  <span class="comment">// Stream header (3 bytes)</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                              <a class="code" href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">boost::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(swTraceBuffer.size()) *</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                                  uint32_t_size; <span class="comment">// Trace directory (5 messages)</span></div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="comment">// Calculate the timeline directory binary packet size (in bytes)</span></div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timelineDirectoryPacketSize = 2 * uint32_t_size + <span class="comment">// Header (2 words)</span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                                               dataLength;         <span class="comment">// Payload</span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="comment">// Check whether the timeline directory binary packet fits in the given buffer</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="keywordflow">if</span> (timelineDirectoryPacketSize &gt; remainingBufferSize)</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    {</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::BufferExhaustion;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    }</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="comment">// Create packet header</span></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keyword">auto</span> packetHeader = <a class="code" href="namespacearmnn_1_1profiling.xhtml#aca8b4bad45009e1d42dc8de69a0b7e2c">CreateTimelinePacketHeader</a>(1, 0, 0, 0, 0, boost::numeric_cast&lt;uint32_t&gt;(dataLength));</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="comment">// Initialize the offset for writing in the buffer</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="comment">// Write the timeline binary packet header to the buffer</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">WriteUint32</a>(buffer, offset, packetHeader.first);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">WriteUint32</a>(buffer, offset, packetHeader.second);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="comment">// Write the stream header</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    uint8_t streamVersion = 4;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    uint8_t pointerBytes  = <a class="code" href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">boost::numeric_cast</a>&lt;uint8_t&gt;(uint64_t_size); <span class="comment">// All GUIDs are uint64_t</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    uint8_t threadIdBytes = <a class="code" href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">boost::numeric_cast</a>&lt;uint8_t&gt;(threadId_size);</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="keywordflow">switch</span> (threadIdBytes)</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    {</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="keywordflow">case</span> 4: <span class="comment">// Typically Windows and Android</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keywordflow">case</span> 8: <span class="comment">// Typically Linux</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        <span class="keywordflow">break</span>; <span class="comment">// Valid values</span></div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::Error; <span class="comment">// Invalid value</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    }</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#ae00e76f4552e2dad3bdcf1dd72100b4f">WriteUint8</a>(buffer, offset, streamVersion);</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    offset += uint8_t_size;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#ae00e76f4552e2dad3bdcf1dd72100b4f">WriteUint8</a>(buffer, offset, pointerBytes);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    offset += uint8_t_size;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#ae00e76f4552e2dad3bdcf1dd72100b4f">WriteUint8</a>(buffer, offset, threadIdBytes);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    offset += uint8_t_size;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <span class="comment">// Write the SWTrace directory</span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    uint32_t numberOfDeclarations = <a class="code" href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">boost::numeric_cast</a>&lt;uint32_t&gt;(timelineDirectoryMessages.size());</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">WriteUint32</a>(buffer, offset, numberOfDeclarations); <span class="comment">// Number of declarations</span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <span class="keywordflow">for</span> (uint32_t i : swTraceBuffer)</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    {</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;        <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">WriteUint32</a>(buffer, offset, i); <span class="comment">// Message declarations</span></div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    }</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    <span class="comment">// Update the number of bytes written</span></div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    numberOfBytesWritten = timelineDirectoryPacketSize;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    <span class="keywordflow">return</span> TimelinePacketStatus::Ok;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aa3e447531d9bdaad3da25f23edf18fb4"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">armnn::profiling::WriteUint32</a></div><div class="ttdeci">void WriteUint32(unsigned char *buffer, unsigned int offset, uint32_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00165">ProfilingUtils.cpp:165</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aca8b4bad45009e1d42dc8de69a0b7e2c"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aca8b4bad45009e1d42dc8de69a0b7e2c">armnn::profiling::CreateTimelinePacketHeader</a></div><div class="ttdeci">std::pair&lt; uint32_t, uint32_t &gt; CreateTimelinePacketHeader(uint32_t packetFamily, uint32_t packetClass, uint32_t packetType, uint32_t streamId, uint32_t sequenceNumbered, uint32_t dataLength)</div><div class="ttdoc">Creates a timeline packet header. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00404">ProfilingUtils.cpp:404</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ae00e76f4552e2dad3bdcf1dd72100b4f"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ae00e76f4552e2dad3bdcf1dd72100b4f">armnn::profiling::WriteUint8</a></div><div class="ttdeci">void WriteUint8(unsigned char *buffer, unsigned int offset, uint8_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00183">ProfilingUtils.cpp:183</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a37fa39012e90d568df7f774cd6d1e956"><div class="ttname"><a href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00033">NumericCast.hpp:33</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aabcf5c25522e8a0542c95174056cfcac"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">armnn::profiling::uint32_t_size</a></div><div class="ttdeci">uint32_t uint32_t_size</div><div class="ttdef"><b>Definition:</b> <a href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">DirectoryCaptureCommandHandler.cpp:21</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2af6f2d1806265a2c84ca05ea8a62fb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2af6f2d1806265a2c84ca05ea8a62fb8">&#9670;&nbsp;</a></span>WriteTimelineRelationshipBinary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0">TimelinePacketStatus</a> WriteTimelineRelationshipBinary </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2">ProfilingRelationshipType</a>&#160;</td>
          <td class="paramname"><em>relationshipType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>relationshipGuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>headGuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>tailGuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>remainingBufferSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>numberOfBytesWritten</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00560">560</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0ad0863d6c0a071cb52079344e64425773">BufferExhaustion</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a77ac530ff577e3b84e0761fa02b2520b">DataLink</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a5265db1a79410fbe447a3faa98e7b914">ExecutionLink</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a47d6c060a0aa40c6fd018f12b7c96f1f">LabelLink</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acdfc0158f71b04526602ef51444da4c0aa60852f204ed8028c1c58808b746d115">Ok</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2afc04d023850b425f3b9c62b3a55dc110">RetentionLink</a>, <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">uint32_t_size</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00119">WriteUint32()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00112">WriteUint64()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_timeline_packet_tests_8cpp_source.xhtml#l00119">BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="_send_timeline_packet_8cpp_source.xhtml#l00110">SendTimelinePacket::SendTimelineRelationshipBinaryPacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;{</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="comment">// Initialize the output value</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    numberOfBytesWritten = 0;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="comment">// Check that the given buffer is valid</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <span class="keywordflow">if</span> (buffer == <span class="keyword">nullptr</span> || remainingBufferSize == 0)</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    {</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::BufferExhaustion;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    }</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="comment">// Utils</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a> = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint64_t_size = <span class="keyword">sizeof</span>(uint64_t);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="comment">// Calculate the length of the data (in bytes)</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timelineRelationshipDataLength = uint32_t_size * 2 + <span class="comment">// decl_id + Relationship Type</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                                                  uint64_t_size * 3;  <span class="comment">// Relationship GUID + Head GUID + tail GUID</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="comment">// Check whether the timeline binary fits in the given buffer</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <span class="keywordflow">if</span> (timelineRelationshipDataLength &gt; remainingBufferSize)</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    {</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <span class="keywordflow">return</span> TimelinePacketStatus::BufferExhaustion;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    }</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="comment">// Initialize the offset for writing in the buffer</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    uint32_t relationshipTypeUint = 0;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keywordflow">switch</span> (relationshipType)</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    {</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <span class="keywordflow">case</span> ProfilingRelationshipType::RetentionLink:</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            relationshipTypeUint = 0;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        <span class="keywordflow">case</span> ProfilingRelationshipType::ExecutionLink:</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            relationshipTypeUint = 1;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <span class="keywordflow">case</span> ProfilingRelationshipType::DataLink:</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            relationshipTypeUint = 2;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        <span class="keywordflow">case</span> ProfilingRelationshipType::LabelLink:</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            relationshipTypeUint = 3;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Unknown relationship type given.&quot;</span>);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    }</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="comment">// Write the timeline binary payload to the buffer</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="comment">// decl_id of the timeline message</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    uint32_t declId = 3;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">WriteUint32</a>(buffer, offset, declId); <span class="comment">// decl_id</span></div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">WriteUint32</a>(buffer, offset, relationshipTypeUint); <span class="comment">// Relationship Type</span></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    offset += <a class="code" href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">uint32_t_size</a>;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">WriteUint64</a>(buffer, offset, relationshipGuid); <span class="comment">// GUID of this relationship</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    offset += uint64_t_size;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">WriteUint64</a>(buffer, offset, headGuid); <span class="comment">// head of relationship GUID</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    offset += uint64_t_size;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">WriteUint64</a>(buffer, offset, tailGuid); <span class="comment">// tail of relationship GUID</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="comment">// Update the number of bytes written</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    numberOfBytesWritten = timelineRelationshipDataLength;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="keywordflow">return</span> TimelinePacketStatus::Ok;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aa3e447531d9bdaad3da25f23edf18fb4"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">armnn::profiling::WriteUint32</a></div><div class="ttdeci">void WriteUint32(unsigned char *buffer, unsigned int offset, uint32_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00165">ProfilingUtils.cpp:165</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aabcf5c25522e8a0542c95174056cfcac"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aabcf5c25522e8a0542c95174056cfcac">armnn::profiling::uint32_t_size</a></div><div class="ttdeci">uint32_t uint32_t_size</div><div class="ttdef"><b>Definition:</b> <a href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">DirectoryCaptureCommandHandler.cpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_af2bb4db604c56391c1361b32402c65a7"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">armnn::profiling::WriteUint64</a></div><div class="ttdeci">void WriteUint64(unsigned char *buffer, unsigned int offset, uint64_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00151">ProfilingUtils.cpp:151</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae5ace88c65e65ab7cf5572613601a60d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5ace88c65e65ab7cf5572613601a60d">&#9670;&nbsp;</a></span>WriteUint16() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WriteUint16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00126">126</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_tests_8cpp_source.xhtml#l01683">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_file_only_profiling_connection_8cpp_source.xhtml#l00032">FileOnlyProfilingConnection::Close()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, <a class="el" href="_backend_profiling_tests_8cpp_source.xhtml#l00091">PacketWriter()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00802">SendCounterPacket::SendPeriodicCounterCapturePacket()</a>, <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00181">GatordMockService::SendPeriodicCounterSelectionList()</a>, and <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00852">SendCounterPacket::SendPeriodicCounterSelectionPacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    BOOST_ASSERT(packetBuffer);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a0cf33f59f4e39a415e08497644b0b6f8">WriteUint16</a>(packetBuffer-&gt;GetWritableData(), offset, value);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a0cf33f59f4e39a415e08497644b0b6f8"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a0cf33f59f4e39a415e08497644b0b6f8">armnn::profiling::WriteUint16</a></div><div class="ttdeci">void WriteUint16(unsigned char *buffer, unsigned int offset, uint16_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00175">ProfilingUtils.cpp:175</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0cf33f59f4e39a415e08497644b0b6f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cf33f59f4e39a415e08497644b0b6f8">&#9670;&nbsp;</a></span>WriteUint16() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WriteUint16 </td>
          <td>(</td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00175">175</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    BOOST_ASSERT(buffer);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    buffer[offset]     = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>(value &amp; 0xFF);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    buffer[offset + 1] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>((value &gt;&gt; 8) &amp; 0xFF);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3e638748a39d46e2943dfcef94dcb828"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e638748a39d46e2943dfcef94dcb828">&#9670;&nbsp;</a></span>WriteUint32() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WriteUint32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00119">119</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00018">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_file_only_profiling_connection_8cpp_source.xhtml#l00032">FileOnlyProfilingConnection::Close()</a>, <a class="el" href="_send_timeline_packet_8cpp_source.xhtml#l00014">SendTimelinePacket::Commit()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, <a class="el" href="_backend_profiling_tests_8cpp_source.xhtml#l00091">PacketWriter()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00528">SendCounterPacket::SendCounterDirectoryPacket()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00802">SendCounterPacket::SendPeriodicCounterCapturePacket()</a>, <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00181">GatordMockService::SendPeriodicCounterSelectionList()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00852">SendCounterPacket::SendPeriodicCounterSelectionPacket()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00029">SendCounterPacket::SendStreamMetaDataPacket()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00517">WriteTimelineEntityBinary()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00805">WriteTimelineEventBinary()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00761">WriteTimelineEventClassBinary()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00454">WriteTimelineLabelBinaryPacket()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00633">WriteTimelineMessageDirectoryPackage()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00560">WriteTimelineRelationshipBinary()</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    BOOST_ASSERT(packetBuffer);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">WriteUint32</a>(packetBuffer-&gt;GetWritableData(), offset, value);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aa3e447531d9bdaad3da25f23edf18fb4"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aa3e447531d9bdaad3da25f23edf18fb4">armnn::profiling::WriteUint32</a></div><div class="ttdeci">void WriteUint32(unsigned char *buffer, unsigned int offset, uint32_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00165">ProfilingUtils.cpp:165</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa3e447531d9bdaad3da25f23edf18fb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3e447531d9bdaad3da25f23edf18fb4">&#9670;&nbsp;</a></span>WriteUint32() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WriteUint32 </td>
          <td>(</td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00165">165</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;{</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    BOOST_ASSERT(buffer);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    buffer[offset]     = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>(value &amp; 0xFF);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    buffer[offset + 1] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>((value &gt;&gt; 8) &amp; 0xFF);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    buffer[offset + 2] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>((value &gt;&gt; 16) &amp; 0xFF);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    buffer[offset + 3] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>((value &gt;&gt; 24) &amp; 0xFF);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a79be042e55fdf16ca562f14cd15d9aa6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79be042e55fdf16ca562f14cd15d9aa6">&#9670;&nbsp;</a></span>WriteUint64() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void armnn::profiling::WriteUint64 </td>
          <td>(</td>
          <td class="paramtype">const std::unique_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_i_packet_buffer.xhtml">IPacketBuffer</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00112">112</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gatord_mock_tests_8cpp_source.xhtml#l00027">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00802">SendCounterPacket::SendPeriodicCounterCapturePacket()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00517">WriteTimelineEntityBinary()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00805">WriteTimelineEventBinary()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00761">WriteTimelineEventClassBinary()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00454">WriteTimelineLabelBinaryPacket()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00560">WriteTimelineRelationshipBinary()</a>.</p>
<div class="fragment"><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    BOOST_ASSERT(packetBuffer);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">WriteUint64</a>(packetBuffer-&gt;GetWritableData(), offset, value);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_af2bb4db604c56391c1361b32402c65a7"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#af2bb4db604c56391c1361b32402c65a7">armnn::profiling::WriteUint64</a></div><div class="ttdeci">void WriteUint64(unsigned char *buffer, unsigned int offset, uint64_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00151">ProfilingUtils.cpp:151</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af2bb4db604c56391c1361b32402c65a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2bb4db604c56391c1361b32402c65a7">&#9670;&nbsp;</a></span>WriteUint64() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WriteUint64 </td>
          <td>(</td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00151">151</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;{</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    BOOST_ASSERT(buffer);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    buffer[offset]     = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>(value &amp; 0xFF);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    buffer[offset + 1] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>((value &gt;&gt; 8) &amp; 0xFF);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    buffer[offset + 2] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>((value &gt;&gt; 16) &amp; 0xFF);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    buffer[offset + 3] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>((value &gt;&gt; 24) &amp; 0xFF);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    buffer[offset + 4] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>((value &gt;&gt; 32) &amp; 0xFF);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    buffer[offset + 5] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>((value &gt;&gt; 40) &amp; 0xFF);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    buffer[offset + 6] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>((value &gt;&gt; 48) &amp; 0xFF);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    buffer[offset + 7] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>((value &gt;&gt; 56) &amp; 0xFF);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3b0223f6d6877fe5852c93c4670e32c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b0223f6d6877fe5852c93c4670e32c6">&#9670;&nbsp;</a></span>WriteUint64() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void armnn::profiling::WriteUint64 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af63b6e5ffc769286c32d55a090b1602a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af63b6e5ffc769286c32d55a090b1602a">&#9670;&nbsp;</a></span>WriteUint8() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WriteUint8 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00133">133</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00126">ConvertDirectoryComponent()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00633">WriteTimelineMessageDirectoryPackage()</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    BOOST_ASSERT(packetBuffer);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#ae00e76f4552e2dad3bdcf1dd72100b4f">WriteUint8</a>(packetBuffer-&gt;GetWritableData(), offset, value);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ae00e76f4552e2dad3bdcf1dd72100b4f"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ae00e76f4552e2dad3bdcf1dd72100b4f">armnn::profiling::WriteUint8</a></div><div class="ttdeci">void WriteUint8(unsigned char *buffer, unsigned int offset, uint8_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00183">ProfilingUtils.cpp:183</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae00e76f4552e2dad3bdcf1dd72100b4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae00e76f4552e2dad3bdcf1dd72100b4f">&#9670;&nbsp;</a></span>WriteUint8() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WriteUint8 </td>
          <td>(</td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00183">183</a> of file <a class="el" href="_profiling_utils_8cpp_source.xhtml">ProfilingUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    BOOST_ASSERT(buffer);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    buffer[offset] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span><span class="keyword">&gt;</span>(value);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a2fd55777ec061a6c6df855677c165a03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fd55777ec061a6c6df855677c165a03">&#9670;&nbsp;</a></span>uint16_t_size</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t uint16_t_size = sizeof(uint16_t)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml#l00020">20</a> of file <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml">DirectoryCaptureCommandHandler.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_file_only_profiling_connection_8cpp_source.xhtml#l00032">FileOnlyProfilingConnection::Close()</a>, <a class="el" href="_stream_metadata_command_handler_8cpp_source.xhtml#l00057">armnn::gatordmock::ReadString()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00802">SendCounterPacket::SendPeriodicCounterCapturePacket()</a>, and <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00852">SendCounterPacket::SendPeriodicCounterSelectionPacket()</a>.</p>

</div>
</div>
<a id="aabcf5c25522e8a0542c95174056cfcac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabcf5c25522e8a0542c95174056cfcac">&#9670;&nbsp;</a></span>uint32_t_size</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t uint32_t_size = sizeof(uint32_t)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml#l00021">21</a> of file <a class="el" href="_directory_capture_command_handler_8cpp_source.xhtml">DirectoryCaptureCommandHandler.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_send_counter_packet_tests_8cpp_source.xhtml#l00512">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00310">CalculateSizeOfPaddedSwString()</a>, <a class="el" href="_file_only_profiling_connection_8cpp_source.xhtml#l00032">FileOnlyProfilingConnection::Close()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00174">SendCounterPacket::CreateCategoryRecord()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00376">SendCounterPacket::CreateEventRecord()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00015">OffsetToNextWord()</a>, <a class="el" href="_stream_metadata_command_handler_8cpp_source.xhtml#l00057">armnn::gatordmock::ReadString()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00320">ReadSwTraceMessage()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00528">SendCounterPacket::SendCounterDirectoryPacket()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00802">SendCounterPacket::SendPeriodicCounterCapturePacket()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00852">SendCounterPacket::SendPeriodicCounterSelectionPacket()</a>, <a class="el" href="_timeline_tests_8cpp_source.xhtml#l00023">SendTimelinePacketToCommandHandler()</a>, <a class="el" href="_profiling_utils_8hpp_source.xhtml#l00094">StringToSwTraceString()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00201">VerifyTimelineEntityBinaryPacketData()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00232">VerifyTimelineEventBinaryPacket()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00097">VerifyTimelineEventClassBinaryPacketData()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00028">VerifyTimelineHeaderBinary()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00056">VerifyTimelineLabelBinaryPacketData()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00120">VerifyTimelineRelationshipBinaryPacketData()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00517">WriteTimelineEntityBinary()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00805">WriteTimelineEventBinary()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00761">WriteTimelineEventClassBinary()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00454">WriteTimelineLabelBinaryPacket()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00633">WriteTimelineMessageDirectoryPackage()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00560">WriteTimelineRelationshipBinary()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1profiling.xhtml">profiling</a></li>
    <li class="footer">Generated on Fri Mar 13 2020 16:09:20 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
