<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/layerTests/FullyConnectedTestImpl.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_fully_connected_test_impl_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">FullyConnectedTestImpl.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_fully_connected_test_impl_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_fully_connected_test_impl_8hpp.xhtml">FullyConnectedTestImpl.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_quantize_helper_8hpp.xhtml">QuantizeHelper.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_cpu_tensor_handle_8hpp.xhtml">backendsCommon/CpuTensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_data_type_utils_8hpp.xhtml">backendsCommon/test/DataTypeUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_copy_utils_8hpp.xhtml">backendsCommon/test/TensorCopyUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_workload_test_utils_8hpp.xhtml">backendsCommon/test/WorkloadTestUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_helpers_8hpp.xhtml">test/TensorHelpers.hpp</a>&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">// Implementation templates</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> B&gt;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="_fully_connected_test_impl_8cpp.xhtml#a85031832a04444e2f419a746b4c59345">   24</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 2&gt;</a> <a class="code" href="_fully_connected_test_impl_8cpp.xhtml#a85031832a04444e2f419a746b4c59345">SimpleFullyConnectedTestImpl</a>(</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> weightsDesc,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> biasesDesc,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        boost::multi_array&lt;T, 2&gt;&amp; weights,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        boost::multi_array&lt;B, 1&gt;&amp; bias,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        boost::multi_array&lt;T, 4&gt;&amp; input,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordtype">bool</span> biasEnabled,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordtype">bool</span> transposeWeights)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">armnn::FullyConnectedQueueDescriptor</a> data;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> info;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">armnn::ScopedCpuTensorHandle</a> weightsTensor(weightsDesc);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">armnn::ScopedCpuTensorHandle</a> biasTensor(biasesDesc);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;weightsTensor, &amp;weights[0][0]);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;biasTensor, &amp;bias[0]);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    data.<a class="code" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml#a3369b66d9316a773a41711e3f590c041">m_Weight</a> = &amp;weightsTensor;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    data.<a class="code" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml#ab3437cee6b0687812104fc1b37cbe8b3">m_Bias</a> = &amp;biasTensor;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = biasEnabled;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#a281fcaec86e17c97f7b8402633f6b55a">m_TransposeWeightMatrix</a> = transposeWeights;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a1c193739520e08f686b347ff795ad2fe">CreateFullyConnected</a>(data, info);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 2&gt;</a> result(outputTensorInfo);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), &amp;input[0][0][0][0]);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    ExecuteWorkload(*workload, memoryManager);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;result.<a class="code" href="struct_layer_test_result.xhtml#ac9d44d346bb7c89f7a7aa31d2bee947f">output</a>[0][0], outputHandle.get());</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="_fully_connected_test_impl_8hpp.xhtml#a25b72d9cbe9cca2c89ba997e6f2cfb87">   71</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 2&gt;</a> <a class="code" href="_fully_connected_test_impl_8cpp.xhtml#a25b72d9cbe9cca2c89ba997e6f2cfb87">FullyConnectedTest</a>(</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordtype">bool</span> biasEnabled)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth = 3u;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = 2u;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels = 1u;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = inputWidth * inputHeight * inputChannels;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannels = 2u;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({ 1, inputChannels, inputHeight, inputWidth }, ArmnnType);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.1f);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    inputTensorInfo.SetQuantizationOffset(63);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({ 1, outputChannels }, ArmnnType);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(5.f);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    outputTensorInfo.SetQuantizationOffset(biasEnabled ? -50 : 10);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> weightsDesc({ outputChannels, inputSize }, ArmnnType);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    weightsDesc.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.2f);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    weightsDesc.SetQuantizationOffset(93);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> biasesDesc({ outputChannels }, <a class="code" href="namespacearmnn.xhtml#a83c4a275acf59f62b8387f389d0929d5">GetBiasTypeFromWeightsType</a>(weightsDesc.GetDataType()).value());</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    biasesDesc.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(inputTensorInfo.GetQuantizationScale() * weightsDesc.GetQuantizationScale());</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    biasesDesc.SetQuantizationOffset(0);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 2&gt;</a> result(outputTensorInfo);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">auto</span> input = MakeTensor&lt;T, 4&gt;(inputTensorInfo, ConvertToDataType&lt;ArmnnType&gt;(</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            -1.2f, 6.1f, -3.5f,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            18.8f, -5.5f, 2.9f</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        },</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        inputTensorInfo));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">auto</span> weights = MakeTensor&lt;T, 2&gt;(weightsDesc, ConvertToDataType&lt;ArmnnType&gt;(</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            -8.4f, 20.0f, -10.4f, -8, 16.4f, -11.8f,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            23.4f, 10.4f, -14.0f, -3.8f, -11.8f, 11.4f</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        },</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        weightsDesc));</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keyword">auto</span> bias = MakeTensor&lt;int32_t, 1&gt;(biasesDesc, std::vector&lt;int32_t&gt;{9250, 67500});</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    result = SimpleFullyConnectedTestImpl&lt;T&gt;(</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            workloadFactory,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            memoryManager,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            inputTensorInfo, outputTensorInfo,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            weightsDesc, biasesDesc,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            weights, bias, input,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            biasEnabled, <a class="code" href="_cl_layer_tests_8cpp.xhtml#a37f1c3ccc9fc906be85185350dd83d48">true</a></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    );</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">if</span> (biasEnabled)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        result.<a class="code" href="struct_layer_test_result.xhtml#a73610ea6c776cc66e5a78dd842a39b8b">outputExpected</a> = MakeTensor&lt;T, 2&gt;(outputTensorInfo,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                                 ConvertToDataType&lt;ArmnnType&gt;({80.f, 1460.f}, outputTensorInfo));</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        result.outputExpected = MakeTensor&lt;T, 2&gt;(outputTensorInfo,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                                 ConvertToDataType&lt;ArmnnType&gt;({-107.04f, 110.f}, outputTensorInfo));</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">// ArmNN variant of the AndroidNN fully_connected_float_large test.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">// Tests the fully connected layer with large values, optionally transposing weights.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">// Note this is templated for consistency, but the nature of this tests makes it unlikely to be useful in Uint8 mode.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType, <span class="keyword">typename</span> T = armnn::ResolveType&lt;ArmnnType&gt;&gt;</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="_fully_connected_test_impl_8cpp.xhtml#ac2fd4978ceeccf895121c47b47cbd237">  148</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 2&gt;</a> <a class="code" href="_fully_connected_test_impl_8cpp.xhtml#ac2fd4978ceeccf895121c47b47cbd237">FullyConnectedLargeTestCommon</a>(</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordtype">bool</span> transposeWeights,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordtype">float</span> qScale = 0.0f,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    int32_t qOffset = 0)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth = 1;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = 1;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels = 5;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputNum = 1;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannels = 1;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputNum = 1;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">// Define the tensor descriptors.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> weightsDesc;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> biasesDesc;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { inputNum, inputChannels, inputHeight, inputWidth };</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { outputNum, outputChannels };</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsShape[] = { inputChannels, outputChannels };</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">if</span> (transposeWeights)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a14d7f180bf51e86850305965c3707e07">std::swap</a>(weightsShape[0], weightsShape[1]);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> biasShape[] = { outputChannels };</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    inputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, inputShape, ArmnnType);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(2, outputShape, ArmnnType);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    weightsDesc = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(2, weightsShape, ArmnnType);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    biasesDesc = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(1, biasShape, ArmnnType);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">// Set quantization parameters if the requested type is a quantized type.</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">if</span>(armnn::IsQuantizedType&lt;T&gt;())</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(qScale);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(qOffset);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(qScale);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(qOffset);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 2&gt;</a> result(outputTensorInfo);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    boost::multi_array&lt;T, 4&gt; input = MakeTensor&lt;T, 4&gt;(inputTensorInfo,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        armnnUtils::QuantizedVector&lt;T&gt;({</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            1.0f, 10.0f, 100.0f, 1000.0f, 10000.0f,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        },</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        qScale, qOffset)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    );</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    boost::multi_array&lt;T, 2&gt; weights = MakeTensor&lt;T, 2&gt;(weightsDesc,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        armnnUtils::QuantizedVector&lt;T&gt;({</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            2.0f, 3.0f, 4.0f, 5.0f, 6.0f</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        },</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        qScale, qOffset)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    );</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    std::vector&lt;T&gt; biasValues({900000.f});</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    boost::multi_array&lt;T, 1&gt; bias = MakeTensor&lt;T, 1&gt;(biasesDesc, biasValues);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    result = SimpleFullyConnectedTestImpl&lt;T&gt;(</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        workloadFactory,</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        memoryManager,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        inputTensorInfo, outputTensorInfo,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        weightsDesc, biasesDesc,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        weights, bias, input,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keyword">true</span>, transposeWeights</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    );</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    result.<a class="code" href="struct_layer_test_result.xhtml#a73610ea6c776cc66e5a78dd842a39b8b">outputExpected</a> = MakeTensor&lt;T, 2&gt;(outputTensorInfo,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                             armnnUtils::QuantizedVector&lt;T&gt;({ 965432.0f }, qScale, qOffset));</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;}</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">// Explicit template specializations</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">template</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;armnn::ResolveType&lt;armnn::DataType::QAsymmU8&gt;</a>, 2&gt;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;FullyConnectedTest&lt;armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordtype">bool</span> biasEnabled);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keyword">template</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;armnn::ResolveType&lt;armnn::DataType::QSymmS16&gt;</a>, 2&gt;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;FullyConnectedTest&lt;armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordtype">bool</span> biasEnabled);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">// Implementation functions</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="_fully_connected_test_impl_8hpp.xhtml#a9aa238fbd4c6a6d1259b31d2a51c93b8">  247</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 2&gt;</a> <a class="code" href="_fully_connected_test_impl_8cpp.xhtml#a9aa238fbd4c6a6d1259b31d2a51c93b8">FullyConnectedFloat32Test</a>(</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordtype">bool</span> biasEnabled,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordtype">bool</span> transposeWeights)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth = 1;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = 1;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels = 5;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputNum = 2;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannels = 3;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputNum = 2;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="comment">// Define the tensor descriptors.</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> weightsDesc;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> biasesDesc;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[]   = { inputNum, inputChannels, inputHeight, inputWidth };</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[]  = { outputNum, outputChannels };</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsShape[] = { inputChannels, outputChannels };</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">if</span> (transposeWeights)</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a14d7f180bf51e86850305965c3707e07">std::swap</a>(weightsShape[0], weightsShape[1]);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    }</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> biasShape[] = { outputChannels };</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    inputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(2, outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    weightsDesc = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(2, weightsShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    biasesDesc = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(1, biasShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 2&gt;</a> result(outputTensorInfo);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    boost::multi_array&lt;float, 4&gt; input = MakeTensor&lt;float, 4&gt;(inputTensorInfo, std::vector&lt;float&gt;(</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        {</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            1.0f, 2.0f, 3.0f, 4.0f, 5.0f,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            5.0f, 4.0f, 3.0f, 2.0f, 1.0f</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        })</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    );</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    boost::multi_array&lt;float, 2&gt; weights = MakeTensor&lt;float, 2&gt;(weightsDesc, std::vector&lt;float&gt;(</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        {</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            .5f, 2.f, .5f,</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            .5f, 2.f, 1.f,</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            .5f, 2.f, 2.f,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            .5f, 2.f, 3.f,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            .5f, 2.f, 4.f</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        }));</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordflow">if</span> (transposeWeights)</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        weights = MakeTensor&lt;float, 2&gt;(weightsDesc, std::vector&lt;float&gt;(</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        {</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            .5f, .5f, .5f, .5f, .5f,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            2.f, 2.f, 2.f, 2.f, 2.f,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            .5f, 1.f, 2.f, 3.f, 4.f</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        }));</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    }</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    std::vector&lt;float&gt; biasValues({0.f, 0.f, 0.f});</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordflow">if</span> (biasEnabled)</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    {</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        biasValues =  std::vector&lt;float&gt;({10.f, 20.f, 30.f});</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    boost::multi_array&lt;float, 1&gt; bias = MakeTensor&lt;float, 1&gt;(biasesDesc, biasValues);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    result = SimpleFullyConnectedTestImpl&lt;float&gt;(</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        workloadFactory,</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        memoryManager,</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        inputTensorInfo, outputTensorInfo,</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        weightsDesc, biasesDesc,</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        weights, bias, input,</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        biasEnabled, transposeWeights</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    );</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    result.<a class="code" href="struct_layer_test_result.xhtml#a73610ea6c776cc66e5a78dd842a39b8b">outputExpected</a> = MakeTensor&lt;float, 2&gt;(outputTensorInfo, std::vector&lt;float&gt;(</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        {</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            0.5f + 1.0f + 1.5f + 2.0f + 2.5f + biasValues[0],</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            2.0f + 4.0f + 6.0f + 8.0f + 10.f + biasValues[1],</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            0.5f + 2.0f + 6.0f + 12.f + 20.f + biasValues[2],</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            2.5f + 2.0f + 1.5f + 1.0f + 0.5f + biasValues[0],</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            10.0f + 8.0f + 6.0f + 4.0f + 2.f + biasValues[1],</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            2.5f + 4.0f + 6.0f + 6.f + 4.f   + biasValues[2]</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        })</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    );</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;}</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno"><a class="line" href="_fully_connected_test_impl_8hpp.xhtml#a0fb6957126b671361ccdd80f3549faa9">  344</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 2&gt;</a> <a class="code" href="_fully_connected_test_impl_8cpp.xhtml#a0fb6957126b671361ccdd80f3549faa9">FullyConnectedLargeTest</a>(</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordtype">bool</span> transposeWeights)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;{</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">return</span> FullyConnectedLargeTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, transposeWeights);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;}</div><div class="ttc" id="_tensor_copy_utils_8hpp_xhtml"><div class="ttname"><a href="_tensor_copy_utils_8hpp.xhtml">TensorCopyUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14d7f180bf51e86850305965c3707e07"><div class="ttname"><a href="namespacearmnn.xhtml#a14d7f180bf51e86850305965c3707e07">armnn::swap</a></div><div class="ttdeci">void swap(OriginsDescriptor &amp;first, OriginsDescriptor &amp;second)</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00342">Descriptors.cpp:342</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_queue_descriptor_xhtml_a3369b66d9316a773a41711e3f590c041"><div class="ttname"><a href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml#a3369b66d9316a773a41711e3f590c041">armnn::FullyConnectedQueueDescriptor::m_Weight</a></div><div class="ttdeci">const ConstCpuTensorHandle * m_Weight</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00149">WorkloadData.hpp:149</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="_quantize_helper_8hpp_xhtml"><div class="ttname"><a href="_quantize_helper_8hpp.xhtml">QuantizeHelper.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8hpp_source.xhtml#l00021">WorkloadFactory.hpp:21</a></div></div>
<div class="ttc" id="_workload_test_utils_8hpp_xhtml"><div class="ttname"><a href="_workload_test_utils_8hpp.xhtml">WorkloadTestUtils.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml_a281fcaec86e17c97f7b8402633f6b55a"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml#a281fcaec86e17c97f7b8402633f6b55a">armnn::FullyConnectedDescriptor::m_TransposeWeightMatrix</a></div><div class="ttdeci">bool m_TransposeWeightMatrix</div><div class="ttdoc">Enable/disable transpose weight matrix. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00388">Descriptors.hpp:388</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml_a73610ea6c776cc66e5a78dd842a39b8b"><div class="ttname"><a href="struct_layer_test_result.xhtml#a73610ea6c776cc66e5a78dd842a39b8b">LayerTestResult::outputExpected</a></div><div class="ttdeci">boost::multi_array&lt; T, n &gt; outputExpected</div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult.hpp:41</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">armnn::FullyConnectedQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00141">WorkloadData.hpp:141</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="_cl_layer_tests_8cpp_xhtml_a37f1c3ccc9fc906be85185350dd83d48"><div class="ttname"><a href="_cl_layer_tests_8cpp.xhtml#a37f1c3ccc9fc906be85185350dd83d48">true</a></div><div class="ttdeci">DataLayout::NCHW DataLayout::NCHW DataLayout::NHWC DataLayout::NHWC true</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_tests_8cpp_source.xhtml#l00202">ClLayerTests.cpp:202</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00049">WorkloadData.hpp:49</a></div></div>
<div class="ttc" id="_fully_connected_test_impl_8cpp_xhtml_a25b72d9cbe9cca2c89ba997e6f2cfb87"><div class="ttname"><a href="_fully_connected_test_impl_8cpp.xhtml#a25b72d9cbe9cca2c89ba997e6f2cfb87">FullyConnectedTest</a></div><div class="ttdeci">LayerTestResult&lt; T, 2 &gt; FullyConnectedTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, bool biasEnabled)</div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_test_impl_8cpp_source.xhtml#l00071">FullyConnectedTestImpl.cpp:71</a></div></div>
<div class="ttc" id="_tensor_helpers_8hpp_xhtml"><div class="ttname"><a href="_tensor_helpers_8hpp.xhtml">TensorHelpers.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83c4a275acf59f62b8387f389d0929d5"><div class="ttname"><a href="namespacearmnn.xhtml#a83c4a275acf59f62b8387f389d0929d5">armnn::GetBiasTypeFromWeightsType</a></div><div class="ttdeci">armnn::Optional&lt; armnn::DataType &gt; GetBiasTypeFromWeightsType(armnn::Optional&lt; armnn::DataType &gt; weightsType)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_rules_8hpp_source.xhtml#l00014">LayerSupportRules.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a693b40e6b94e958836aeb0410ca186bd"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; IMemoryManagerSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_backend_internal_8hpp_source.xhtml#l00090">IBackendInternal.hpp:90</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::FullyConnectedDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00386">Descriptors.hpp:386</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00259">Tensor.cpp:259</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_afaaca8c3f3a467d124bba44067d2afa8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a></div><div class="ttdeci">void AllocateAndCopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00019">TensorCopyUtils.cpp:19</a></div></div>
<div class="ttc" id="_fully_connected_test_impl_8cpp_xhtml_a0fb6957126b671361ccdd80f3549faa9"><div class="ttname"><a href="_fully_connected_test_impl_8cpp.xhtml#a0fb6957126b671361ccdd80f3549faa9">FullyConnectedLargeTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 2 &gt; FullyConnectedLargeTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, bool transposeWeights)</div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_test_impl_8cpp_source.xhtml#l00344">FullyConnectedTestImpl.cpp:344</a></div></div>
<div class="ttc" id="_fully_connected_test_impl_8hpp_xhtml"><div class="ttname"><a href="_fully_connected_test_impl_8hpp.xhtml">FullyConnectedTestImpl.hpp</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_a99b626c58a926dc7d6df78d22ec186c8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *memory, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15c140be4ddceffee16436f009d3ed94"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">armnn::IWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</div></div>
<div class="ttc" id="_cpu_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="_cpu_tensor_handle_8hpp.xhtml">CpuTensorHandle.hpp</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml_ac9d44d346bb7c89f7a7aa31d2bee947f"><div class="ttname"><a href="struct_layer_test_result.xhtml#ac9d44d346bb7c89f7a7aa31d2bee947f">LayerTestResult::output</a></div><div class="ttdeci">boost::multi_array&lt; T, n &gt; output</div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00040">LayerTestResult.hpp:40</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_cpu_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">armnn::ScopedCpuTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00106">CpuTensorHandle.hpp:106</a></div></div>
<div class="ttc" id="_fully_connected_test_impl_8cpp_xhtml_a85031832a04444e2f419a746b4c59345"><div class="ttname"><a href="_fully_connected_test_impl_8cpp.xhtml#a85031832a04444e2f419a746b4c59345">SimpleFullyConnectedTestImpl</a></div><div class="ttdeci">LayerTestResult&lt; T, 2 &gt; SimpleFullyConnectedTestImpl(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, armnn::TensorInfo inputTensorInfo, armnn::TensorInfo outputTensorInfo, armnn::TensorInfo weightsDesc, armnn::TensorInfo biasesDesc, boost::multi_array&lt; T, 2 &gt; &amp;weights, boost::multi_array&lt; B, 1 &gt; &amp;bias, boost::multi_array&lt; T, 4 &gt; &amp;input, bool biasEnabled, bool transposeWeights)</div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_test_impl_8cpp_source.xhtml#l00024">FullyConnectedTestImpl.cpp:24</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="_data_type_utils_8hpp_xhtml"><div class="ttname"><a href="_data_type_utils_8hpp.xhtml">DataTypeUtils.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00029">LayerTestResult.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00275">Tensor.cpp:275</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a1c193739520e08f686b347ff795ad2fe"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a1c193739520e08f686b347ff795ad2fe">armnn::IWorkloadFactory::CreateFullyConnected</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateFullyConnected(const FullyConnectedQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01225">WorkloadFactory.cpp:1225</a></div></div>
<div class="ttc" id="_fully_connected_test_impl_8cpp_xhtml_ac2fd4978ceeccf895121c47b47cbd237"><div class="ttname"><a href="_fully_connected_test_impl_8cpp.xhtml#ac2fd4978ceeccf895121c47b47cbd237">FullyConnectedLargeTestCommon</a></div><div class="ttdeci">LayerTestResult&lt; T, 2 &gt; FullyConnectedLargeTestCommon(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, bool transposeWeights, float qScale=0.0f, int32_t qOffset=0)</div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_test_impl_8cpp_source.xhtml#l00148">FullyConnectedTestImpl.cpp:148</a></div></div>
<div class="ttc" id="_fully_connected_test_impl_8cpp_xhtml_a9aa238fbd4c6a6d1259b31d2a51c93b8"><div class="ttname"><a href="_fully_connected_test_impl_8cpp.xhtml#a9aa238fbd4c6a6d1259b31d2a51c93b8">FullyConnectedFloat32Test</a></div><div class="ttdeci">LayerTestResult&lt; float, 2 &gt; FullyConnectedFloat32Test(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, bool biasEnabled, bool transposeWeights)</div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_test_impl_8cpp_source.xhtml#l00247">FullyConnectedTestImpl.cpp:247</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_queue_descriptor_xhtml_ab3437cee6b0687812104fc1b37cbe8b3"><div class="ttname"><a href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml#ab3437cee6b0687812104fc1b37cbe8b3">armnn::FullyConnectedQueueDescriptor::m_Bias</a></div><div class="ttdeci">const ConstCpuTensorHandle * m_Bias</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00150">WorkloadData.hpp:150</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_99a30439342d160875b21dac3498ad7f.xhtml">layerTests</a></li><li class="navelem"><a class="el" href="_fully_connected_test_impl_8cpp.xhtml">FullyConnectedTestImpl.cpp</a></li>
    <li class="footer">Generated on Fri Mar 13 2020 16:09:11 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
