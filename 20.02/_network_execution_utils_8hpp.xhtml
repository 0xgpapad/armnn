<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/NetworkExecutionUtils/NetworkExecutionUtils.hpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_network_execution_utils_8hpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">NetworkExecutionUtils.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="_arm_n_n_8hpp_source.xhtml">armnn/ArmNN.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_types_utils_8hpp_source.xhtml">armnn/TypesUtils.hpp</a>&gt;</code><br />
<code>#include &quot;<a class="el" href="_csv_reader_8hpp_source.xhtml">CsvReader.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_inference_test_8hpp_source.xhtml">../InferenceTest.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_profiling_8hpp_source.xhtml">Profiling.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_resolve_type_8hpp_source.xhtml">ResolveType.hpp</a>&gt;</code><br />
<code>#include &lt;boost/algorithm/string/trim.hpp&gt;</code><br />
<code>#include &lt;boost/algorithm/string/split.hpp&gt;</code><br />
<code>#include &lt;boost/algorithm/string/classification.hpp&gt;</code><br />
<code>#include &lt;boost/program_options.hpp&gt;</code><br />
<code>#include &lt;boost/variant.hpp&gt;</code><br />
<code>#include &lt;iostream&gt;</code><br />
<code>#include &lt;fstream&gt;</code><br />
<code>#include &lt;functional&gt;</code><br />
<code>#include &lt;future&gt;</code><br />
<code>#include &lt;algorithm&gt;</code><br />
<code>#include &lt;iterator&gt;</code><br />
</div>
<p><a href="_network_execution_utils_8hpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_execute_network_params.xhtml">ExecuteNetworkParams</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:afc1c3398fd2de1051edf23a171cfa01b"><td class="memTemplParams" colspan="2">template&lt;typename TParser , typename TDataType &gt; </td></tr>
<tr class="memitem:afc1c3398fd2de1051edf23a171cfa01b"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8hpp.xhtml#afc1c3398fd2de1051edf23a171cfa01b">MainImpl</a> (const <a class="el" href="struct_execute_network_params.xhtml">ExecuteNetworkParams</a> &amp;params, const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> &gt; &amp;runtime=nullptr)</td></tr>
<tr class="separator:afc1c3398fd2de1051edf23a171cfa01b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab182729acbd2161a0358d85906d30703"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8hpp.xhtml#ab182729acbd2161a0358d85906d30703">RunTest</a> (const std::string &amp;format, const std::string &amp;inputTensorShapesStr, const vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;computeDevices, const std::string &amp;dynamicBackendsPath, const std::string &amp;path, const std::string &amp;inputNames, const std::string &amp;inputTensorDataFilePaths, const std::string &amp;inputTypes, bool quantizeInput, const std::string &amp;outputTypes, const std::string &amp;outputNames, const std::string &amp;outputTensorFiles, bool dequantizeOuput, bool enableProfiling, bool enableFp16TurboMode, const double &amp;thresholdTime, bool printIntermediate, const size_t subgraphId, bool enableLayerDetails=<a class="el" href="_ref_layer_tests_8cpp.xhtml#af3b727ae5a13ff472892ab8bda2eb1b5">false</a>, bool parseUnsupported=<a class="el" href="_ref_layer_tests_8cpp.xhtml#af3b727ae5a13ff472892ab8bda2eb1b5">false</a>, const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> &gt; &amp;runtime=nullptr)</td></tr>
<tr class="separator:ab182729acbd2161a0358d85906d30703"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31556a7bc4fe615f51dd68af510a9947"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8hpp.xhtml#a31556a7bc4fe615f51dd68af510a9947">RunCsvTest</a> (const <a class="el" href="structarmnn_utils_1_1_csv_row.xhtml">armnnUtils::CsvRow</a> &amp;csvRow, const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> &gt; &amp;runtime, const bool enableProfiling, const bool enableFp16TurboMode, const double &amp;thresholdTime, const bool printIntermediate, bool enableLayerDetails=<a class="el" href="_ref_layer_tests_8cpp.xhtml#af3b727ae5a13ff472892ab8bda2eb1b5">false</a>, bool parseUnuspported=<a class="el" href="_ref_layer_tests_8cpp.xhtml#af3b727ae5a13ff472892ab8bda2eb1b5">false</a>)</td></tr>
<tr class="separator:a31556a7bc4fe615f51dd68af510a9947"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:ad7abdfb6c0cc99eb356c1eefdc6ff696"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8hpp.xhtml#ad7abdfb6c0cc99eb356c1eefdc6ff696">generateTensorData</a> = <a class="el" href="_ref_layer_tests_8cpp.xhtml#a37f1c3ccc9fc906be85185350dd83d48">true</a></td></tr>
<tr class="separator:ad7abdfb6c0cc99eb356c1eefdc6ff696"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="afc1c3398fd2de1051edf23a171cfa01b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc1c3398fd2de1051edf23a171cfa01b">&#9670;&nbsp;</a></span>MainImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int MainImpl </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="struct_execute_network_params.xhtml">ExecuteNetworkParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>runtime</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00391">391</a> of file <a class="el" href="_network_execution_utils_8hpp_source.xhtml">NetworkExecutionUtils.hpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00163">ARMNN_LOG</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00543">InferenceModel&lt; IParser, TDataType &gt;::GetInputQuantizationParams()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00449">InferenceModel&lt; IParser, TDataType &gt;::GetInputSize()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00531">InferenceModel&lt; IParser, TDataType &gt;::GetOutputBindingInfos()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00455">InferenceModel&lt; IParser, TDataType &gt;::GetOutputSize()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00088">Params::m_ComputeDevices</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00369">ExecuteNetworkParams::m_ComputeDevices</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00379">ExecuteNetworkParams::m_DequantizeOutput</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00089">Params::m_DynamicBackendsPath</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00370">ExecuteNetworkParams::m_DynamicBackendsPath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00093">Params::m_EnableFp16TurboMode</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00381">ExecuteNetworkParams::m_EnableFp16TurboMode</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00385">ExecuteNetworkParams::m_EnableLayerDetails</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00380">ExecuteNetworkParams::m_EnableProfiling</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00386">ExecuteNetworkParams::m_GenerateTensorData</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00085">Params::m_InputBindings</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00371">ExecuteNetworkParams::m_InputNames</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00086">Params::m_InputShapes</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00373">ExecuteNetworkParams::m_InputTensorDataFilePaths</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00372">ExecuteNetworkParams::m_InputTensorShapes</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00374">ExecuteNetworkParams::m_InputTypes</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00091">Params::m_IsModelBinary</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00368">ExecuteNetworkParams::m_IsModelBinary</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00084">Params::m_ModelPath</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00367">ExecuteNetworkParams::m_ModelPath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00087">Params::m_OutputBindings</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00377">ExecuteNetworkParams::m_OutputNames</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00378">ExecuteNetworkParams::m_OutputTensorFiles</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00376">ExecuteNetworkParams::m_OutputTypes</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00095">Params::m_ParseUnsupported</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00387">ExecuteNetworkParams::m_ParseUnsupported</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00383">ExecuteNetworkParams::m_PrintIntermediate</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00094">Params::m_PrintIntermediateLayers</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00375">ExecuteNetworkParams::m_QuantizeInput</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00090">Params::m_SubgraphId</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00384">ExecuteNetworkParams::m_SubgraphId</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00382">ExecuteNetworkParams::m_ThresholdTime</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00092">Params::m_VisualizePostOptimizationModel</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00461">InferenceModel&lt; IParser, TDataType &gt;::Run()</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>
<div class="fragment"><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;{</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keyword">using</span> <a class="code" href="_model_accuracy_checker_test_8cpp.xhtml#a9eb69ebdaf4ceb8014e7c8a540266100">TContainer</a> = boost::variant&lt;std::vector&lt;float&gt;, std::vector&lt;int&gt;, std::vector&lt;unsigned char&gt;&gt;;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    std::vector&lt;TContainer&gt; inputDataContainers;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    {</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="comment">// Creates an InferenceModel, which will parse the model and load it into an IRuntime.</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="keyword">typename</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModel&lt;TParser, TDataType&gt;::Params</a> inferenceModelParams;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>                      = params.<a class="code" href="struct_execute_network_params.xhtml#a44c7d128c41b2717fe425cf6fdc32936">m_ModelPath</a>;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a>                  = params.<a class="code" href="struct_execute_network_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a>;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">m_ComputeDevices</a>                 = params.<a class="code" href="struct_execute_network_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">m_ComputeDevices</a>;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>            = params.<a class="code" href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#acde2af8cbbd224a9f94e509ca538a775">m_PrintIntermediateLayers</a>        = params.<a class="code" href="struct_execute_network_params.xhtml#a5acc5b4076604db15ee13ee19fa623c4">m_PrintIntermediate</a>;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aaae50a6c0f73e4c210c2e4331c439482">m_VisualizePostOptimizationModel</a> = params.<a class="code" href="struct_execute_network_params.xhtml#a7efc68309e76bfefbfa16fe94501b060">m_EnableLayerDetails</a>;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">m_ParseUnsupported</a>               = params.<a class="code" href="struct_execute_network_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">m_ParseUnsupported</a>;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> std::string&amp; inputName: params.<a class="code" href="struct_execute_network_params.xhtml#a155de45be27135e4c9b6b7df277d0b8f">m_InputNames</a>)</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        {</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>.push_back(inputName);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        }</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>.size(); ++i)</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        {</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">m_InputShapes</a>.push_back(*params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>[i]);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        }</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> std::string&amp; outputName: params.<a class="code" href="struct_execute_network_params.xhtml#a1a08c6c34dd3ce290b4bc62a715bb810">m_OutputNames</a>)</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        {</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>.push_back(outputName);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        }</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d4582aa74998c397bd064ae73745b62">m_SubgraphId</a>          = params.<a class="code" href="struct_execute_network_params.xhtml#a2d4582aa74998c397bd064ae73745b62">m_SubgraphId</a>;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a513151623e8d448951a0b94ad1946fbe">m_EnableFp16TurboMode</a> = params.<a class="code" href="struct_execute_network_params.xhtml#a513151623e8d448951a0b94ad1946fbe">m_EnableFp16TurboMode</a>;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        <a class="code" href="class_inference_model.xhtml">InferenceModel&lt;TParser, TDataType&gt;</a> model(inferenceModelParams,</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                                 params.<a class="code" href="struct_execute_network_params.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>,</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                                 params.<a class="code" href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>,</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                                 runtime);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> numInputs = inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>.size();</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numInputs; ++i)</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        {</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;QuantizationParams&gt;</a> qParams = params.<a class="code" href="struct_execute_network_params.xhtml#a077f6963fc555d9d42f98cf9ed3e7e03">m_QuantizeInput</a> ?</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                armnn::MakeOptional&lt;QuantizationParams&gt;(model.GetInputQuantizationParams()) :</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>();</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&gt;</a> dataFile = params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a> ?</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>() :</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                <a class="code" href="namespacearmnn.xhtml">armnn</a>::<a class="code" href="namespacearmnn.xhtml#a77780137c47f528921f6537447060f05">MakeOptional</a>&lt;<a class="code" href="namespacestd.xhtml">std</a>::string&gt;(params.m_InputTensorDataFilePaths[i]);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numElements = model.GetInputSize(i);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>.size() &gt; i &amp;&amp; params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>[i])</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            {</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                <span class="comment">// If the user has provided a tensor shape for the current input,</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                <span class="comment">// override numElements</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                numElements = params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>[i]-&gt;GetNumElements();</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            }</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            <a class="code" href="_model_accuracy_checker_test_8cpp.xhtml#a9eb69ebdaf4ceb8014e7c8a540266100">TContainer</a> tensorData;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            PopulateTensorWithData(tensorData,</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                   numElements,</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                                   params.<a class="code" href="struct_execute_network_params.xhtml#a08c2e205fcf14f0caa44388f8314e7b5">m_InputTypes</a>[i],</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                                   qParams,</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                                   dataFile);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            inputDataContainers.push_back(tensorData);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        }</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> numOutputs = inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>.size();</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        std::vector&lt;TContainer&gt; outputDataContainers;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numOutputs; ++i)</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        {</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a71c32d9b0334a1561bb6d2db677755d6">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;float&quot;</span>) == 0)</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            {</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                outputDataContainers.push_back(std::vector&lt;float&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            }</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a71c32d9b0334a1561bb6d2db677755d6">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;int&quot;</span>) == 0)</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            {</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                outputDataContainers.push_back(std::vector&lt;int&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            }</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a71c32d9b0334a1561bb6d2db677755d6">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;qasymm8&quot;</span>) == 0)</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            {</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                outputDataContainers.push_back(std::vector&lt;uint8_t&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            }</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            {</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Unsupported tensor data type \&quot;&quot;</span> &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a71c32d9b0334a1561bb6d2db677755d6">m_OutputTypes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\&quot;. &quot;</span>;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            }</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        }</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        <span class="comment">// model.Run returns the inference time elapsed in EnqueueWorkload (in milliseconds)</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="keyword">auto</span> inference_duration = model.Run(inputDataContainers, outputDataContainers);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a>)</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;The input data was generated, note that the output will not be useful&quot;</span>;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        }</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        <span class="comment">// Print output tensors</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>&amp; infosOut = model.GetOutputBindingInfos();</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numOutputs; i++)</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        {</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; infoOut = infosOut[i].second;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            <span class="keyword">auto</span> outputTensorFile = params.<a class="code" href="struct_execute_network_params.xhtml#a64c0a99d553c42d215c4b2f1a2f1c7d4">m_OutputTensorFiles</a>.empty() ? <span class="stringliteral">&quot;&quot;</span> : params.<a class="code" href="struct_execute_network_params.xhtml#a64c0a99d553c42d215c4b2f1a2f1c7d4">m_OutputTensorFiles</a>[i];</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            TensorPrinter printer(inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[i],</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                                  infoOut,</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                                  outputTensorFile,</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                  params.<a class="code" href="struct_execute_network_params.xhtml#a85929a48c5e7b16af8f5bc637e45a37f">m_DequantizeOutput</a>);</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            boost::apply_visitor(printer, outputDataContainers[i]);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        }</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;\nInference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                                &lt;&lt; std::fixed &lt;&lt; inference_duration.count() &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span>;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <span class="comment">// If thresholdTime == 0.0 (default), then it hasn&#39;t been supplied at command line</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a> != 0.0)</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        {</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Threshold time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                                    &lt;&lt; std::fixed &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a> &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span>;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            <span class="keyword">auto</span> thresholdMinusInference = params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a> - inference_duration.count();</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Threshold time - Inference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                                    &lt;&lt; std::fixed &lt;&lt; thresholdMinusInference &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;            <span class="keywordflow">if</span> (thresholdMinusInference &lt; 0)</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            {</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                std::string errorMessage = <span class="stringliteral">&quot;Elapsed inference time is greater than provided threshold time.&quot;</span>;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; errorMessage;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            }</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        }</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    }</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keywordflow">catch</span> (<a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a> <span class="keyword">const</span>&amp; e)</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    {</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Armnn Error: &quot;</span> &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    }</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordflow">return</span> EXIT_SUCCESS;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;}</div><div class="ttc" id="struct_execute_network_params_xhtml_a85929a48c5e7b16af8f5bc637e45a37f"><div class="ttname"><a href="struct_execute_network_params.xhtml#a85929a48c5e7b16af8f5bc637e45a37f">ExecuteNetworkParams::m_DequantizeOutput</a></div><div class="ttdeci">bool m_DequantizeOutput</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00379">NetworkExecutionUtils.hpp:379</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a71c32d9b0334a1561bb6d2db677755d6"><div class="ttname"><a href="struct_execute_network_params.xhtml#a71c32d9b0334a1561bb6d2db677755d6">ExecuteNetworkParams::m_OutputTypes</a></div><div class="ttdeci">std::vector&lt; string &gt; m_OutputTypes</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00376">NetworkExecutionUtils.hpp:376</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a64c0a99d553c42d215c4b2f1a2f1c7d4"><div class="ttname"><a href="struct_execute_network_params.xhtml#a64c0a99d553c42d215c4b2f1a2f1c7d4">ExecuteNetworkParams::m_OutputTensorFiles</a></div><div class="ttdeci">std::vector&lt; string &gt; m_OutputTensorFiles</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00378">NetworkExecutionUtils.hpp:378</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a091cda9098c6f03f91f477a22327892d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">ExecuteNetworkParams::m_InputTensorShapes</a></div><div class="ttdeci">std::vector&lt; TensorShapePtr &gt; m_InputTensorShapes</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00372">NetworkExecutionUtils.hpp:372</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a513151623e8d448951a0b94ad1946fbe"><div class="ttname"><a href="struct_execute_network_params.xhtml#a513151623e8d448951a0b94ad1946fbe">ExecuteNetworkParams::m_EnableFp16TurboMode</a></div><div class="ttdeci">bool m_EnableFp16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00381">NetworkExecutionUtils.hpp:381</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">ExecuteNetworkParams::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00370">NetworkExecutionUtils.hpp:370</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">InferenceModelInternal::Params::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00089">InferenceModel.hpp:89</a></div></div>
<div class="ttc" id="class_inference_model_xhtml"><div class="ttname"><a href="class_inference_model.xhtml">InferenceModel</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00316">InferenceModel.hpp:316</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml_abf843cbb29dec939d0731e491bab6f70"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">armnn::Exception::what</a></div><div class="ttdeci">virtual const char * what() const noexcept override</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00032">Exceptions.cpp:32</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00163">Logging.hpp:163</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a513151623e8d448951a0b94ad1946fbe"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a513151623e8d448951a0b94ad1946fbe">InferenceModelInternal::Params::m_EnableFp16TurboMode</a></div><div class="ttdeci">bool m_EnableFp16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00093">InferenceModel.hpp:93</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a5acc5b4076604db15ee13ee19fa623c4"><div class="ttname"><a href="struct_execute_network_params.xhtml#a5acc5b4076604db15ee13ee19fa623c4">ExecuteNetworkParams::m_PrintIntermediate</a></div><div class="ttdeci">bool m_PrintIntermediate</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00383">NetworkExecutionUtils.hpp:383</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a5c7f0c083da98e7b6e9ba79d2fcd985d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">ExecuteNetworkParams::m_ParseUnsupported</a></div><div class="ttdeci">bool m_ParseUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00387">NetworkExecutionUtils.hpp:387</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_aaae50a6c0f73e4c210c2e4331c439482"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#aaae50a6c0f73e4c210c2e4331c439482">InferenceModelInternal::Params::m_VisualizePostOptimizationModel</a></div><div class="ttdeci">bool m_VisualizePostOptimizationModel</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00092">InferenceModel.hpp:92</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a2d4582aa74998c397bd064ae73745b62"><div class="ttname"><a href="struct_execute_network_params.xhtml#a2d4582aa74998c397bd064ae73745b62">ExecuteNetworkParams::m_SubgraphId</a></div><div class="ttdeci">size_t m_SubgraphId</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00384">NetworkExecutionUtils.hpp:384</a></div></div>
<div class="ttc" id="_model_accuracy_checker_test_8cpp_xhtml_a9eb69ebdaf4ceb8014e7c8a540266100"><div class="ttname"><a href="_model_accuracy_checker_test_8cpp.xhtml#a9eb69ebdaf4ceb8014e7c8a540266100">TContainer</a></div><div class="ttdeci">boost::variant&lt; std::vector&lt; float &gt;, std::vector&lt; int &gt;, std::vector&lt; unsigned char &gt; &gt; TContainer</div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_checker_test_8cpp_source.xhtml#l00059">ModelAccuracyCheckerTest.cpp:59</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_aad2ac35d4cb83ee4da9fad5fbcb907e0"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">InferenceModelInternal::Params::m_InputBindings</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputBindings</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00085">InferenceModel.hpp:85</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a2d54e6252c1c9a0e29f7706ba03b2b74"><div class="ttname"><a href="struct_execute_network_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">ExecuteNetworkParams::m_ComputeDevices</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; m_ComputeDevices</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00369">NetworkExecutionUtils.hpp:369</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a155de45be27135e4c9b6b7df277d0b8f"><div class="ttname"><a href="struct_execute_network_params.xhtml#a155de45be27135e4c9b6b7df277d0b8f">ExecuteNetworkParams::m_InputNames</a></div><div class="ttdeci">std::vector&lt; string &gt; m_InputNames</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00371">NetworkExecutionUtils.hpp:371</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a6bf2f586c403977d31c7d32d371918cf"><div class="ttname"><a href="struct_execute_network_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">ExecuteNetworkParams::m_IsModelBinary</a></div><div class="ttdeci">bool m_IsModelBinary</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00368">NetworkExecutionUtils.hpp:368</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ad69aa6b4967ce55ee4a915c52c71bf2e"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">InferenceModelInternal::Params::m_InputShapes</a></div><div class="ttdeci">std::vector&lt; armnn::TensorShape &gt; m_InputShapes</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00086">InferenceModel.hpp:86</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00147">BackendId.hpp:147</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a99c7360a4d4b248b3f10607bc5d2fe7b"><div class="ttname"><a href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">ExecuteNetworkParams::m_GenerateTensorData</a></div><div class="ttdeci">bool m_GenerateTensorData</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00386">NetworkExecutionUtils.hpp:386</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_abeacb4ed1ca9256ee0e8aea73185a0cc"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">InferenceModelInternal::Params::m_OutputBindings</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputBindings</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00087">InferenceModel.hpp:87</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a2d54e6252c1c9a0e29f7706ba03b2b74"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">InferenceModelInternal::Params::m_ComputeDevices</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; m_ComputeDevices</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00088">InferenceModel.hpp:88</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a318999172ae5197f56326b12d29104b7"><div class="ttname"><a href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">ExecuteNetworkParams::m_ThresholdTime</a></div><div class="ttdeci">double m_ThresholdTime</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00382">NetworkExecutionUtils.hpp:382</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a44c7d128c41b2717fe425cf6fdc32936"><div class="ttname"><a href="struct_execute_network_params.xhtml#a44c7d128c41b2717fe425cf6fdc32936">ExecuteNetworkParams::m_ModelPath</a></div><div class="ttdeci">const char * m_ModelPath</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00367">NetworkExecutionUtils.hpp:367</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a1a08c6c34dd3ce290b4bc62a715bb810"><div class="ttname"><a href="struct_execute_network_params.xhtml#a1a08c6c34dd3ce290b4bc62a715bb810">ExecuteNetworkParams::m_OutputNames</a></div><div class="ttdeci">std::vector&lt; string &gt; m_OutputNames</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00377">NetworkExecutionUtils.hpp:377</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a5c7f0c083da98e7b6e9ba79d2fcd985d"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">InferenceModelInternal::Params::m_ParseUnsupported</a></div><div class="ttdeci">bool m_ParseUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00095">InferenceModel.hpp:95</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_acde2af8cbbd224a9f94e509ca538a775"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#acde2af8cbbd224a9f94e509ca538a775">InferenceModelInternal::Params::m_PrintIntermediateLayers</a></div><div class="ttdeci">bool m_PrintIntermediateLayers</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00094">InferenceModel.hpp:94</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a7efc68309e76bfefbfa16fe94501b060"><div class="ttname"><a href="struct_execute_network_params.xhtml#a7efc68309e76bfefbfa16fe94501b060">ExecuteNetworkParams::m_EnableLayerDetails</a></div><div class="ttdeci">bool m_EnableLayerDetails</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00385">NetworkExecutionUtils.hpp:385</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a08c2e205fcf14f0caa44388f8314e7b5"><div class="ttname"><a href="struct_execute_network_params.xhtml#a08c2e205fcf14f0caa44388f8314e7b5">ExecuteNetworkParams::m_InputTypes</a></div><div class="ttdeci">std::vector&lt; string &gt; m_InputTypes</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00374">NetworkExecutionUtils.hpp:374</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a77780137c47f528921f6537447060f05"><div class="ttname"><a href="namespacearmnn.xhtml#a77780137c47f528921f6537447060f05">armnn::MakeOptional</a></div><div class="ttdeci">Optional&lt; T &gt; MakeOptional(Args &amp;&amp;... args)</div><div class="ttdoc">Utility template that constructs an object of type T in-place and wraps it inside an Optional&lt;T&gt; obje...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00304">Optional.hpp:304</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a4fa312cf0d60fbd3988a7c76ab8e2980"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">InferenceModelInternal::Params::m_ModelPath</a></div><div class="ttdeci">std::string m_ModelPath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00084">InferenceModel.hpp:84</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a6bf2f586c403977d31c7d32d371918cf"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">InferenceModelInternal::Params::m_IsModelBinary</a></div><div class="ttdeci">bool m_IsModelBinary</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00091">InferenceModel.hpp:91</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a2d4582aa74998c397bd064ae73745b62"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a2d4582aa74998c397bd064ae73745b62">InferenceModelInternal::Params::m_SubgraphId</a></div><div class="ttdeci">size_t m_SubgraphId</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00090">InferenceModel.hpp:90</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a077f6963fc555d9d42f98cf9ed3e7e03"><div class="ttname"><a href="struct_execute_network_params.xhtml#a077f6963fc555d9d42f98cf9ed3e7e03">ExecuteNetworkParams::m_QuantizeInput</a></div><div class="ttdeci">bool m_QuantizeInput</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00375">NetworkExecutionUtils.hpp:375</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00082">InferenceModel.hpp:82</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="struct_execute_network_params.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">ExecuteNetworkParams::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00380">NetworkExecutionUtils.hpp:380</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a31556a7bc4fe615f51dd68af510a9947"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31556a7bc4fe615f51dd68af510a9947">&#9670;&nbsp;</a></span>RunCsvTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int RunCsvTest </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_utils_1_1_csv_row.xhtml">armnnUtils::CsvRow</a> &amp;&#160;</td>
          <td class="paramname"><em>csvRow</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>runtime</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>enableProfiling</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>enableFp16TurboMode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>thresholdTime</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>printIntermediate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enableLayerDetails</em> = <code><a class="el" href="_ref_layer_tests_8cpp.xhtml#af3b727ae5a13ff472892ab8bda2eb1b5">false</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>parseUnuspported</em> = <code><a class="el" href="_ref_layer_tests_8cpp.xhtml#af3b727ae5a13ff472892ab8bda2eb1b5">false</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00750">750</a> of file <a class="el" href="_network_execution_utils_8hpp_source.xhtml">NetworkExecutionUtils.hpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00163">ARMNN_LOG</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00076">BackendRegistry::GetBackendIdsAsString()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00537">RunTest()</a>, and <a class="el" href="_csv_reader_8hpp_source.xhtml#l00015">CsvRow::values</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_8cpp_source.xhtml#l00009">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;{</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(runtime);</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    std::string modelFormat;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    std::string modelPath;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    std::string inputNames;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    std::string inputTensorShapes;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    std::string inputTensorDataFilePaths;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    std::string outputNames;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    std::string inputTypes;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    std::string outputTypes;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    std::string dynamicBackendsPath;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    std::string outputTensorFiles;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <span class="keywordtype">size_t</span> subgraphId = 0;</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    <span class="keyword">const</span> std::string backendsMessage = std::string(<span class="stringliteral">&quot;The preferred order of devices to run layers on by default. &quot;</span>)</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                                      + std::string(<span class="stringliteral">&quot;Possible choices: &quot;</span>)</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                                      + <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#ae1de2f7ca1db17f45f97155e239b8b45">GetBackendIdsAsString</a>();</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    po::options_description desc(<span class="stringliteral">&quot;Options&quot;</span>);</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    {</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        desc.add_options()</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        (<span class="stringliteral">&quot;model-format,f&quot;</span>, po::value(&amp;modelFormat),</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;         <span class="stringliteral">&quot;armnn-binary, caffe-binary, caffe-text, tflite-binary, onnx-binary, onnx-text, tensorflow-binary or &quot;</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;         <span class="stringliteral">&quot;tensorflow-text.&quot;</span>)</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        (<span class="stringliteral">&quot;model-path,m&quot;</span>, po::value(&amp;modelPath), <span class="stringliteral">&quot;Path to model file, e.g. .armnn, .caffemodel, .prototxt, &quot;</span></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;         <span class="stringliteral">&quot;.tflite, .onnx&quot;</span>)</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        (<span class="stringliteral">&quot;compute,c&quot;</span>, po::value&lt;std::vector&lt;armnn::BackendId&gt;&gt;()-&gt;multitoken(),</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;         backendsMessage.c_str())</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        (<span class="stringliteral">&quot;dynamic-backends-path,b&quot;</span>, po::value(&amp;dynamicBackendsPath),</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;         <span class="stringliteral">&quot;Path where to load any available dynamic backend from. &quot;</span></div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;         <span class="stringliteral">&quot;If left empty (the default), dynamic backends will not be used.&quot;</span>)</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        (<span class="stringliteral">&quot;input-name,i&quot;</span>, po::value(&amp;inputNames), <span class="stringliteral">&quot;Identifier of the input tensors in the network separated by comma.&quot;</span>)</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        (<span class="stringliteral">&quot;subgraph-number,n&quot;</span>, po::value&lt;size_t&gt;(&amp;subgraphId)-&gt;default_value(0), <span class="stringliteral">&quot;Id of the subgraph to be &quot;</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;         <span class="stringliteral">&quot;executed. Defaults to 0.&quot;</span>)</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        (<span class="stringliteral">&quot;input-tensor-shape,s&quot;</span>, po::value(&amp;inputTensorShapes),</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;         <span class="stringliteral">&quot;The shape of the input tensors in the network as a flat array of integers separated by comma. &quot;</span></div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;         <span class="stringliteral">&quot;Several shapes can be passed separating them by semicolon. &quot;</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;         <span class="stringliteral">&quot;This parameter is optional, depending on the network.&quot;</span>)</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        (<span class="stringliteral">&quot;input-tensor-data,d&quot;</span>, po::value(&amp;inputTensorDataFilePaths)-&gt;default_value(<span class="stringliteral">&quot;&quot;</span>),</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;         <span class="stringliteral">&quot;Path to files containing the input data as a flat array separated by whitespace. &quot;</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;         <span class="stringliteral">&quot;Several paths can be passed separating them by comma. If not specified, the network will be run with dummy &quot;</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;         <span class="stringliteral">&quot;data (useful for profiling).&quot;</span>)</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        (<span class="stringliteral">&quot;input-type,y&quot;</span>,po::value(&amp;inputTypes), <span class="stringliteral">&quot;The type of the input tensors in the network separated by comma. &quot;</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;         <span class="stringliteral">&quot;If unset, defaults to \&quot;float\&quot; for all defined inputs. &quot;</span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;         <span class="stringliteral">&quot;Accepted values (float, int or qasymm8).&quot;</span>)</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        (<span class="stringliteral">&quot;quantize-input,q&quot;</span>,po::bool_switch()-&gt;default_value(<span class="keyword">false</span>),</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;         <span class="stringliteral">&quot;If this option is enabled, all float inputs will be quantized to qasymm8. &quot;</span></div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;         <span class="stringliteral">&quot;If unset, default to not quantized. &quot;</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;         <span class="stringliteral">&quot;Accepted values (true or false)&quot;</span>)</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        (<span class="stringliteral">&quot;output-type,z&quot;</span>,po::value(&amp;outputTypes), <span class="stringliteral">&quot;The type of the output tensors in the network separated by comma. &quot;</span></div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;         <span class="stringliteral">&quot;If unset, defaults to \&quot;float\&quot; for all defined outputs. &quot;</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;         <span class="stringliteral">&quot;Accepted values (float, int or qasymm8).&quot;</span>)</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        (<span class="stringliteral">&quot;output-name,o&quot;</span>, po::value(&amp;outputNames),</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;         <span class="stringliteral">&quot;Identifier of the output tensors in the network separated by comma.&quot;</span>)</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        (<span class="stringliteral">&quot;dequantize-output,l&quot;</span>,po::bool_switch()-&gt;default_value(<span class="keyword">false</span>),</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;         <span class="stringliteral">&quot;If this option is enabled, all quantized outputs will be dequantized to float. &quot;</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;         <span class="stringliteral">&quot;If unset, default to not get dequantized. &quot;</span></div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;         <span class="stringliteral">&quot;Accepted values (true or false)&quot;</span>)</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        (<span class="stringliteral">&quot;write-outputs-to-file,w&quot;</span>, po::value(&amp;outputTensorFiles),</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;         <span class="stringliteral">&quot;Comma-separated list of output file paths keyed with the binding-id of the output slot. &quot;</span></div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;         <span class="stringliteral">&quot;If left empty (the default), the output tensors will not be written to a file.&quot;</span>);</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    }</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; e)</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    {</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        <span class="comment">// Coverity points out that default_value(...) can throw a bad_lexical_cast,</span></div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        <span class="comment">// and that desc.add_options() can throw boost::io::too_few_args.</span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;        <span class="comment">// They really won&#39;t in any of these cases.</span></div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        BOOST_ASSERT_MSG(<span class="keyword">false</span>, <span class="stringliteral">&quot;Caught unexpected exception&quot;</span>);</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Fatal internal error: &quot;</span> &lt;&lt; e.what();</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    }</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    std::vector&lt;const char*&gt; clOptions;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    clOptions.reserve(csvRow.<a class="code" href="structarmnn_utils_1_1_csv_row.xhtml#af80d24ad6806a497ec21dc835c28b7ce">values</a>.size());</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; value : csvRow.<a class="code" href="structarmnn_utils_1_1_csv_row.xhtml#af80d24ad6806a497ec21dc835c28b7ce">values</a>)</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    {</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        clOptions.push_back(value.c_str());</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    }</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    po::variables_map vm;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    {</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        po::store(po::parse_command_line(static_cast&lt;int&gt;(clOptions.size()), clOptions.data(), desc), vm);</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;        po::notify(vm);</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        CheckOptionDependencies(vm);</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    }</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> po::error&amp; e)</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    {</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        std::cerr &lt;&lt; e.what() &lt;&lt; std::endl &lt;&lt; std::endl;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        std::cerr &lt;&lt; desc &lt;&lt; std::endl;</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    }</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <span class="comment">// Get the value of the switch arguments.</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <span class="keywordtype">bool</span> quantizeInput = vm[<span class="stringliteral">&quot;quantize-input&quot;</span>].as&lt;<span class="keywordtype">bool</span>&gt;();</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <span class="keywordtype">bool</span> dequantizeOutput = vm[<span class="stringliteral">&quot;dequantize-output&quot;</span>].as&lt;<span class="keywordtype">bool</span>&gt;();</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    <span class="comment">// Get the preferred order of compute devices.</span></div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    std::vector&lt;armnn::BackendId&gt; computeDevices = vm[<span class="stringliteral">&quot;compute&quot;</span>].as&lt;std::vector&lt;armnn::BackendId&gt;&gt;();</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <span class="comment">// Remove duplicates from the list of compute devices.</span></div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    RemoveDuplicateDevices(computeDevices);</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    <span class="comment">// Check that the specified compute devices are valid.</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    std::string invalidBackends;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="keywordflow">if</span> (!CheckRequestedBackendsAreValid(computeDevices, <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&amp;&gt;</a>(invalidBackends)))</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    {</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;The list of preferred devices contains invalid backend IDs: &quot;</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;                                 &lt;&lt; invalidBackends;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    }</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_network_execution_utils_8hpp.xhtml#ab182729acbd2161a0358d85906d30703">RunTest</a>(modelFormat, inputTensorShapes, computeDevices, dynamicBackendsPath, modelPath, inputNames,</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;                   inputTensorDataFilePaths, inputTypes, quantizeInput, outputTypes, outputNames, outputTensorFiles,</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;                   dequantizeOutput, enableProfiling, enableFp16TurboMode, thresholdTime, printIntermediate, subgraphId,</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                   enableLayerDetails, parseUnuspported);</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="_network_execution_utils_8hpp_xhtml_ab182729acbd2161a0358d85906d30703"><div class="ttname"><a href="_network_execution_utils_8hpp.xhtml#ab182729acbd2161a0358d85906d30703">RunTest</a></div><div class="ttdeci">int RunTest(const std::string &amp;format, const std::string &amp;inputTensorShapesStr, const vector&lt; armnn::BackendId &gt; &amp;computeDevices, const std::string &amp;dynamicBackendsPath, const std::string &amp;path, const std::string &amp;inputNames, const std::string &amp;inputTensorDataFilePaths, const std::string &amp;inputTypes, bool quantizeInput, const std::string &amp;outputTypes, const std::string &amp;outputNames, const std::string &amp;outputTensorFiles, bool dequantizeOuput, bool enableProfiling, bool enableFp16TurboMode, const double &amp;thresholdTime, bool printIntermediate, const size_t subgraphId, bool enableLayerDetails=false, bool parseUnsupported=false, const std::shared_ptr&lt; armnn::IRuntime &gt; &amp;runtime=nullptr)</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00537">NetworkExecutionUtils.hpp:537</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_csv_row_xhtml_af80d24ad6806a497ec21dc835c28b7ce"><div class="ttname"><a href="structarmnn_utils_1_1_csv_row.xhtml#af80d24ad6806a497ec21dc835c28b7ce">armnnUtils::CsvRow::values</a></div><div class="ttdeci">std::vector&lt; std::string &gt; values</div><div class="ttdef"><b>Definition:</b> <a href="_csv_reader_8hpp_source.xhtml#l00015">CsvReader.hpp:15</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00163">Logging.hpp:163</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_ae1de2f7ca1db17f45f97155e239b8b45"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#ae1de2f7ca1db17f45f97155e239b8b45">armnn::BackendRegistry::GetBackendIdsAsString</a></div><div class="ttdeci">std::string GetBackendIdsAsString() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00076">BackendRegistry.cpp:76</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab182729acbd2161a0358d85906d30703"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab182729acbd2161a0358d85906d30703">&#9670;&nbsp;</a></span>RunTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int RunTest </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>inputTensorShapesStr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>computeDevices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>dynamicBackendsPath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>inputNames</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>inputTensorDataFilePaths</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>inputTypes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>quantizeInput</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>outputTypes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>outputNames</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>outputTensorFiles</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>dequantizeOuput</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enableProfiling</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enableFp16TurboMode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>thresholdTime</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>printIntermediate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enableLayerDetails</em> = <code><a class="el" href="_ref_layer_tests_8cpp.xhtml#af3b727ae5a13ff472892ab8bda2eb1b5">false</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>parseUnsupported</em> = <code><a class="el" href="_ref_layer_tests_8cpp.xhtml#af3b727ae5a13ff472892ab8bda2eb1b5">false</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>runtime</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00537">537</a> of file <a class="el" href="_network_execution_utils_8hpp_source.xhtml">NetworkExecutionUtils.hpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00163">ARMNN_LOG</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00369">ExecuteNetworkParams::m_ComputeDevices</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00379">ExecuteNetworkParams::m_DequantizeOutput</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00370">ExecuteNetworkParams::m_DynamicBackendsPath</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00381">ExecuteNetworkParams::m_EnableFp16TurboMode</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00385">ExecuteNetworkParams::m_EnableLayerDetails</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00380">ExecuteNetworkParams::m_EnableProfiling</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00386">ExecuteNetworkParams::m_GenerateTensorData</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00371">ExecuteNetworkParams::m_InputNames</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00373">ExecuteNetworkParams::m_InputTensorDataFilePaths</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00372">ExecuteNetworkParams::m_InputTensorShapes</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00374">ExecuteNetworkParams::m_InputTypes</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00368">ExecuteNetworkParams::m_IsModelBinary</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00367">ExecuteNetworkParams::m_ModelPath</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00377">ExecuteNetworkParams::m_OutputNames</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00378">ExecuteNetworkParams::m_OutputTensorFiles</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00376">ExecuteNetworkParams::m_OutputTypes</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00387">ExecuteNetworkParams::m_ParseUnsupported</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00383">ExecuteNetworkParams::m_PrintIntermediate</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00375">ExecuteNetworkParams::m_QuantizeInput</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00384">ExecuteNetworkParams::m_SubgraphId</a>, <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00382">ExecuteNetworkParams::m_ThresholdTime</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_unsupported_8cpp_source.xhtml#l00239">BOOST_FIXTURE_TEST_CASE()</a>, <a class="el" href="_execute_network_8cpp_source.xhtml#l00009">main()</a>, and <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00750">RunCsvTest()</a>.</p>
<div class="fragment"><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;{</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    std::string modelFormat = boost::trim_copy(format);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    std::string modelPath = boost::trim_copy(path);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    std::vector&lt;std::string&gt; inputNamesVector = ParseStringList(inputNames, <span class="stringliteral">&quot;,&quot;</span>);</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    std::vector&lt;std::string&gt; inputTensorShapesVector = ParseStringList(inputTensorShapesStr, <span class="stringliteral">&quot;:&quot;</span>);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    std::vector&lt;std::string&gt; inputTensorDataFilePathsVector = ParseStringList(</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        inputTensorDataFilePaths, <span class="stringliteral">&quot;,&quot;</span>);</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    std::vector&lt;std::string&gt; outputNamesVector = ParseStringList(outputNames, <span class="stringliteral">&quot;,&quot;</span>);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    std::vector&lt;std::string&gt; inputTypesVector = ParseStringList(inputTypes, <span class="stringliteral">&quot;,&quot;</span>);</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    std::vector&lt;std::string&gt; outputTypesVector = ParseStringList(outputTypes, <span class="stringliteral">&quot;,&quot;</span>);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    std::vector&lt;std::string&gt; outputTensorFilesVector = ParseStringList(outputTensorFiles, <span class="stringliteral">&quot;,&quot;</span>);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="comment">// Parse model binary flag from the model-format string we got from the command-line</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="keywordtype">bool</span> isModelBinary;</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;bin&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    {</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        isModelBinary = <span class="keyword">true</span>;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    }</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;txt&quot;</span>) != std::string::npos || modelFormat.find(<span class="stringliteral">&quot;text&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    {</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        isModelBinary = <span class="keyword">false</span>;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    }</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    {</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Unknown model format: &#39;&quot;</span> &lt;&lt; modelFormat &lt;&lt; <span class="stringliteral">&quot;&#39;. Please include &#39;binary&#39; or &#39;text&#39;&quot;</span>;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    }</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <span class="keywordflow">if</span> ((inputTensorShapesVector.size() != 0) &amp;&amp; (inputTensorShapesVector.size() != inputNamesVector.size()))</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    {</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;input-name and input-tensor-shape must have the same amount of elements.&quot;</span>;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    }</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keywordflow">if</span> ((inputTensorDataFilePathsVector.size() != 0) &amp;&amp;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        (inputTensorDataFilePathsVector.size() != inputNamesVector.size()))</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    {</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;input-name and input-tensor-data must have the same amount of elements.&quot;</span>;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    }</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="keywordflow">if</span> ((outputTensorFilesVector.size() != 0) &amp;&amp;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        (outputTensorFilesVector.size() != outputNamesVector.size()))</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    {</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;output-name and write-outputs-to-file must have the same amount of elements.&quot;</span>;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    }</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keywordflow">if</span> (inputTypesVector.size() == 0)</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    {</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        <span class="comment">//Defaults the value of all inputs to &quot;float&quot;</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        inputTypesVector.assign(inputNamesVector.size(), <span class="stringliteral">&quot;float&quot;</span>);</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    }</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((inputTypesVector.size() != 0) &amp;&amp; (inputTypesVector.size() != inputNamesVector.size()))</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    {</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;input-name and input-type must have the same amount of elements.&quot;</span>;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    }</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="keywordflow">if</span> (outputTypesVector.size() == 0)</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    {</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        <span class="comment">//Defaults the value of all outputs to &quot;float&quot;</span></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        outputTypesVector.assign(outputNamesVector.size(), <span class="stringliteral">&quot;float&quot;</span>);</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    }</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((outputTypesVector.size() != 0) &amp;&amp; (outputTypesVector.size() != outputNamesVector.size()))</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    {</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;output-name and output-type must have the same amount of elements.&quot;</span>;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    }</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="comment">// Parse input tensor shape from the string we got from the command-line.</span></div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    std::vector&lt;std::unique_ptr&lt;armnn::TensorShape&gt;&gt; inputTensorShapes;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordflow">if</span> (!inputTensorShapesVector.empty())</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    {</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        inputTensorShapes.reserve(inputTensorShapesVector.size());</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> std::string&amp; shape : inputTensorShapesVector)</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        {</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;            std::stringstream ss(shape);</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;            std::vector&lt;unsigned int&gt; dims = ParseArray(ss);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;            <span class="keywordflow">try</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            {</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                <span class="comment">// Coverity fix: An exception of type armnn::InvalidArgumentException is thrown and never caught.</span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                inputTensorShapes.push_back(std::make_unique&lt;armnn::TensorShape&gt;(dims.size(), dims.data()));</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            }</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;            <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>&amp; e)</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            {</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Cannot create tensor shape: &quot;</span> &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;            }</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        }</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    }</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="comment">// Check that threshold time is not less than zero</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keywordflow">if</span> (thresholdTime &lt; 0)</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    {</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Threshold time supplied as a command line argument is less than zero.&quot;</span>;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    }</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <a class="code" href="struct_execute_network_params.xhtml">ExecuteNetworkParams</a> params;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a44c7d128c41b2717fe425cf6fdc32936">m_ModelPath</a>                = modelPath.c_str();</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a>            = isModelBinary;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">m_ComputeDevices</a>           = computeDevices;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>      = dynamicBackendsPath;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a155de45be27135e4c9b6b7df277d0b8f">m_InputNames</a>               = inputNamesVector;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>        = std::move(inputTensorShapes);</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a924e9ee22f0bf39f05e0c1b45e5c637b">m_InputTensorDataFilePaths</a> = inputTensorDataFilePathsVector;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a08c2e205fcf14f0caa44388f8314e7b5">m_InputTypes</a>               = inputTypesVector;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a077f6963fc555d9d42f98cf9ed3e7e03">m_QuantizeInput</a>            = quantizeInput;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a71c32d9b0334a1561bb6d2db677755d6">m_OutputTypes</a>              = outputTypesVector;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a1a08c6c34dd3ce290b4bc62a715bb810">m_OutputNames</a>              = outputNamesVector;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a64c0a99d553c42d215c4b2f1a2f1c7d4">m_OutputTensorFiles</a>        = outputTensorFilesVector;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a85929a48c5e7b16af8f5bc637e45a37f">m_DequantizeOutput</a>         = dequantizeOuput;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>          = enableProfiling;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a513151623e8d448951a0b94ad1946fbe">m_EnableFp16TurboMode</a>      = enableFp16TurboMode;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a>            = thresholdTime;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a5acc5b4076604db15ee13ee19fa623c4">m_PrintIntermediate</a>        = printIntermediate;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a2d4582aa74998c397bd064ae73745b62">m_SubgraphId</a>               = subgraphId;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a7efc68309e76bfefbfa16fe94501b060">m_EnableLayerDetails</a>       = enableLayerDetails;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a>       = inputTensorDataFilePathsVector.empty();</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    params.<a class="code" href="struct_execute_network_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">m_ParseUnsupported</a>         = parseUnsupported;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <span class="comment">// Warn if ExecuteNetwork will generate dummy input data</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a>)</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    {</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;No input files provided, input tensors will be filled with 0s.&quot;</span>;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    }</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="comment">// Forward to implementation based on the parser type</span></div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;armnn&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    {</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="preprocessor">#if defined(ARMNN_SERIALIZER)</span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keywordflow">return</span> MainImpl&lt;armnnDeserializer::IDeserializer, float&gt;(params, runtime);</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with serialization support.&quot;</span>;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    }</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;caffe&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    {</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="preprocessor">#if defined(ARMNN_CAFFE_PARSER)</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        <span class="keywordflow">return</span> MainImpl&lt;armnnCaffeParser::ICaffeParser, float&gt;(params, runtime);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with Caffe parser support.&quot;</span>;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    }</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;onnx&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;{</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;<span class="preprocessor">#if defined(ARMNN_ONNX_PARSER)</span></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keywordflow">return</span> MainImpl&lt;armnnOnnxParser::IOnnxParser, float&gt;(params, runtime);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with Onnx parser support.&quot;</span>;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    }</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;tensorflow&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    {</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;<span class="preprocessor">#if defined(ARMNN_TF_PARSER)</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        <span class="keywordflow">return</span> MainImpl&lt;armnnTfParser::ITfParser, float&gt;(params, runtime);</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with Tensorflow parser support.&quot;</span>;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    }</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(modelFormat.find(<span class="stringliteral">&quot;tflite&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    {</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;<span class="preprocessor">#if defined(ARMNN_TF_LITE_PARSER)</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;        <span class="keywordflow">if</span> (! isModelBinary)</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;        {</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Unknown model format: &#39;&quot;</span> &lt;&lt; modelFormat &lt;&lt; <span class="stringliteral">&quot;&#39;. Only &#39;binary&#39; format supported \</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="stringliteral">              for tflite files&quot;</span>;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        }</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        <span class="keywordflow">return</span> MainImpl&lt;armnnTfLiteParser::ITfLiteParser, float&gt;(params, runtime);</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Unknown model format: &#39;&quot;</span> &lt;&lt; modelFormat &lt;&lt;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            <span class="stringliteral">&quot;&#39;. Please include &#39;caffe&#39;, &#39;tensorflow&#39;, &#39;tflite&#39; or &#39;onnx&#39;&quot;</span>;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    }</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    {</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Unknown model format: &#39;&quot;</span> &lt;&lt; modelFormat &lt;&lt;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                                 <span class="stringliteral">&quot;&#39;. Please include &#39;caffe&#39;, &#39;tensorflow&#39;, &#39;tflite&#39; or &#39;onnx&#39;&quot;</span>;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    }</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;}</div><div class="ttc" id="struct_execute_network_params_xhtml_a85929a48c5e7b16af8f5bc637e45a37f"><div class="ttname"><a href="struct_execute_network_params.xhtml#a85929a48c5e7b16af8f5bc637e45a37f">ExecuteNetworkParams::m_DequantizeOutput</a></div><div class="ttdeci">bool m_DequantizeOutput</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00379">NetworkExecutionUtils.hpp:379</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a71c32d9b0334a1561bb6d2db677755d6"><div class="ttname"><a href="struct_execute_network_params.xhtml#a71c32d9b0334a1561bb6d2db677755d6">ExecuteNetworkParams::m_OutputTypes</a></div><div class="ttdeci">std::vector&lt; string &gt; m_OutputTypes</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00376">NetworkExecutionUtils.hpp:376</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a64c0a99d553c42d215c4b2f1a2f1c7d4"><div class="ttname"><a href="struct_execute_network_params.xhtml#a64c0a99d553c42d215c4b2f1a2f1c7d4">ExecuteNetworkParams::m_OutputTensorFiles</a></div><div class="ttdeci">std::vector&lt; string &gt; m_OutputTensorFiles</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00378">NetworkExecutionUtils.hpp:378</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a091cda9098c6f03f91f477a22327892d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">ExecuteNetworkParams::m_InputTensorShapes</a></div><div class="ttdeci">std::vector&lt; TensorShapePtr &gt; m_InputTensorShapes</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00372">NetworkExecutionUtils.hpp:372</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a513151623e8d448951a0b94ad1946fbe"><div class="ttname"><a href="struct_execute_network_params.xhtml#a513151623e8d448951a0b94ad1946fbe">ExecuteNetworkParams::m_EnableFp16TurboMode</a></div><div class="ttdeci">bool m_EnableFp16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00381">NetworkExecutionUtils.hpp:381</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">ExecuteNetworkParams::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00370">NetworkExecutionUtils.hpp:370</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml_abf843cbb29dec939d0731e491bab6f70"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">armnn::Exception::what</a></div><div class="ttdeci">virtual const char * what() const noexcept override</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00032">Exceptions.cpp:32</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00163">Logging.hpp:163</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a5acc5b4076604db15ee13ee19fa623c4"><div class="ttname"><a href="struct_execute_network_params.xhtml#a5acc5b4076604db15ee13ee19fa623c4">ExecuteNetworkParams::m_PrintIntermediate</a></div><div class="ttdeci">bool m_PrintIntermediate</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00383">NetworkExecutionUtils.hpp:383</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a5c7f0c083da98e7b6e9ba79d2fcd985d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">ExecuteNetworkParams::m_ParseUnsupported</a></div><div class="ttdeci">bool m_ParseUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00387">NetworkExecutionUtils.hpp:387</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a2d4582aa74998c397bd064ae73745b62"><div class="ttname"><a href="struct_execute_network_params.xhtml#a2d4582aa74998c397bd064ae73745b62">ExecuteNetworkParams::m_SubgraphId</a></div><div class="ttdeci">size_t m_SubgraphId</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00384">NetworkExecutionUtils.hpp:384</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a2d54e6252c1c9a0e29f7706ba03b2b74"><div class="ttname"><a href="struct_execute_network_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">ExecuteNetworkParams::m_ComputeDevices</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; m_ComputeDevices</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00369">NetworkExecutionUtils.hpp:369</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a155de45be27135e4c9b6b7df277d0b8f"><div class="ttname"><a href="struct_execute_network_params.xhtml#a155de45be27135e4c9b6b7df277d0b8f">ExecuteNetworkParams::m_InputNames</a></div><div class="ttdeci">std::vector&lt; string &gt; m_InputNames</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00371">NetworkExecutionUtils.hpp:371</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a6bf2f586c403977d31c7d32d371918cf"><div class="ttname"><a href="struct_execute_network_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">ExecuteNetworkParams::m_IsModelBinary</a></div><div class="ttdeci">bool m_IsModelBinary</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00368">NetworkExecutionUtils.hpp:368</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a99c7360a4d4b248b3f10607bc5d2fe7b"><div class="ttname"><a href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">ExecuteNetworkParams::m_GenerateTensorData</a></div><div class="ttdeci">bool m_GenerateTensorData</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00386">NetworkExecutionUtils.hpp:386</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml"><div class="ttname"><a href="struct_execute_network_params.xhtml">ExecuteNetworkParams</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00363">NetworkExecutionUtils.hpp:363</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a318999172ae5197f56326b12d29104b7"><div class="ttname"><a href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">ExecuteNetworkParams::m_ThresholdTime</a></div><div class="ttdeci">double m_ThresholdTime</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00382">NetworkExecutionUtils.hpp:382</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a44c7d128c41b2717fe425cf6fdc32936"><div class="ttname"><a href="struct_execute_network_params.xhtml#a44c7d128c41b2717fe425cf6fdc32936">ExecuteNetworkParams::m_ModelPath</a></div><div class="ttdeci">const char * m_ModelPath</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00367">NetworkExecutionUtils.hpp:367</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a1a08c6c34dd3ce290b4bc62a715bb810"><div class="ttname"><a href="struct_execute_network_params.xhtml#a1a08c6c34dd3ce290b4bc62a715bb810">ExecuteNetworkParams::m_OutputNames</a></div><div class="ttdeci">std::vector&lt; string &gt; m_OutputNames</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00377">NetworkExecutionUtils.hpp:377</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a924e9ee22f0bf39f05e0c1b45e5c637b"><div class="ttname"><a href="struct_execute_network_params.xhtml#a924e9ee22f0bf39f05e0c1b45e5c637b">ExecuteNetworkParams::m_InputTensorDataFilePaths</a></div><div class="ttdeci">std::vector&lt; string &gt; m_InputTensorDataFilePaths</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00373">NetworkExecutionUtils.hpp:373</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a7efc68309e76bfefbfa16fe94501b060"><div class="ttname"><a href="struct_execute_network_params.xhtml#a7efc68309e76bfefbfa16fe94501b060">ExecuteNetworkParams::m_EnableLayerDetails</a></div><div class="ttdeci">bool m_EnableLayerDetails</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00385">NetworkExecutionUtils.hpp:385</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a08c2e205fcf14f0caa44388f8314e7b5"><div class="ttname"><a href="struct_execute_network_params.xhtml#a08c2e205fcf14f0caa44388f8314e7b5">ExecuteNetworkParams::m_InputTypes</a></div><div class="ttdeci">std::vector&lt; string &gt; m_InputTypes</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00374">NetworkExecutionUtils.hpp:374</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a077f6963fc555d9d42f98cf9ed3e7e03"><div class="ttname"><a href="struct_execute_network_params.xhtml#a077f6963fc555d9d42f98cf9ed3e7e03">ExecuteNetworkParams::m_QuantizeInput</a></div><div class="ttdeci">bool m_QuantizeInput</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00375">NetworkExecutionUtils.hpp:375</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="struct_execute_network_params.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">ExecuteNetworkParams::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00380">NetworkExecutionUtils.hpp:380</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="ad7abdfb6c0cc99eb356c1eefdc6ff696"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7abdfb6c0cc99eb356c1eefdc6ff696">&#9670;&nbsp;</a></span>generateTensorData</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool generateTensorData = <a class="el" href="_ref_layer_tests_8cpp.xhtml#a37f1c3ccc9fc906be85185350dd83d48">true</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8hpp_source.xhtml#l00361">361</a> of file <a class="el" href="_network_execution_utils_8hpp_source.xhtml">NetworkExecutionUtils.hpp</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_bee5dd02b9a5e046b34f7fb0b8e9850a.xhtml">NetworkExecutionUtils</a></li><li class="navelem"><a class="el" href="_network_execution_utils_8hpp.xhtml">NetworkExecutionUtils.hpp</a></li>
    <li class="footer">Generated on Fri Mar 13 2020 16:09:16 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
