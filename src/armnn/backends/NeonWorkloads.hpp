//
// Copyright Â© 2017 Arm Ltd. All rights reserved.
// See LICENSE file in the project root for full license information.
//

#pragma once
#include "backends/NeonWorkloads/NeonActivationFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonActivationUint8Workload.hpp"
#include "backends/NeonWorkloads/NeonAdditionFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonBaseConstantWorkload.hpp"
#include "backends/NeonWorkloads/NeonBaseMergerWorkload.hpp"
#include "backends/NeonWorkloads/NeonBaseSplitterWorkload.hpp"
#include "backends/NeonWorkloads/NeonBatchNormalizationFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonConstantFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonConstantUint8Workload.hpp"
#include "backends/NeonWorkloads/NeonConvolution2dBaseWorkload.hpp"
#include "backends/NeonWorkloads/NeonConvolution2dFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonConvolution2dUint8Workload.hpp"
#include "backends/NeonWorkloads/NeonDepthwiseConvolutionFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonDepthwiseConvolutionUint8Workload.hpp"
#include "backends/NeonWorkloads/NeonFloorFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonFullyConnectedFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonL2NormalizationFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonMergerFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonMergerUint8Workload.hpp"
#include "backends/NeonWorkloads/NeonMultiplicationFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonNormalizationFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonPermuteWorkload.hpp"
#include "backends/NeonWorkloads/NeonPooling2dBaseWorkload.hpp"
#include "backends/NeonWorkloads/NeonPooling2dFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonPooling2dUint8Workload.hpp"
#include "backends/NeonWorkloads/NeonReshapeFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonReshapeUint8Workload.hpp"
#include "backends/NeonWorkloads/NeonSoftmaxFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonSoftmaxUint8Workload.hpp"
#include "backends/NeonWorkloads/NeonSplitterFloat32Workload.hpp"
#include "backends/NeonWorkloads/NeonSplitterUint8Workload.hpp"
