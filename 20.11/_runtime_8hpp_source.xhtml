<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/Runtime.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_runtime_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Runtime.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_runtime_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_loaded_network_8hpp.xhtml">LoadedNetwork.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_device_spec_8hpp.xhtml">DeviceSpec.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_network_8hpp.xhtml">armnn/INetwork.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_runtime_8hpp.xhtml">armnn/IRuntime.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_8hpp.xhtml">armnn/Tensor.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_backend_id_8hpp.xhtml">armnn/BackendId.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_dynamic_backend_8hpp.xhtml">armnn/backends/DynamicBackend.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_profiling_service_8hpp.xhtml">ProfilingService.hpp</a>&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_profiling_service_8hpp.xhtml">IProfilingService.hpp</a>&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_report_structure_8hpp.xhtml">IReportStructure.hpp</a>&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;mutex&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a12f6b97ee3f1060ecb6240e022678a8b">   27</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a12f6b97ee3f1060ecb6240e022678a8b">LoadedNetworks</a> = std::unordered_map&lt;NetworkId, std::unique_ptr&lt;LoadedNetwork&gt;&gt;;</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#af55a349b17603163f3dc948928501c00">   28</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_1_1profiling_1_1_i_report_structure.xhtml">IReportStructure</a> = <a class="code" href="namespacearmnn.xhtml#af55a349b17603163f3dc948928501c00">profiling::IReportStructure</a>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="classarmnn_1_1_runtime.xhtml">   30</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_runtime.xhtml">Runtime</a> final :  <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_i_runtime.xhtml">IRuntime</a>,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                       <span class="keyword">public</span> <a class="code" href="classarmnn_1_1profiling_1_1_i_report_structure.xhtml">IReportStructure</a></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">    /// Loads a complete network into the Runtime.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">    /// @param [out] networkIdOut - Unique identifier for the network is returned in this reference.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">    /// @param [in] network - Complete network to load into the Runtime.</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">    /// The runtime takes ownership of the network once passed in.</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">    /// @return armnn::Status</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> <a class="code" href="classarmnn_1_1_runtime.xhtml#ae225e29e38b44860a32d766053a383dc">LoadNetwork</a>(<a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a>&amp; networkIdOut, <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> network) <span class="keyword">override</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">    /// Load a complete network into the IRuntime.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">    /// @param [out] networkIdOut Unique identifier for the network is returned in this reference.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">    /// @param [in] network Complete network to load into the IRuntime.</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    /// @param [out] errorMessage Error message if there were any errors.</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">    /// The runtime takes ownership of the network once passed in.</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">    /// @return armnn::Status</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> <a class="code" href="classarmnn_1_1_runtime.xhtml#ae225e29e38b44860a32d766053a383dc">LoadNetwork</a>(<a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a>&amp; networkIdOut,</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                               <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> network,</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                               std::string&amp; errorMessage) <span class="keyword">override</span>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> <a class="code" href="classarmnn_1_1_runtime.xhtml#ae225e29e38b44860a32d766053a383dc">LoadNetwork</a>(<a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a>&amp; networkIdOut,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                               <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> network,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                               std::string&amp; errorMessage,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a>&amp; networkProperties) <span class="keyword">override</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="classarmnn_1_1_runtime.xhtml#a7d0ddcd74d6f6438283e511480b64cc1">GetInputTensorInfo</a>(<a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId, <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerId) <span class="keyword">const override</span>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="classarmnn_1_1_runtime.xhtml#a1d5d285b79758564ee68f234e02dd2b2">GetOutputTensorInfo</a>(<a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId, <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerId) <span class="keyword">const override</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// Evaluates network using input in inputTensors, outputs filled into outputTensors.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> <a class="code" href="classarmnn_1_1_runtime.xhtml#ad3be3cca4ac08a262383b96868f7123d">EnqueueWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a>&amp; inputTensors,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a>&amp; outputTensors) <span class="keyword">override</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">    /// Unloads a network from the Runtime.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">    /// At the moment this only removes the network from the m_Impl-&gt;m_Network.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">    /// This might need more work in the future to be AndroidNN compliant.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">    /// @param [in] networkId Unique identifier for the network to be unloaded. Generated in LoadNetwork().</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">    /// @return armnn::Status</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> <a class="code" href="classarmnn_1_1_runtime.xhtml#ae54a3b358f009aec340d443d038805a4">UnloadNetwork</a>(<a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId) <span class="keyword">override</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classarmnn_1_1_runtime.xhtml#a25505c77f282c0295765d81c86514539">   71</a></span>&#160;    <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_device_spec.xhtml">IDeviceSpec</a>&amp; <a class="code" href="classarmnn_1_1_runtime.xhtml#a25505c77f282c0295765d81c86514539">GetDeviceSpec</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_DeviceSpec; }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">    /// Gets the profiler corresponding to the given network id.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">    /// @param networkId The id of the network for which to get the profile.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">    /// @return A pointer to the requested profiler, or nullptr if not found.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keyword">const</span> std::shared_ptr&lt;IProfiler&gt; <a class="code" href="classarmnn_1_1_runtime.xhtml#a4bcf6ecfacedc0567e1c044f1b0823f0">GetProfiler</a>(<a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId) <span class="keyword">const override</span>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">    /// Registers a callback function to debug layers performing custom computations on intermediate tensors.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">    /// @param networkId The id of the network to register the callback.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">    /// @param func callback function to pass to the debug layer.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_runtime.xhtml#abb2506e9166cd0467deaa9651fdade77">RegisterDebugCallback</a>(<a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId, <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a15f3ad9b5e4e3d46b0a6dda246a7bc28">DebugCallbackFunction</a>&amp; func) <span class="keyword">override</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">    /// Creates a runtime for workload execution.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_runtime.xhtml#a013ec7e08ae653e003956b4c9b5d0748">Runtime</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">CreationOptions</a>&amp; options);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="classarmnn_1_1_runtime.xhtml#acedafca2d2711908fe94f2ef71286437">~Runtime</a>();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">//NOTE: we won&#39;t need the profiling service reference but it is good to pass the service</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// in this way to facilitate other implementations down the road</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_runtime.xhtml#a1ceb8f6be0ed677e54b1892994080c22">ReportStructure</a>() <span class="keyword">override</span>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_runtime.xhtml#a01fa2d4db2c1b4ee5269a31e514f37ec">RuntimeLoadedNetworksReserve</a>(<a class="code" href="classarmnn_1_1_runtime.xhtml">armnn::Runtime</a>* runtime); <span class="comment">// See RuntimeTests.cpp</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">friend</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">profiling::ProfilingService</a>&amp; <a class="code" href="classarmnn_1_1_runtime.xhtml#a118109df27aff774f331aab8e47cf706">GetProfilingService</a>(<a class="code" href="classarmnn_1_1_runtime.xhtml">armnn::Runtime</a>* runtime); <span class="comment">// See RuntimeTests.cpp</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">int</span> GenerateNetworkId();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="classarmnn_1_1_loaded_network.xhtml">LoadedNetwork</a>* GetLoadedNetworkPtr(<a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId) <span class="keyword">const</span>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Func&gt;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordtype">void</span> LoadedNetworkFuncSafe(<a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId, Func f)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        std::lock_guard&lt;std::mutex&gt; lockGuard(m_Mutex);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keyword">auto</span> iter = m_LoadedNetworks.find(networkId);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">if</span> (iter != m_LoadedNetworks.end())</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            f(iter-&gt;second.get());</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">    /// Loads any available/compatible dynamic backend in the runtime.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> LoadDynamicBackends(<span class="keyword">const</span> std::string&amp; overrideBackendPath);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">mutable</span> std::mutex m_Mutex;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">    /// Map of Loaded Networks with associated GUID as key</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn.xhtml#a12f6b97ee3f1060ecb6240e022678a8b">LoadedNetworks</a> m_LoadedNetworks;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    std::unordered_map&lt;BackendId, IBackendInternal::IBackendContextPtr&gt; m_BackendContexts;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordtype">int</span> m_NetworkIdCounter;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="classarmnn_1_1_device_spec.xhtml">DeviceSpec</a> m_DeviceSpec;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">    /// List of dynamic backends loaded in the runtime</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"></span>    std::vector&lt;DynamicBackendPtr&gt; m_DynamicBackends;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">    /// Profiling Service Instance</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">profiling::ProfilingService</a> m_ProfilingService;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;};</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_runtime_xhtml_a1d5d285b79758564ee68f234e02dd2b2"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#a1d5d285b79758564ee68f234e02dd2b2">armnn::Runtime::GetOutputTensorInfo</a></div><div class="ttdeci">virtual TensorInfo GetOutputTensorInfo(NetworkId networkId, LayerBindingId layerId) const override</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00315">Runtime.cpp:315</a></div></div>
<div class="ttc" id="_device_spec_8hpp_xhtml"><div class="ttname"><a href="_device_spec_8hpp.xhtml">DeviceSpec.hpp</a></div></div>
<div class="ttc" id="_tensor_8hpp_xhtml"><div class="ttname"><a href="_tensor_8hpp.xhtml">Tensor.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_a25505c77f282c0295765d81c86514539"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#a25505c77f282c0295765d81c86514539">armnn::Runtime::GetDeviceSpec</a></div><div class="ttdeci">virtual const IDeviceSpec &amp; GetDeviceSpec() const override</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8hpp_source.xhtml#l00071">Runtime.hpp:71</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml">armnn::DeviceSpec</a></div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00014">DeviceSpec.hpp:14</a></div></div>
<div class="ttc" id="_i_runtime_8hpp_xhtml"><div class="ttname"><a href="_i_runtime_8hpp.xhtml">IRuntime.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00340">Tensor.hpp:340</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_a118109df27aff774f331aab8e47cf706"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#a118109df27aff774f331aab8e47cf706">armnn::Runtime::GetProfilingService</a></div><div class="ttdeci">friend profiling::ProfilingService &amp; GetProfilingService(armnn::Runtime *runtime)</div><div class="ttdef"><b>Definition:</b> <a href="_test_utils_8cpp_source.xhtml#l00025">TestUtils.cpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_runtime_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00039">IRuntime.hpp:39</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af55a349b17603163f3dc948928501c00"><div class="ttname"><a href="namespacearmnn.xhtml#af55a349b17603163f3dc948928501c00">armnn::IReportStructure</a></div><div class="ttdeci">profiling::IReportStructure IReportStructure</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8hpp_source.xhtml#l00028">Runtime.hpp:28</a></div></div>
<div class="ttc" id="_loaded_network_8hpp_xhtml"><div class="ttname"><a href="_loaded_network_8hpp.xhtml">LoadedNetwork.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a15f3ad9b5e4e3d46b0a6dda246a7bc28"><div class="ttname"><a href="namespacearmnn.xhtml#a15f3ad9b5e4e3d46b0a6dda246a7bc28">armnn::DebugCallbackFunction</a></div><div class="ttdeci">std::function&lt; void(LayerGuid guid, unsigned int slotIndex, ITensorHandle *tensorHandle)&gt; DebugCallbackFunction</div><div class="ttdoc">Define the type of callback for the Debug layer to call. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00275">Types.hpp:275</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_a4bcf6ecfacedc0567e1c044f1b0823f0"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#a4bcf6ecfacedc0567e1c044f1b0823f0">armnn::Runtime::GetProfiler</a></div><div class="ttdeci">virtual const std::shared_ptr&lt; IProfiler &gt; GetProfiler(NetworkId networkId) const override</div><div class="ttdoc">Gets the profiler corresponding to the given network id. </div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00158">Runtime.cpp:158</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00202">Types.hpp:202</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00027">IRuntime.hpp:27</a></div></div>
<div class="ttc" id="_i_report_structure_8hpp_xhtml"><div class="ttname"><a href="_i_report_structure_8hpp.xhtml">IReportStructure.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_a1ceb8f6be0ed677e54b1892994080c22"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#a1ceb8f6be0ed677e54b1892994080c22">armnn::Runtime::ReportStructure</a></div><div class="ttdeci">virtual void ReportStructure() override</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00170">Runtime.cpp:170</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_dynamic_backend_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_dynamic_backend_8hpp.xhtml">DynamicBackend.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_abb2506e9166cd0467deaa9651fdade77"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#abb2506e9166cd0467deaa9651fdade77">armnn::Runtime::RegisterDebugCallback</a></div><div class="ttdeci">virtual void RegisterDebugCallback(NetworkId networkId, const DebugCallbackFunction &amp;func) override</div><div class="ttdoc">Registers a callback function to debug layers performing custom computations on intermediate tensors...</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00343">Runtime.cpp:343</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00341">Tensor.hpp:341</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00026">Types.hpp:26</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00600">INetwork.hpp:600</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_device_spec_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_device_spec.xhtml">armnn::IDeviceSpec</a></div><div class="ttdoc">Device specific knowledge to be passed to the optimizer. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00192">Types.hpp:192</a></div></div>
<div class="ttc" id="_backend_id_8hpp_xhtml"><div class="ttname"><a href="_backend_id_8hpp.xhtml">BackendId.hpp</a></div></div>
<div class="ttc" id="_i_network_8hpp_xhtml"><div class="ttname"><a href="_i_network_8hpp.xhtml">INetwork.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_report_structure_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_report_structure.xhtml">armnn::profiling::IReportStructure</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_report_structure_8hpp_source.xhtml#l00014">IReportStructure.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00042">IRuntime.hpp:42</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">armnn::profiling::ProfilingService</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8hpp_source.xhtml#l00049">ProfilingService.hpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_a01fa2d4db2c1b4ee5269a31e514f37ec"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#a01fa2d4db2c1b4ee5269a31e514f37ec">armnn::Runtime::RuntimeLoadedNetworksReserve</a></div><div class="ttdeci">friend void RuntimeLoadedNetworksReserve(armnn::Runtime *runtime)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_tests_8cpp_source.xhtml#l00030">RuntimeTests.cpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_loaded_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_loaded_network.xhtml">armnn::LoadedNetwork</a></div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8hpp_source.xhtml#l00034">LoadedNetwork.hpp:34</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_ae225e29e38b44860a32d766053a383dc"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#ae225e29e38b44860a32d766053a383dc">armnn::Runtime::LoadNetwork</a></div><div class="ttdeci">virtual Status LoadNetwork(NetworkId &amp;networkIdOut, IOptimizedNetworkPtr network) override</div><div class="ttdoc">Loads a complete network into the Runtime. </div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00047">Runtime.cpp:47</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_acedafca2d2711908fe94f2ef71286437"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#acedafca2d2711908fe94f2ef71286437">armnn::Runtime::~Runtime</a></div><div class="ttdeci">~Runtime()</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00254">Runtime.cpp:254</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml">armnn::Runtime</a></div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8hpp_source.xhtml#l00030">Runtime.hpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_ae54a3b358f009aec340d443d038805a4"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#ae54a3b358f009aec340d443d038805a4">armnn::Runtime::UnloadNetwork</a></div><div class="ttdeci">virtual Status UnloadNetwork(NetworkId networkId) override</div><div class="ttdoc">Unloads a network from the Runtime. </div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00106">Runtime.cpp:106</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a12f6b97ee3f1060ecb6240e022678a8b"><div class="ttname"><a href="namespacearmnn.xhtml#a12f6b97ee3f1060ecb6240e022678a8b">armnn::LoadedNetworks</a></div><div class="ttdeci">std::unordered_map&lt; NetworkId, std::unique_ptr&lt; LoadedNetwork &gt; &gt; LoadedNetworks</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8hpp_source.xhtml#l00027">Runtime.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_a013ec7e08ae653e003956b4c9b5d0748"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#a013ec7e08ae653e003956b4c9b5d0748">armnn::Runtime::Runtime</a></div><div class="ttdeci">Runtime(const CreationOptions &amp;options)</div><div class="ttdoc">Creates a runtime for workload execution. </div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00185">Runtime.cpp:185</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_ad3be3cca4ac08a262383b96868f7123d"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#ad3be3cca4ac08a262383b96868f7123d">armnn::Runtime::EnqueueWorkload</a></div><div class="ttdeci">virtual Status EnqueueWorkload(NetworkId networkId, const InputTensors &amp;inputTensors, const OutputTensors &amp;outputTensors) override</div><div class="ttdoc">Evaluates a network using input in inputTensors and outputs filled into outputTensors. </div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00321">Runtime.cpp:321</a></div></div>
<div class="ttc" id="_i_profiling_service_8hpp_xhtml"><div class="ttname"><a href="_i_profiling_service_8hpp.xhtml">IProfilingService.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_a7d0ddcd74d6f6438283e511480b64cc1"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#a7d0ddcd74d6f6438283e511480b64cc1">armnn::Runtime::GetInputTensorInfo</a></div><div class="ttdeci">virtual TensorInfo GetInputTensorInfo(NetworkId networkId, LayerBindingId layerId) const override</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00310">Runtime.cpp:310</a></div></div>
<div class="ttc" id="_profiling_service_8hpp_xhtml"><div class="ttname"><a href="_profiling_service_8hpp.xhtml">ProfilingService.hpp</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_runtime_8hpp.xhtml">Runtime.hpp</a></li>
    <li class="footer">Generated on Thu Nov 26 2020 11:04:22 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
