<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnCaffeParser/test/TestInputs.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_test_inputs_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">TestInputs.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;boost/test/unit_test.hpp&gt;</code><br />
<code>#include &quot;<a class="el" href="_i_caffe_parser_8hpp_source.xhtml">armnnCaffeParser/ICaffeParser.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_i_runtime_8hpp_source.xhtml">armnn/IRuntime.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_i_network_8hpp_source.xhtml">armnn/INetwork.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_exceptions_8hpp_source.xhtml">armnn/Exceptions.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_tensor_helpers_8hpp_source.xhtml">test/TensorHelpers.hpp</a>&quot;</code><br />
<code>#include &lt;string&gt;</code><br />
<code>#include &quot;<a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>&quot;</code><br />
</div>
<p><a href="_test_inputs_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:adcdb40b9138ac9b00e08ee5ba4721c0f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_test_inputs_8cpp.xhtml#adcdb40b9138ac9b00e08ee5ba4721c0f">BOOST_AUTO_TEST_CASE</a> (InputShapes)</td></tr>
<tr class="separator:adcdb40b9138ac9b00e08ee5ba4721c0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="adcdb40b9138ac9b00e08ee5ba4721c0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcdb40b9138ac9b00e08ee5ba4721c0f">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">InputShapes&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_inputs_8cpp_source.xhtml#l00020">20</a> of file <a class="el" href="_test_inputs_8cpp_source.xhtml">TestInputs.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::CpuRef</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l00257">ICaffeParser::Create()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00032">IRuntime::Create()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, and <a class="el" href="_network_8cpp_source.xhtml#l01011">armnn::Optimize()</a>.</p>
<div class="fragment"><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    std::string explicitInput = <span class="stringliteral">&quot;name: \&quot;Minimal\&quot;\n&quot;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;                                <span class="stringliteral">&quot;layer {\n&quot;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;                                <span class="stringliteral">&quot;  name: \&quot;data\&quot;\n&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                                <span class="stringliteral">&quot;  type: \&quot;Input\&quot;\n&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                                <span class="stringliteral">&quot;  top: \&quot;data\&quot;\n&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                                <span class="stringliteral">&quot;  input_param { shape: { dim: 1 dim: 2 dim: 3 dim: 4 } }\n&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    std::string implicitInput = <span class="stringliteral">&quot;name: \&quot;Minimal\&quot;\n&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                                <span class="stringliteral">&quot;input: \&quot;data\&quot; \n&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                <span class="stringliteral">&quot;input_dim: 1 \n&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                <span class="stringliteral">&quot;input_dim: 2 \n&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                                <span class="stringliteral">&quot;input_dim: 3 \n&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                                <span class="stringliteral">&quot;input_dim: 4 \n&quot;</span>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    std::string implicitInputNoShape = <span class="stringliteral">&quot;name: \&quot;Minimal\&quot;\n&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                       <span class="stringliteral">&quot;input: \&quot;data\&quot; \n&quot;</span>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(options));</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearmnn_caffe_parser.xhtml#a33c76910f1980ffaa41c22e0151cce2a">armnnCaffeParser::ICaffeParserPtr</a> parser(<a class="code" href="classarmnn_caffe_parser_1_1_i_caffe_parser.xhtml#abd42446e41480b0cc9df7ce06af412e3">armnnCaffeParser::ICaffeParser::Create</a>());</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a> netId;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="comment">// Check everything works normally</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    std::vector&lt;armnn::BackendId&gt; backends = {<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a>};</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        network = parser-&gt;CreateNetworkFromString(explicitInput.c_str(), {}, { <span class="stringliteral">&quot;data&quot;</span> });</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        BOOST_TEST(network.get());</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        runtime-&gt;LoadNetwork(netId, <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, backends, runtime-&gt;GetDeviceSpec()));</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnnCaffeParser::BindingPointInfo</a> inputBindingInfo = parser-&gt;GetNetworkInputBindingInfo(<span class="stringliteral">&quot;data&quot;</span>);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo = inputBindingInfo.second;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        BOOST_TEST((inputTensorInfo == runtime-&gt;GetInputTensorInfo(netId, inputBindingInfo.first)));</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[0] == 1);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[1] == 2);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[2] == 3);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[3] == 4);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Checks everything works with implicit input.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        network = parser-&gt;CreateNetworkFromString(implicitInput.c_str(), {}, { <span class="stringliteral">&quot;data&quot;</span> });</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        BOOST_TEST(network.get());</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        runtime-&gt;LoadNetwork(netId, <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, backends, runtime-&gt;GetDeviceSpec()));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnnCaffeParser::BindingPointInfo</a> inputBindingInfo = parser-&gt;GetNetworkInputBindingInfo(<span class="stringliteral">&quot;data&quot;</span>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo = inputBindingInfo.second;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        BOOST_TEST((inputTensorInfo == runtime-&gt;GetInputTensorInfo(netId, inputBindingInfo.first)));</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[0] == 1);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[1] == 2);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[2] == 3);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[3] == 4);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// Checks everything works with implicit and passing shape.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        network = parser-&gt;CreateNetworkFromString(implicitInput.c_str(), { {<span class="stringliteral">&quot;data&quot;</span>, { 2, 2, 3, 4 } } }, { <span class="stringliteral">&quot;data&quot;</span> });</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        BOOST_TEST(network.get());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        runtime-&gt;LoadNetwork(netId, <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, backends, runtime-&gt;GetDeviceSpec()));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnnCaffeParser::BindingPointInfo</a> inputBindingInfo = parser-&gt;GetNetworkInputBindingInfo(<span class="stringliteral">&quot;data&quot;</span>);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo = inputBindingInfo.second;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        BOOST_TEST((inputTensorInfo == runtime-&gt;GetInputTensorInfo(netId, inputBindingInfo.first)));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[0] == 2);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[1] == 2);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[2] == 3);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[3] == 4);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// Checks everything works with implicit (no shape) and passing shape.</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        network = parser-&gt;CreateNetworkFromString(implicitInputNoShape.c_str(), {{<span class="stringliteral">&quot;data&quot;</span>, {2, 2, 3, 4} }}, { <span class="stringliteral">&quot;data&quot;</span> });</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        BOOST_TEST(network.get());</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        runtime-&gt;LoadNetwork(netId, <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, backends, runtime-&gt;GetDeviceSpec()));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnnCaffeParser::BindingPointInfo</a> inputBindingInfo = parser-&gt;GetNetworkInputBindingInfo(<span class="stringliteral">&quot;data&quot;</span>);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo = inputBindingInfo.second;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        BOOST_TEST((inputTensorInfo == runtime-&gt;GetInputTensorInfo(netId, inputBindingInfo.first)));</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[0] == 2);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[1] == 2);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[2] == 3);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        BOOST_TEST(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[3] == 4);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// Checks exception on incompatible shapes.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        BOOST_CHECK_THROW(parser-&gt;CreateNetworkFromString(implicitInput.c_str(), {{<span class="stringliteral">&quot;data&quot;</span>,{ 2, 2, 3, 2 }}}, {<span class="stringliteral">&quot;data&quot;</span>}),</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">// Checks exception when no shape available.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        BOOST_CHECK_THROW(parser-&gt;CreateNetworkFromString(implicitInputNoShape.c_str(), {}, { <span class="stringliteral">&quot;data&quot;</span> }),</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00032">Runtime.cpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00025">IRuntime.hpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01011">Network.cpp:1011</a></div></div>
<div class="ttc" id="classarmnn_caffe_parser_1_1_i_caffe_parser_xhtml_abd42446e41480b0cc9df7ce06af412e3"><div class="ttname"><a href="classarmnn_caffe_parser_1_1_i_caffe_parser.xhtml#abd42446e41480b0cc9df7ce06af412e3">armnnCaffeParser::ICaffeParser::Create</a></div><div class="ttdeci">static ICaffeParserPtr Create()</div><div class="ttdef"><b>Definition:</b> <a href="_caffe_parser_8cpp_source.xhtml#l00257">CaffeParser.cpp:257</a></div></div>
<div class="ttc" id="namespacearmnn_caffe_parser_xhtml_a33c76910f1980ffaa41c22e0151cce2a"><div class="ttname"><a href="namespacearmnn_caffe_parser.xhtml#a33c76910f1980ffaa41c22e0151cce2a">armnnCaffeParser::ICaffeParserPtr</a></div><div class="ttdeci">std::unique_ptr&lt; ICaffeParser, void(*)(ICaffeParser *parser)&gt; ICaffeParserPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_caffe_parser_8hpp_source.xhtml#l00022">ICaffeParser.hpp:22</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00042">IRuntime.hpp:42</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00261">Tensor.hpp:261</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00101">INetwork.hpp:101</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_04760fd1fb320650b591e359d321263b.xhtml">armnnCaffeParser</a></li><li class="navelem"><a class="el" href="dir_895bac71a5ab2f3f201ab1eda13a633d.xhtml">test</a></li><li class="navelem"><a class="el" href="_test_inputs_8cpp.xhtml">TestInputs.cpp</a></li>
    <li class="footer">Generated on Wed Nov 25 2020 09:59:15 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
