<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/aclCommon/test/MemCopyTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_mem_copy_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">MemCopyTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="_arm_compute_tensor_utils_8hpp_source.xhtml">aclCommon/ArmComputeTensorUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_mem_copy_test_impl_8hpp_source.xhtml">aclCommon/test/MemCopyTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_cl_workload_factory_8hpp_source.xhtml">cl/ClWorkloadFactory.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_cl_context_control_fixture_8hpp_source.xhtml">cl/test/ClContextControlFixture.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_cl_workload_factory_helper_8hpp_source.xhtml">cl/test/ClWorkloadFactoryHelper.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_neon_workload_factory_8hpp_source.xhtml">neon/NeonWorkloadFactory.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_neon_workload_factory_helper_8hpp_source.xhtml">neon/test/NeonWorkloadFactoryHelper.hpp</a>&gt;</code><br />
<code>#include &lt;boost/test/unit_test.hpp&gt;</code><br />
</div>
<p><a href="_mem_copy_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a12b013bd793ac3e064509af7183c2983"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_copy_tests_8cpp.xhtml#a12b013bd793ac3e064509af7183c2983">BOOST_AUTO_TEST_CASE</a> (AclTypeConversions)</td></tr>
<tr class="separator:a12b013bd793ac3e064509af7183c2983"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac19c402d7b9ec5eb62a30861722cca99"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_copy_tests_8cpp.xhtml#ac19c402d7b9ec5eb62a30861722cca99">BOOST_AUTO_TEST_CASE</a> (CopyBetweenNeonAndGpu)</td></tr>
<tr class="separator:ac19c402d7b9ec5eb62a30861722cca99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab049121c1f3cbafbc34e5448040e2d2e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_copy_tests_8cpp.xhtml#ab049121c1f3cbafbc34e5448040e2d2e">BOOST_AUTO_TEST_CASE</a> (CopyBetweenGpuAndNeon)</td></tr>
<tr class="separator:ab049121c1f3cbafbc34e5448040e2d2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38ec5770a25144bc24e82dfcc8d86726"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_copy_tests_8cpp.xhtml#a38ec5770a25144bc24e82dfcc8d86726">BOOST_AUTO_TEST_CASE</a> (CopyBetweenNeonAndGpuWithSubtensors)</td></tr>
<tr class="separator:a38ec5770a25144bc24e82dfcc8d86726"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b45ebdb463f8109d9e325aa4e810ab4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_copy_tests_8cpp.xhtml#a4b45ebdb463f8109d9e325aa4e810ab4">BOOST_AUTO_TEST_CASE</a> (CopyBetweenGpuAndNeonWithSubtensors)</td></tr>
<tr class="separator:a4b45ebdb463f8109d9e325aa4e810ab4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a12b013bd793ac3e064509af7183c2983"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12b013bd793ac3e064509af7183c2983">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">AclTypeConversions&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mem_copy_tests_8cpp_source.xhtml#l00022">22</a> of file <a class="el" href="_mem_copy_tests_8cpp_source.xhtml">MemCopyTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    arm_compute::Strides strides(1, 2, 3, 4);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> convertedStrides = armnn::armcomputetensorutils::GetStrides(strides);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    BOOST_TEST(convertedStrides[0] == 4);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    BOOST_TEST(convertedStrides[1] == 3);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    BOOST_TEST(convertedStrides[2] == 2);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    BOOST_TEST(convertedStrides[3] == 1);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    arm_compute::TensorShape shape(5, 6, 7, 8);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> convertedshape = armnn::armcomputetensorutils::GetShape(shape);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    BOOST_TEST(convertedshape[0] == 8);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    BOOST_TEST(convertedshape[1] == 7);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    BOOST_TEST(convertedshape[2] == 6);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    BOOST_TEST(convertedshape[3] == 5);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac19c402d7b9ec5eb62a30861722cca99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac19c402d7b9ec5eb62a30861722cca99">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CopyBetweenNeonAndGpu&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mem_copy_tests_8cpp_source.xhtml#l00047">47</a> of file <a class="el" href="_mem_copy_tests_8cpp_source.xhtml">MemCopyTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00073">CompareTensors()</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult&lt; T, n &gt;::output</a>, and <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult&lt; T, n &gt;::outputExpected</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 4&gt;</a> result =</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        MemCopyTest&lt;armnn::NeonWorkloadFactory, armnn::ClWorkloadFactory, armnn::DataType::Float32&gt;(<span class="keyword">false</span>);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    BOOST_TEST(<a class="code" href="_tensor_helpers_8hpp.xhtml#aa5a4b75c5fa1d312b4f3615b2315ff58">CompareTensors</a>(result.<a class="code" href="struct_layer_test_result.xhtml#ac9d44d346bb7c89f7a7aa31d2bee947f">output</a>, result.<a class="code" href="struct_layer_test_result.xhtml#a73610ea6c776cc66e5a78dd842a39b8b">outputExpected</a>));</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="ttc" id="_tensor_helpers_8hpp_xhtml_aa5a4b75c5fa1d312b4f3615b2315ff58"><div class="ttname"><a href="_tensor_helpers_8hpp.xhtml#aa5a4b75c5fa1d312b4f3615b2315ff58">CompareTensors</a></div><div class="ttdeci">boost::test_tools::predicate_result CompareTensors(const boost::multi_array&lt; T, n &gt; &amp;a, const boost::multi_array&lt; T, n &gt; &amp;b, bool compareBoolean=false, bool isDynamic=false)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_helpers_8hpp_source.xhtml#l00073">TensorHelpers.hpp:73</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml_a73610ea6c776cc66e5a78dd842a39b8b"><div class="ttname"><a href="struct_layer_test_result.xhtml#a73610ea6c776cc66e5a78dd842a39b8b">LayerTestResult::outputExpected</a></div><div class="ttdeci">boost::multi_array&lt; T, n &gt; outputExpected</div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult.hpp:42</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml_ac9d44d346bb7c89f7a7aa31d2bee947f"><div class="ttname"><a href="struct_layer_test_result.xhtml#ac9d44d346bb7c89f7a7aa31d2bee947f">LayerTestResult::output</a></div><div class="ttdeci">boost::multi_array&lt; T, n &gt; output</div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult.hpp:41</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00030">LayerTestResult.hpp:30</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab049121c1f3cbafbc34e5448040e2d2e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab049121c1f3cbafbc34e5448040e2d2e">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CopyBetweenGpuAndNeon&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mem_copy_tests_8cpp_source.xhtml#l00054">54</a> of file <a class="el" href="_mem_copy_tests_8cpp_source.xhtml">MemCopyTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00073">CompareTensors()</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult&lt; T, n &gt;::output</a>, and <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult&lt; T, n &gt;::outputExpected</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 4&gt;</a> result =</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        MemCopyTest&lt;armnn::ClWorkloadFactory, armnn::NeonWorkloadFactory, armnn::DataType::Float32&gt;(<span class="keyword">false</span>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    BOOST_TEST(<a class="code" href="_tensor_helpers_8hpp.xhtml#aa5a4b75c5fa1d312b4f3615b2315ff58">CompareTensors</a>(result.<a class="code" href="struct_layer_test_result.xhtml#ac9d44d346bb7c89f7a7aa31d2bee947f">output</a>, result.<a class="code" href="struct_layer_test_result.xhtml#a73610ea6c776cc66e5a78dd842a39b8b">outputExpected</a>));</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="ttc" id="_tensor_helpers_8hpp_xhtml_aa5a4b75c5fa1d312b4f3615b2315ff58"><div class="ttname"><a href="_tensor_helpers_8hpp.xhtml#aa5a4b75c5fa1d312b4f3615b2315ff58">CompareTensors</a></div><div class="ttdeci">boost::test_tools::predicate_result CompareTensors(const boost::multi_array&lt; T, n &gt; &amp;a, const boost::multi_array&lt; T, n &gt; &amp;b, bool compareBoolean=false, bool isDynamic=false)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_helpers_8hpp_source.xhtml#l00073">TensorHelpers.hpp:73</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml_a73610ea6c776cc66e5a78dd842a39b8b"><div class="ttname"><a href="struct_layer_test_result.xhtml#a73610ea6c776cc66e5a78dd842a39b8b">LayerTestResult::outputExpected</a></div><div class="ttdeci">boost::multi_array&lt; T, n &gt; outputExpected</div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult.hpp:42</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml_ac9d44d346bb7c89f7a7aa31d2bee947f"><div class="ttname"><a href="struct_layer_test_result.xhtml#ac9d44d346bb7c89f7a7aa31d2bee947f">LayerTestResult::output</a></div><div class="ttdeci">boost::multi_array&lt; T, n &gt; output</div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult.hpp:41</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00030">LayerTestResult.hpp:30</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a38ec5770a25144bc24e82dfcc8d86726"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38ec5770a25144bc24e82dfcc8d86726">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CopyBetweenNeonAndGpuWithSubtensors&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mem_copy_tests_8cpp_source.xhtml#l00061">61</a> of file <a class="el" href="_mem_copy_tests_8cpp_source.xhtml">MemCopyTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00073">CompareTensors()</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult&lt; T, n &gt;::output</a>, and <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult&lt; T, n &gt;::outputExpected</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 4&gt;</a> result =</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        MemCopyTest&lt;armnn::NeonWorkloadFactory, armnn::ClWorkloadFactory, armnn::DataType::Float32&gt;(<span class="keyword">true</span>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    BOOST_TEST(<a class="code" href="_tensor_helpers_8hpp.xhtml#aa5a4b75c5fa1d312b4f3615b2315ff58">CompareTensors</a>(result.<a class="code" href="struct_layer_test_result.xhtml#ac9d44d346bb7c89f7a7aa31d2bee947f">output</a>, result.<a class="code" href="struct_layer_test_result.xhtml#a73610ea6c776cc66e5a78dd842a39b8b">outputExpected</a>));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="ttc" id="_tensor_helpers_8hpp_xhtml_aa5a4b75c5fa1d312b4f3615b2315ff58"><div class="ttname"><a href="_tensor_helpers_8hpp.xhtml#aa5a4b75c5fa1d312b4f3615b2315ff58">CompareTensors</a></div><div class="ttdeci">boost::test_tools::predicate_result CompareTensors(const boost::multi_array&lt; T, n &gt; &amp;a, const boost::multi_array&lt; T, n &gt; &amp;b, bool compareBoolean=false, bool isDynamic=false)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_helpers_8hpp_source.xhtml#l00073">TensorHelpers.hpp:73</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml_a73610ea6c776cc66e5a78dd842a39b8b"><div class="ttname"><a href="struct_layer_test_result.xhtml#a73610ea6c776cc66e5a78dd842a39b8b">LayerTestResult::outputExpected</a></div><div class="ttdeci">boost::multi_array&lt; T, n &gt; outputExpected</div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult.hpp:42</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml_ac9d44d346bb7c89f7a7aa31d2bee947f"><div class="ttname"><a href="struct_layer_test_result.xhtml#ac9d44d346bb7c89f7a7aa31d2bee947f">LayerTestResult::output</a></div><div class="ttdeci">boost::multi_array&lt; T, n &gt; output</div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult.hpp:41</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00030">LayerTestResult.hpp:30</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4b45ebdb463f8109d9e325aa4e810ab4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b45ebdb463f8109d9e325aa4e810ab4">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CopyBetweenGpuAndNeonWithSubtensors&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mem_copy_tests_8cpp_source.xhtml#l00068">68</a> of file <a class="el" href="_mem_copy_tests_8cpp_source.xhtml">MemCopyTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>, <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00073">CompareTensors()</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult&lt; T, n &gt;::output</a>, and <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult&lt; T, n &gt;::outputExpected</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 4&gt;</a> result =</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        MemCopyTest&lt;armnn::ClWorkloadFactory, armnn::NeonWorkloadFactory, armnn::DataType::Float32&gt;(<span class="keyword">true</span>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    BOOST_TEST(<a class="code" href="_tensor_helpers_8hpp.xhtml#aa5a4b75c5fa1d312b4f3615b2315ff58">CompareTensors</a>(result.<a class="code" href="struct_layer_test_result.xhtml#ac9d44d346bb7c89f7a7aa31d2bee947f">output</a>, result.<a class="code" href="struct_layer_test_result.xhtml#a73610ea6c776cc66e5a78dd842a39b8b">outputExpected</a>));</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="ttc" id="_tensor_helpers_8hpp_xhtml_aa5a4b75c5fa1d312b4f3615b2315ff58"><div class="ttname"><a href="_tensor_helpers_8hpp.xhtml#aa5a4b75c5fa1d312b4f3615b2315ff58">CompareTensors</a></div><div class="ttdeci">boost::test_tools::predicate_result CompareTensors(const boost::multi_array&lt; T, n &gt; &amp;a, const boost::multi_array&lt; T, n &gt; &amp;b, bool compareBoolean=false, bool isDynamic=false)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_helpers_8hpp_source.xhtml#l00073">TensorHelpers.hpp:73</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml_a73610ea6c776cc66e5a78dd842a39b8b"><div class="ttname"><a href="struct_layer_test_result.xhtml#a73610ea6c776cc66e5a78dd842a39b8b">LayerTestResult::outputExpected</a></div><div class="ttdeci">boost::multi_array&lt; T, n &gt; outputExpected</div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult.hpp:42</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml_ac9d44d346bb7c89f7a7aa31d2bee947f"><div class="ttname"><a href="struct_layer_test_result.xhtml#ac9d44d346bb7c89f7a7aa31d2bee947f">LayerTestResult::output</a></div><div class="ttdeci">boost::multi_array&lt; T, n &gt; output</div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult.hpp:41</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00030">LayerTestResult.hpp:30</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_c13beb47b846b3a63741c705c772cf8d.xhtml">aclCommon</a></li><li class="navelem"><a class="el" href="dir_e070e4f851c874525cacd85a9acb1fb4.xhtml">test</a></li><li class="navelem"><a class="el" href="_mem_copy_tests_8cpp.xhtml">MemCopyTests.cpp</a></li>
    <li class="footer">Generated on Thu Nov 26 2020 11:04:27 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
