<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: QuantizerVisitor Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_quantizer_visitor.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_quantizer_visitor-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">QuantizerVisitor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Visitor object for quantizing layers in a network.  
 <a href="classarmnn_1_1_quantizer_visitor.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_quantizer_visitor_8hpp_source.xhtml">QuantizerVisitor.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for QuantizerVisitor:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_quantizer_visitor.png" usemap="#QuantizerVisitor_map" alt=""/>
  <map id="QuantizerVisitor_map" name="QuantizerVisitor_map">
<area href="classarmnn_1_1_layer_visitor_base.xhtml" alt="LayerVisitorBase&lt; VisitorThrowingPolicy &gt;" shape="rect" coords="0,56,256,80"/>
<area href="classarmnn_1_1_i_layer_visitor.xhtml" alt="ILayerVisitor" shape="rect" coords="0,0,256,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a72d00eb366b367af08007d472d5edebb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a72d00eb366b367af08007d472d5edebb">QuantizerVisitor</a> (const <a class="el" href="classarmnn_1_1_range_tracker.xhtml">RangeTracker</a> &amp;rangeTracker, const <a class="el" href="structarmnn_1_1_i_quantization_scheme.xhtml">IQuantizationScheme</a> *quantizationScheme, bool preserveType=<a class="el" href="_ref_layer_tests_8cpp.xhtml#a2289f9e7fac0ce47801448e873b04303">false</a>)</td></tr>
<tr class="separator:a72d00eb366b367af08007d472d5edebb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78cb6c9b6239cd69574c65dab44eb3b1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a78cb6c9b6239cd69574c65dab44eb3b1">~QuantizerVisitor</a> ()=default</td></tr>
<tr class="separator:a78cb6c9b6239cd69574c65dab44eb3b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4abca3536debe2dac00f1d6a0b14a435"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a4abca3536debe2dac00f1d6a0b14a435">VisitAbsLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a4abca3536debe2dac00f1d6a0b14a435"><td class="mdescLeft">&#160;</td><td class="mdescRight">Functions to quantize the individual layers, overridden from <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a>.  <a href="#a4abca3536debe2dac00f1d6a0b14a435">More...</a><br /></td></tr>
<tr class="separator:a4abca3536debe2dac00f1d6a0b14a435"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af493528dec93f39f5081dbefb40bff75"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#af493528dec93f39f5081dbefb40bff75">VisitActivationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;activationDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:af493528dec93f39f5081dbefb40bff75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#af493528dec93f39f5081dbefb40bff75">More...</a><br /></td></tr>
<tr class="separator:af493528dec93f39f5081dbefb40bff75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cb4ef1bc9588c4319144460c288022f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a7cb4ef1bc9588c4319144460c288022f">VisitAdditionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a7cb4ef1bc9588c4319144460c288022f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an addition layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a7cb4ef1bc9588c4319144460c288022f">More...</a><br /></td></tr>
<tr class="separator:a7cb4ef1bc9588c4319144460c288022f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2482bba03a17e59a8ead45530e8efea5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a2482bba03a17e59a8ead45530e8efea5">VisitArgMinMaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;argMinMaxDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a2482bba03a17e59a8ead45530e8efea5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an arg min max layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a2482bba03a17e59a8ead45530e8efea5">More...</a><br /></td></tr>
<tr class="separator:a2482bba03a17e59a8ead45530e8efea5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1532cb8f551812e784ccc14faae407b9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a1532cb8f551812e784ccc14faae407b9">VisitBatchNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;desc, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;mean, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;variance, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;beta, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;gamma, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a1532cb8f551812e784ccc14faae407b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a1532cb8f551812e784ccc14faae407b9">More...</a><br /></td></tr>
<tr class="separator:a1532cb8f551812e784ccc14faae407b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5d09e03a578afa9c0bb8afd11c65485"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#af5d09e03a578afa9c0bb8afd11c65485">VisitBatchToSpaceNdLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;batchToSpaceNdDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:af5d09e03a578afa9c0bb8afd11c65485"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#af5d09e03a578afa9c0bb8afd11c65485">More...</a><br /></td></tr>
<tr class="separator:af5d09e03a578afa9c0bb8afd11c65485"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a1adf7bf81e5cbb74b4cc4e8946c653"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a6a1adf7bf81e5cbb74b4cc4e8946c653">VisitComparisonLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;comparisonDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a6a1adf7bf81e5cbb74b4cc4e8946c653"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Comparison layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a6a1adf7bf81e5cbb74b4cc4e8946c653">More...</a><br /></td></tr>
<tr class="separator:a6a1adf7bf81e5cbb74b4cc4e8946c653"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb527e0c7c30b56da911fee8c7b7a011"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#afb527e0c7c30b56da911fee8c7b7a011">VisitConcatLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;originsDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:afb527e0c7c30b56da911fee8c7b7a011"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#afb527e0c7c30b56da911fee8c7b7a011">More...</a><br /></td></tr>
<tr class="separator:afb527e0c7c30b56da911fee8c7b7a011"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb652d74e4b3596e85b22c2d52144f73"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#aeb652d74e4b3596e85b22c2d52144f73">VisitConstantLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;input, const char *name=nullptr) override</td></tr>
<tr class="memdesc:aeb652d74e4b3596e85b22c2d52144f73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a layer with no inputs and a single output, which always corresponds to the passed in constant tensor should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aeb652d74e4b3596e85b22c2d52144f73">More...</a><br /></td></tr>
<tr class="separator:aeb652d74e4b3596e85b22c2d52144f73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2f379ba77b06095e0c024e232ec1fd4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#ac2f379ba77b06095e0c024e232ec1fd4">VisitConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;convolution2dDescriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;biases, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ac2f379ba77b06095e0c024e232ec1fd4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ac2f379ba77b06095e0c024e232ec1fd4">More...</a><br /></td></tr>
<tr class="separator:ac2f379ba77b06095e0c024e232ec1fd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0daac0e6ce49805580a8a50a8d3d514"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#ac0daac0e6ce49805580a8a50a8d3d514">VisitDepthToSpaceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;depthToSpaceDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ac0daac0e6ce49805580a8a50a8d3d514"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a depth to space layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ac0daac0e6ce49805580a8a50a8d3d514">More...</a><br /></td></tr>
<tr class="separator:ac0daac0e6ce49805580a8a50a8d3d514"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a554e88817e6fd98645388873a108f868"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a554e88817e6fd98645388873a108f868">VisitDepthwiseConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;desc, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;biases, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a554e88817e6fd98645388873a108f868"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D depthwise convolution layer with biases should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a554e88817e6fd98645388873a108f868">More...</a><br /></td></tr>
<tr class="separator:a554e88817e6fd98645388873a108f868"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a237f88794e504388160a87813b66b9e3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a237f88794e504388160a87813b66b9e3">VisitElementwiseUnaryLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;elementwiseUnaryDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a237f88794e504388160a87813b66b9e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a237f88794e504388160a87813b66b9e3">More...</a><br /></td></tr>
<tr class="separator:a237f88794e504388160a87813b66b9e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2da06e8f6265a430bb6907107c4c38b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a2da06e8f6265a430bb6907107c4c38b1">VisitFillLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;desc, const char *name) override</td></tr>
<tr class="memdesc:a2da06e8f6265a430bb6907107c4c38b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a fill layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a2da06e8f6265a430bb6907107c4c38b1">More...</a><br /></td></tr>
<tr class="separator:a2da06e8f6265a430bb6907107c4c38b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbdd655f9e0bec625369079ed97f1328"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#abbdd655f9e0bec625369079ed97f1328">VisitFullyConnectedLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;desc, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;biases, const char *name=nullptr) override</td></tr>
<tr class="memdesc:abbdd655f9e0bec625369079ed97f1328"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#abbdd655f9e0bec625369079ed97f1328">More...</a><br /></td></tr>
<tr class="separator:abbdd655f9e0bec625369079ed97f1328"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ca539d734553e606c0134940e444298"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a2ca539d734553e606c0134940e444298">VisitInputLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> id, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a2ca539d734553e606c0134940e444298"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an <a class="el" href="classarmnn_1_1_input_layer.xhtml" title="A layer user-provided data can be bound to (e.g. inputs, outputs). ">InputLayer</a> should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a2ca539d734553e606c0134940e444298">More...</a><br /></td></tr>
<tr class="separator:a2ca539d734553e606c0134940e444298"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6da520014db9cd2d4bede451e37ca0a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#ac6da520014db9cd2d4bede451e37ca0a">VisitInstanceNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;instanceNormalizationDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ac6da520014db9cd2d4bede451e37ca0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an instance normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ac6da520014db9cd2d4bede451e37ca0a">More...</a><br /></td></tr>
<tr class="separator:ac6da520014db9cd2d4bede451e37ca0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe0c29cd370a84c3e669d28dda18afb7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#abe0c29cd370a84c3e669d28dda18afb7">VisitLogSoftmaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;logSoftmaxDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:abe0c29cd370a84c3e669d28dda18afb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a log softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#abe0c29cd370a84c3e669d28dda18afb7">More...</a><br /></td></tr>
<tr class="separator:abe0c29cd370a84c3e669d28dda18afb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a2f55bda910ccf8816d2678b7c980b6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a0a2f55bda910ccf8816d2678b7c980b6">VisitMeanLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;meanDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a0a2f55bda910ccf8816d2678b7c980b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Mean layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a0a2f55bda910ccf8816d2678b7c980b6">More...</a><br /></td></tr>
<tr class="separator:a0a2f55bda910ccf8816d2678b7c980b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c587861e672cedaedd1f32bbce44afc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a1c587861e672cedaedd1f32bbce44afc">VisitMultiplicationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a1c587861e672cedaedd1f32bbce44afc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a multiplication layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a1c587861e672cedaedd1f32bbce44afc">More...</a><br /></td></tr>
<tr class="separator:a1c587861e672cedaedd1f32bbce44afc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0946e6e13740185d7b7939720f347f1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#ab0946e6e13740185d7b7939720f347f1">VisitNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;normalizationDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ab0946e6e13740185d7b7939720f347f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ab0946e6e13740185d7b7939720f347f1">More...</a><br /></td></tr>
<tr class="separator:ab0946e6e13740185d7b7939720f347f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac75d60924c52b96ea6f9567fcfa2db10"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#ac75d60924c52b96ea6f9567fcfa2db10">VisitOutputLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> id, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ac75d60924c52b96ea6f9567fcfa2db10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an output layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ac75d60924c52b96ea6f9567fcfa2db10">More...</a><br /></td></tr>
<tr class="separator:ac75d60924c52b96ea6f9567fcfa2db10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b4b2e9b5578bf50197c6929a6a48071"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a0b4b2e9b5578bf50197c6929a6a48071">VisitPadLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a0b4b2e9b5578bf50197c6929a6a48071"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a pad layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a0b4b2e9b5578bf50197c6929a6a48071">More...</a><br /></td></tr>
<tr class="separator:a0b4b2e9b5578bf50197c6929a6a48071"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8667c9d0c42575e31c7a630fea8c7256"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a8667c9d0c42575e31c7a630fea8c7256">VisitPermuteLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;permuteDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a8667c9d0c42575e31c7a630fea8c7256"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8667c9d0c42575e31c7a630fea8c7256">More...</a><br /></td></tr>
<tr class="separator:a8667c9d0c42575e31c7a630fea8c7256"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaee763832ceb783dcffde56e1c1a6d93"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#aaee763832ceb783dcffde56e1c1a6d93">VisitPooling2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;pooling2dDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:aaee763832ceb783dcffde56e1c1a6d93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aaee763832ceb783dcffde56e1c1a6d93">More...</a><br /></td></tr>
<tr class="separator:aaee763832ceb783dcffde56e1c1a6d93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34f5745a60988b4a109ec213f8d0cb77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a34f5745a60988b4a109ec213f8d0cb77">VisitPreluLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a34f5745a60988b4a109ec213f8d0cb77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a PReLU activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a34f5745a60988b4a109ec213f8d0cb77">More...</a><br /></td></tr>
<tr class="separator:a34f5745a60988b4a109ec213f8d0cb77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a7f7f33591fd91e8fb1c08d06c0733a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a4a7f7f33591fd91e8fb1c08d06c0733a">VisitReshapeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;reshapeDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a4a7f7f33591fd91e8fb1c08d06c0733a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a4a7f7f33591fd91e8fb1c08d06c0733a">More...</a><br /></td></tr>
<tr class="separator:a4a7f7f33591fd91e8fb1c08d06c0733a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7eea0e93f066099f3549fef15881a4cb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a7eea0e93f066099f3549fef15881a4cb">VisitResizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;resizeDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a7eea0e93f066099f3549fef15881a4cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a7eea0e93f066099f3549fef15881a4cb">More...</a><br /></td></tr>
<tr class="separator:a7eea0e93f066099f3549fef15881a4cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5abbca55c908440acecfa6e0f921092d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a5abbca55c908440acecfa6e0f921092d">VisitResizeBilinearLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">ResizeBilinearDescriptor</a> &amp;resizeDesc, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a5abbca55c908440acecfa6e0f921092d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a5abbca55c908440acecfa6e0f921092d">More...</a><br /></td></tr>
<tr class="separator:a5abbca55c908440acecfa6e0f921092d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a990bfe643729a7dedcc55da1f7d1b3bf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a990bfe643729a7dedcc55da1f7d1b3bf">VisitRsqrtLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a990bfe643729a7dedcc55da1f7d1b3bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Reciprocal of square root layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a990bfe643729a7dedcc55da1f7d1b3bf">More...</a><br /></td></tr>
<tr class="separator:a990bfe643729a7dedcc55da1f7d1b3bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20a228046c2aacd8664e50841af84e2b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a20a228046c2aacd8664e50841af84e2b">VisitSliceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;sliceDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a20a228046c2aacd8664e50841af84e2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a20a228046c2aacd8664e50841af84e2b">More...</a><br /></td></tr>
<tr class="separator:a20a228046c2aacd8664e50841af84e2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98f34d2511f43324833060154cbdba8d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a98f34d2511f43324833060154cbdba8d">VisitSoftmaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;softmaxDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a98f34d2511f43324833060154cbdba8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a98f34d2511f43324833060154cbdba8d">More...</a><br /></td></tr>
<tr class="separator:a98f34d2511f43324833060154cbdba8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e327cc6432697fd55d6b91e554360d9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a8e327cc6432697fd55d6b91e554360d9">VisitSpaceToBatchNdLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;spaceToBatchNdDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a8e327cc6432697fd55d6b91e554360d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8e327cc6432697fd55d6b91e554360d9">More...</a><br /></td></tr>
<tr class="separator:a8e327cc6432697fd55d6b91e554360d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c416fbd39598732dd3c6255ceaf1b66"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a2c416fbd39598732dd3c6255ceaf1b66">VisitSpaceToDepthLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;spaceToDepthDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a2c416fbd39598732dd3c6255ceaf1b66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a space to depth layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a2c416fbd39598732dd3c6255ceaf1b66">More...</a><br /></td></tr>
<tr class="separator:a2c416fbd39598732dd3c6255ceaf1b66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbea8aa2295f2ab71ea5bb64ccd47871"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#afbea8aa2295f2ab71ea5bb64ccd47871">VisitSplitterLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="namespacearmnn.xhtml#a60291543fe872b795e71e05bcd835fd1">SplitterDescriptor</a> &amp;splitterDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:afbea8aa2295f2ab71ea5bb64ccd47871"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#afbea8aa2295f2ab71ea5bb64ccd47871">More...</a><br /></td></tr>
<tr class="separator:afbea8aa2295f2ab71ea5bb64ccd47871"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b4325b20242a2db0922f68aea195d00"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a1b4325b20242a2db0922f68aea195d00">VisitStackLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;stackDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a1b4325b20242a2db0922f68aea195d00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a stack layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a1b4325b20242a2db0922f68aea195d00">More...</a><br /></td></tr>
<tr class="separator:a1b4325b20242a2db0922f68aea195d00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61b7aa0305e7c45a625f7835fa26b9b6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a61b7aa0305e7c45a625f7835fa26b9b6">VisitStridedSliceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;stridedSliceDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a61b7aa0305e7c45a625f7835fa26b9b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a61b7aa0305e7c45a625f7835fa26b9b6">More...</a><br /></td></tr>
<tr class="separator:a61b7aa0305e7c45a625f7835fa26b9b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abffdcc9b528d64b510103f5b280e246e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#abffdcc9b528d64b510103f5b280e246e">VisitSubtractionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:abffdcc9b528d64b510103f5b280e246e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a subtraction layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#abffdcc9b528d64b510103f5b280e246e">More...</a><br /></td></tr>
<tr class="separator:abffdcc9b528d64b510103f5b280e246e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e7ddd6c869af052317c6de0df53c942"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a9e7ddd6c869af052317c6de0df53c942">VisitTransposeConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;biases, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a9e7ddd6c869af052317c6de0df53c942"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D transpose convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a9e7ddd6c869af052317c6de0df53c942">More...</a><br /></td></tr>
<tr class="separator:a9e7ddd6c869af052317c6de0df53c942"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c918592332c5e8339d43a9288350964"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a8c918592332c5e8339d43a9288350964">VisitTransposeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;descriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a8c918592332c5e8339d43a9288350964"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a transpose layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8c918592332c5e8339d43a9288350964">More...</a><br /></td></tr>
<tr class="separator:a8c918592332c5e8339d43a9288350964"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae25c71d0c8fceed87f0b84fc032f71c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#ae25c71d0c8fceed87f0b84fc032f71c8">RetrieveFinalNetwork</a> ()</td></tr>
<tr class="memdesc:ae25c71d0c8fceed87f0b84fc032f71c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract the quantized network.  <a href="#ae25c71d0c8fceed87f0b84fc032f71c8">More...</a><br /></td></tr>
<tr class="separator:ae25c71d0c8fceed87f0b84fc032f71c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_layer_visitor_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_layer_visitor_base')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a></td></tr>
<tr class="memitem:acb663f7919f9566c3dcc8b6478999d34 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acb663f7919f9566c3dcc8b6478999d34">VisitAbsLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:acb663f7919f9566c3dcc8b6478999d34 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an absolute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#acb663f7919f9566c3dcc8b6478999d34">More...</a><br /></td></tr>
<tr class="separator:acb663f7919f9566c3dcc8b6478999d34 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30b99e5202fc77b02f92d5c44e5ca86d inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a30b99e5202fc77b02f92d5c44e5ca86d">VisitActivationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a30b99e5202fc77b02f92d5c44e5ca86d inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a30b99e5202fc77b02f92d5c44e5ca86d">More...</a><br /></td></tr>
<tr class="separator:a30b99e5202fc77b02f92d5c44e5ca86d inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c9f3396207de48925016a2eee6aa12b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0c9f3396207de48925016a2eee6aa12b">VisitAdditionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a0c9f3396207de48925016a2eee6aa12b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an addition layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a0c9f3396207de48925016a2eee6aa12b">More...</a><br /></td></tr>
<tr class="separator:a0c9f3396207de48925016a2eee6aa12b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a719076848950255b929636c97aaaede4 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a719076848950255b929636c97aaaede4">VisitArgMinMaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a719076848950255b929636c97aaaede4 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an arg min max layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a719076848950255b929636c97aaaede4">More...</a><br /></td></tr>
<tr class="separator:a719076848950255b929636c97aaaede4 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0ae25ba5f3c494d1fb32f06cd57af10 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab0ae25ba5f3c494d1fb32f06cd57af10">VisitBatchNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ab0ae25ba5f3c494d1fb32f06cd57af10 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ab0ae25ba5f3c494d1fb32f06cd57af10">More...</a><br /></td></tr>
<tr class="separator:ab0ae25ba5f3c494d1fb32f06cd57af10 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62aac266e23bd680633e62832f56bc11 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a62aac266e23bd680633e62832f56bc11">VisitBatchToSpaceNdLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a62aac266e23bd680633e62832f56bc11 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a62aac266e23bd680633e62832f56bc11">More...</a><br /></td></tr>
<tr class="separator:a62aac266e23bd680633e62832f56bc11 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95dc828296e6d05c0bf0b691d4dc6a3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a95dc828296e6d05c0bf0b691d4dc6a3f">VisitComparisonLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a95dc828296e6d05c0bf0b691d4dc6a3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Comparison layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a95dc828296e6d05c0bf0b691d4dc6a3f">More...</a><br /></td></tr>
<tr class="separator:a95dc828296e6d05c0bf0b691d4dc6a3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d4f84683c4a00dfb5eecb6b165d41b9 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2d4f84683c4a00dfb5eecb6b165d41b9">VisitConcatLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">ConcatDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a2d4f84683c4a00dfb5eecb6b165d41b9 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a2d4f84683c4a00dfb5eecb6b165d41b9">More...</a><br /></td></tr>
<tr class="separator:a2d4f84683c4a00dfb5eecb6b165d41b9 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90698dba3e90ced6f562cda146bf15e3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a90698dba3e90ced6f562cda146bf15e3">VisitConstantLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a90698dba3e90ced6f562cda146bf15e3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a layer with no inputs and a single output, which always corresponds to the passed in constant tensor should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a90698dba3e90ced6f562cda146bf15e3">More...</a><br /></td></tr>
<tr class="separator:a90698dba3e90ced6f562cda146bf15e3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff3099f516e132f4d8818a54fa1ee767 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aff3099f516e132f4d8818a54fa1ee767">VisitConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;, const char *) override</td></tr>
<tr class="memdesc:aff3099f516e132f4d8818a54fa1ee767 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#aff3099f516e132f4d8818a54fa1ee767">More...</a><br /></td></tr>
<tr class="separator:aff3099f516e132f4d8818a54fa1ee767 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3aaff3b6165f8de16522bc4a1ed32a0 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ad3aaff3b6165f8de16522bc4a1ed32a0">VisitDepthToSpaceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ad3aaff3b6165f8de16522bc4a1ed32a0 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a depth to space layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ad3aaff3b6165f8de16522bc4a1ed32a0">More...</a><br /></td></tr>
<tr class="separator:ad3aaff3b6165f8de16522bc4a1ed32a0 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70050fc50ee44a439665f914d5fe9684 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a70050fc50ee44a439665f914d5fe9684">VisitDepthwiseConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;, const char *) override</td></tr>
<tr class="memdesc:a70050fc50ee44a439665f914d5fe9684 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D depthwise convolution layer with biases should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a70050fc50ee44a439665f914d5fe9684">More...</a><br /></td></tr>
<tr class="separator:a70050fc50ee44a439665f914d5fe9684 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa27cc900d32dcc4a92f59e3bab4f4653 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aa27cc900d32dcc4a92f59e3bab4f4653">VisitDequantizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:aa27cc900d32dcc4a92f59e3bab4f4653 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a Dequantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#aa27cc900d32dcc4a92f59e3bab4f4653">More...</a><br /></td></tr>
<tr class="separator:aa27cc900d32dcc4a92f59e3bab4f4653 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88bad2eef809ccf6f2129f9ed4a6f3a7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a88bad2eef809ccf6f2129f9ed4a6f3a7">VisitDetectionPostProcessLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a88bad2eef809ccf6f2129f9ed4a6f3a7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a Detection PostProcess layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a88bad2eef809ccf6f2129f9ed4a6f3a7">More...</a><br /></td></tr>
<tr class="separator:a88bad2eef809ccf6f2129f9ed4a6f3a7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7450859464a381eafaedb33adc582f75 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a7450859464a381eafaedb33adc582f75">VisitDivisionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a7450859464a381eafaedb33adc582f75 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a division layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a7450859464a381eafaedb33adc582f75">More...</a><br /></td></tr>
<tr class="separator:a7450859464a381eafaedb33adc582f75 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d02f4bfaffcb16e340e9b8c20bc5e35 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9d02f4bfaffcb16e340e9b8c20bc5e35">VisitElementwiseUnaryLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a9d02f4bfaffcb16e340e9b8c20bc5e35 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a9d02f4bfaffcb16e340e9b8c20bc5e35">More...</a><br /></td></tr>
<tr class="separator:a9d02f4bfaffcb16e340e9b8c20bc5e35 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3249cd1186dc7e700a0ec0884fb9d5fa inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3249cd1186dc7e700a0ec0884fb9d5fa">VisitEqualLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a3249cd1186dc7e700a0ec0884fb9d5fa inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an Equal layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a3249cd1186dc7e700a0ec0884fb9d5fa">More...</a><br /></td></tr>
<tr class="separator:a3249cd1186dc7e700a0ec0884fb9d5fa inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae343d79924ac474939c3e38a8b80004e inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae343d79924ac474939c3e38a8b80004e">VisitFillLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ae343d79924ac474939c3e38a8b80004e inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a fill layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ae343d79924ac474939c3e38a8b80004e">More...</a><br /></td></tr>
<tr class="separator:ae343d79924ac474939c3e38a8b80004e inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a060c3a3f978fec03212afaff1fe1648d inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a060c3a3f978fec03212afaff1fe1648d">VisitFloorLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a060c3a3f978fec03212afaff1fe1648d inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a floor layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a060c3a3f978fec03212afaff1fe1648d">More...</a><br /></td></tr>
<tr class="separator:a060c3a3f978fec03212afaff1fe1648d inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9049cf6d72d4b67fff93670f21c09da3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9049cf6d72d4b67fff93670f21c09da3">VisitFullyConnectedLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;, const char *) override</td></tr>
<tr class="memdesc:a9049cf6d72d4b67fff93670f21c09da3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a9049cf6d72d4b67fff93670f21c09da3">More...</a><br /></td></tr>
<tr class="separator:a9049cf6d72d4b67fff93670f21c09da3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7639178bd8c29ffa83162dfd108b725 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae7639178bd8c29ffa83162dfd108b725">VisitGatherLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:ae7639178bd8c29ffa83162dfd108b725 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ae7639178bd8c29ffa83162dfd108b725">More...</a><br /></td></tr>
<tr class="separator:ae7639178bd8c29ffa83162dfd108b725 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea011723381847939ee1773d7c6fac25 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aea011723381847939ee1773d7c6fac25">VisitGatherLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:aea011723381847939ee1773d7c6fac25 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#aea011723381847939ee1773d7c6fac25">More...</a><br /></td></tr>
<tr class="separator:aea011723381847939ee1773d7c6fac25 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a28dbfcd1e83bc8158d78feb93d4a0c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2a28dbfcd1e83bc8158d78feb93d4a0c">VisitGreaterLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a2a28dbfcd1e83bc8158d78feb93d4a0c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Greater layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a2a28dbfcd1e83bc8158d78feb93d4a0c">More...</a><br /></td></tr>
<tr class="separator:a2a28dbfcd1e83bc8158d78feb93d4a0c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c23f9e9d8427775925d071feee5dbd1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6c23f9e9d8427775925d071feee5dbd1">VisitInputLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>, const char *) override</td></tr>
<tr class="memdesc:a6c23f9e9d8427775925d071feee5dbd1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an InputLayer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a6c23f9e9d8427775925d071feee5dbd1">More...</a><br /></td></tr>
<tr class="separator:a6c23f9e9d8427775925d071feee5dbd1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58f90a911e6827702c478cabaeac57fe inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a58f90a911e6827702c478cabaeac57fe">VisitInstanceNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a58f90a911e6827702c478cabaeac57fe inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an instance normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a58f90a911e6827702c478cabaeac57fe">More...</a><br /></td></tr>
<tr class="separator:a58f90a911e6827702c478cabaeac57fe inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae68e2b431ea3d2822f19ad4ac806fdaa inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae68e2b431ea3d2822f19ad4ac806fdaa">VisitL2NormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ae68e2b431ea3d2822f19ad4ac806fdaa inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an L2 normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ae68e2b431ea3d2822f19ad4ac806fdaa">More...</a><br /></td></tr>
<tr class="separator:ae68e2b431ea3d2822f19ad4ac806fdaa inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d4d2e5580385ee664830720698d112c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4d2e5580385ee664830720698d112c">VisitLogSoftmaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8d4d2e5580385ee664830720698d112c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a log softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4d2e5580385ee664830720698d112c">More...</a><br /></td></tr>
<tr class="separator:a8d4d2e5580385ee664830720698d112c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4f176ed33afb13a9e590b86990eaa3c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aa4f176ed33afb13a9e590b86990eaa3c">VisitLogicalBinaryLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:aa4f176ed33afb13a9e590b86990eaa3c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a logical binary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#aa4f176ed33afb13a9e590b86990eaa3c">More...</a><br /></td></tr>
<tr class="separator:aa4f176ed33afb13a9e590b86990eaa3c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf1a238ec5b6bb172bc4cd3811f08b28 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aaf1a238ec5b6bb172bc4cd3811f08b28">VisitLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:aaf1a238ec5b6bb172bc4cd3811f08b28 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an Lstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#aaf1a238ec5b6bb172bc4cd3811f08b28">More...</a><br /></td></tr>
<tr class="separator:aaf1a238ec5b6bb172bc4cd3811f08b28 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a778e1b2219e3eb2d790d6e6e653a9f25 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a778e1b2219e3eb2d790d6e6e653a9f25">VisitMaximumLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a778e1b2219e3eb2d790d6e6e653a9f25 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Maximum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a778e1b2219e3eb2d790d6e6e653a9f25">More...</a><br /></td></tr>
<tr class="separator:a778e1b2219e3eb2d790d6e6e653a9f25 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0180a15e542f4ef240fadc09fe4b2e3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0180a15e542f4ef240fadc09fe4b2e3f">VisitMeanLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a0180a15e542f4ef240fadc09fe4b2e3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Mean layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a0180a15e542f4ef240fadc09fe4b2e3f">More...</a><br /></td></tr>
<tr class="separator:a0180a15e542f4ef240fadc09fe4b2e3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafb62c879f0c78bfdc3c4e4f2cb82e68 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aafb62c879f0c78bfdc3c4e4f2cb82e68">VisitMergeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:aafb62c879f0c78bfdc3c4e4f2cb82e68 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a merge layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#aafb62c879f0c78bfdc3c4e4f2cb82e68">More...</a><br /></td></tr>
<tr class="separator:aafb62c879f0c78bfdc3c4e4f2cb82e68 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acef69a3870409ca9a6130db91047e729 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acef69a3870409ca9a6130db91047e729">VisitMergerLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="namespacearmnn.xhtml#a003d213dd28b0b8c0f26fbf268ccb975">MergerDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:acef69a3870409ca9a6130db91047e729 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a merger layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#acef69a3870409ca9a6130db91047e729">More...</a><br /></td></tr>
<tr class="separator:acef69a3870409ca9a6130db91047e729 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e24e9a7bf52efc1699c126435574e95 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1e24e9a7bf52efc1699c126435574e95">VisitMinimumLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a1e24e9a7bf52efc1699c126435574e95 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Minimum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a1e24e9a7bf52efc1699c126435574e95">More...</a><br /></td></tr>
<tr class="separator:a1e24e9a7bf52efc1699c126435574e95 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac57d22126a9131108214df9177addade inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac57d22126a9131108214df9177addade">VisitMultiplicationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:ac57d22126a9131108214df9177addade inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a multiplication layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ac57d22126a9131108214df9177addade">More...</a><br /></td></tr>
<tr class="separator:ac57d22126a9131108214df9177addade inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3150ff2299a2e193952300b8c9edd1e1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3150ff2299a2e193952300b8c9edd1e1">VisitNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a3150ff2299a2e193952300b8c9edd1e1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a3150ff2299a2e193952300b8c9edd1e1">More...</a><br /></td></tr>
<tr class="separator:a3150ff2299a2e193952300b8c9edd1e1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc39ddb06acfd91cf3cfb0fcd9337005 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acc39ddb06acfd91cf3cfb0fcd9337005">VisitOutputLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>, const char *) override</td></tr>
<tr class="memdesc:acc39ddb06acfd91cf3cfb0fcd9337005 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an output layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#acc39ddb06acfd91cf3cfb0fcd9337005">More...</a><br /></td></tr>
<tr class="separator:acc39ddb06acfd91cf3cfb0fcd9337005 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a240e1b725cc204bb468b6b402e1670 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a240e1b725cc204bb468b6b402e1670">VisitPadLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8a240e1b725cc204bb468b6b402e1670 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a pad layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a8a240e1b725cc204bb468b6b402e1670">More...</a><br /></td></tr>
<tr class="separator:a8a240e1b725cc204bb468b6b402e1670 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a275f4c270ce472abc8701f6475ff7f38 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a275f4c270ce472abc8701f6475ff7f38">VisitPermuteLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a275f4c270ce472abc8701f6475ff7f38 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a275f4c270ce472abc8701f6475ff7f38">More...</a><br /></td></tr>
<tr class="separator:a275f4c270ce472abc8701f6475ff7f38 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e369658cb00178eeb9136f1c912fd3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a5e369658cb00178eeb9136f1c912fd3f">VisitPooling2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a5e369658cb00178eeb9136f1c912fd3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a5e369658cb00178eeb9136f1c912fd3f">More...</a><br /></td></tr>
<tr class="separator:a5e369658cb00178eeb9136f1c912fd3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79c933bea6fb9986c3baa171be98da5c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a79c933bea6fb9986c3baa171be98da5c">VisitPreluLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a79c933bea6fb9986c3baa171be98da5c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a PReLU activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a79c933bea6fb9986c3baa171be98da5c">More...</a><br /></td></tr>
<tr class="separator:a79c933bea6fb9986c3baa171be98da5c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a6db421f0be147916cb4894ad3885d1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a6db421f0be147916cb4894ad3885d1">VisitQuantizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a8a6db421f0be147916cb4894ad3885d1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a quantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a8a6db421f0be147916cb4894ad3885d1">More...</a><br /></td></tr>
<tr class="separator:a8a6db421f0be147916cb4894ad3885d1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab80f8f2c2202a4651c63757b307a21b7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab80f8f2c2202a4651c63757b307a21b7">VisitQLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ab80f8f2c2202a4651c63757b307a21b7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a QLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ab80f8f2c2202a4651c63757b307a21b7">More...</a><br /></td></tr>
<tr class="separator:ab80f8f2c2202a4651c63757b307a21b7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fdb21a22a95af72177b4e909741b5c7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2fdb21a22a95af72177b4e909741b5c7">VisitQuantizedLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">QuantizedLstmInputParams</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a2fdb21a22a95af72177b4e909741b5c7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a QuantizedLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a2fdb21a22a95af72177b4e909741b5c7">More...</a><br /></td></tr>
<tr class="separator:a2fdb21a22a95af72177b4e909741b5c7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e6452322927acf6fe4e38ca9cc6d117 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0e6452322927acf6fe4e38ca9cc6d117">VisitRankLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a0e6452322927acf6fe4e38ca9cc6d117 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a rank layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a0e6452322927acf6fe4e38ca9cc6d117">More...</a><br /></td></tr>
<tr class="separator:a0e6452322927acf6fe4e38ca9cc6d117 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ebd504c48864d63917836e0dc335725 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9ebd504c48864d63917836e0dc335725">VisitReshapeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a9ebd504c48864d63917836e0dc335725 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a9ebd504c48864d63917836e0dc335725">More...</a><br /></td></tr>
<tr class="separator:a9ebd504c48864d63917836e0dc335725 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d4c5571a4b3db2badf7f1dce3467391 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4c5571a4b3db2badf7f1dce3467391">VisitResizeBilinearLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">ResizeBilinearDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8d4c5571a4b3db2badf7f1dce3467391 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4c5571a4b3db2badf7f1dce3467391">More...</a><br /></td></tr>
<tr class="separator:a8d4c5571a4b3db2badf7f1dce3467391 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49c296c5d0f9efb76f165954cf40c281 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a49c296c5d0f9efb76f165954cf40c281">VisitResizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a49c296c5d0f9efb76f165954cf40c281 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a49c296c5d0f9efb76f165954cf40c281">More...</a><br /></td></tr>
<tr class="separator:a49c296c5d0f9efb76f165954cf40c281 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a62605ac51992ce0913cc119b59546b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6a62605ac51992ce0913cc119b59546b">VisitRsqrtLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a6a62605ac51992ce0913cc119b59546b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Reciprocal of square root layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a6a62605ac51992ce0913cc119b59546b">More...</a><br /></td></tr>
<tr class="separator:a6a62605ac51992ce0913cc119b59546b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c023b3170bed9368b65730bc7fff60b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1c023b3170bed9368b65730bc7fff60b">VisitSliceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a1c023b3170bed9368b65730bc7fff60b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a1c023b3170bed9368b65730bc7fff60b">More...</a><br /></td></tr>
<tr class="separator:a1c023b3170bed9368b65730bc7fff60b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd8b0b2e365bbeabceddc35a1cb52916 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#abd8b0b2e365bbeabceddc35a1cb52916">VisitSoftmaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:abd8b0b2e365bbeabceddc35a1cb52916 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#abd8b0b2e365bbeabceddc35a1cb52916">More...</a><br /></td></tr>
<tr class="separator:abd8b0b2e365bbeabceddc35a1cb52916 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9478c4f41840a2e2c12b7f336e725a8a inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9478c4f41840a2e2c12b7f336e725a8a">VisitSpaceToBatchNdLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a9478c4f41840a2e2c12b7f336e725a8a inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a9478c4f41840a2e2c12b7f336e725a8a">More...</a><br /></td></tr>
<tr class="separator:a9478c4f41840a2e2c12b7f336e725a8a inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdedda623455cc7a0f982d6f4e96d53a inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acdedda623455cc7a0f982d6f4e96d53a">VisitSpaceToDepthLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:acdedda623455cc7a0f982d6f4e96d53a inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a space to depth layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#acdedda623455cc7a0f982d6f4e96d53a">More...</a><br /></td></tr>
<tr class="separator:acdedda623455cc7a0f982d6f4e96d53a inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8689a80f8939de6323319aba5806ee9e inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8689a80f8939de6323319aba5806ee9e">VisitSplitterLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8689a80f8939de6323319aba5806ee9e inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a8689a80f8939de6323319aba5806ee9e">More...</a><br /></td></tr>
<tr class="separator:a8689a80f8939de6323319aba5806ee9e inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b47d411d147aa420f7a69356d84fb80 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8b47d411d147aa420f7a69356d84fb80">VisitStackLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8b47d411d147aa420f7a69356d84fb80 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a stack layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a8b47d411d147aa420f7a69356d84fb80">More...</a><br /></td></tr>
<tr class="separator:a8b47d411d147aa420f7a69356d84fb80 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c15053a7e295099a1a34c4add5a03b8 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3c15053a7e295099a1a34c4add5a03b8">VisitStandInLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a3c15053a7e295099a1a34c4add5a03b8 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a StandInLayer should call back to when its Accept(ILaterVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a3c15053a7e295099a1a34c4add5a03b8">More...</a><br /></td></tr>
<tr class="separator:a3c15053a7e295099a1a34c4add5a03b8 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31862ce4ffaddde96ebe0afcf04f3577 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a31862ce4ffaddde96ebe0afcf04f3577">VisitStridedSliceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a31862ce4ffaddde96ebe0afcf04f3577 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a31862ce4ffaddde96ebe0afcf04f3577">More...</a><br /></td></tr>
<tr class="separator:a31862ce4ffaddde96ebe0afcf04f3577 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac42c3a57a82260c8315d4f0320620934 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac42c3a57a82260c8315d4f0320620934">VisitSubtractionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:ac42c3a57a82260c8315d4f0320620934 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a subtraction layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ac42c3a57a82260c8315d4f0320620934">More...</a><br /></td></tr>
<tr class="separator:ac42c3a57a82260c8315d4f0320620934 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a877d400155151a5afba9f0b17fbcf8f3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a877d400155151a5afba9f0b17fbcf8f3">VisitSwitchLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a877d400155151a5afba9f0b17fbcf8f3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a switch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a877d400155151a5afba9f0b17fbcf8f3">More...</a><br /></td></tr>
<tr class="separator:a877d400155151a5afba9f0b17fbcf8f3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dfb04de9aa0b8b55c70fe96af13e1e1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a4dfb04de9aa0b8b55c70fe96af13e1e1">VisitTransposeConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;, const char *) override</td></tr>
<tr class="memdesc:a4dfb04de9aa0b8b55c70fe96af13e1e1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D transpose convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a4dfb04de9aa0b8b55c70fe96af13e1e1">More...</a><br /></td></tr>
<tr class="separator:a4dfb04de9aa0b8b55c70fe96af13e1e1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cb213b083367f4fe9bed2916206525f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2cb213b083367f4fe9bed2916206525f">VisitTransposeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a2cb213b083367f4fe9bed2916206525f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a transpose layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a2cb213b083367f4fe9bed2916206525f">More...</a><br /></td></tr>
<tr class="separator:a2cb213b083367f4fe9bed2916206525f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_layer_visitor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_layer_visitor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a></td></tr>
<tr class="memitem:a463965a96896bf0d261b44eea5172c7b inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a463965a96896bf0d261b44eea5172c7b">StartVisit</a> ()</td></tr>
<tr class="separator:a463965a96896bf0d261b44eea5172c7b inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4549b1bbb63fa26700d74854e388784f inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a4549b1bbb63fa26700d74854e388784f">FinishVisit</a> ()</td></tr>
<tr class="separator:a4549b1bbb63fa26700d74854e388784f inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_layer_visitor_base"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_layer_visitor_base')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a></td></tr>
<tr class="memitem:aec6644c81f84f086262dfd06088acd99 inherit pro_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aec6644c81f84f086262dfd06088acd99">LayerVisitorBase</a> ()</td></tr>
<tr class="separator:aec6644c81f84f086262dfd06088acd99 inherit pro_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab59e5e8c65aa44857c27db70fc412baa inherit pro_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab59e5e8c65aa44857c27db70fc412baa">~LayerVisitorBase</a> ()</td></tr>
<tr class="separator:ab59e5e8c65aa44857c27db70fc412baa inherit pro_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_layer_visitor"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_layer_visitor')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a></td></tr>
<tr class="memitem:a27fa880bce96ac7355284a7681f2377e inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a27fa880bce96ac7355284a7681f2377e">ILayerVisitor</a> ()</td></tr>
<tr class="separator:a27fa880bce96ac7355284a7681f2377e inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ad7aeeaf26228ef11c15fa5d4507d8a inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7ad7aeeaf26228ef11c15fa5d4507d8a">~ILayerVisitor</a> ()</td></tr>
<tr class="separator:a7ad7aeeaf26228ef11c15fa5d4507d8a inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Visitor object for quantizing layers in a network. </p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8hpp_source.xhtml#l00025">25</a> of file <a class="el" href="_quantizer_visitor_8hpp_source.xhtml">QuantizerVisitor.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a72d00eb366b367af08007d472d5edebb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72d00eb366b367af08007d472d5edebb">&#9670;&nbsp;</a></span>QuantizerVisitor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml">QuantizerVisitor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_range_tracker.xhtml">RangeTracker</a> &amp;&#160;</td>
          <td class="paramname"><em>rangeTracker</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_i_quantization_scheme.xhtml">IQuantizationScheme</a> *&#160;</td>
          <td class="paramname"><em>quantizationScheme</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>preserveType</em> = <code><a class="el" href="_ref_layer_tests_8cpp.xhtml#a2289f9e7fac0ce47801448e873b04303">false</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00017">17</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00130">OutputSlot::CalculateIndexOnOwner()</a>, <a class="el" href="structarmnn_1_1_i_quantization_scheme.xhtml#a6a5561395e9693f02258b49dfcc009b4">IQuantizationScheme::ComputeScheme()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00055">InputSlot::GetConnectedOutputSlot()</a>, <a class="el" href="structarmnn_1_1_i_quantization_scheme.xhtml#ad23181f9f8fcc85758f62c49fc7ca23f">IQuantizationScheme::GetDataType()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#afb5e65c770f6cee222db8af7581541a6">IConnectableLayer::GetGuid()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00319">Layer::GetGuid()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00282">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">IConnectableLayer::GetNumInputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00115">OutputSlot::GetOwningLayer()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00452">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_range_tracker_8cpp_source.xhtml#l00029">RangeTracker::GetRange()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00063">OutputSlot::GetTensorInfo()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    : m_Ranges(rangeTracker)</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    , m_QuantizedNetwork(<a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>())</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    , m_QuantizationScheme(quantizationScheme)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    , m_PreserveType(preserveType)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00046">Network.cpp:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a78cb6c9b6239cd69574c65dab44eb3b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78cb6c9b6239cd69574c65dab44eb3b1">&#9670;&nbsp;</a></span>~QuantizerVisitor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml">QuantizerVisitor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ae25c71d0c8fceed87f0b84fc032f71c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae25c71d0c8fceed87f0b84fc032f71c8">&#9670;&nbsp;</a></span>RetrieveFinalNetwork()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> RetrieveFinalNetwork </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Extract the quantized network. </p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8hpp_source.xhtml#l00199">199</a> of file <a class="el" href="_quantizer_visitor_8hpp_source.xhtml">QuantizerVisitor.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;{ <span class="keywordflow">return</span> std::move(m_QuantizedNetwork); }</div></div><!-- fragment -->
</div>
</div>
<a id="a4abca3536debe2dac00f1d6a0b14a435"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4abca3536debe2dac00f1d6a0b14a435">&#9670;&nbsp;</a></span>VisitAbsLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitAbsLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Functions to quantize the individual layers, overridden from <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a>. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a288db083c224e756f7bb35afe6289b7f">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00119">119</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::Abs</a>, and <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00279">QuantizerVisitor::VisitElementwiseUnaryLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a237f88794e504388160a87813b66b9e3">VisitElementwiseUnaryLayer</a>(layer, ElementwiseUnaryDescriptor(<a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>), name);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a237f88794e504388160a87813b66b9e3"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a237f88794e504388160a87813b66b9e3">armnn::QuantizerVisitor::VisitElementwiseUnaryLayer</a></div><div class="ttdeci">void VisitElementwiseUnaryLayer(const IConnectableLayer *layer, const ElementwiseUnaryDescriptor &amp;elementwiseUnaryDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is inv...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00279">QuantizerVisitor.cpp:279</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af493528dec93f39f5081dbefb40bff75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af493528dec93f39f5081dbefb40bff75">&#9670;&nbsp;</a></span>VisitActivationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitActivationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>activationDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">activationDescriptor</td><td>- <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml" title="An ActivationDescriptor for the ActivationLayer. ">ActivationDescriptor</a> to configure the activation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab2a1e493b983a932792bc5d0c1a20127">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00124">124</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddActivationLayer(activationDescriptor, name);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7cb4ef1bc9588c4319144460c288022f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cb4ef1bc9588c4319144460c288022f">&#9670;&nbsp;</a></span>VisitAdditionLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitAdditionLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an addition layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2d20b94b7de822f3d29ab12e47e3be4e">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00133">133</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddAdditionLayer(name);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2482bba03a17e59a8ead45530e8efea5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2482bba03a17e59a8ead45530e8efea5">&#9670;&nbsp;</a></span>VisitArgMinMaxLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitArgMinMaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>argMinMaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an arg min max layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">argMinMaxDescriptor</td><td>- <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml" title="An ArgMinMaxDescriptor for ArgMinMaxLayer. ">ArgMinMaxDescriptor</a> to configure the activation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8423316906ebe6ae6d28c7f69ad91248">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00140">140</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddArgMinMaxLayer(argMinMaxDescriptor, name);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1532cb8f551812e784ccc14faae407b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1532cb8f551812e784ccc14faae407b9">&#9670;&nbsp;</a></span>VisitBatchNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitBatchNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>variance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">mean</td><td>- Pre-calculated mean for each channel. </td></tr>
    <tr><td class="paramname">variance</td><td>- Pre-calculated variance for each channel. </td></tr>
    <tr><td class="paramname">beta</td><td>- Per-channel additive factor. </td></tr>
    <tr><td class="paramname">gamma</td><td>- Per-channel multiplicative factor. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a9e642355474f31268e66a404e6c1b81d">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00149">149</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_network_quantizer_utils_8cpp_source.xhtml#l00015">armnn::CreateQuantizedConst()</a>.</p>
<div class="fragment"><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    std::vector&lt;uint8_t&gt; meanBacking;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    ConstTensor qMean = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(mean, meanBacking);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    std::vector&lt;uint8_t&gt; varianceBacking;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    ConstTensor qVariance = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(variance, varianceBacking);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    std::vector&lt;uint8_t&gt; betaBacking;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    ConstTensor qBeta = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(beta, betaBacking);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    std::vector&lt;uint8_t&gt; gammaBacking;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    ConstTensor qGamma = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(gamma, gammaBacking);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddBatchNormalizationLayer(desc,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                                                                 qMean,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                                                                 qVariance,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                                                                 qBeta,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                                                                 qGamma,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                                                                 name);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a310dd804fd70eadb1e8854325e63f0bd"><div class="ttname"><a href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">armnn::CreateQuantizedConst</a></div><div class="ttdeci">ConstTensor CreateQuantizedConst(const ConstTensor &amp;tensor, std::vector&lt; uint8_t &gt; &amp;backing)</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_utils_8cpp_source.xhtml#l00015">NetworkQuantizerUtils.cpp:15</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af5d09e03a578afa9c0bb8afd11c65485"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5d09e03a578afa9c0bb8afd11c65485">&#9670;&nbsp;</a></span>VisitBatchToSpaceNdLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitBatchToSpaceNdLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>batchToSpaceNdDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">batchToSpaceNdDescriptor</td><td>- Description of the layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a1cee693185bcda15bd777008e60c7cf7">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00180">180</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;{</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddBatchToSpaceNdLayer(batchToSpaceNdDescriptor, name);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6a1adf7bf81e5cbb74b4cc4e8946c653"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a1adf7bf81e5cbb74b4cc4e8946c653">&#9670;&nbsp;</a></span>VisitComparisonLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitComparisonLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>comparisonDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Comparison layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">comparisonDescriptor</td><td>- Description of the layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a6a1a6856fe4210d9c84c4fb86b4b661e">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00189">189</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddComparisonLayer(comparisonDescriptor, name);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afb527e0c7c30b56da911fee8c7b7a011"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb527e0c7c30b56da911fee8c7b7a011">&#9670;&nbsp;</a></span>VisitConcatLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitConcatLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>concatDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">concatDescriptor</td><td>- ConcatDescriptor (synonym for <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml" title="An OriginsDescriptor for the ConcatLayer. ">OriginsDescriptor</a>) to configure the concatenation process. Number of Views must be equal to the number of inputs, and their order must match - e.g. first view corresponds to the first input, second view to the second input, etc.... </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aeb90d7587f7887aee1f2b43261d4ee5c">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00198">198</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;{</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddConcatLayer(originsDescriptor, name);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aeb652d74e4b3596e85b22c2d52144f73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb652d74e4b3596e85b22c2d52144f73">&#9670;&nbsp;</a></span>VisitConstantLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitConstantLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a layer with no inputs and a single output, which always corresponds to the passed in constant tensor should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">input</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> to be provided as the only output of the layer. The layer will maintain its own copy of the tensor data, meaning the memory referenced by <em>input</em> can be freed or reused after this function is called. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2f123a6a99ac143c0f3806cb505765cd">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00207">207</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_network_quantizer_utils_8cpp_source.xhtml#l00015">armnn::CreateQuantizedConst()</a>.</p>
<div class="fragment"><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    std::vector&lt;uint8_t&gt; inputBacking;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    ConstTensor qInput = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(input, inputBacking);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddConstantLayer(qInput, name);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a310dd804fd70eadb1e8854325e63f0bd"><div class="ttname"><a href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">armnn::CreateQuantizedConst</a></div><div class="ttdeci">ConstTensor CreateQuantizedConst(const ConstTensor &amp;tensor, std::vector&lt; uint8_t &gt; &amp;backing)</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_utils_8cpp_source.xhtml#l00015">NetworkQuantizerUtils.cpp:15</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac2f379ba77b06095e0c024e232ec1fd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2f379ba77b06095e0c024e232ec1fd4">&#9670;&nbsp;</a></span>VisitConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">convolution2dDescriptor</td><td>- Description of the 2D convolution layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the weights data. </td></tr>
    <tr><td class="paramname">biases</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> tensor for the bias data. If specified, must match the output tensor shape. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#abc8fe4c6cbc8fa2b13c525500dddfbf6">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00218">218</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_network_quantizer_utils_8cpp_source.xhtml#l00015">armnn::CreateQuantizedConst()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;{</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    std::vector&lt;uint8_t&gt; weightsBacking;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    ConstTensor qWeights = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(weights, weightsBacking);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    Optional&lt;ConstTensor&gt; optionalQBiases;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    std::vector&lt;int32_t&gt; biasesBacking;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">if</span> (biases.has_value())</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        ConstTensor qBiases = CreateQuantizedBias(layer, qWeights, biases, biasesBacking);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        optionalQBiases = Optional&lt;ConstTensor&gt;(qBiases);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddConvolution2dLayer(convolution2dDescriptor,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                                            qWeights,</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                                                            optionalQBiases,</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                                                            name);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a310dd804fd70eadb1e8854325e63f0bd"><div class="ttname"><a href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">armnn::CreateQuantizedConst</a></div><div class="ttdeci">ConstTensor CreateQuantizedConst(const ConstTensor &amp;tensor, std::vector&lt; uint8_t &gt; &amp;backing)</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_utils_8cpp_source.xhtml#l00015">NetworkQuantizerUtils.cpp:15</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac0daac0e6ce49805580a8a50a8d3d514"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0daac0e6ce49805580a8a50a8d3d514">&#9670;&nbsp;</a></span>VisitDepthToSpaceLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitDepthToSpaceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>depthToSpaceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a depth to space layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">depthToSpaceDescriptor</td><td>- Parameters for the depth to space operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a72d308d6f24ffb8846375d770394af66">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00244">244</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;{</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddDepthToSpaceLayer(descriptor, name);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a554e88817e6fd98645388873a108f868"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a554e88817e6fd98645388873a108f868">&#9670;&nbsp;</a></span>VisitDepthwiseConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitDepthwiseConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a 2D depthwise convolution layer with biases should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">convolution2dDescriptor</td><td>- Description of the 2D depthwise convolution layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the weights. Expected format: [channelMultiplier, inputChannels, height, width]. </td></tr>
    <tr><td class="paramname">biases</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> tensor for the bias data. If specified, must match the output tensor shape. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ad39aaac8f8fb790ae364c87f1a249d68">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00253">253</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_network_quantizer_utils_8cpp_source.xhtml#l00015">armnn::CreateQuantizedConst()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;{</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    std::vector&lt;uint8_t&gt; weightsBacking;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    ConstTensor qWeights = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(weights, weightsBacking);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    Optional&lt;ConstTensor&gt; optionalQBiases;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    std::vector&lt;int32_t&gt; biasesBacking;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordflow">if</span> (biases.has_value())</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        ConstTensor qBiases = CreateQuantizedBias(layer, qWeights, biases, biasesBacking);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        optionalQBiases = Optional&lt;ConstTensor&gt;(qBiases);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddDepthwiseConvolution2dLayer(desc,</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                                                                                     qWeights,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                                                                     optionalQBiases,</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                                                                     name);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a310dd804fd70eadb1e8854325e63f0bd"><div class="ttname"><a href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">armnn::CreateQuantizedConst</a></div><div class="ttdeci">ConstTensor CreateQuantizedConst(const ConstTensor &amp;tensor, std::vector&lt; uint8_t &gt; &amp;backing)</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_utils_8cpp_source.xhtml#l00015">NetworkQuantizerUtils.cpp:15</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a237f88794e504388160a87813b66b9e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a237f88794e504388160a87813b66b9e3">&#9670;&nbsp;</a></span>VisitElementwiseUnaryLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitElementwiseUnaryLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>elementwiseUnaryDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">elementwiseUnaryDescriptor</td><td>- Description of the layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aaf99c2bdfe61c48821f23826433a5abc">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00279">279</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00119">QuantizerVisitor::VisitAbsLayer()</a>, and <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00472">QuantizerVisitor::VisitRsqrtLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;{</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddElementwiseUnaryLayer(elementwiseUnaryDescriptor, name);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2da06e8f6265a430bb6907107c4c38b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2da06e8f6265a430bb6907107c4c38b1">&#9670;&nbsp;</a></span>VisitFillLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitFillLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>fillDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a fill layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">fillDescriptor</td><td>- Description of the layer </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#abf67d8273706f9dfc51be559b8505199">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00288">288</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddFillLayer(desc, name);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abbdd655f9e0bec625369079ed97f1328"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbdd655f9e0bec625369079ed97f1328">&#9670;&nbsp;</a></span>VisitFullyConnectedLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitFullyConnectedLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>fullyConnectedDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">fullyConnectedDescriptor</td><td>- Description of the fully connected layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the weights data. </td></tr>
    <tr><td class="paramname">biases</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> tensor for the bias data. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab93a48970564c6eabbc982a2116c1262">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00297">297</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_network_quantizer_utils_8cpp_source.xhtml#l00015">armnn::CreateQuantizedConst()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;{</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    std::vector&lt;uint8_t&gt; weightsBacking;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    ConstTensor qWeights = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(weights, weightsBacking);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    Optional&lt;ConstTensor&gt; optionalQBiases;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    std::vector&lt;int32_t&gt; biasesBacking;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordflow">if</span> (biases.has_value())</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        ConstTensor qBiases = CreateQuantizedBias(layer, qWeights, biases, biasesBacking);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        optionalQBiases = Optional&lt;ConstTensor&gt;(qBiases);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    }</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddFullyConnectedLayer(desc,</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                                                                             qWeights,</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                                                                             optionalQBiases,</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                                                                             name);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a310dd804fd70eadb1e8854325e63f0bd"><div class="ttname"><a href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">armnn::CreateQuantizedConst</a></div><div class="ttdeci">ConstTensor CreateQuantizedConst(const ConstTensor &amp;tensor, std::vector&lt; uint8_t &gt; &amp;backing)</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_utils_8cpp_source.xhtml#l00015">NetworkQuantizerUtils.cpp:15</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2ca539d734553e606c0134940e444298"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ca539d734553e606c0134940e444298">&#9670;&nbsp;</a></span>VisitInputLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitInputLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an <a class="el" href="classarmnn_1_1_input_layer.xhtml" title="A layer user-provided data can be bound to (e.g. inputs, outputs). ">InputLayer</a> should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">id</td><td>- User generated id to uniquely identify a particular input. The same id needs to be specified when passing the inputs to the <a class="el" href="classarmnn_1_1_i_runtime.xhtml#aec0dc8016a3b1e444dfc1ffb5f15195c" title="Evaluates a network using input in inputTensors and outputs filled into outputTensors. ">IRuntime::EnqueueWorkload()</a> function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab6dc51682cb4178194f3f00c2309ec7b">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00323">323</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::Float16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00194">TensorInfo::GetDataType()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">IOutputSlot::GetTensorInfo()</a>, and <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;{</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType = layer-&gt;GetOutputSlot(0).GetTensorInfo().GetDataType();</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    IConnectableLayer* inputLayer = m_QuantizedNetwork-&gt;AddInputLayer(<span class="keywordtype">id</span>, name);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">if</span> (m_PreserveType &amp;&amp; (dataType == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a> || dataType == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>))</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        IConnectableLayer* quantizeLayer = m_QuantizedNetwork-&gt;AddQuantizeLayer();</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        inputLayer-&gt;GetOutputSlot(0).Connect(quantizeLayer-&gt;GetInputSlot(0));</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        inputLayer-&gt;GetOutputSlot(0).SetTensorInfo(layer-&gt;GetOutputSlot(0).GetTensorInfo());</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        RecordLayer(layer, quantizeLayer);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    }</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        RecordLayer(layer, inputLayer);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    }</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00032">Types.hpp:32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac6da520014db9cd2d4bede451e37ca0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6da520014db9cd2d4bede451e37ca0a">&#9670;&nbsp;</a></span>VisitInstanceNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitInstanceNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an instance normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">desc</td><td>- Parameters for the instance normalization operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aaf4e8d2b1ed2612f4821ed1d2351667b">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00341">341</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;{</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddInstanceNormalizationLayer(descriptor, name);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abe0c29cd370a84c3e669d28dda18afb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe0c29cd370a84c3e669d28dda18afb7">&#9670;&nbsp;</a></span>VisitLogSoftmaxLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitLogSoftmaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>logSoftmaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a log softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">logSoftmaxDescriptor</td><td>- LogSoftmaxDescriptor to configure the log softmax. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2db103c5db69877b05b365e50ee3bd5b">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00350">350</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;{</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddLogSoftmaxLayer(logSoftmaxDescriptor, name);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0a2f55bda910ccf8816d2678b7c980b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a2f55bda910ccf8816d2678b7c980b6">&#9670;&nbsp;</a></span>VisitMeanLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMeanLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>meanDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Mean layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">meanDescriptor</td><td>- Parameters for the mean operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab33e9cae83e312ccc9e12adcf53494e3">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00359">359</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;{</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddMeanLayer(meanDescriptor, name);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1c587861e672cedaedd1f32bbce44afc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c587861e672cedaedd1f32bbce44afc">&#9670;&nbsp;</a></span>VisitMultiplicationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMultiplicationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a multiplication layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a1e415ad61a4fa40d85a4f0da855cf485">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00368">368</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;{</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddMultiplicationLayer(name);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab0946e6e13740185d7b7939720f347f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0946e6e13740185d7b7939720f347f1">&#9670;&nbsp;</a></span>VisitNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>normalizationDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">normalizationDescriptor</td><td>- <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml" title="A NormalizationDescriptor for the NormalizationLayer. ">NormalizationDescriptor</a> to configure the normalization. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a96501b3e43422b9fdf6fc45d89b20992">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00376">376</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;{</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddNormalizationLayer(normalizationDescriptor, name);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac75d60924c52b96ea6f9567fcfa2db10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac75d60924c52b96ea6f9567fcfa2db10">&#9670;&nbsp;</a></span>VisitOutputLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitOutputLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function an output layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">id</td><td>- User generated id to uniquely identify a particular output. The same id needs to be specified when passing the outputs to the <a class="el" href="classarmnn_1_1_i_runtime.xhtml#aec0dc8016a3b1e444dfc1ffb5f15195c" title="Evaluates a network using input in inputTensors and outputs filled into outputTensors. ">IRuntime::EnqueueWorkload()</a> function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a0da6bde681d919b7282eddad4a446890">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00385">385</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::Float16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">IInputSlot::GetConnection()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00194">TensorInfo::GetDataType()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">IOutputSlot::GetTensorInfo()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;{</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keyword">const</span> TensorInfo&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a> = layer-&gt;GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&amp; dataType = info.GetDataType();</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    IConnectableLayer* outputLayer = m_QuantizedNetwork-&gt;AddOutputLayer(<span class="keywordtype">id</span>, name);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keywordflow">if</span> (m_PreserveType  &amp;&amp; (dataType == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a> || dataType == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>))</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    {</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        IConnectableLayer* dequantizeLayer = m_QuantizedNetwork-&gt;AddDequantizeLayer();</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        RecordLayer(layer, dequantizeLayer);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        SetQuantizedInputConnections(layer, dequantizeLayer);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        dequantizeLayer-&gt;GetOutputSlot(0).Connect(outputLayer-&gt;GetInputSlot(0));</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        dequantizeLayer-&gt;GetOutputSlot(0).SetTensorInfo(info);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    }</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    {</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        RecordLayer(layer, outputLayer);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        SetQuantizedInputConnections(layer, outputLayer);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    }</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00032">Types.hpp:32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0b4b2e9b5578bf50197c6929a6a48071"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b4b2e9b5578bf50197c6929a6a48071">&#9670;&nbsp;</a></span>VisitPadLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitPadLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>padDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a pad layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">paddings</td><td>- n by 2 tensor, where n is the rank of the input tensor, such that paddings[i,0] indicates the amount of padding to add in front of dimension i, and paddings[i,1] indicates the amount of padding to add after the end of dimension i </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aab2febd844bcf654e80cf164984c8904">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00406">406</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;{</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddPadLayer(padDescriptor, name);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8667c9d0c42575e31c7a630fea8c7256"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8667c9d0c42575e31c7a630fea8c7256">&#9670;&nbsp;</a></span>VisitPermuteLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitPermuteLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>permuteDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">permuteDescriptor</td><td>- <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml" title="A PermuteDescriptor for the PermuteLayer. ">PermuteDescriptor</a> to configure the permute. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a211e587a05b0c7e7202f8f8894f89894">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00415">415</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;{</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddPermuteLayer(permuteDescriptor, name);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaee763832ceb783dcffde56e1c1a6d93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaee763832ceb783dcffde56e1c1a6d93">&#9670;&nbsp;</a></span>VisitPooling2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitPooling2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>pooling2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">pooling2dDescriptor</td><td>- <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml" title="A Pooling2dDescriptor for the Pooling2dLayer. ">Pooling2dDescriptor</a> to configure the pooling. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aef56afef7d87afa51fd363487c375af5">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00424">424</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;{</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddPooling2dLayer(pooling2dDescriptor, name);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a34f5745a60988b4a109ec213f8d0cb77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34f5745a60988b4a109ec213f8d0cb77">&#9670;&nbsp;</a></span>VisitPreluLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitPreluLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a PReLU activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a4f6971a5d2c164c691dc7943f4befd5c">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00433">433</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;{</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddPreluLayer(name);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4a7f7f33591fd91e8fb1c08d06c0733a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a7f7f33591fd91e8fb1c08d06c0733a">&#9670;&nbsp;</a></span>VisitReshapeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitReshapeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>reshapeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">reshapeDescriptor</td><td>- Parameters for the reshape operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#acb732489554691ba852ca323888093ac">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00441">441</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;{</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddReshapeLayer(reshapeDescriptor, name);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a5abbca55c908440acecfa6e0f921092d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5abbca55c908440acecfa6e0f921092d">&#9670;&nbsp;</a></span>VisitResizeBilinearLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitResizeBilinearLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">ResizeBilinearDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>resizeDesc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">resizeDesc</td><td>- Parameters for the resize operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8d87dab666a8aa6e132fcd93717a3c4b">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00450">450</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::Bilinear</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00772">ResizeBilinearDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00809">ResizeDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00807">ResizeDescriptor::m_Method</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00770">ResizeBilinearDescriptor::m_TargetHeight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00804">ResizeDescriptor::m_TargetHeight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00768">ResizeBilinearDescriptor::m_TargetWidth</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00802">ResizeDescriptor::m_TargetWidth</a>, and <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00463">QuantizerVisitor::VisitResizeLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;{</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    ResizeDescriptor resizeDescriptor;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    resizeDescriptor.m_Method       = <a class="code" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">ResizeMethod::Bilinear</a>;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    resizeDescriptor.m_TargetWidth  = resizeBilinearDescriptor.m_TargetWidth;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    resizeDescriptor.m_TargetHeight = resizeBilinearDescriptor.m_TargetHeight;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    resizeDescriptor.m_DataLayout   = resizeBilinearDescriptor.m_DataLayout;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a7eea0e93f066099f3549fef15881a4cb">VisitResizeLayer</a>(layer, resizeDescriptor, name);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a7eea0e93f066099f3549fef15881a4cb"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a7eea0e93f066099f3549fef15881a4cb">armnn::QuantizerVisitor::VisitResizeLayer</a></div><div class="ttdeci">void VisitResizeLayer(const IConnectableLayer *layer, const ResizeDescriptor &amp;resizeDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00463">QuantizerVisitor.cpp:463</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f"><div class="ttname"><a href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::ResizeMethod::Bilinear</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7eea0e93f066099f3549fef15881a4cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7eea0e93f066099f3549fef15881a4cb">&#9670;&nbsp;</a></span>VisitResizeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitResizeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>resizeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">resizeDescriptor</td><td>- Parameters for the resize operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a306e22f3cc6baaf7a6f1390f669be42e">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00463">463</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00450">QuantizerVisitor::VisitResizeBilinearLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;{</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddResizeLayer(resizeDescriptor, name);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a990bfe643729a7dedcc55da1f7d1b3bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a990bfe643729a7dedcc55da1f7d1b3bf">&#9670;&nbsp;</a></span>VisitRsqrtLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitRsqrtLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Reciprocal of square root layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a413253dbf325ea0b44559b55242170d1">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00472">472</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::Rsqrt</a>, and <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00279">QuantizerVisitor::VisitElementwiseUnaryLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;{</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a237f88794e504388160a87813b66b9e3">VisitElementwiseUnaryLayer</a>(layer, ElementwiseUnaryDescriptor(<a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>), name);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a237f88794e504388160a87813b66b9e3"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a237f88794e504388160a87813b66b9e3">armnn::QuantizerVisitor::VisitElementwiseUnaryLayer</a></div><div class="ttdeci">void VisitElementwiseUnaryLayer(const IConnectableLayer *layer, const ElementwiseUnaryDescriptor &amp;elementwiseUnaryDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is inv...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00279">QuantizerVisitor.cpp:279</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a20a228046c2aacd8664e50841af84e2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20a228046c2aacd8664e50841af84e2b">&#9670;&nbsp;</a></span>VisitSliceLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSliceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>sliceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">sliceDescriptor</td><td>- <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml" title="A SliceDescriptor for the SliceLayer. ">SliceDescriptor</a> to configure the slice operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aad5c9d5c9cf256ea990097732fd1f108">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00477">477</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;{</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddSliceLayer(sliceDescriptor, name);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a98f34d2511f43324833060154cbdba8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98f34d2511f43324833060154cbdba8d">&#9670;&nbsp;</a></span>VisitSoftmaxLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSoftmaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>softmaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">softmaxDescriptor</td><td>- <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml" title="A SoftmaxDescriptor for the SoftmaxLayer. ">SoftmaxDescriptor</a> to configure the softmax. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ae47c90e3188970462a28d297644133d1">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00486">486</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;{</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddSoftmaxLayer(softmaxDescriptor, name);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8e327cc6432697fd55d6b91e554360d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e327cc6432697fd55d6b91e554360d9">&#9670;&nbsp;</a></span>VisitSpaceToBatchNdLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSpaceToBatchNdLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>spaceToBatchNdDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">spaceToBatchNdDescriptor</td><td>- Parameters for the space to batch operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aa8c1ec6712293700fb3874f63f2ec5f0">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00495">495</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;{</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddSpaceToBatchNdLayer(spaceToBatchNdDescriptor, name);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2c416fbd39598732dd3c6255ceaf1b66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c416fbd39598732dd3c6255ceaf1b66">&#9670;&nbsp;</a></span>VisitSpaceToDepthLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSpaceToDepthLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>spaceToDepthDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a space to depth layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">spaceToDepthDescriptor</td><td>- Parameters for the space to depth operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7ac3fe15d509443ffbe985370b61b913">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00504">504</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;{</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddSpaceToDepthLayer(spaceToDepthDescriptor, name);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afbea8aa2295f2ab71ea5bb64ccd47871"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbea8aa2295f2ab71ea5bb64ccd47871">&#9670;&nbsp;</a></span>VisitSplitterLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSplitterLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a60291543fe872b795e71e05bcd835fd1">SplitterDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>splitterDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">splitterDescriptor</td><td>- <a class="el" href="structarmnn_1_1_views_descriptor.xhtml" title="A ViewsDescriptor for the SplitterLayer. ">ViewsDescriptor</a> to configure the splitting process. Number of Views must be equal to the number of outputs, and their order must match - e.g. first view corresponds to the first output, second view to the second output, etc.... </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a45c613d43c30b3314cafb1be3ef7685c">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00513">513</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;{</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddSplitterLayer(splitterDescriptor, name);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1b4325b20242a2db0922f68aea195d00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b4325b20242a2db0922f68aea195d00">&#9670;&nbsp;</a></span>VisitStackLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitStackLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>stackDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a stack layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">stackDescriptor</td><td>- Parameters for the stack operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a5c7df9d37959280f4328848ae4b2be37">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00522">522</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;{</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddStackLayer(stackDescriptor, name);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a61b7aa0305e7c45a625f7835fa26b9b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61b7aa0305e7c45a625f7835fa26b9b6">&#9670;&nbsp;</a></span>VisitStridedSliceLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitStridedSliceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>stridedSliceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">stridedSliceDescriptor</td><td>- Parameters for the strided slice operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ac2f4ca5ada6d8fcf82d7bea2e6a06924">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00531">531</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;{</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddStridedSliceLayer(stridedSliceDescriptor, name);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abffdcc9b528d64b510103f5b280e246e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abffdcc9b528d64b510103f5b280e246e">&#9670;&nbsp;</a></span>VisitSubtractionLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSubtractionLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a subtraction layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ad339435c8d56522efc647da668d47047">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00540">540</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;{</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddSubtractionLayer(name);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a9e7ddd6c869af052317c6de0df53c942"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e7ddd6c869af052317c6de0df53c942">&#9670;&nbsp;</a></span>VisitTransposeConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitTransposeConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a 2D transpose convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">descriptor</td><td>- Description of the 2D transpose convolution layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the weights data. </td></tr>
    <tr><td class="paramname">biases</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> tensor for the bias data. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a58bb3bc96c089a4d0b954be81f1899c6">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00548">548</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_network_quantizer_utils_8cpp_source.xhtml#l00015">armnn::CreateQuantizedConst()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;{</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="comment">// quantize weights</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    std::vector&lt;uint8_t&gt; weightsBacking;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    ConstTensor qWeights = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(weights, weightsBacking);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="comment">// quantize biases</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    std::vector&lt;int32_t&gt; biasesBacking;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    Optional&lt;ConstTensor&gt; optionalQBiases;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keywordflow">if</span> (biases.has_value())</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    {</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        ConstTensor qBiases = CreateQuantizedBias(layer, qWeights, biases, biasesBacking);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        optionalQBiases = Optional&lt;ConstTensor&gt;(qBiases);</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    }</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddTransposeConvolution2dLayer(descriptor,</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                                                                                     qWeights,</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                                                                                     optionalQBiases,</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                                                                                     name);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a310dd804fd70eadb1e8854325e63f0bd"><div class="ttname"><a href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">armnn::CreateQuantizedConst</a></div><div class="ttdeci">ConstTensor CreateQuantizedConst(const ConstTensor &amp;tensor, std::vector&lt; uint8_t &gt; &amp;backing)</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_utils_8cpp_source.xhtml#l00015">NetworkQuantizerUtils.cpp:15</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8c918592332c5e8339d43a9288350964"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c918592332c5e8339d43a9288350964">&#9670;&nbsp;</a></span>VisitTransposeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitTransposeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>transposeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a transpose layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">transposeDescriptor</td><td>- <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml" title="A TransposeDescriptor for the TransposeLayer. ">TransposeDescriptor</a> to configure the transpose. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a5e101341277244c45eb20f4db63c77a3">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00576">576</a> of file <a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;{</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    IConnectableLayer* newLayer = m_QuantizedNetwork-&gt;AddTransposeLayer(transposeDescriptor, name);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/<a class="el" href="_quantizer_visitor_8hpp_source.xhtml">QuantizerVisitor.hpp</a></li>
<li>src/armnn/<a class="el" href="_quantizer_visitor_8cpp_source.xhtml">QuantizerVisitor.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml">QuantizerVisitor</a></li>
    <li class="footer">Generated on Wed Nov 25 2020 09:59:19 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
