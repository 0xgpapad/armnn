<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/NetworkExecutionUtils/NetworkExecutionUtils.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_network_execution_utils_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">NetworkExecutionUtils.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_network_execution_utils_8hpp_source.xhtml">NetworkExecutionUtils.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_filesystem_8hpp_source.xhtml">Filesystem.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_inference_test_8hpp_source.xhtml">InferenceTest.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_resolve_type_8hpp_source.xhtml">ResolveType.hpp</a>&gt;</code><br />
</div>
<p><a href="_network_execution_utils_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:acf933608643ce27b3c68e3431d047d0a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#acf933608643ce27b3c68e3431d047d0a">TContainer</a> = mapbox::util::variant&lt; std::vector&lt; float &gt;, std::vector&lt; int &gt;, std::vector&lt; unsigned char &gt; &gt;</td></tr>
<tr class="separator:acf933608643ce27b3c68e3431d047d0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84f142f71062ee2b8a166701ecd7b53e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#a84f142f71062ee2b8a166701ecd7b53e">QuantizationParams</a> = std::pair&lt; float, int32_t &gt;</td></tr>
<tr class="separator:a84f142f71062ee2b8a166701ecd7b53e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a8d201792dfdc5afeb9fb367f18424879"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType NonQuantizedType&gt; </td></tr>
<tr class="memitem:a8d201792dfdc5afeb9fb367f18424879"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#a8d201792dfdc5afeb9fb367f18424879">ParseDataArray</a> (std::istream &amp;stream)</td></tr>
<tr class="separator:a8d201792dfdc5afeb9fb367f18424879"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a057184ec0763ebb4b0d04a03f8de27d3"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType QuantizedType&gt; </td></tr>
<tr class="memitem:a057184ec0763ebb4b0d04a03f8de27d3"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#a057184ec0763ebb4b0d04a03f8de27d3">ParseDataArray</a> (std::istream &amp;stream, const float &amp;quantizationScale, const int32_t &amp;quantizationOffset)</td></tr>
<tr class="separator:a057184ec0763ebb4b0d04a03f8de27d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4df6709e600ce8b65bfe9c437d1b74ee"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a4df6709e600ce8b65bfe9c437d1b74ee"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#a4df6709e600ce8b65bfe9c437d1b74ee">ParseDataArray&lt; armnn::DataType::Float32 &gt;</a> (std::istream &amp;stream)</td></tr>
<tr class="separator:a4df6709e600ce8b65bfe9c437d1b74ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae10f602aff1f13e92dd050d989d92449"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ae10f602aff1f13e92dd050d989d92449"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#ae10f602aff1f13e92dd050d989d92449">ParseDataArray&lt; armnn::DataType::Signed32 &gt;</a> (std::istream &amp;stream)</td></tr>
<tr class="separator:ae10f602aff1f13e92dd050d989d92449"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4685d1ed654dcb6ed9953b2578d56e64"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a4685d1ed654dcb6ed9953b2578d56e64"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#a4685d1ed654dcb6ed9953b2578d56e64">ParseDataArray&lt; armnn::DataType::QAsymmU8 &gt;</a> (std::istream &amp;stream)</td></tr>
<tr class="separator:a4685d1ed654dcb6ed9953b2578d56e64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8521265f59cdd13078ca7805add2ebfb"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a8521265f59cdd13078ca7805add2ebfb"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#a8521265f59cdd13078ca7805add2ebfb">ParseDataArray&lt; armnn::DataType::QAsymmU8 &gt;</a> (std::istream &amp;stream, const float &amp;quantizationScale, const int32_t &amp;quantizationOffset)</td></tr>
<tr class="separator:a8521265f59cdd13078ca7805add2ebfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58bdd8fd6eb07e445789f5cc3880301a"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a58bdd8fd6eb07e445789f5cc3880301a"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#a58bdd8fd6eb07e445789f5cc3880301a">GenerateDummyTensorData</a> (unsigned int numElements)</td></tr>
<tr class="separator:a58bdd8fd6eb07e445789f5cc3880301a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dfb0158a3b76d682b4fcfe434ad2d7a"><td class="memItemLeft" align="right" valign="top">std::vector&lt; unsigned int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#a7dfb0158a3b76d682b4fcfe434ad2d7a">ParseArray</a> (std::istream &amp;stream)</td></tr>
<tr class="separator:a7dfb0158a3b76d682b4fcfe434ad2d7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1842dfaf4b24f36146a0cf6731ed75b7"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#a1842dfaf4b24f36146a0cf6731ed75b7">ParseStringList</a> (const std::string &amp;inputString, const char *delimiter)</td></tr>
<tr class="memdesc:a1842dfaf4b24f36146a0cf6731ed75b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Splits a given string at every accurance of delimiter into a vector of string.  <a href="#a1842dfaf4b24f36146a0cf6731ed75b7">More...</a><br /></td></tr>
<tr class="separator:a1842dfaf4b24f36146a0cf6731ed75b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb958be77ea4f3663e50db710f1edbba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#adb958be77ea4f3663e50db710f1edbba">PopulateTensorWithData</a> (<a class="el" href="_model_accuracy_checker_test_8cpp.xhtml#acf933608643ce27b3c68e3431d047d0a">TContainer</a> &amp;tensorData, unsigned int numElements, const std::string &amp;dataTypeStr, const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="_network_execution_utils_8cpp.xhtml#a84f142f71062ee2b8a166701ecd7b53e">QuantizationParams</a> &gt; &amp;qParams, const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; std::string &gt; &amp;dataFile)</td></tr>
<tr class="separator:adb958be77ea4f3663e50db710f1edbba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6506f23e2f4153a68c87ea03ae423b12"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#a6506f23e2f4153a68c87ea03ae423b12">ValidatePath</a> (const std::string &amp;file, const bool expectFile)</td></tr>
<tr class="memdesc:a6506f23e2f4153a68c87ea03ae423b12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Verifies if the given string is a valid path.  <a href="#a6506f23e2f4153a68c87ea03ae423b12">More...</a><br /></td></tr>
<tr class="separator:a6506f23e2f4153a68c87ea03ae423b12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8ad60308ed132ba939a09d48a97ac30"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_network_execution_utils_8cpp.xhtml#aa8ad60308ed132ba939a09d48a97ac30">ValidatePaths</a> (const std::vector&lt; std::string &gt; &amp;fileVec, const bool expectFile)</td></tr>
<tr class="memdesc:aa8ad60308ed132ba939a09d48a97ac30"><td class="mdescLeft">&#160;</td><td class="mdescRight">Verifies if a given vector of strings are valid paths.  <a href="#aa8ad60308ed132ba939a09d48a97ac30">More...</a><br /></td></tr>
<tr class="separator:aa8ad60308ed132ba939a09d48a97ac30"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="a84f142f71062ee2b8a166701ecd7b53e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84f142f71062ee2b8a166701ecd7b53e">&#9670;&nbsp;</a></span>QuantizationParams</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="_network_execution_utils_8cpp.xhtml#a84f142f71062ee2b8a166701ecd7b53e">QuantizationParams</a> =  std::pair&lt;float, int32_t&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00174">174</a> of file <a class="el" href="_network_execution_utils_8cpp_source.xhtml">NetworkExecutionUtils.cpp</a>.</p>

</div>
</div>
<a id="acf933608643ce27b3c68e3431d047d0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf933608643ce27b3c68e3431d047d0a">&#9670;&nbsp;</a></span>TContainer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="_model_accuracy_checker_test_8cpp.xhtml#acf933608643ce27b3c68e3431d047d0a">TContainer</a> =  mapbox::util::variant&lt;std::vector&lt;float&gt;, std::vector&lt;int&gt;, std::vector&lt;unsigned char&gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00173">173</a> of file <a class="el" href="_network_execution_utils_8cpp_source.xhtml">NetworkExecutionUtils.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a58bdd8fd6eb07e445789f5cc3880301a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58bdd8fd6eb07e445789f5cc3880301a">&#9670;&nbsp;</a></span>GenerateDummyTensorData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;T&gt; GenerateDummyTensorData </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numElements</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00071">71</a> of file <a class="el" href="_network_execution_utils_8cpp_source.xhtml">NetworkExecutionUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> std::vector&lt;T&gt;(numElements, <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0));</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7dfb0158a3b76d682b4fcfe434ad2d7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7dfb0158a3b76d682b4fcfe434ad2d7a">&#9670;&nbsp;</a></span>ParseArray()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;unsigned int&gt; ParseArray </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00077">77</a> of file <a class="el" href="_network_execution_utils_8cpp_source.xhtml">NetworkExecutionUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00344">ProgramOptions::ParseOptions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> ParseArrayImpl&lt;unsigned int&gt;(</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            stream,</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            [](<span class="keyword">const</span> std::string&amp; s) { <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(std::stoi(s)); });</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8d201792dfdc5afeb9fb367f18424879"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d201792dfdc5afeb9fb367f18424879">&#9670;&nbsp;</a></span>ParseDataArray() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto ParseDataArray </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a057184ec0763ebb4b0d04a03f8de27d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a057184ec0763ebb4b0d04a03f8de27d3">&#9670;&nbsp;</a></span>ParseDataArray() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto ParseDataArray </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>quantizationScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t &amp;&#160;</td>
          <td class="paramname"><em>quantizationOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4df6709e600ce8b65bfe9c437d1b74ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4df6709e600ce8b65bfe9c437d1b74ee">&#9670;&nbsp;</a></span>ParseDataArray< armnn::DataType::Float32 >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="_network_execution_utils_8cpp.xhtml#a057184ec0763ebb4b0d04a03f8de27d3">ParseDataArray</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="_network_execution_utils_8cpp_source.xhtml">NetworkExecutionUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> ParseArrayImpl&lt;float&gt;(stream, [](<span class="keyword">const</span> std::string&amp; s) { <span class="keywordflow">return</span> std::stof(s); });</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4685d1ed654dcb6ed9953b2578d56e64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4685d1ed654dcb6ed9953b2578d56e64">&#9670;&nbsp;</a></span>ParseDataArray< armnn::DataType::QAsymmU8 >() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="_network_execution_utils_8cpp.xhtml#a057184ec0763ebb4b0d04a03f8de27d3">ParseDataArray</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="_network_execution_utils_8cpp_source.xhtml">NetworkExecutionUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">return</span> ParseArrayImpl&lt;uint8_t&gt;(stream,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                   [](<span class="keyword">const</span> std::string&amp; s) { <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;uint8_t&gt;(std::stoi(s)); });</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8521265f59cdd13078ca7805add2ebfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8521265f59cdd13078ca7805add2ebfb">&#9670;&nbsp;</a></span>ParseDataArray< armnn::DataType::QAsymmU8 >() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="_network_execution_utils_8cpp.xhtml#a057184ec0763ebb4b0d04a03f8de27d3">ParseDataArray</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>quantizationScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t &amp;&#160;</td>
          <td class="paramname"><em>quantizationOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="_network_execution_utils_8cpp_source.xhtml">NetworkExecutionUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> ParseArrayImpl&lt;uint8_t&gt;(stream,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                   [&amp;quantizationScale, &amp;quantizationOffset](<span class="keyword">const</span> std::string&amp; s)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                   {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                       <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;uint8_t&gt;(</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                               armnn::Quantize&lt;uint8_t&gt;(std::stof(s),</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                                                        quantizationScale,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                                                        quantizationOffset));</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                                   });</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae10f602aff1f13e92dd050d989d92449"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae10f602aff1f13e92dd050d989d92449">&#9670;&nbsp;</a></span>ParseDataArray< armnn::DataType::Signed32 >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="_network_execution_utils_8cpp.xhtml#a057184ec0763ebb4b0d04a03f8de27d3">ParseDataArray</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00043">43</a> of file <a class="el" href="_network_execution_utils_8cpp_source.xhtml">NetworkExecutionUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">return</span> ParseArrayImpl&lt;int&gt;(stream, [](<span class="keyword">const</span> std::string&amp; s) { <span class="keywordflow">return</span> std::stoi(s); });</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1842dfaf4b24f36146a0cf6731ed75b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1842dfaf4b24f36146a0cf6731ed75b7">&#9670;&nbsp;</a></span>ParseStringList()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::string&gt; ParseStringList </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>inputString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>delimiter</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Splits a given string at every accurance of delimiter into a vector of string. </p>

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="_network_execution_utils_8cpp_source.xhtml">NetworkExecutionUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_string_utils_8hpp_source.xhtml#l00085">armnn::stringUtils::StringTrimCopy()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00344">ProgramOptions::ParseOptions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    std::stringstream stream(inputString);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">return</span> ParseArrayImpl&lt;std::string&gt;(stream, [](<span class="keyword">const</span> std::string&amp; s) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_1_1string_utils.xhtml#ac5da14c1462870eef77ca8ac4bb5afe5">armnn::stringUtils::StringTrimCopy</a>(s); }, delimiter);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1string_utils_xhtml_ac5da14c1462870eef77ca8ac4bb5afe5"><div class="ttname"><a href="namespacearmnn_1_1string_utils.xhtml#ac5da14c1462870eef77ca8ac4bb5afe5">armnn::stringUtils::StringTrimCopy</a></div><div class="ttdeci">std::string StringTrimCopy(const std::string &amp;str, const std::string &amp;chars=&quot;\\\&quot;)</div><div class="ttdoc">Trim from both the start and the end of a string, returns a trimmed copy of the string. </div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8hpp_source.xhtml#l00085">StringUtils.hpp:85</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adb958be77ea4f3663e50db710f1edbba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb958be77ea4f3663e50db710f1edbba">&#9670;&nbsp;</a></span>PopulateTensorWithData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PopulateTensorWithData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="_model_accuracy_checker_test_8cpp.xhtml#acf933608643ce27b3c68e3431d047d0a">TContainer</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numElements</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>dataTypeStr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="_network_execution_utils_8cpp.xhtml#a84f142f71062ee2b8a166701ecd7b53e">QuantizationParams</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>qParams</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>dataFile</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00176">176</a> of file <a class="el" href="_network_execution_utils_8cpp_source.xhtml">NetworkExecutionUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00163">ARMNN_LOG</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_8cpp_source.xhtml#l00252">MainImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> readFromFile = dataFile.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>() &amp;&amp; !dataFile.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>().empty();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> quantizeData = qParams.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    std::ifstream inputTensorFile;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">if</span> (readFromFile)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        inputTensorFile = std::ifstream(dataFile.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>());</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">if</span> (dataTypeStr.compare(<span class="stringliteral">&quot;float&quot;</span>) == 0)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">if</span> (quantizeData)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        {</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> qScale  = qParams.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>().first;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>   qOffset = qParams.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>().second;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            tensorData = readFromFile ?</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                         ParseDataArray&lt;armnn::DataType::QAsymmU8&gt;(inputTensorFile, qScale, qOffset) :</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                         GenerateDummyTensorData&lt;armnn::DataType::QAsymmU8&gt;(numElements);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            tensorData = readFromFile ?</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                         ParseDataArray&lt;armnn::DataType::Float32&gt;(inputTensorFile) :</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                         GenerateDummyTensorData&lt;armnn::DataType::Float32&gt;(numElements);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (dataTypeStr.compare(<span class="stringliteral">&quot;int&quot;</span>) == 0)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        tensorData = readFromFile ?</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                     ParseDataArray&lt;armnn::DataType::Signed32&gt;(inputTensorFile) :</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                     GenerateDummyTensorData&lt;armnn::DataType::Signed32&gt;(numElements);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (dataTypeStr.compare(<span class="stringliteral">&quot;qasymm8&quot;</span>) == 0)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        tensorData = readFromFile ?</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                     ParseDataArray&lt;armnn::DataType::QAsymmU8&gt;(inputTensorFile) :</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                     GenerateDummyTensorData&lt;armnn::DataType::QAsymmU8&gt;(numElements);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        std::string errorMessage = <span class="stringliteral">&quot;Unsupported tensor data type &quot;</span> + dataTypeStr;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; errorMessage;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        inputTensorFile.close();</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(errorMessage);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    inputTensorFile.close();</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div><div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00163">Logging.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6506f23e2f4153a68c87ea03ae423b12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6506f23e2f4153a68c87ea03ae423b12">&#9670;&nbsp;</a></span>ValidatePath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ValidatePath </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>expectFile</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Verifies if the given string is a valid path. </p>
<p>Reports invalid paths to std::err. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">file</td><td>string - A string containing the path to check </td></tr>
    <tr><td class="paramname">expectFile</td><td>bool - If true, checks for a regular file. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>bool - True if given string is a valid path., false otherwise. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00233">233</a> of file <a class="el" href="_network_execution_utils_8cpp_source.xhtml">NetworkExecutionUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_params_8cpp_source.xhtml#l00091">CheckClTuningParameter()</a>, and <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00248">ValidatePaths()</a>.</p>
<div class="fragment"><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(file))</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given file path &#39;&quot;</span> &lt;&lt; file &lt;&lt; <span class="stringliteral">&quot;&#39; does not exist&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">if</span> (!fs::is_regular_file(file) &amp;&amp; expectFile)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given file path &#39;&quot;</span> &lt;&lt; file &lt;&lt; <span class="stringliteral">&quot;&#39; is not a regular file&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa8ad60308ed132ba939a09d48a97ac30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8ad60308ed132ba939a09d48a97ac30">&#9670;&nbsp;</a></span>ValidatePaths()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ValidatePaths </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>fileVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>expectFile</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Verifies if a given vector of strings are valid paths. </p>
<p>Reports invalid paths to std::err. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fileVec</td><td>vector of string - A vector of string containing the paths to check </td></tr>
    <tr><td class="paramname">expectFile</td><td>bool - If true, checks for a regular file. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>bool - True if all given strings are valid paths., false otherwise. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00248">248</a> of file <a class="el" href="_network_execution_utils_8cpp_source.xhtml">NetworkExecutionUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00233">ValidatePath()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_params_8cpp_source.xhtml#l00127">ExecuteNetworkParams::ValidateParams()</a>.</p>
<div class="fragment"><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;{</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordtype">bool</span> allPathsValid = <span class="keyword">true</span>;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; file : fileVec)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">if</span>(!<a class="code" href="_network_execution_utils_8cpp.xhtml#a6506f23e2f4153a68c87ea03ae423b12">ValidatePath</a>(file, expectFile))</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            allPathsValid = <span class="keyword">false</span>;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">return</span> allPathsValid;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;}</div><div class="ttc" id="_network_execution_utils_8cpp_xhtml_a6506f23e2f4153a68c87ea03ae423b12"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#a6506f23e2f4153a68c87ea03ae423b12">ValidatePath</a></div><div class="ttdeci">bool ValidatePath(const std::string &amp;file, const bool expectFile)</div><div class="ttdoc">Verifies if the given string is a valid path. </div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00233">NetworkExecutionUtils.cpp:233</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_bee5dd02b9a5e046b34f7fb0b8e9850a.xhtml">NetworkExecutionUtils</a></li><li class="navelem"><a class="el" href="_network_execution_utils_8cpp.xhtml">NetworkExecutionUtils.cpp</a></li>
    <li class="footer">Generated on Wed Nov 25 2020 09:59:16 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
