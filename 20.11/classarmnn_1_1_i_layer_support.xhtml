<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: ILayerSupport Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_i_layer_support.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="classarmnn_1_1_i_layer_support-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ILayerSupport Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_i_layer_support_8hpp_source.xhtml">ILayerSupport.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ILayerSupport:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_i_layer_support.png" usemap="#ILayerSupport_map" alt=""/>
  <map id="ILayerSupport_map" name="ILayerSupport_map">
<area href="classarmnn_1_1_layer_support_base.xhtml" alt="LayerSupportBase" shape="rect" coords="472,56,651,80"/>
<area href="classarmnn_1_1_cl_layer_support.xhtml" alt="ClLayerSupport" shape="rect" coords="0,112,179,136"/>
<area href="classarmnn_1_1_mock_import_layer_support.xhtml" alt="MockImportLayerSupport" shape="rect" coords="189,112,368,136"/>
<area href="classarmnn_1_1_mock_layer_support.xhtml" alt="MockLayerSupport" shape="rect" coords="378,112,557,136"/>
<area href="classarmnn_1_1_neon_layer_support.xhtml" alt="NeonLayerSupport" shape="rect" coords="567,112,746,136"/>
<area href="classarmnn_1_1_ref_layer_support.xhtml" alt="RefLayerSupport" shape="rect" coords="756,112,935,136"/>
<area href="classsdb_1_1_sample_dynamic_layer_support.xhtml" alt="SampleDynamicLayerSupport" shape="rect" coords="945,112,1124,136"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5588d9c90ee688f83eb1df4f9110ceee"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5588d9c90ee688f83eb1df4f9110ceee">IsAbsSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a5588d9c90ee688f83eb1df4f9110ceee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a787fcb2a22d45abc7b75644fd1c45743"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a787fcb2a22d45abc7b75644fd1c45743">IsActivationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a787fcb2a22d45abc7b75644fd1c45743"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09e005510eccbbfa14bed9205c27523a"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a09e005510eccbbfa14bed9205c27523a">IsAdditionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a09e005510eccbbfa14bed9205c27523a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb1f9c150c3705ccdff06d3bda0f705d"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afb1f9c150c3705ccdff06d3bda0f705d">IsArgMinMaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:afb1f9c150c3705ccdff06d3bda0f705d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ebfb6e31ffd51c948ebf4e668ee6a13"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3ebfb6e31ffd51c948ebf4e668ee6a13">IsBatchNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;mean, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;var, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;beta, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;gamma, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a3ebfb6e31ffd51c948ebf4e668ee6a13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a2d1bd9f4db345c6e8cbebe507e1220"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3a2d1bd9f4db345c6e8cbebe507e1220">IsBatchToSpaceNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a3a2d1bd9f4db345c6e8cbebe507e1220"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9e12845869a571af314feb775bfcf8d"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa9e12845869a571af314feb775bfcf8d">IsComparisonSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:aa9e12845869a571af314feb775bfcf8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48bb43166dd8d7a27428a19738c73e54"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a48bb43166dd8d7a27428a19738c73e54">IsConcatSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a48bb43166dd8d7a27428a19738c73e54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e62e57c8c2b25d2b8b657d6c1bedfce"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7e62e57c8c2b25d2b8b657d6c1bedfce">IsConstantSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a7e62e57c8c2b25d2b8b657d6c1bedfce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64feb74ff84d2b289c088e4ed2f3dbcd"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a64feb74ff84d2b289c088e4ed2f3dbcd">IsConvertBf16ToFp32Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a64feb74ff84d2b289c088e4ed2f3dbcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6308f7e194cb757a0782b88b3f3916a"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af6308f7e194cb757a0782b88b3f3916a">IsConvertFp32ToBf16Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:af6308f7e194cb757a0782b88b3f3916a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a585d0743307644154123b0081c9fddbb"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a585d0743307644154123b0081c9fddbb">IsConvertFp16ToFp32Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a585d0743307644154123b0081c9fddbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeacc3d08bdf5c5190a2b6d219e28620f"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeacc3d08bdf5c5190a2b6d219e28620f">IsConvertFp32ToFp16Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:aeacc3d08bdf5c5190a2b6d219e28620f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e8af0ce614d9a30c7398e1aa786d468"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0e8af0ce614d9a30c7398e1aa786d468">IsConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;biases, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a0e8af0ce614d9a30c7398e1aa786d468"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ec5e547fe4b097ad19b6992e23e267d"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0ec5e547fe4b097ad19b6992e23e267d">IsDebugSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a0ec5e547fe4b097ad19b6992e23e267d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada2ab8d017b73994f8cdc38c29e0fb60"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ada2ab8d017b73994f8cdc38c29e0fb60">IsDepthToSpaceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:ada2ab8d017b73994f8cdc38c29e0fb60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38078f04a0521624c71262291252dedd"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a38078f04a0521624c71262291252dedd">IsDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;biases, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a38078f04a0521624c71262291252dedd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeff699f129c41cdd7b4a49569aa4fffb"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeff699f129c41cdd7b4a49569aa4fffb">IsDequantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:aeff699f129c41cdd7b4a49569aa4fffb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1aecac7de9b71cfaaadecda47edc56c0"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1aecac7de9b71cfaaadecda47edc56c0">IsDetectionPostProcessSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;detectionBoxes, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;detectionClasses, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;detectionScores, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;numDetections, const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a1aecac7de9b71cfaaadecda47edc56c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bee87b6d7a78ee4a3d6cecc7ad8a77a"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4bee87b6d7a78ee4a3d6cecc7ad8a77a">IsDilatedDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;biases, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a4bee87b6d7a78ee4a3d6cecc7ad8a77a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca2cc0ccc6a468bc5374fa2839258802"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca2cc0ccc6a468bc5374fa2839258802">IsDivisionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:aca2cc0ccc6a468bc5374fa2839258802"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a6603d415b4e963cacd9ede220b8119"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4a6603d415b4e963cacd9ede220b8119">IsElementwiseUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a4a6603d415b4e963cacd9ede220b8119"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26dde72aa68a605bd5cf89b85cde8650"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a26dde72aa68a605bd5cf89b85cde8650">IsEqualSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a26dde72aa68a605bd5cf89b85cde8650"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa467d4de09eb4bd51e02122fb3d6e7c0"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa467d4de09eb4bd51e02122fb3d6e7c0">IsFakeQuantizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:aa467d4de09eb4bd51e02122fb3d6e7c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fc14db765754af18a4724e678720b7b"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2fc14db765754af18a4724e678720b7b">IsFillSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a2fc14db765754af18a4724e678720b7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0683efc6cc81f888eccab0c637674f7a"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0683efc6cc81f888eccab0c637674f7a">IsFloorSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a0683efc6cc81f888eccab0c637674f7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5f8d5b50e69b8003357895450ee57bd"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af5f8d5b50e69b8003357895450ee57bd">IsFullyConnectedSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;biases, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:af5f8d5b50e69b8003357895450ee57bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95a7b2d7b19575a98f3548f37bff2540"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a95a7b2d7b19575a98f3548f37bff2540">IsGatherSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a95a7b2d7b19575a98f3548f37bff2540"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd9c6124747e300449bff6287d96cd73"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abd9c6124747e300449bff6287d96cd73">IsGatherSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:abd9c6124747e300449bff6287d96cd73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af623e15fff281da8bb4bad997151c9ab"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af623e15fff281da8bb4bad997151c9ab">IsGreaterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;ouput, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:af623e15fff281da8bb4bad997151c9ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a302869e220458e13c7e82c2671e5280c"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a302869e220458e13c7e82c2671e5280c">IsInputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a302869e220458e13c7e82c2671e5280c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e16e155e7f7445789e68424a9a870c5"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7e16e155e7f7445789e68424a9a870c5">IsInstanceNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a7e16e155e7f7445789e68424a9a870c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af189848668211807688a56aac54978bf"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af189848668211807688a56aac54978bf">IsL2NormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:af189848668211807688a56aac54978bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91bb1a44f9d05a4d6a4c6fedbf596c06"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a91bb1a44f9d05a4d6a4c6fedbf596c06">IsLogicalBinarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a91bb1a44f9d05a4d6a4c6fedbf596c06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a6774ab8ad711b7fc48b8372279b3fc"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9a6774ab8ad711b7fc48b8372279b3fc">IsLogicalUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a9a6774ab8ad711b7fc48b8372279b3fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5d791a3bc50549b3805a982bf4959d8"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5d791a3bc50549b3805a982bf4959d8">IsLogSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:ab5d791a3bc50549b3805a982bf4959d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5942cec16b5719b59c4e80bc8be90342"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5942cec16b5719b59c4e80bc8be90342">IsLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;outputStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;scratchBuffer, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;outputStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;paramsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a5942cec16b5719b59c4e80bc8be90342"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeeb17ef5763db43063b6e98d0a692e1f"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeeb17ef5763db43063b6e98d0a692e1f">IsMaximumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:aeeb17ef5763db43063b6e98d0a692e1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fc33395e8e392ba59eedcb721dc6d3d"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4fc33395e8e392ba59eedcb721dc6d3d">IsMeanSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a4fc33395e8e392ba59eedcb721dc6d3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef4d9a4b703b1a15558633b5802c663b"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aef4d9a4b703b1a15558633b5802c663b">IsMemCopySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:aef4d9a4b703b1a15558633b5802c663b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0cb232661c1e1bf9d253f396b6b4f4c"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af0cb232661c1e1bf9d253f396b6b4f4c">IsMemImportSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:af0cb232661c1e1bf9d253f396b6b4f4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad30162aa20f5484d48982537fdd42a04"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad30162aa20f5484d48982537fdd42a04">IsMergeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:ad30162aa20f5484d48982537fdd42a04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a429c2f3a583e59b1215d2902cd55edff"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a429c2f3a583e59b1215d2902cd55edff">IsMergerSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a429c2f3a583e59b1215d2902cd55edff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76e472f67b857c5619c1751e0cd20a5c"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a76e472f67b857c5619c1751e0cd20a5c">IsMinimumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;ouput, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a76e472f67b857c5619c1751e0cd20a5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacb0b7d0aa3b7c495981f3e7ae6108e5"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aacb0b7d0aa3b7c495981f3e7ae6108e5">IsMultiplicationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:aacb0b7d0aa3b7c495981f3e7ae6108e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09beb238888a3795a11e28b2f439a2c7"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a09beb238888a3795a11e28b2f439a2c7">IsNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a09beb238888a3795a11e28b2f439a2c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3852eb9f8af92ee3dc7ddcbb3590d9e2"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3852eb9f8af92ee3dc7ddcbb3590d9e2">IsOutputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a3852eb9f8af92ee3dc7ddcbb3590d9e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a521e7f59a1ca7699c5182245fb52fb68"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a521e7f59a1ca7699c5182245fb52fb68">IsPadSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a521e7f59a1ca7699c5182245fb52fb68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa4433e57a90fc106e9ca227cbf21acc"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aaa4433e57a90fc106e9ca227cbf21acc">IsPermuteSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:aaa4433e57a90fc106e9ca227cbf21acc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d355424568d0383d53da623d88e4002"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7d355424568d0383d53da623d88e4002">IsPooling2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a7d355424568d0383d53da623d88e4002"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a645dc9fbc6b5da2c9b3124eea544044e"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a645dc9fbc6b5da2c9b3124eea544044e">IsPreCompiledSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a645dc9fbc6b5da2c9b3124eea544044e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8356620b4723ae24b897940a44cca12e"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8356620b4723ae24b897940a44cca12e">IsPreluSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;alpha, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a8356620b4723ae24b897940a44cca12e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e700405a95007bf3cdcfee4edd5faf6"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2e700405a95007bf3cdcfee4edd5faf6">IsQuantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a2e700405a95007bf3cdcfee4edd5faf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ff96df741a96f76dec45a4f119d9f29"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9ff96df741a96f76dec45a4f119d9f29">IsQLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;previousOutputIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;previousCellStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;outputStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;paramsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a9ff96df741a96f76dec45a4f119d9f29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbd0bc4ae2c7dafaa43a1f4558dec9e9"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acbd0bc4ae2c7dafaa43a1f4558dec9e9">IsQuantizedLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;previousCellStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;previousOutputIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;paramsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:acbd0bc4ae2c7dafaa43a1f4558dec9e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabe9e99096ebc1e0ac3231ae19f45d58"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aabe9e99096ebc1e0ac3231ae19f45d58">IsRankSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:aabe9e99096ebc1e0ac3231ae19f45d58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b4e5775549210130fda73dbf9ff5805"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b4e5775549210130fda73dbf9ff5805">IsReshapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a5b4e5775549210130fda73dbf9ff5805"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ea3f88552957d51ecf39aa084493dad"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0ea3f88552957d51ecf39aa084493dad">IsResizeBilinearSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a0ea3f88552957d51ecf39aa084493dad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a139c7fa3f4d25a1f8e63c4db26ed882a"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a139c7fa3f4d25a1f8e63c4db26ed882a">IsResizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a139c7fa3f4d25a1f8e63c4db26ed882a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f421ed5bcee87cd4bb2fcccd8d79400"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1f421ed5bcee87cd4bb2fcccd8d79400">IsRsqrtSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a1f421ed5bcee87cd4bb2fcccd8d79400"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5176e7f87f418561082d8c6310215cf7"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5176e7f87f418561082d8c6310215cf7">IsSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a5176e7f87f418561082d8c6310215cf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0653b070e13f6003314ff70c83dfdf82"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0653b070e13f6003314ff70c83dfdf82">IsSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a0653b070e13f6003314ff70c83dfdf82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72900e5d5a48a3f5bab04b9bc53ad4cb"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a72900e5d5a48a3f5bab04b9bc53ad4cb">IsSpaceToBatchNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a72900e5d5a48a3f5bab04b9bc53ad4cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad5b9a346998e69ce24668f474e8a41f"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aad5b9a346998e69ce24668f474e8a41f">IsSpaceToDepthSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:aad5b9a346998e69ce24668f474e8a41f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3475373a82a2dcea43f49157e72c2d1e"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3475373a82a2dcea43f49157e72c2d1e">IsSplitterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a3475373a82a2dcea43f49157e72c2d1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2a17ba940c5ae8718306929c4fbcc49"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac2a17ba940c5ae8718306929c4fbcc49">IsSplitterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;outputs, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:ac2a17ba940c5ae8718306929c4fbcc49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c875cde7fb98d33b415361653fe170e"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3c875cde7fb98d33b415361653fe170e">IsStackSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a3c875cde7fb98d33b415361653fe170e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab44a343d43671032ae1395b06508ac36"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab44a343d43671032ae1395b06508ac36">IsStandInSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;inputs, const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;outputs, const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:ab44a343d43671032ae1395b06508ac36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec35c53952d13100216d2a2b9f63b98c"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec35c53952d13100216d2a2b9f63b98c">IsStridedSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:aec35c53952d13100216d2a2b9f63b98c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af76dce64a3338e037bb8eb41e5a219aa"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af76dce64a3338e037bb8eb41e5a219aa">IsSubtractionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:af76dce64a3338e037bb8eb41e5a219aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af05157bd75bb2a7a3a942be85945321a"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af05157bd75bb2a7a3a942be85945321a">IsSwitchSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output1, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:af05157bd75bb2a7a3a942be85945321a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cd42985d5a85895204331e19d2e4c75"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0cd42985d5a85895204331e19d2e4c75">IsTransposeConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;biases, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a0cd42985d5a85895204331e19d2e4c75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d18c121fd6e27cceda23776e3418be5"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4d18c121fd6e27cceda23776e3418be5">IsTransposeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:a4d18c121fd6e27cceda23776e3418be5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:aab2a487bc88047443d8a0f87c3c40b8d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aab2a487bc88047443d8a0f87c3c40b8d">ILayerSupport</a> ()</td></tr>
<tr class="separator:aab2a487bc88047443d8a0f87c3c40b8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e7f4f28576904804cd759e49173beeb"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9e7f4f28576904804cd759e49173beeb">~ILayerSupport</a> ()</td></tr>
<tr class="separator:a9e7f4f28576904804cd759e49173beeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00023">23</a> of file <a class="el" href="_i_layer_support_8hpp_source.xhtml">ILayerSupport.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aab2a487bc88047443d8a0f87c3c40b8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab2a487bc88047443d8a0f87c3c40b8d">&#9670;&nbsp;</a></span>ILayerSupport()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00026">26</a> of file <a class="el" href="_i_layer_support_8hpp_source.xhtml">ILayerSupport.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<a id="a9e7f4f28576904804cd759e49173beeb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e7f4f28576904804cd759e49173beeb">&#9670;&nbsp;</a></span>~ILayerSupport()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">27</a> of file <a class="el" href="_i_layer_support_8hpp_source.xhtml">ILayerSupport.hpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors()</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00043">ARMNN_DEPRECATED_MSG</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5588d9c90ee688f83eb1df4f9110ceee">ILayerSupport::IsAbsSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a787fcb2a22d45abc7b75644fd1c45743">ILayerSupport::IsActivationSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a09e005510eccbbfa14bed9205c27523a">ILayerSupport::IsAdditionSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afb1f9c150c3705ccdff06d3bda0f705d">ILayerSupport::IsArgMinMaxSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3ebfb6e31ffd51c948ebf4e668ee6a13">ILayerSupport::IsBatchNormalizationSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3a2d1bd9f4db345c6e8cbebe507e1220">ILayerSupport::IsBatchToSpaceNdSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa9e12845869a571af314feb775bfcf8d">ILayerSupport::IsComparisonSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a48bb43166dd8d7a27428a19738c73e54">ILayerSupport::IsConcatSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7e62e57c8c2b25d2b8b657d6c1bedfce">ILayerSupport::IsConstantSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a64feb74ff84d2b289c088e4ed2f3dbcd">ILayerSupport::IsConvertBf16ToFp32Supported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a585d0743307644154123b0081c9fddbb">ILayerSupport::IsConvertFp16ToFp32Supported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af6308f7e194cb757a0782b88b3f3916a">ILayerSupport::IsConvertFp32ToBf16Supported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeacc3d08bdf5c5190a2b6d219e28620f">ILayerSupport::IsConvertFp32ToFp16Supported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0e8af0ce614d9a30c7398e1aa786d468">ILayerSupport::IsConvolution2dSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0ec5e547fe4b097ad19b6992e23e267d">ILayerSupport::IsDebugSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ada2ab8d017b73994f8cdc38c29e0fb60">ILayerSupport::IsDepthToSpaceSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a38078f04a0521624c71262291252dedd">ILayerSupport::IsDepthwiseConvolutionSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeff699f129c41cdd7b4a49569aa4fffb">ILayerSupport::IsDequantizeSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1aecac7de9b71cfaaadecda47edc56c0">ILayerSupport::IsDetectionPostProcessSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4bee87b6d7a78ee4a3d6cecc7ad8a77a">ILayerSupport::IsDilatedDepthwiseConvolutionSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca2cc0ccc6a468bc5374fa2839258802">ILayerSupport::IsDivisionSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4a6603d415b4e963cacd9ede220b8119">ILayerSupport::IsElementwiseUnarySupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a26dde72aa68a605bd5cf89b85cde8650">ILayerSupport::IsEqualSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa467d4de09eb4bd51e02122fb3d6e7c0">ILayerSupport::IsFakeQuantizationSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2fc14db765754af18a4724e678720b7b">ILayerSupport::IsFillSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0683efc6cc81f888eccab0c637674f7a">ILayerSupport::IsFloorSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af5f8d5b50e69b8003357895450ee57bd">ILayerSupport::IsFullyConnectedSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a95a7b2d7b19575a98f3548f37bff2540">ILayerSupport::IsGatherSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af623e15fff281da8bb4bad997151c9ab">ILayerSupport::IsGreaterSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a302869e220458e13c7e82c2671e5280c">ILayerSupport::IsInputSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7e16e155e7f7445789e68424a9a870c5">ILayerSupport::IsInstanceNormalizationSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af189848668211807688a56aac54978bf">ILayerSupport::IsL2NormalizationSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a91bb1a44f9d05a4d6a4c6fedbf596c06">ILayerSupport::IsLogicalBinarySupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9a6774ab8ad711b7fc48b8372279b3fc">ILayerSupport::IsLogicalUnarySupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5d791a3bc50549b3805a982bf4959d8">ILayerSupport::IsLogSoftmaxSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5942cec16b5719b59c4e80bc8be90342">ILayerSupport::IsLstmSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeeb17ef5763db43063b6e98d0a692e1f">ILayerSupport::IsMaximumSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4fc33395e8e392ba59eedcb721dc6d3d">ILayerSupport::IsMeanSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aef4d9a4b703b1a15558633b5802c663b">ILayerSupport::IsMemCopySupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af0cb232661c1e1bf9d253f396b6b4f4c">ILayerSupport::IsMemImportSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a429c2f3a583e59b1215d2902cd55edff">ILayerSupport::IsMergerSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad30162aa20f5484d48982537fdd42a04">ILayerSupport::IsMergeSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a76e472f67b857c5619c1751e0cd20a5c">ILayerSupport::IsMinimumSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aacb0b7d0aa3b7c495981f3e7ae6108e5">ILayerSupport::IsMultiplicationSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a09beb238888a3795a11e28b2f439a2c7">ILayerSupport::IsNormalizationSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3852eb9f8af92ee3dc7ddcbb3590d9e2">ILayerSupport::IsOutputSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a521e7f59a1ca7699c5182245fb52fb68">ILayerSupport::IsPadSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aaa4433e57a90fc106e9ca227cbf21acc">ILayerSupport::IsPermuteSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7d355424568d0383d53da623d88e4002">ILayerSupport::IsPooling2dSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a645dc9fbc6b5da2c9b3124eea544044e">ILayerSupport::IsPreCompiledSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8356620b4723ae24b897940a44cca12e">ILayerSupport::IsPreluSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9ff96df741a96f76dec45a4f119d9f29">ILayerSupport::IsQLstmSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acbd0bc4ae2c7dafaa43a1f4558dec9e9">ILayerSupport::IsQuantizedLstmSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2e700405a95007bf3cdcfee4edd5faf6">ILayerSupport::IsQuantizeSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aabe9e99096ebc1e0ac3231ae19f45d58">ILayerSupport::IsRankSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b4e5775549210130fda73dbf9ff5805">ILayerSupport::IsReshapeSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0ea3f88552957d51ecf39aa084493dad">ILayerSupport::IsResizeBilinearSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a139c7fa3f4d25a1f8e63c4db26ed882a">ILayerSupport::IsResizeSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1f421ed5bcee87cd4bb2fcccd8d79400">ILayerSupport::IsRsqrtSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5176e7f87f418561082d8c6310215cf7">ILayerSupport::IsSliceSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0653b070e13f6003314ff70c83dfdf82">ILayerSupport::IsSoftmaxSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a72900e5d5a48a3f5bab04b9bc53ad4cb">ILayerSupport::IsSpaceToBatchNdSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aad5b9a346998e69ce24668f474e8a41f">ILayerSupport::IsSpaceToDepthSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3475373a82a2dcea43f49157e72c2d1e">ILayerSupport::IsSplitterSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3c875cde7fb98d33b415361653fe170e">ILayerSupport::IsStackSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab44a343d43671032ae1395b06508ac36">ILayerSupport::IsStandInSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec35c53952d13100216d2a2b9f63b98c">ILayerSupport::IsStridedSliceSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af76dce64a3338e037bb8eb41e5a219aa">ILayerSupport::IsSubtractionSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af05157bd75bb2a7a3a942be85945321a">ILayerSupport::IsSwitchSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0cd42985d5a85895204331e19d2e4c75">ILayerSupport::IsTransposeConvolution2dSupported()</a>, <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4d18c121fd6e27cceda23776e3418be5">ILayerSupport::IsTransposeSupported()</a>, and <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores()</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a5588d9c90ee688f83eb1df4f9110ceee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5588d9c90ee688f83eb1df4f9110ceee">&#9670;&nbsp;</a></span>IsAbsSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsAbsSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#abd7fa8c2233f8a653e30ae2f3b839d92">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#abd7fa8c2233f8a653e30ae2f3b839d92">ClLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#abd7fa8c2233f8a653e30ae2f3b839d92">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#abd7fa8c2233f8a653e30ae2f3b839d92">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a787fcb2a22d45abc7b75644fd1c45743"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a787fcb2a22d45abc7b75644fd1c45743">&#9670;&nbsp;</a></span>IsActivationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsActivationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">ClLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a09e005510eccbbfa14bed9205c27523a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09e005510eccbbfa14bed9205c27523a">&#9670;&nbsp;</a></span>IsAdditionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsAdditionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_mock_layer_support.xhtml#a7eff21a4ed5128387ad7683ba89b61ad">MockLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">ClLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a48177e22e47448adb3d83e145dadf735">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_mock_import_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">MockImportLayerSupport</a>, and <a class="el" href="classsdb_1_1_sample_dynamic_layer_support.xhtml#a941ad65e8bbba9bda7e96805c1d6999c">SampleDynamicLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="afb1f9c150c3705ccdff06d3bda0f705d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb1f9c150c3705ccdff06d3bda0f705d">&#9670;&nbsp;</a></span>IsArgMinMaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsArgMinMaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">ClLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0f4841f89f21fd794786b4c03c2425fd">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a3ebfb6e31ffd51c948ebf4e668ee6a13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ebfb6e31ffd51c948ebf4e668ee6a13">&#9670;&nbsp;</a></span>IsBatchNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsBatchNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">ClLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a67c970dd054b991e14369de523ca3a5a">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a3a2d1bd9f4db345c6e8cbebe507e1220"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a2d1bd9f4db345c6e8cbebe507e1220">&#9670;&nbsp;</a></span>IsBatchToSpaceNdSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsBatchToSpaceNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">ClLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc5695cc25f4055c7ed54bdc8604a098">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="aa9e12845869a571af314feb775bfcf8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9e12845869a571af314feb775bfcf8d">&#9670;&nbsp;</a></span>IsComparisonSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsComparisonSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a7c52726a684dd76258c61af124012537">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad16b29b7f1c73187775e7b1d044d7bc0">ClLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a7c52726a684dd76258c61af124012537">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a7c52726a684dd76258c61af124012537">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a48bb43166dd8d7a27428a19738c73e54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48bb43166dd8d7a27428a19738c73e54">&#9670;&nbsp;</a></span>IsConcatSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsConcatSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a3dca8ffbcb5f3afa1799aa7d354a3016">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a3dca8ffbcb5f3afa1799aa7d354a3016">ClLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a1542179a03961e3635bb5bef993c8e0e">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a3dca8ffbcb5f3afa1799aa7d354a3016">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a7e62e57c8c2b25d2b8b657d6c1bedfce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e62e57c8c2b25d2b8b657d6c1bedfce">&#9670;&nbsp;</a></span>IsConstantSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsConstantSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">ClLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a64feb74ff84d2b289c088e4ed2f3dbcd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64feb74ff84d2b289c088e4ed2f3dbcd">&#9670;&nbsp;</a></span>IsConvertBf16ToFp32Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsConvertBf16ToFp32Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ad330b6e7dcf25410ea878af0557f2197">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad330b6e7dcf25410ea878af0557f2197">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#ad330b6e7dcf25410ea878af0557f2197">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a585d0743307644154123b0081c9fddbb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a585d0743307644154123b0081c9fddbb">&#9670;&nbsp;</a></span>IsConvertFp16ToFp32Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsConvertFp16ToFp32Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">ClLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="af6308f7e194cb757a0782b88b3f3916a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6308f7e194cb757a0782b88b3f3916a">&#9670;&nbsp;</a></span>IsConvertFp32ToBf16Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsConvertFp32ToBf16Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0947498c6cc747db6219a22132a1b89a">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0947498c6cc747db6219a22132a1b89a">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a0947498c6cc747db6219a22132a1b89a">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="aeacc3d08bdf5c5190a2b6d219e28620f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeacc3d08bdf5c5190a2b6d219e28620f">&#9670;&nbsp;</a></span>IsConvertFp32ToFp16Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsConvertFp32ToFp16Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">RefLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a0e8af0ce614d9a30c7398e1aa786d468"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e8af0ce614d9a30c7398e1aa786d468">&#9670;&nbsp;</a></span>IsConvolution2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsConvolution2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_mock_layer_support.xhtml#ad2e357f943588b241aaa34c9436e716e">MockLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">RefLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a0ec5e547fe4b097ad19b6992e23e267d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ec5e547fe4b097ad19b6992e23e267d">&#9670;&nbsp;</a></span>IsDebugSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsDebugSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a87a66c5e87a19534ce3e6c374c9b8f09">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a87a66c5e87a19534ce3e6c374c9b8f09">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="ada2ab8d017b73994f8cdc38c29e0fb60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada2ab8d017b73994f8cdc38c29e0fb60">&#9670;&nbsp;</a></span>IsDepthToSpaceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsDepthToSpaceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a128fb9890897e08251a3f621e570cd23">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">RefLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a38078f04a0521624c71262291252dedd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38078f04a0521624c71262291252dedd">&#9670;&nbsp;</a></span>IsDepthwiseConvolutionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsDepthwiseConvolutionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc84390751f227fe03a115b5fa10b0fc">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">RefLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="aeff699f129c41cdd7b4a49569aa4fffb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeff699f129c41cdd7b4a49569aa4fffb">&#9670;&nbsp;</a></span>IsDequantizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsDequantizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">RefLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a1aecac7de9b71cfaaadecda47edc56c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1aecac7de9b71cfaaadecda47edc56c0">&#9670;&nbsp;</a></span>IsDetectionPostProcessSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsDetectionPostProcessSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>boxEncodings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>scores</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>detectionBoxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>detectionClasses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>detectionScores</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>numDetections</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a50af275d7755a5bb1be69736d7e4b02f">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a50af275d7755a5bb1be69736d7e4b02f">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a4bee87b6d7a78ee4a3d6cecc7ad8a77a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bee87b6d7a78ee4a3d6cecc7ad8a77a">&#9670;&nbsp;</a></span>IsDilatedDepthwiseConvolutionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsDilatedDepthwiseConvolutionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a55d91a97ff664f42cd5cd62b60c15f80">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a55d91a97ff664f42cd5cd62b60c15f80">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a16c8cd49a7fa487b904b5c9cc83673e7">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a16c8cd49a7fa487b904b5c9cc83673e7">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="aca2cc0ccc6a468bc5374fa2839258802"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca2cc0ccc6a468bc5374fa2839258802">&#9670;&nbsp;</a></span>IsDivisionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsDivisionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a08f55136b1f0907e7083d70d719f697f">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f">RefLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a4a6603d415b4e963cacd9ede220b8119"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a6603d415b4e963cacd9ede220b8119">&#9670;&nbsp;</a></span>IsElementwiseUnarySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsElementwiseUnarySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a61c5b4e5dc224ef0c876e43353b34030">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a61c5b4e5dc224ef0c876e43353b34030">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a61c5b4e5dc224ef0c876e43353b34030">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a5d99bdae7b6b2d5d1243f21cd59befb8">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a26dde72aa68a605bd5cf89b85cde8650"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26dde72aa68a605bd5cf89b85cde8650">&#9670;&nbsp;</a></span>IsEqualSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsEqualSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#afb6ad04c6ff234b193f3dfc0cfabcbd5">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#afb6ad04c6ff234b193f3dfc0cfabcbd5">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="aa467d4de09eb4bd51e02122fb3d6e7c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa467d4de09eb4bd51e02122fb3d6e7c0">&#9670;&nbsp;</a></span>IsFakeQuantizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsFakeQuantizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aab7318aa8adc0a8a3b6a1780cfc1f90b">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#aab7318aa8adc0a8a3b6a1780cfc1f90b">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a2fc14db765754af18a4724e678720b7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fc14db765754af18a4724e678720b7b">&#9670;&nbsp;</a></span>IsFillSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsFillSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#acc5d9a4c8f29984de3bbdca87684f317">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a0683efc6cc81f888eccab0c637674f7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0683efc6cc81f888eccab0c637674f7a">&#9670;&nbsp;</a></span>IsFloorSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsFloorSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="af5f8d5b50e69b8003357895450ee57bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5f8d5b50e69b8003357895450ee57bd">&#9670;&nbsp;</a></span>IsFullyConnectedSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsFullyConnectedSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a95a7b2d7b19575a98f3548f37bff2540"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95a7b2d7b19575a98f3548f37bff2540">&#9670;&nbsp;</a></span>IsGatherSupported() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsGatherSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aef77aa4bb0e68e88dcf5ab8b5882a2d3">LayerSupportBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="abd9c6124747e300449bff6287d96cd73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd9c6124747e300449bff6287d96cd73">&#9670;&nbsp;</a></span>IsGatherSupported() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsGatherSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a2f51fda38409c3768a7bd28cedf3f075">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a2f51fda38409c3768a7bd28cedf3f075">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a5e8fbdda1125eb5e22f14eacbe9fb351">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a5e8fbdda1125eb5e22f14eacbe9fb351">ClLayerSupport</a>.</p>

</div>
</div>
<a id="af623e15fff281da8bb4bad997151c9ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af623e15fff281da8bb4bad997151c9ab">&#9670;&nbsp;</a></span>IsGreaterSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsGreaterSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>ouput</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a14e45f3699e823d7859d5d352d89265c">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a14e45f3699e823d7859d5d352d89265c">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a14e45f3699e823d7859d5d352d89265c">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a7303c2656e267e10252a171e8bbc1d94">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a302869e220458e13c7e82c2671e5280c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a302869e220458e13c7e82c2671e5280c">&#9670;&nbsp;</a></span>IsInputSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsInputSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_mock_layer_support.xhtml#a005f361b64a45d4e3fe6bff24697048c">MockLayerSupport</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">ClLayerSupport</a>, <a class="el" href="classarmnn_1_1_mock_import_layer_support.xhtml#a49cf9ce84cb5e9624ad15ae1e78f9380">MockImportLayerSupport</a>, and <a class="el" href="classsdb_1_1_sample_dynamic_layer_support.xhtml#ac700e1056f8bc863563a7aeb0f0265fd">SampleDynamicLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a7e16e155e7f7445789e68424a9a870c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e16e155e7f7445789e68424a9a870c5">&#9670;&nbsp;</a></span>IsInstanceNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsInstanceNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0813546a09bf2caba6794014d1960624">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a0813546a09bf2caba6794014d1960624">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0813546a09bf2caba6794014d1960624">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0813546a09bf2caba6794014d1960624">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="af189848668211807688a56aac54978bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af189848668211807688a56aac54978bf">&#9670;&nbsp;</a></span>IsL2NormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsL2NormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aca4acda7ab553edfda828658d8f3882b">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a91bb1a44f9d05a4d6a4c6fedbf596c06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91bb1a44f9d05a4d6a4c6fedbf596c06">&#9670;&nbsp;</a></span>IsLogicalBinarySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsLogicalBinarySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8fab6937a1010b5ed674b930b4f143cb">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a772790c60d70814e30b5bec70fd98776">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a772790c60d70814e30b5bec70fd98776">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a772790c60d70814e30b5bec70fd98776">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a9a6774ab8ad711b7fc48b8372279b3fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a6774ab8ad711b7fc48b8372279b3fc">&#9670;&nbsp;</a></span>IsLogicalUnarySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsLogicalUnarySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a20134883695508a2192eecd403e7c44b">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a894a220864f30833c465ae2a1a0e8507">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="ab5d791a3bc50549b3805a982bf4959d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5d791a3bc50549b3805a982bf4959d8">&#9670;&nbsp;</a></span>IsLogSoftmaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsLogSoftmaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a6d414f4983a5ca9596d84e340e6fd895">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a5942cec16b5719b59c4e80bc8be90342"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5942cec16b5719b59c4e80bc8be90342">&#9670;&nbsp;</a></span>IsLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>scratchBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a862535721737220f62a49f14ff494dd5">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a862535721737220f62a49f14ff494dd5">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a862535721737220f62a49f14ff494dd5">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a862535721737220f62a49f14ff494dd5">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="aeeb17ef5763db43063b6e98d0a692e1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeeb17ef5763db43063b6e98d0a692e1f">&#9670;&nbsp;</a></span>IsMaximumSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsMaximumSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#afef9436c86b37b973471f2ae546ac00a">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a4fc33395e8e392ba59eedcb721dc6d3d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4fc33395e8e392ba59eedcb721dc6d3d">&#9670;&nbsp;</a></span>IsMeanSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsMeanSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="aef4d9a4b703b1a15558633b5802c663b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef4d9a4b703b1a15558633b5802c663b">&#9670;&nbsp;</a></span>IsMemCopySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsMemCopySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9d25fabf725313fda40a41400155bafe">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a9d25fabf725313fda40a41400155bafe">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="af0cb232661c1e1bf9d253f396b6b4f4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0cb232661c1e1bf9d253f396b6b4f4c">&#9670;&nbsp;</a></span>IsMemImportSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsMemImportSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a334181d8098b943d03ccd820753ace75">LayerSupportBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a429c2f3a583e59b1215d2902cd55edff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a429c2f3a583e59b1215d2902cd55edff">&#9670;&nbsp;</a></span>IsMergerSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsMergerSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a77ae1b686e92a561de76388ac55cab06">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#aa9309ea64f9f7447efe3567f77417d29">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aa9309ea64f9f7447efe3567f77417d29">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa9309ea64f9f7447efe3567f77417d29">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="ad30162aa20f5484d48982537fdd42a04"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad30162aa20f5484d48982537fdd42a04">&#9670;&nbsp;</a></span>IsMergeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsMergeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa9bbc383cac59d6f02d2ef7d2cc0076f">LayerSupportBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a76e472f67b857c5619c1751e0cd20a5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76e472f67b857c5619c1751e0cd20a5c">&#9670;&nbsp;</a></span>IsMinimumSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsMinimumSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>ouput</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3d0eafb3de560b3482f857b56b2b2116">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="aacb0b7d0aa3b7c495981f3e7ae6108e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacb0b7d0aa3b7c495981f3e7ae6108e5">&#9670;&nbsp;</a></span>IsMultiplicationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsMultiplicationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a421e1f3865d99d52613003048342c49a">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a421e1f3865d99d52613003048342c49a">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a421e1f3865d99d52613003048342c49a">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a421e1f3865d99d52613003048342c49a">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a09beb238888a3795a11e28b2f439a2c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09beb238888a3795a11e28b2f439a2c7">&#9670;&nbsp;</a></span>IsNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a3852eb9f8af92ee3dc7ddcbb3590d9e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3852eb9f8af92ee3dc7ddcbb3590d9e2">&#9670;&nbsp;</a></span>IsOutputSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsOutputSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">NeonLayerSupport</a>, <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">ClLayerSupport</a>, <a class="el" href="classarmnn_1_1_mock_layer_support.xhtml#ad407693360ac4e742adb5ec76f84a948">MockLayerSupport</a>, <a class="el" href="classarmnn_1_1_mock_import_layer_support.xhtml#a204bfa8f305f067b488e9c384c1ccd32">MockImportLayerSupport</a>, and <a class="el" href="classsdb_1_1_sample_dynamic_layer_support.xhtml#ad0e86b8bcd1e2f43c0d686bb17115c39">SampleDynamicLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a521e7f59a1ca7699c5182245fb52fb68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a521e7f59a1ca7699c5182245fb52fb68">&#9670;&nbsp;</a></span>IsPadSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsPadSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0534291adf9f3436ba331552eba29a43">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="aaa4433e57a90fc106e9ca227cbf21acc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa4433e57a90fc106e9ca227cbf21acc">&#9670;&nbsp;</a></span>IsPermuteSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsPermuteSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9d553495d9a94fa55588ae159d8bda30">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a7d355424568d0383d53da623d88e4002"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d355424568d0383d53da623d88e4002">&#9670;&nbsp;</a></span>IsPooling2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsPooling2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a645dc9fbc6b5da2c9b3124eea544044e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a645dc9fbc6b5da2c9b3124eea544044e">&#9670;&nbsp;</a></span>IsPreCompiledSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsPreCompiledSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc1a598f2f572564818e3d343af93486">LayerSupportBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a8356620b4723ae24b897940a44cca12e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8356620b4723ae24b897940a44cca12e">&#9670;&nbsp;</a></span>IsPreluSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsPreluSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a93cf81b28c4275a338f41c536a451158">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a9ff96df741a96f76dec45a4f119d9f29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ff96df741a96f76dec45a4f119d9f29">&#9670;&nbsp;</a></span>IsQLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsQLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousOutputIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousCellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adf54bcad228c0ac21f6735d31460cf31">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="acbd0bc4ae2c7dafaa43a1f4558dec9e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acbd0bc4ae2c7dafaa43a1f4558dec9e9">&#9670;&nbsp;</a></span>IsQuantizedLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsQuantizedLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousCellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousOutputIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af1be52d9f968bfab069344756bf232c4">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a281eb6ce87b6ca147e681dd3f6483a87">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#af1be52d9f968bfab069344756bf232c4">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a2e700405a95007bf3cdcfee4edd5faf6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e700405a95007bf3cdcfee4edd5faf6">&#9670;&nbsp;</a></span>IsQuantizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsQuantizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad2c7be6b84b04444e514f52f593b3df7">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="aabe9e99096ebc1e0ac3231ae19f45d58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabe9e99096ebc1e0ac3231ae19f45d58">&#9670;&nbsp;</a></span>IsRankSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsRankSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a707638bc045d261dff4faaf4a2acc72b">LayerSupportBase</a>, and <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#ae106544a060930a518ae0a003a3e9a64">RefLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a5b4e5775549210130fda73dbf9ff5805"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b4e5775549210130fda73dbf9ff5805">&#9670;&nbsp;</a></span>IsReshapeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsReshapeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a0ea3f88552957d51ecf39aa084493dad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ea3f88552957d51ecf39aa084493dad">&#9670;&nbsp;</a></span>IsResizeBilinearSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsResizeBilinearSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0f29f31e1ba46a52eedcdecd34f4cc24">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a0f29f31e1ba46a52eedcdecd34f4cc24">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0f29f31e1ba46a52eedcdecd34f4cc24">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0f29f31e1ba46a52eedcdecd34f4cc24">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a139c7fa3f4d25a1f8e63c4db26ed882a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a139c7fa3f4d25a1f8e63c4db26ed882a">&#9670;&nbsp;</a></span>IsResizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsResizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a1f421ed5bcee87cd4bb2fcccd8d79400"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f421ed5bcee87cd4bb2fcccd8d79400">&#9670;&nbsp;</a></span>IsRsqrtSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsRsqrtSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a10ae4d84b0d31580f6fcd5107322ebcf">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a10ae4d84b0d31580f6fcd5107322ebcf">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a10ae4d84b0d31580f6fcd5107322ebcf">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a10ae4d84b0d31580f6fcd5107322ebcf">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a5176e7f87f418561082d8c6310215cf7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5176e7f87f418561082d8c6310215cf7">&#9670;&nbsp;</a></span>IsSliceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsSliceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a0653b070e13f6003314ff70c83dfdf82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0653b070e13f6003314ff70c83dfdf82">&#9670;&nbsp;</a></span>IsSoftmaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsSoftmaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8385cf8227907904a6a86fac318fc099">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a72900e5d5a48a3f5bab04b9bc53ad4cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72900e5d5a48a3f5bab04b9bc53ad4cb">&#9670;&nbsp;</a></span>IsSpaceToBatchNdSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsSpaceToBatchNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3adfc31e079a970e028e537ec05fabf5">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="aad5b9a346998e69ce24668f474e8a41f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad5b9a346998e69ce24668f474e8a41f">&#9670;&nbsp;</a></span>IsSpaceToDepthSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsSpaceToDepthSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a3475373a82a2dcea43f49157e72c2d1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3475373a82a2dcea43f49157e72c2d1e">&#9670;&nbsp;</a></span>IsSplitterSupported() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsSplitterSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a17dd12822d49a23d24198f425a6fb9c4">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a17dd12822d49a23d24198f425a6fb9c4">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a17dd12822d49a23d24198f425a6fb9c4">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a17dd12822d49a23d24198f425a6fb9c4">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="ac2a17ba940c5ae8718306929c4fbcc49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2a17ba940c5ae8718306929c4fbcc49">&#9670;&nbsp;</a></span>IsSplitterSupported() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsSplitterSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>outputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa746e752ce8874669ea549f8e50896da">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#aa746e752ce8874669ea549f8e50896da">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aa746e752ce8874669ea549f8e50896da">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa746e752ce8874669ea549f8e50896da">ClLayerSupport</a>.</p>

</div>
</div>
<a id="a3c875cde7fb98d33b415361653fe170e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c875cde7fb98d33b415361653fe170e">&#9670;&nbsp;</a></span>IsStackSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsStackSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="ab44a343d43671032ae1395b06508ac36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab44a343d43671032ae1395b06508ac36">&#9670;&nbsp;</a></span>IsStandInSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsStandInSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>outputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a68a4c180fc48e266995db8596f6279d3">LayerSupportBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="aec35c53952d13100216d2a2b9f63b98c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec35c53952d13100216d2a2b9f63b98c">&#9670;&nbsp;</a></span>IsStridedSliceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsStridedSliceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ac054cb25099005eac854afb1511340f0">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#ac054cb25099005eac854afb1511340f0">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ac054cb25099005eac854afb1511340f0">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ac054cb25099005eac854afb1511340f0">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="af76dce64a3338e037bb8eb41e5a219aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af76dce64a3338e037bb8eb41e5a219aa">&#9670;&nbsp;</a></span>IsSubtractionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsSubtractionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="af05157bd75bb2a7a3a942be85945321a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af05157bd75bb2a7a3a942be85945321a">&#9670;&nbsp;</a></span>IsSwitchSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsSwitchSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8c12a49b0d261836c11a57916e01805d">LayerSupportBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a0cd42985d5a85895204331e19d2e4c75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cd42985d5a85895204331e19d2e4c75">&#9670;&nbsp;</a></span>IsTransposeConvolution2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsTransposeConvolution2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0c69484f19ed650ad48b716719114e51">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<a id="a4d18c121fd6e27cceda23776e3418be5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d18c121fd6e27cceda23776e3418be5">&#9670;&nbsp;</a></span>IsTransposeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsTransposeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0189645f33641b280877a1b2f6ba9fee">LayerSupportBase</a>, <a class="el" href="classarmnn_1_1_ref_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee">RefLayerSupport</a>, <a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee">NeonLayerSupport</a>, and <a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee">ClLayerSupport</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport::~ILayerSupport()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>include/armnn/<a class="el" href="_i_layer_support_8hpp_source.xhtml">ILayerSupport.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></li>
    <li class="footer">Generated on Wed Nov 25 2020 09:59:18 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
