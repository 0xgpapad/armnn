<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: armnnTfParser Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearmnn_tf_parser.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">armnnTfParser Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml">ITfParser</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parses a directed acyclic graph from a tensorflow protobuf file.  <a href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_parser_1_1_tf_parser.xhtml">TfParser</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml" title="WithOutputTensorIndex wraps a value and an index. ">WithOutputTensorIndex</a> wraps a value and an index.  <a href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a9084adbf804022c874039ad40d1939e9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> = <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></td></tr>
<tr class="separator:a9084adbf804022c874039ad40d1939e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7cec8b9a69e02f18a5de38502675d94"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#af7cec8b9a69e02f18a5de38502675d94">ITfParserPtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml">ITfParser</a>, void(*)(<a class="el" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml">ITfParser</a> *parser)&gt;</td></tr>
<tr class="separator:af7cec8b9a69e02f18a5de38502675d94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa36bf288c19fe35767bb6e059636f405"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> = std::unique_ptr&lt; ParsedTfOperation &gt;</td></tr>
<tr class="separator:aa36bf288c19fe35767bb6e059636f405"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad85fe4a9bf2aff90c53bc2f50c8931e6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#ad85fe4a9bf2aff90c53bc2f50c8931e6">OutputOfParsedTfOperation</a> = <a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a>&lt; ParsedTfOperation * &gt;</td></tr>
<tr class="separator:ad85fe4a9bf2aff90c53bc2f50c8931e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c8735480b01dbd0f75c63377fe054e9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#a4c8735480b01dbd0f75c63377fe054e9">OutputOfConstNodeDef</a> = <a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a>&lt; const tensorflow::NodeDef * &gt;</td></tr>
<tr class="separator:a4c8735480b01dbd0f75c63377fe054e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcf8e5fd95ba7e7bd8cd36fc24974223"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#abcf8e5fd95ba7e7bd8cd36fc24974223">OutputId</a> = <a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a>&lt; std::string &gt;</td></tr>
<tr class="separator:abcf8e5fd95ba7e7bd8cd36fc24974223"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a0540bb475d62bab024eebe8685181845"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#a0540bb475d62bab024eebe8685181845">CalculateSamePadding</a> (uint32_t inputSize, uint32_t stride, uint32_t filterSize, bool samePadding, uint32_t *paddingFront, uint32_t *paddingBack)</td></tr>
<tr class="separator:a0540bb475d62bab024eebe8685181845"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa78bf8d20e213dcd13d48072dfa9cd1f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#aa78bf8d20e213dcd13d48072dfa9cd1f">CalcPadding</a> (uint32_t input, uint32_t kernel, uint32_t stride, uint32_t &amp;outPadHead, uint32_t &amp;outPadTail, bool samePadding)</td></tr>
<tr class="separator:aa78bf8d20e213dcd13d48072dfa9cd1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d934e14ca544ba7af4fe562def8a986"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#a3d934e14ca544ba7af4fe562def8a986">ConvertTfTensorDataType</a> (const tensorflow::DataType tfDataType, const tensorflow::NodeDef &amp;nodeDef)</td></tr>
<tr class="separator:a3d934e14ca544ba7af4fe562def8a986"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9be4b3b32d110ca8d27936f6f7df1408"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#a9be4b3b32d110ca8d27936f6f7df1408">OutputShapeOfExpandDims</a> (const tensorflow::NodeDef &amp;nodeDef, <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo, std::int32_t expandDim)</td></tr>
<tr class="separator:a9be4b3b32d110ca8d27936f6f7df1408"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5488f1478c62281c5e937e79ebcd145"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#ae5488f1478c62281c5e937e79ebcd145">CheckPaddingTensor</a> (const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;paddingTensor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;inputTensorInfo, const std::string &amp;nodeName)</td></tr>
<tr class="separator:ae5488f1478c62281c5e937e79ebcd145"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c18860db8b032de579c5ad94cbae5d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#a9c18860db8b032de579c5ad94cbae5d0">CalculatePaddedOutputTensorInfo</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;inputTensorInfo, const std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt;&gt; &amp;padList)</td></tr>
<tr class="separator:a9c18860db8b032de579c5ad94cbae5d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e06adf62d53562032e738b89f3eb37c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#a6e06adf62d53562032e738b89f3eb37c">OutputShapeOfSqueeze</a> (const tensorflow::NodeDef &amp;nodeDef, <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo)</td></tr>
<tr class="separator:a6e06adf62d53562032e738b89f3eb37c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="a9084adbf804022c874039ad40d1939e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9084adbf804022c874039ad40d1939e9">&#9670;&nbsp;</a></span>BindingPointInfo</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_tf_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> =  <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_tf_parser_8hpp_source.xhtml#l00019">19</a> of file <a class="el" href="_i_tf_parser_8hpp_source.xhtml">ITfParser.hpp</a>.</p>

</div>
</div>
<a id="af7cec8b9a69e02f18a5de38502675d94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7cec8b9a69e02f18a5de38502675d94">&#9670;&nbsp;</a></span>ITfParserPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_tf_parser.xhtml#af7cec8b9a69e02f18a5de38502675d94">ITfParserPtr</a> =  std::unique_ptr&lt;<a class="el" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml">ITfParser</a>, void(*)(<a class="el" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml">ITfParser</a>* parser)&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_tf_parser_8hpp_source.xhtml#l00022">22</a> of file <a class="el" href="_i_tf_parser_8hpp_source.xhtml">ITfParser.hpp</a>.</p>

</div>
</div>
<a id="abcf8e5fd95ba7e7bd8cd36fc24974223"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcf8e5fd95ba7e7bd8cd36fc24974223">&#9670;&nbsp;</a></span>OutputId</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_tf_parser.xhtml#abcf8e5fd95ba7e7bd8cd36fc24974223">OutputId</a> =  <a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a>&lt;std::string&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8hpp_source.xhtml#l00062">62</a> of file <a class="el" href="_tf_parser_8hpp_source.xhtml">TfParser.hpp</a>.</p>

</div>
</div>
<a id="a4c8735480b01dbd0f75c63377fe054e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c8735480b01dbd0f75c63377fe054e9">&#9670;&nbsp;</a></span>OutputOfConstNodeDef</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_tf_parser.xhtml#a4c8735480b01dbd0f75c63377fe054e9">OutputOfConstNodeDef</a> =  <a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a>&lt;const tensorflow::NodeDef*&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8hpp_source.xhtml#l00061">61</a> of file <a class="el" href="_tf_parser_8hpp_source.xhtml">TfParser.hpp</a>.</p>

</div>
</div>
<a id="ad85fe4a9bf2aff90c53bc2f50c8931e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad85fe4a9bf2aff90c53bc2f50c8931e6">&#9670;&nbsp;</a></span>OutputOfParsedTfOperation</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_tf_parser.xhtml#ad85fe4a9bf2aff90c53bc2f50c8931e6">OutputOfParsedTfOperation</a> =  <a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a>&lt;ParsedTfOperation *&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8hpp_source.xhtml#l00060">60</a> of file <a class="el" href="_tf_parser_8hpp_source.xhtml">TfParser.hpp</a>.</p>

</div>
</div>
<a id="aa36bf288c19fe35767bb6e059636f405"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa36bf288c19fe35767bb6e059636f405">&#9670;&nbsp;</a></span>ParsedTfOperationPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> =  std::unique_ptr&lt;ParsedTfOperation&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="_tf_parser_8hpp_source.xhtml">TfParser.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="aa78bf8d20e213dcd13d48072dfa9cd1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa78bf8d20e213dcd13d48072dfa9cd1f">&#9670;&nbsp;</a></span>CalcPadding()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void armnnTfParser::CalcPadding </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>stride</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>outPadHead</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>outPadTail</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>samePadding</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8cpp_source.xhtml#l00406">406</a> of file <a class="el" href="_tf_parser_8cpp_source.xhtml">TfParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00390">CalculateSamePadding()</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00197">CHECK_LOCATION</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00308">Layer::GetName()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00311">Layer::GetNumOutputSlots()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00315">Layer::GetOutputSlot()</a>, and <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml#l00243">m_Layer</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_parser_8cpp_source.xhtml#l00903">ConvertTfTensorDataType()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00604">TfLiteParser::CreateNetworkFromBinary()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00589">OnnxParser::CreateNetworkFromString()</a>, and <a class="el" href="_tf_parser_8cpp_source.xhtml#l02435">OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#a0540bb475d62bab024eebe8685181845">CalculateSamePadding</a>(input, stride, kernel, samePadding, &amp;outPadHead, &amp;outPadTail);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;}</div><div class="ttc" id="namespacearmnn_tf_parser_xhtml_a0540bb475d62bab024eebe8685181845"><div class="ttname"><a href="namespacearmnn_tf_parser.xhtml#a0540bb475d62bab024eebe8685181845">armnnTfParser::CalculateSamePadding</a></div><div class="ttdeci">void CalculateSamePadding(uint32_t inputSize, uint32_t stride, uint32_t filterSize, bool samePadding, uint32_t *paddingFront, uint32_t *paddingBack)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_parser_8cpp_source.xhtml#l00390">TfParser.cpp:390</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9c18860db8b032de579c5ad94cbae5d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c18860db8b032de579c5ad94cbae5d0">&#9670;&nbsp;</a></span>CalculatePaddedOutputTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> armnnTfParser::CalculatePaddedOutputTensorInfo </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>padList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8cpp_source.xhtml#l02126">2126</a> of file <a class="el" href="_tf_parser_8cpp_source.xhtml">TfParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_network.xhtml#aef27f787e8a2ee19c4052261f963f28e">INetwork::AddConcatLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a07485f1477554d32e43edc39502ac419">INetwork::AddPadLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#ac77b89eb982f9d745730c90fcbdddba4">INetwork::AddReshapeLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a617aeb663e1535568864c23f5d988dd8">INetwork::AddResizeLayer()</a>, <a class="el" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::Bilinear</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00197">CHECK_LOCATION</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l02097">CheckPaddingTensor()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetNumDimensions()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">IOutputSlot::GetTensorInfo()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00197">OriginsDescriptor::GetViewOrigin()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00809">ResizeDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00807">ResizeDescriptor::m_Method</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00804">ResizeDescriptor::m_TargetHeight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00834">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00802">ResizeDescriptor::m_TargetWidth</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00158">OriginsDescriptor::SetConcatAxis()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00189">TensorInfo::SetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, and <a class="el" href="_descriptors_8cpp_source.xhtml#l00167">OriginsDescriptor::SetViewOriginCoord()</a>.</p>
<div class="fragment"><div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;{</div><div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDims = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;    std::vector&lt;unsigned int&gt; outDims;</div><div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numDims; ++i)</div><div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;    {</div><div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dimSize = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i];</div><div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160;        <span class="keyword">const</span> std::pair&lt;unsigned int, unsigned int&gt;&amp; dimPadding = padList[i];</div><div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;        dimSize += dimPadding.first;</div><div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;        dimSize += dimPadding.second;</div><div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;        outDims.push_back(dimSize);</div><div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;    }</div><div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> paddedTensorInfo = inputTensorInfo;</div><div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outDimsSize = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(outDims.size());</div><div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;    paddedTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>{ outDimsSize, outDims.data() });</div><div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;    <span class="keywordflow">return</span> paddedTensorInfo;</div><div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00189">Tensor.hpp:189</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0540bb475d62bab024eebe8685181845"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0540bb475d62bab024eebe8685181845">&#9670;&nbsp;</a></span>CalculateSamePadding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void armnnTfParser::CalculateSamePadding </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>inputSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>stride</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>filterSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>samePadding</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>paddingFront</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>paddingBack</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8cpp_source.xhtml#l00390">390</a> of file <a class="el" href="_tf_parser_8cpp_source.xhtml">TfParser.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_parser_8cpp_source.xhtml#l00406">CalcPadding()</a>.</p>
<div class="fragment"><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                                                                {</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    *paddingFront = 0;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    *paddingBack = 0;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordflow">if</span> (samePadding) {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        uint32_t outputSize = (inputSize + stride - 1) / stride;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        uint32_t temp = (outputSize - 1) * stride + filterSize;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keywordflow">if</span> (temp &gt; inputSize) {</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            *paddingFront = (temp - inputSize) / 2;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            *paddingBack = (temp - inputSize) - *paddingFront;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        }</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    }</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae5488f1478c62281c5e937e79ebcd145"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5488f1478c62281c5e937e79ebcd145">&#9670;&nbsp;</a></span>CheckPaddingTensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int armnnTfParser::CheckPaddingTensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>paddingTensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>nodeName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8cpp_source.xhtml#l02097">2097</a> of file <a class="el" href="_tf_parser_8cpp_source.xhtml">TfParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00197">CHECK_LOCATION</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetNumDimensions()</a>, and <a class="el" href="_tensor_8hpp_source.xhtml#l00284">BaseTensor&lt; MemoryType &gt;::GetShape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_parser_8cpp_source.xhtml#l02126">CalculatePaddedOutputTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;{</div><div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank = paddingTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[0];</div><div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> expectedRank = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;    <span class="keywordflow">if</span> (rank != expectedRank)</div><div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;    {</div><div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;                fmt::format(<span class="stringliteral">&quot;Expected the padding tensor to be of rank {} not {} on Node {} {}.&quot;</span>,</div><div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;                            expectedRank,</div><div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;                            rank,</div><div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;                            nodeName,</div><div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;                            <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;    }</div><div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> second = paddingTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[1];</div><div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;    <span class="keywordflow">if</span> (second != 2)</div><div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;    {</div><div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;                fmt::format(<span class="stringliteral">&quot;Expected the padding tensor to be of dimensions &quot;</span></div><div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;                            <span class="stringliteral">&quot;[{1}, 2] not [{1}, {2}] on Node {3} {4}.&quot;</span>,</div><div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;                            rank,</div><div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;                            second,</div><div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;                            nodeName,</div><div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;                            <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;    }</div><div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;    <span class="keywordflow">return</span> rank;</div><div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::BaseTensor::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00284">Tensor.hpp:284</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00197">Exceptions.hpp:197</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3d934e14ca544ba7af4fe562def8a986"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d934e14ca544ba7af4fe562def8a986">&#9670;&nbsp;</a></span>ConvertTfTensorDataType()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> armnnTfParser::ConvertTfTensorDataType </td>
          <td>(</td>
          <td class="paramtype">const tensorflow::DataType&#160;</td>
          <td class="paramname"><em>tfDataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const tensorflow::NodeDef &amp;&#160;</td>
          <td class="paramname"><em>nodeDef</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8cpp_source.xhtml#l00903">903</a> of file <a class="el" href="_tf_parser_8cpp_source.xhtml">TfParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_network.xhtml#a073e2f61f527d7d3801c26bdbd37dd7e">INetwork::AddConvolution2dLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a78367a5054c92d435f4f5c7e10ec65b8">INetwork::AddDepthwiseConvolution2dLayer()</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00406">CalcPadding()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00303">CHECK_DATA_FORMAT</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00197">CHECK_LOCATION</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00315">CHECK_PADDING_TYPE</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_types_utils_8hpp_source.xhtml#l00126">armnn::GetDataTypeSize()</a>, <a class="el" href="_data_layout_indexed_8hpp_source.xhtml#l00024">DataLayoutIndexed::GetHeightIndex()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00192">TensorInfo::GetNumElements()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00284">BaseTensor&lt; MemoryType &gt;::GetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">IOutputSlot::GetTensorInfo()</a>, <a class="el" href="_data_layout_indexed_8hpp_source.xhtml#l00025">DataLayoutIndexed::GetWidthIndex()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00449">Convolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00501">DepthwiseConvolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00451">Convolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00503">DepthwiseConvolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00439">Convolution2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00491">DepthwiseConvolution2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00433">Convolution2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00485">DepthwiseConvolution2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00435">Convolution2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00487">DepthwiseConvolution2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00437">Convolution2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00489">DepthwiseConvolution2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00441">Convolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00493">DepthwiseConvolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00443">Convolution2dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00495">DepthwiseConvolution2dDescriptor::m_StrideY</a>, <a class="el" href="_permute_8cpp_source.xhtml#l00131">armnnUtils::Permute()</a>, <a class="el" href="_permute_8cpp_source.xhtml#l00098">armnnUtils::Permuted()</a>, and <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;{</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    <span class="keywordflow">switch</span> (tfDataType)</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    {</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    <span class="keywordflow">case</span> tensorflow::DT_FLOAT:</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;        <span class="keywordflow">return</span> DataType::Float32;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    <span class="keywordflow">case</span> tensorflow::DT_INT32:</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;        <span class="keywordflow">return</span> DataType::Signed32;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;            fmt::format(<span class="stringliteral">&quot;Unknown DataType {} for node {} {}&quot;</span>,</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;                        tensorflow::DataType_Name(tfDataType),</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;                        nodeDef.name(),</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;                        <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    }</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;}</div><div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00197">Exceptions.hpp:197</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9be4b3b32d110ca8d27936f6f7df1408"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9be4b3b32d110ca8d27936f6f7df1408">&#9670;&nbsp;</a></span>OutputShapeOfExpandDims()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> armnnTfParser::OutputShapeOfExpandDims </td>
          <td>(</td>
          <td class="paramtype">const tensorflow::NodeDef &amp;&#160;</td>
          <td class="paramname"><em>nodeDef</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>expandDim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8cpp_source.xhtml#l01420">1420</a> of file <a class="el" href="_tf_parser_8cpp_source.xhtml">TfParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_network.xhtml#aea068f6094e1c3bfcdf8167b68112632">INetwork::AddActivationLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a8d1067e754512c434da1238b67ad26ea">INetwork::AddBatchNormalizationLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#ac3be1bcc0fa5ffaf04a4f1d20d0ab7f4">INetwork::AddComparisonLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a8440d2a2afd3eb3526212081c9016830">INetwork::AddGatherLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a4cc12e3bd9ffe196cc8b351f25a104e3">INetwork::AddMinimumLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#ac77b89eb982f9d745730c90fcbdddba4">INetwork::AddReshapeLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#afaa808f44f0b8332ec0bd54f4fea47c0">INetwork::AddStackLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#ab6d332d9c4b4f04c23f40f04f7f56d0d">INetwork::AddSubtractionLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a4f6070c1337d40f1e98988acee015c7d">INetwork::AddTransposeLayer()</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00303">CHECK_DATA_FORMAT</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00197">CHECK_LOCATION</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00194">TensorInfo::GetDataType()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00192">TensorInfo::GetNumElements()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">IOutputSlot::GetTensorInfo()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00045">ActivationDescriptor::m_A</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00753">GatherDescriptor::m_Axis</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01032">StackDescriptor::m_Axis</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00636">BatchNormalizationDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00634">BatchNormalizationDescriptor::m_Eps</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00043">ActivationDescriptor::m_Function</a>, <a class="el" href="_tf_parser_8hpp_source.xhtml#l00049">WithOutputTensorIndex&lt; T &gt;::m_Index</a>, <a class="el" href="_tf_parser_8hpp_source.xhtml#l00048">WithOutputTensorIndex&lt; T &gt;::m_IndexedValue</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01036">StackDescriptor::m_InputShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01034">StackDescriptor::m_NumInputs</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00834">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::SetDataType()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00189">TensorInfo::SetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, and <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml#l00098">armnnUtils::TransposeTensorShape()</a>.</p>
<div class="fragment"><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;{</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(nodeDef.op() == <span class="stringliteral">&quot;ExpandDims&quot;</span>);</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;    <span class="keywordflow">if</span> (inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &gt; 4) {</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;                fmt::format(<span class="stringliteral">&quot;Unsupported number of dimensions: {} for input shape for ExpandDims {} {}&quot;</span>,</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;                            inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(),</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;                            nodeDef.name(),</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;                            <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;    }</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;    std::int32_t inputDimSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;int32_t&gt;(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>());</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;    std::vector&lt;uint32_t&gt; outputDims;</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;    <span class="comment">// expandDim operation requires: -1-input.dims() &lt;= dim &lt;= input.dims()</span></div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;    <span class="keywordflow">if</span> (expandDim &gt;= -1 - inputDimSize &amp;&amp; expandDim &lt;= inputDimSize)</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    {</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;        <span class="comment">// add current input shape to outputDims</span></div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); ++i) {</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;            <span class="keyword">auto</span> currentDimension = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i];</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;            outputDims.push_back(currentDimension);</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;        }</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;        <span class="comment">// insert a dimension of 1 at index &#39;expandDim&#39; of inputs shape</span></div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;        <span class="keywordflow">if</span> (expandDim &gt;= 0)</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;        {</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;            <span class="keyword">auto</span> getPosition = std::next(outputDims.begin() + 0, expandDim);</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;            outputDims.insert(getPosition, 1);</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;        }</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;        <span class="comment">// if negative number for &#39;expandDim&#39; then count backwards from the last element</span></div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;        <span class="comment">// and insert 1 dimension at index &#39;expandDim&#39;</span></div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;        <span class="keywordflow">if</span> (expandDim &lt; 0)</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;        {</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;            <span class="keywordtype">int</span> outputDimSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">int</span>&gt;(outputDims.size() + 1);</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;            <span class="keyword">auto</span> getPosition = std::next(outputDims.begin() + outputDimSize, expandDim);</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;            outputDims.insert(getPosition, 1);</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;        }</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    }</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    {</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;                fmt::format(<span class="stringliteral">&quot;Cannot expand dimension {} in input tensor with {} dimension {}&quot;</span>,</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;                            expandDim,</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;                            inputDimSize,</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;                            <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    }</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;    <span class="keywordflow">if</span> (outputDims.size() &gt; 4)</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    {</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;                fmt::format(<span class="stringliteral">&quot;Unsupported number of dimensions: {} for output shape for ExpandDims {} {}&quot;</span>,</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;                            outputDims.size(),</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;                            nodeDef.name(),</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;                            <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;    }</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(static_cast&lt;unsigned int&gt;(outputDims.size()),</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;                                       outputDims.data());</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outTensorInfo = inputTensorInfo;</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    outTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outShape);</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;    <span class="keywordflow">return</span> outTensorInfo;</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00189">Tensor.hpp:189</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00197">Exceptions.hpp:197</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6e06adf62d53562032e738b89f3eb37c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e06adf62d53562032e738b89f3eb37c">&#9670;&nbsp;</a></span>OutputShapeOfSqueeze()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> armnnTfParser::OutputShapeOfSqueeze </td>
          <td>(</td>
          <td class="paramtype">const tensorflow::NodeDef &amp;&#160;</td>
          <td class="paramname"><em>nodeDef</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8cpp_source.xhtml#l02435">2435</a> of file <a class="el" href="_tf_parser_8cpp_source.xhtml">TfParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_network.xhtml#aea068f6094e1c3bfcdf8167b68112632">INetwork::AddActivationLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a4812e0137ee610310d23059efed2cb84">INetwork::AddAdditionLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a82a5bc0d24f4c4eb1fbf793e156a5193">INetwork::AddDivisionLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a5bf8e0c150c7e6f8085c0767c6ab1914">INetwork::AddElementwiseUnaryLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a4839e4ec3f07974c57ca2c856b40cd57">INetwork::AddFullyConnectedLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a87d5ec72def73ca14bd2987a024bd569">INetwork::AddInputLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#afb8d4577c796ffdd213428cd285734b1">INetwork::AddMaximumLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a8262e9e6fc869a9c9782115a6a552f36">INetwork::AddMeanLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#ae24e82cf1ae2a71c5cd976edfb192fc0">INetwork::AddMultiplicationLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a74dac9efbb6dbd1982a45af1805eb4e0">INetwork::AddNormalizationLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#ad8582fba2ebeb65da43a56bc22d4f88b">INetwork::AddOutputLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a4ec92bca4e51755105abb89e1878585f">INetwork::AddPooling2dLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#ac77b89eb982f9d745730c90fcbdddba4">INetwork::AddReshapeLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a53949668a151924c4aad83b176db1080">INetwork::AddSoftmaxLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a3a2dbac031f1a0b1b323916b1c7f61d2">INetwork::AddSplitterLayer()</a>, <a class="el" href="classarmnn_1_1_i_network.xhtml#a348f95b60998a987ba20a58bfc720590">INetwork::AddStridedSliceLayer()</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00406">CalcPadding()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00052">armnnUtils::CalculateReducedOutputTensoInfo()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00103">armnnUtils::CalculateStridedSliceOutputTensorInfo()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00303">CHECK_DATA_FORMAT</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00197">CHECK_LOCATION</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00315">CHECK_PADDING_TYPE</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00194">TensorInfo::GetDataType()</a>, <a class="el" href="_data_layout_indexed_8hpp_source.xhtml#l00024">DataLayoutIndexed::GetHeightIndex()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetNumDimensions()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">IConnectableLayer::GetNumOutputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00284">BaseTensor&lt; MemoryType &gt;::GetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">IOutputSlot::GetTensorInfo()</a>, <a class="el" href="_data_layout_indexed_8hpp_source.xhtml#l00025">DataLayoutIndexed::GetWidthIndex()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00045">ActivationDescriptor::m_A</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00592">NormalizationDescriptor::m_Alpha</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00955">MeanDescriptor::m_Axis</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00047">ActivationDescriptor::m_B</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01101">StridedSliceDescriptor::m_Begin</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01109">StridedSliceDescriptor::m_BeginMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00594">NormalizationDescriptor::m_Beta</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00397">FullyConnectedDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00380">Pooling2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00598">NormalizationDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01122">StridedSliceDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01116">StridedSliceDescriptor::m_EllipsisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01103">StridedSliceDescriptor::m_End</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01112">StridedSliceDescriptor::m_EndMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00043">ActivationDescriptor::m_Function</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00596">NormalizationDescriptor::m_K</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00957">MeanDescriptor::m_KeepDims</a>, <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml#l00243">m_Layer</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01119">StridedSliceDescriptor::m_NewAxisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00586">NormalizationDescriptor::m_NormChannelType</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00588">NormalizationDescriptor::m_NormMethodType</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00590">NormalizationDescriptor::m_NormSize</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00376">Pooling2dDescriptor::m_OutputShapeRounding</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00366">Pooling2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00378">Pooling2dDescriptor::m_PaddingMethod</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00360">Pooling2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00362">Pooling2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00364">Pooling2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00370">Pooling2dDescriptor::m_PoolHeight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00358">Pooling2dDescriptor::m_PoolType</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00368">Pooling2dDescriptor::m_PoolWidth</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01114">StridedSliceDescriptor::m_ShrinkAxisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01105">StridedSliceDescriptor::m_Stride</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00372">Pooling2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00374">Pooling2dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00834">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>, <a class="el" href="_tf_parser_8hpp_source.xhtml#l00097">TfParser::ParsedMatMulTfOperation</a>, <a class="el" href="_tf_parser_8hpp_source.xhtml#l00098">TfParser::ParsedMulTfOperation</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00189">TensorInfo::SetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00310">ViewsDescriptor::SetViewOriginCoord()</a>, and <a class="el" href="_descriptors_8cpp_source.xhtml#l00315">ViewsDescriptor::SetViewSize()</a>.</p>
<div class="fragment"><div class="line"><a name="l02436"></a><span class="lineno"> 2436</span>&#160;{</div><div class="line"><a name="l02437"></a><span class="lineno"> 2437</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(nodeDef.op() == <span class="stringliteral">&quot;Squeeze&quot;</span>);</div><div class="line"><a name="l02438"></a><span class="lineno"> 2438</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">tensorflow::DataType</a> tfDataType = ReadMandatoryNodeTypeAttribute(nodeDef, <span class="stringliteral">&quot;T&quot;</span>);</div><div class="line"><a name="l02439"></a><span class="lineno"> 2439</span>&#160;</div><div class="line"><a name="l02440"></a><span class="lineno"> 2440</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> type;</div><div class="line"><a name="l02441"></a><span class="lineno"> 2441</span>&#160;    <span class="keywordflow">if</span> (tfDataType == tensorflow::DT_FLOAT)</div><div class="line"><a name="l02442"></a><span class="lineno"> 2442</span>&#160;    {</div><div class="line"><a name="l02443"></a><span class="lineno"> 2443</span>&#160;        type = DataType::Float32;</div><div class="line"><a name="l02444"></a><span class="lineno"> 2444</span>&#160;    }</div><div class="line"><a name="l02445"></a><span class="lineno"> 2445</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tfDataType == tensorflow::DT_INT32)</div><div class="line"><a name="l02446"></a><span class="lineno"> 2446</span>&#160;    {</div><div class="line"><a name="l02447"></a><span class="lineno"> 2447</span>&#160;        type = DataType::Signed32;</div><div class="line"><a name="l02448"></a><span class="lineno"> 2448</span>&#160;    }</div><div class="line"><a name="l02449"></a><span class="lineno"> 2449</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l02450"></a><span class="lineno"> 2450</span>&#160;    {</div><div class="line"><a name="l02451"></a><span class="lineno"> 2451</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02452"></a><span class="lineno"> 2452</span>&#160;            fmt::format(<span class="stringliteral">&quot;Unsupported DataType {} for Squeeze operation {} {}&quot;</span>,</div><div class="line"><a name="l02453"></a><span class="lineno"> 2453</span>&#160;                        tensorflow::DataType_Name(tfDataType),</div><div class="line"><a name="l02454"></a><span class="lineno"> 2454</span>&#160;                        nodeDef.name(),</div><div class="line"><a name="l02455"></a><span class="lineno"> 2455</span>&#160;                        <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02456"></a><span class="lineno"> 2456</span>&#160;    }</div><div class="line"><a name="l02457"></a><span class="lineno"> 2457</span>&#160;</div><div class="line"><a name="l02458"></a><span class="lineno"> 2458</span>&#160;</div><div class="line"><a name="l02459"></a><span class="lineno"> 2459</span>&#160;    <span class="keywordflow">if</span> (inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &gt; 4)</div><div class="line"><a name="l02460"></a><span class="lineno"> 2460</span>&#160;    {</div><div class="line"><a name="l02461"></a><span class="lineno"> 2461</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02462"></a><span class="lineno"> 2462</span>&#160;            fmt::format(<span class="stringliteral">&quot;Unsupported number of dimensions: {} for input shape for Squeeze {} {}&quot;</span>,</div><div class="line"><a name="l02463"></a><span class="lineno"> 2463</span>&#160;                        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(),</div><div class="line"><a name="l02464"></a><span class="lineno"> 2464</span>&#160;                        nodeDef.name(),</div><div class="line"><a name="l02465"></a><span class="lineno"> 2465</span>&#160;                        <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02466"></a><span class="lineno"> 2466</span>&#160;    }</div><div class="line"><a name="l02467"></a><span class="lineno"> 2467</span>&#160;</div><div class="line"><a name="l02468"></a><span class="lineno"> 2468</span>&#160;    std::vector&lt;uint32_t&gt; squeezeDims = ReadOptionalNodeUint32ListAttribute(nodeDef, <span class="stringliteral">&quot;squeeze_dims&quot;</span>);</div><div class="line"><a name="l02469"></a><span class="lineno"> 2469</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> uint32_t dimensionSequence[] = { 0, 1, 2, 3 };</div><div class="line"><a name="l02470"></a><span class="lineno"> 2470</span>&#160;</div><div class="line"><a name="l02471"></a><span class="lineno"> 2471</span>&#160;    <span class="keywordflow">if</span> (squeezeDims.empty())</div><div class="line"><a name="l02472"></a><span class="lineno"> 2472</span>&#160;    {</div><div class="line"><a name="l02473"></a><span class="lineno"> 2473</span>&#160;        squeezeDims.assign(dimensionSequence,</div><div class="line"><a name="l02474"></a><span class="lineno"> 2474</span>&#160;                           dimensionSequence+inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>());</div><div class="line"><a name="l02475"></a><span class="lineno"> 2475</span>&#160;    }</div><div class="line"><a name="l02476"></a><span class="lineno"> 2476</span>&#160;</div><div class="line"><a name="l02477"></a><span class="lineno"> 2477</span>&#160;    std::vector&lt;uint32_t&gt; outputDims;</div><div class="line"><a name="l02478"></a><span class="lineno"> 2478</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div><div class="line"><a name="l02479"></a><span class="lineno"> 2479</span>&#160;    {</div><div class="line"><a name="l02480"></a><span class="lineno"> 2480</span>&#160;        <span class="keywordtype">bool</span> skipSqueeze = (std::find(squeezeDims.begin(), squeezeDims.end(), i) == squeezeDims.end());</div><div class="line"><a name="l02481"></a><span class="lineno"> 2481</span>&#160;        <span class="keyword">auto</span> currentDimension = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i];</div><div class="line"><a name="l02482"></a><span class="lineno"> 2482</span>&#160;        <span class="keywordflow">if</span> (skipSqueeze || currentDimension != 1)</div><div class="line"><a name="l02483"></a><span class="lineno"> 2483</span>&#160;        {</div><div class="line"><a name="l02484"></a><span class="lineno"> 2484</span>&#160;            outputDims.push_back(currentDimension);</div><div class="line"><a name="l02485"></a><span class="lineno"> 2485</span>&#160;        }</div><div class="line"><a name="l02486"></a><span class="lineno"> 2486</span>&#160;    }</div><div class="line"><a name="l02487"></a><span class="lineno"> 2487</span>&#160;</div><div class="line"><a name="l02488"></a><span class="lineno"> 2488</span>&#160;    <span class="keywordflow">if</span> (outputDims.size() &gt; 4)</div><div class="line"><a name="l02489"></a><span class="lineno"> 2489</span>&#160;    {</div><div class="line"><a name="l02490"></a><span class="lineno"> 2490</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02491"></a><span class="lineno"> 2491</span>&#160;            fmt::format(<span class="stringliteral">&quot;Unsupported number of dimensions: {} for output shape for Squeeze {} {}&quot;</span>,</div><div class="line"><a name="l02492"></a><span class="lineno"> 2492</span>&#160;                        outputDims.size(),</div><div class="line"><a name="l02493"></a><span class="lineno"> 2493</span>&#160;                        nodeDef.name(),</div><div class="line"><a name="l02494"></a><span class="lineno"> 2494</span>&#160;                        <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02495"></a><span class="lineno"> 2495</span>&#160;    }</div><div class="line"><a name="l02496"></a><span class="lineno"> 2496</span>&#160;</div><div class="line"><a name="l02497"></a><span class="lineno"> 2497</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(static_cast&lt;unsigned int&gt;(outputDims.size()),</div><div class="line"><a name="l02498"></a><span class="lineno"> 2498</span>&#160;                                       outputDims.data());</div><div class="line"><a name="l02499"></a><span class="lineno"> 2499</span>&#160;</div><div class="line"><a name="l02500"></a><span class="lineno"> 2500</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outTensorInfo = inputTensorInfo;</div><div class="line"><a name="l02501"></a><span class="lineno"> 2501</span>&#160;    outTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outShape);</div><div class="line"><a name="l02502"></a><span class="lineno"> 2502</span>&#160;    outTensorInfo.SetDataType(type);</div><div class="line"><a name="l02503"></a><span class="lineno"> 2503</span>&#160;</div><div class="line"><a name="l02504"></a><span class="lineno"> 2504</span>&#160;    <span class="keywordflow">return</span> outTensorInfo;</div><div class="line"><a name="l02505"></a><span class="lineno"> 2505</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00189">Tensor.hpp:189</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00032">Types.hpp:32</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00197">Exceptions.hpp:197</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn_tf_parser.xhtml">armnnTfParser</a></li>
    <li class="footer">Generated on Wed Nov 25 2020 09:59:20 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
