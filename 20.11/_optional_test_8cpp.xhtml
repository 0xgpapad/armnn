<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/test/OptionalTest.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_optional_test_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">OptionalTest.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;boost/test/unit_test.hpp&gt;</code><br />
<code>#include &lt;<a class="el" href="_optional_8hpp_source.xhtml">armnn/Optional.hpp</a>&gt;</code><br />
<code>#include &lt;string&gt;</code><br />
<code>#include &lt;<a class="el" href="_ignore_unused_8hpp_source.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</code><br />
</div>
<p><a href="_optional_test_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aaf3f0594ad35cbde3fd99ab638eeb12c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_optional_test_8cpp.xhtml#aaf3f0594ad35cbde3fd99ab638eeb12c">BOOST_AUTO_TEST_CASE</a> (SimpleStringTests)</td></tr>
<tr class="separator:aaf3f0594ad35cbde3fd99ab638eeb12c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5597b1573d8265e5dbb9b08842ae912b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_optional_test_8cpp.xhtml#a5597b1573d8265e5dbb9b08842ae912b">BOOST_AUTO_TEST_CASE</a> (StringRefTests)</td></tr>
<tr class="separator:a5597b1573d8265e5dbb9b08842ae912b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a488e0678fa6758f275d2e8d1f20e84cf"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_optional_test_8cpp.xhtml#a488e0678fa6758f275d2e8d1f20e84cf">BOOST_AUTO_TEST_CASE</a> (SimpleIntTests)</td></tr>
<tr class="separator:a488e0678fa6758f275d2e8d1f20e84cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a604781978cf621265fdd074b10250978"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_optional_test_8cpp.xhtml#a604781978cf621265fdd074b10250978">BOOST_AUTO_TEST_CASE</a> (ObjectConstructedInPlaceTests)</td></tr>
<tr class="separator:a604781978cf621265fdd074b10250978"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="aaf3f0594ad35cbde3fd99ab638eeb12c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf3f0594ad35cbde3fd99ab638eeb12c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">SimpleStringTests&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_optional_test_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="_optional_test_8cpp_source.xhtml">OptionalTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00137">OptionalReferenceSwitch&lt; IsReference, T &gt;::reset()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&gt;</a> optionalString;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    BOOST_TEST(static_cast&lt;bool&gt;(optionalString) == <span class="keyword">false</span>);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    BOOST_TEST(optionalString.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>() == <span class="keyword">false</span>);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    BOOST_TEST((optionalString == <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&gt;</a>()));</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    optionalString = std::string(<span class="stringliteral">&quot;Hello World&quot;</span>);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    BOOST_TEST(static_cast&lt;bool&gt;(optionalString) == <span class="keyword">true</span>);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    BOOST_TEST(optionalString.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>() == <span class="keyword">true</span>);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    BOOST_TEST(optionalString.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() == <span class="stringliteral">&quot;Hello World&quot;</span>);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    BOOST_TEST((optionalString == <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&gt;</a>(<span class="stringliteral">&quot;Hello World&quot;</span>)));</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&gt;</a> otherString;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    otherString = optionalString;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    BOOST_TEST(static_cast&lt;bool&gt;(otherString) == <span class="keyword">true</span>);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    BOOST_TEST(otherString.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() == <span class="stringliteral">&quot;Hello World&quot;</span>);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    optionalString.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#ad20897c5c8bd47f5d4005989bead0e55">reset</a>();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    BOOST_TEST(static_cast&lt;bool&gt;(optionalString) == <span class="keyword">false</span>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    BOOST_TEST(optionalString.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>() == <span class="keyword">false</span>);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> std::string stringValue(<span class="stringliteral">&quot;Hello World&quot;</span>);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&gt;</a> optionalString2(stringValue);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    BOOST_TEST(static_cast&lt;bool&gt;(optionalString2) == <span class="keyword">true</span>);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    BOOST_TEST(optionalString2.has_value() == <span class="keyword">true</span>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    BOOST_TEST(optionalString2.value() == <span class="stringliteral">&quot;Hello World&quot;</span>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&gt;</a> optionalString3(std::move(optionalString2));</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    BOOST_TEST(static_cast&lt;bool&gt;(optionalString3) == <span class="keyword">true</span>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    BOOST_TEST(optionalString3.has_value() == <span class="keyword">true</span>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    BOOST_TEST(optionalString3.value() == <span class="stringliteral">&quot;Hello World&quot;</span>);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt; std::string &gt;</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_ad20897c5c8bd47f5d4005989bead0e55"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#ad20897c5c8bd47f5d4005989bead0e55">armnn::OptionalReferenceSwitch::reset</a></div><div class="ttdeci">void reset()</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00137">Optional.hpp:137</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5597b1573d8265e5dbb9b08842ae912b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5597b1573d8265e5dbb9b08842ae912b">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">StringRefTests&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_optional_test_8cpp_source.xhtml#l00063">63</a> of file <a class="el" href="_optional_test_8cpp_source.xhtml">OptionalTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&amp;&gt;</a> optionalStringRef{<a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>()};</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    BOOST_TEST(optionalStringRef.has_value() == <span class="keyword">false</span>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    PassStringRef(optionalStringRef);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    PassStringRefWithDefault();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&amp;&gt;</a> optionalStringRef2 = optionalStringRef;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    std::string helloWorld(<span class="stringliteral">&quot;Hello World&quot;</span>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    std::string&amp; helloWorldRef = helloWorld;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&amp;&gt;</a> optionalHelloRef = helloWorldRef;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    BOOST_TEST(optionalHelloRef.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>() == <span class="keyword">true</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    BOOST_TEST(optionalHelloRef.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() == <span class="stringliteral">&quot;Hello World&quot;</span>);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&amp;&gt;</a> optionalHelloRef2 = helloWorld;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    BOOST_TEST(optionalHelloRef2.has_value() == <span class="keyword">true</span>);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    BOOST_TEST(optionalHelloRef2.value() == <span class="stringliteral">&quot;Hello World&quot;</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&amp;&gt;</a> optionalHelloRef3{helloWorldRef};</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    BOOST_TEST(optionalHelloRef3.has_value() == <span class="keyword">true</span>);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    BOOST_TEST(optionalHelloRef3.value() == <span class="stringliteral">&quot;Hello World&quot;</span>);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&amp;&gt;</a> optionalHelloRef4{helloWorld};</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    BOOST_TEST(optionalHelloRef4.has_value() == <span class="keyword">true</span>);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    BOOST_TEST(optionalHelloRef4.value() == <span class="stringliteral">&quot;Hello World&quot;</span>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// modify through the optional reference</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    optionalHelloRef4.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>().assign(<span class="stringliteral">&quot;Long Other String&quot;</span>);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    BOOST_TEST(helloWorld == <span class="stringliteral">&quot;Long Other String&quot;</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    BOOST_TEST(optionalHelloRef.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() == <span class="stringliteral">&quot;Long Other String&quot;</span>);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    BOOST_TEST(optionalHelloRef2.value() == <span class="stringliteral">&quot;Long Other String&quot;</span>);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    BOOST_TEST(optionalHelloRef3.value() == <span class="stringliteral">&quot;Long Other String&quot;</span>);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a488e0678fa6758f275d2e8d1f20e84cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a488e0678fa6758f275d2e8d1f20e84cf">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">SimpleIntTests&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_optional_test_8cpp_source.xhtml#l00100">100</a> of file <a class="el" href="_optional_test_8cpp_source.xhtml">OptionalTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> intValue = 123;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;int&gt;</a> optionalInt;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    BOOST_TEST(static_cast&lt;bool&gt;(optionalInt) == <span class="keyword">false</span>);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    BOOST_TEST(optionalInt.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>() == <span class="keyword">false</span>);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    BOOST_TEST((optionalInt == <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;int&gt;</a>()));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    optionalInt = intValue;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    BOOST_TEST(static_cast&lt;bool&gt;(optionalInt) == <span class="keyword">true</span>);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    BOOST_TEST(optionalInt.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>() == <span class="keyword">true</span>);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    BOOST_TEST(optionalInt.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() == intValue);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    BOOST_TEST((optionalInt == <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;int&gt;</a>(intValue)));</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;int&gt;</a> otherOptionalInt;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    otherOptionalInt = optionalInt;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    BOOST_TEST(static_cast&lt;bool&gt;(otherOptionalInt) == <span class="keyword">true</span>);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    BOOST_TEST(otherOptionalInt.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() == intValue);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a604781978cf621265fdd074b10250978"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a604781978cf621265fdd074b10250978">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">ObjectConstructedInPlaceTests&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_optional_test_8cpp_source.xhtml#l00121">121</a> of file <a class="el" href="_optional_test_8cpp_source.xhtml">OptionalTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00041">CONSTRUCT_IN_PLACE</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_data_layout_indexed_8cpp_source.xhtml#l00034">armnnUtils::operator==()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">struct </span>SimpleObject</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            SimpleObject(<span class="keyword">const</span> std::string&amp; name, <span class="keywordtype">int</span> value)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                : m_Name(name)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                , m_Value(value)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            {}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="namespacearmnn_utils.xhtml#a49ba5984d8cde4299d8ef15c9e556587">operator ==</a>(<span class="keyword">const</span> SimpleObject&amp; other)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keywordflow">return</span> m_Name  == other.m_Name &amp;&amp;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                       m_Value == other.m_Value;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keyword">private</span>:</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            std::string m_Name;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordtype">int</span>         m_Value;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    };</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::string objectName(<span class="stringliteral">&quot;SimpleObject&quot;</span>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordtype">int</span> objectValue = 1;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    SimpleObject referenceObject(objectName, objectValue);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// Use MakeOptional</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;SimpleObject&gt;</a> optionalObject1 = armnn::MakeOptional&lt;SimpleObject&gt;(objectName, objectValue);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    BOOST_CHECK(static_cast&lt;bool&gt;(optionalObject1) == <span class="keyword">true</span>);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    BOOST_CHECK(optionalObject1.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>() == <span class="keyword">true</span>);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    BOOST_CHECK(optionalObject1.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() == referenceObject);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">// Call in-place constructor directly</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;SimpleObject&gt;</a> optionalObject2(<a class="code" href="_optional_8hpp.xhtml#acbec11f88a308826fa811f370d363a4a">CONSTRUCT_IN_PLACE</a>, objectName, objectValue);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    BOOST_CHECK(static_cast&lt;bool&gt;(optionalObject1) == <span class="keyword">true</span>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    BOOST_CHECK(optionalObject1.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>() == <span class="keyword">true</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    BOOST_CHECK(optionalObject1.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() == referenceObject);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="_optional_8hpp_xhtml_acbec11f88a308826fa811f370d363a4a"><div class="ttname"><a href="_optional_8hpp.xhtml#acbec11f88a308826fa811f370d363a4a">CONSTRUCT_IN_PLACE</a></div><div class="ttdeci">#define CONSTRUCT_IN_PLACE</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00041">Optional.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_a49ba5984d8cde4299d8ef15c9e556587"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a49ba5984d8cde4299d8ef15c9e556587">armnnUtils::operator==</a></div><div class="ttdeci">bool operator==(const armnn::DataLayout &amp;dataLayout, const DataLayoutIndexed &amp;indexed)</div><div class="ttdoc">Equality methods. </div><div class="ttdef"><b>Definition:</b> <a href="_data_layout_indexed_8cpp_source.xhtml#l00034">DataLayoutIndexed.cpp:34</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9d86fd1fbecbedf5bdb69c7e7235fe5f.xhtml">test</a></li><li class="navelem"><a class="el" href="_optional_test_8cpp.xhtml">OptionalTest.cpp</a></li>
    <li class="footer">Generated on Thu Nov 26 2020 11:04:27 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
