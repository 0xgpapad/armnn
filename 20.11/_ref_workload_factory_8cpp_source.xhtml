<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/RefWorkloadFactory.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_ref_workload_factory_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">RefWorkloadFactory.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_ref_workload_factory_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_layer_8hpp.xhtml">Layer.hpp</a>&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_cpu_tensor_handle_8hpp.xhtml">backendsCommon/CpuTensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_mem_copy_workload_8hpp.xhtml">backendsCommon/MemCopyWorkload.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_mem_import_workload_8hpp.xhtml">backendsCommon/MemImportWorkload.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_make_workload_helper_8hpp.xhtml">backendsCommon/MakeWorkloadHelper.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ref_fill_workload_8hpp.xhtml">reference/workloads/RefFillWorkload.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_ref_workload_factory_8hpp.xhtml">RefWorkloadFactory.hpp</a>&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_ref_backend_id_8hpp.xhtml">RefBackendId.hpp</a>&quot;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_ref_workloads_8hpp.xhtml">workloads/RefWorkloads.hpp</a>&quot;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_ref_tensor_handle_8hpp.xhtml">RefTensorHandle.hpp</a>&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> BackendId s_Id{<a class="code" href="namespacearmnn.xhtml#ae7d50846b2769f81521af24d063bc093">RefBackendId</a>()};</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;}</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> F32Workload, <span class="keyword">typename</span> U8Workload, <span class="keyword">typename</span> QueueDescriptorType&gt;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;std::unique_ptr&lt;IWorkload&gt; RefWorkloadFactory::MakeWorkload(<span class="keyword">const</span> QueueDescriptorType&amp; descriptor,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                                                            <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NullWorkload, F32Workload, U8Workload, NullWorkload, NullWorkload, NullWorkload&gt;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;           (descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;}</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">template</span> &lt;DataType ArmnnType&gt;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a6a2e058d934e9d784eab57ee7121d69c">   33</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn.xhtml#a6a2e058d934e9d784eab57ee7121d69c">IsDataType</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keyword">auto</span> checkType = [](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo) {<span class="keywordflow">return</span> tensorInfo.GetDataType() == ArmnnType;};</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">auto</span> it = std::find_if(std::begin(info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>), std::end(info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>), checkType);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">if</span> (it != std::end(info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>))</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    it = std::find_if(std::begin(info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>), std::end(info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>), checkType);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">if</span> (it != std::end(info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>))</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a87b99791ccf8793961db67ea19eb6fa4">   49</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn.xhtml#a87b99791ccf8793961db67ea19eb6fa4">IsSigned32</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">return</span> IsDataType&lt;DataType::Signed32&gt;(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a3d504240723912bf9c76ff3afeaa25c5">   54</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn.xhtml#a3d504240723912bf9c76ff3afeaa25c5">IsBFloat16</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">return</span> IsDataType&lt;DataType::BFloat16&gt;(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#ad78d822be14a8d585cd038cf0e73cd7e">   59</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn.xhtml#ad78d822be14a8d585cd038cf0e73cd7e">IsFloat16</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> IsDataType&lt;DataType::Float16&gt;(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#abcd0d843d5736b78740ae73249b6b977">   64</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn.xhtml#abcd0d843d5736b78740ae73249b6b977">IsQSymmS16</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">return</span> IsDataType&lt;DataType::QSymmS16&gt;(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a09a7cd515c3b495e61b2a5116bf6a335">   69</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn.xhtml#a09a7cd515c3b495e61b2a5116bf6a335">IsQSymmS8</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">return</span> IsDataType&lt;DataType::QSymmS8&gt;(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a47d136a5519331dee24f5e01b206ae7c">   74</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn.xhtml#a47d136a5519331dee24f5e01b206ae7c">IsQAsymmS8</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">return</span> IsDataType&lt;DataType::QAsymmS8&gt;(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a37c36bbf668cd8a0d7dcd731c9b591d7">   79</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn.xhtml#a37c36bbf668cd8a0d7dcd731c9b591d7">IsQAsymmU8</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> IsDataType&lt;DataType::QAsymmU8&gt;(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a5be2bdecd6346eba07c6807fd15a5d74">   84</a></span>&#160;<a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a26b27b4f789cfda06b8843e5dea361b4">RefWorkloadFactory::RefWorkloadFactory</a>(<span class="keyword">const</span> std::shared_ptr&lt;RefMemoryManager&gt;&amp; memoryManager)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    : m_MemoryManager(memoryManager)</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;{</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a26b27b4f789cfda06b8843e5dea361b4">   89</a></span>&#160;<a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a26b27b4f789cfda06b8843e5dea361b4">RefWorkloadFactory::RefWorkloadFactory</a>()</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    : m_MemoryManager(new <a class="code" href="classarmnn_1_1_ref_memory_manager.xhtml">RefMemoryManager</a>())</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">   94</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">RefWorkloadFactory::GetBackendId</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> s_Id;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a9992ea7c353e8597fbd8ae426f4612ae">   99</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a9992ea7c353e8597fbd8ae426f4612ae">RefWorkloadFactory::IsLayerSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>&amp; layer,</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;DataType&gt;</a> dataType,</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                          std::string&amp; outReasonIfUnsupported)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IWorkloadFactory::IsLayerSupported</a>(s_Id, layer, dataType, outReasonIfUnsupported);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#aeaff50773427132e1066a7de56a53db1">  106</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a9992ea7c353e8597fbd8ae426f4612ae">RefWorkloadFactory::IsLayerSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>&amp; layer,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;DataType&gt;</a> dataType,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                          std::string&amp; outReasonIfUnsupported,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a>&amp; modelOptions)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IWorkloadFactory::IsLayerSupported</a>(s_Id, layer, dataType, outReasonIfUnsupported, modelOptions);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">  114</a></span>&#160;std::unique_ptr&lt;ITensorHandle&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">RefWorkloadFactory::CreateTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                                                      <span class="keyword">const</span> <span class="keywordtype">bool</span> isMemoryManaged)<span class="keyword"> const</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// For Ref it is okay to make the TensorHandle memory managed as it can also store a pointer</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// to unmanaged memory. This also ensures memory alignment.</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(isMemoryManaged);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefTensorHandle&gt;(tensorInfo, m_MemoryManager);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">  123</a></span>&#160;std::unique_ptr&lt;ITensorHandle&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">RefWorkloadFactory::CreateTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                                                      <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                                                      <span class="keyword">const</span> <span class="keywordtype">bool</span> isMemoryManaged)<span class="keyword"> const</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// For Ref it is okay to make the TensorHandle memory managed as it can also store a pointer</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// to unmanaged memory. This also ensures memory alignment.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(isMemoryManaged, dataLayout);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefTensorHandle&gt;(tensorInfo, m_MemoryManager);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a902422ffa1b0076458972c3be051e44d">  133</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a902422ffa1b0076458972c3be051e44d">RefWorkloadFactory::CreateAbs</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_abs_queue_descriptor.xhtml">AbsQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a> elementwiseUnaryDescriptor;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    elementwiseUnaryDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml#afe768be66897eb3d73284424e3239b23">m_Operation</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">CreateElementwiseUnary</a>(elementwiseUnaryDescriptor, info);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#af5f7b0f6273c838b6b7d7de8447524f9">  143</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#af5f7b0f6273c838b6b7d7de8447524f9">RefWorkloadFactory::CreateActivation</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_queue_descriptor.xhtml">ActivationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefActivationWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a9da9a34fb99114f9d1fb705171a9a6ee">  149</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a9da9a34fb99114f9d1fb705171a9a6ee">RefWorkloadFactory::CreateAddition</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">if</span> (info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>[0].GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefAdditionWorkload&lt;int32_t&gt;&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefAdditionWorkload&lt;float&gt;&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a3fffcec3624e83671b4623e22ca623e5">  162</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a3fffcec3624e83671b4623e22ca623e5">RefWorkloadFactory::CreateArgMinMax</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_arg_min_max_queue_descriptor.xhtml">ArgMinMaxQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefArgMinMaxWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a9cce78b879d26312fd515270afc1e66a">  168</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a9cce78b879d26312fd515270afc1e66a">RefWorkloadFactory::CreateBatchNormalization</a>(</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">BatchNormalizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefBatchNormalizationWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a455fcb54444e8286dbb3714310e4998b">  175</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a455fcb54444e8286dbb3714310e4998b">RefWorkloadFactory::CreateBatchToSpaceNd</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_to_space_nd_queue_descriptor.xhtml">BatchToSpaceNdQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefBatchToSpaceNdWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">  181</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">RefWorkloadFactory::CreateComparison</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_comparison_queue_descriptor.xhtml">ComparisonQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefComparisonWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a1f89ceb71ffc990170fe834cddb697fa">  187</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a1f89ceb71ffc990170fe834cddb697fa">RefWorkloadFactory::CreateConcat</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_concat_queue_descriptor.xhtml">ConcatQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefConcatWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#aa6ef3324f715ccf62d235aa54118d174">  193</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#aa6ef3324f715ccf62d235aa54118d174">RefWorkloadFactory::CreateConstant</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml">ConstantQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefConstantWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;}</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#aade1930aedd59e037337410381f7011d">  199</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#aade1930aedd59e037337410381f7011d">RefWorkloadFactory::CreateConvertBf16ToFp32</a>(</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor.xhtml">ConvertBf16ToFp32QueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefConvertBf16ToFp32Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#aefe6a68cb6d7ba517d7988195680c831">  206</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#aefe6a68cb6d7ba517d7988195680c831">RefWorkloadFactory::CreateConvertFp16ToFp32</a>(</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">ConvertFp16ToFp32QueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefConvertFp16ToFp32Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a4e70ecb5f981d7c07971bd0740f53c05">  213</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a4e70ecb5f981d7c07971bd0740f53c05">RefWorkloadFactory::CreateConvertFp32ToBf16</a>(</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor.xhtml">ConvertFp32ToBf16QueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefConvertFp32ToBf16Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;}</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a33b291201b6716e295afb17c1eb0864e">  220</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a33b291201b6716e295afb17c1eb0864e">RefWorkloadFactory::CreateConvertFp32ToFp16</a>(</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">ConvertFp32ToFp16QueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefConvertFp32ToFp16Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;}</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a661b8b943d4a28ef6c8fd19bf223c61e">  227</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a661b8b943d4a28ef6c8fd19bf223c61e">RefWorkloadFactory::CreateConvolution2d</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefConvolution2dWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#aca1333805c6665111154f10cc72c8234">  233</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#aca1333805c6665111154f10cc72c8234">RefWorkloadFactory::CreateDebug</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_debug_queue_descriptor.xhtml">DebugQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a3d504240723912bf9c76ff3afeaa25c5">IsBFloat16</a>(info))</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefDebugBFloat16Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#ad78d822be14a8d585cd038cf0e73cd7e">IsFloat16</a>(info))</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefDebugFloat16Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#abcd0d843d5736b78740ae73249b6b977">IsQSymmS16</a>(info))</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefDebugQSymmS16Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a09a7cd515c3b495e61b2a5116bf6a335">IsQSymmS8</a>(info))</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefDebugQSymmS8Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a37c36bbf668cd8a0d7dcd731c9b591d7">IsQAsymmU8</a>(info))</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefDebugQAsymmU8Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a47d136a5519331dee24f5e01b206ae7c">IsQAsymmS8</a>(info))</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefDebugQAsymmS8Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a87b99791ccf8793961db67ea19eb6fa4">IsSigned32</a>(info))</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefDebugSigned32Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    }</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;RefDebugFloat32Workload, RefDebugQAsymmU8Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#af77fb45622aedb3f2ee36b412fea8735">  268</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#af77fb45622aedb3f2ee36b412fea8735">RefWorkloadFactory::CreateDepthToSpace</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depth_to_space_queue_descriptor.xhtml">DepthToSpaceQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefDepthToSpaceWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a48ebe514c1ca3e41edccdd7682bf38ca">  274</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a48ebe514c1ca3e41edccdd7682bf38ca">RefWorkloadFactory::CreateDepthwiseConvolution2d</a>(</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">DepthwiseConvolution2dQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefDepthwiseConvolution2dWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#ab345edf481dd64a3ced4c0808d4ee844">  281</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#ab345edf481dd64a3ced4c0808d4ee844">RefWorkloadFactory::CreateDequantize</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_dequantize_queue_descriptor.xhtml">DequantizeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefDequantizeWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a3a2d9b8e1156605172ada1472e9460cd">  287</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a3a2d9b8e1156605172ada1472e9460cd">RefWorkloadFactory::CreateDetectionPostProcess</a>(</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">DetectionPostProcessQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefDetectionPostProcessWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a11cb76f59b65109b8557d43b3cb1bc06">  294</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a11cb76f59b65109b8557d43b3cb1bc06">RefWorkloadFactory::CreateDivision</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_division_queue_descriptor.xhtml">DivisionQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">if</span> (info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>[0].GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefDivisionWorkload&lt;int32_t&gt;&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefDivisionWorkload&lt;float&gt;&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;}</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">  307</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">RefWorkloadFactory::CreateElementwiseUnary</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml#afe768be66897eb3d73284424e3239b23">m_Operation</a> == <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">UnaryOperation::LogicalNot</a>)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    {</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefLogicalUnaryWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    }</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefElementwiseUnaryWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;}</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#aa31f52c6b8c2092a41acb4890b910d2b">  317</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#aa31f52c6b8c2092a41acb4890b910d2b">RefWorkloadFactory::CreateEqual</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_equal_queue_descriptor.xhtml">EqualQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <a class="code" href="structarmnn_1_1_comparison_queue_descriptor.xhtml">ComparisonQueueDescriptor</a> comparisonDescriptor;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    comparisonDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml#a865dc4f43cb0ff01a1dcf78036912fd1">m_Operation</a> = <a class="code" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a>;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">CreateComparison</a>(comparisonDescriptor, info);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;}</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#ac5797618555c747b254667e328f8d5c3">  327</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#ac5797618555c747b254667e328f8d5c3">RefWorkloadFactory::CreateFakeQuantization</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fake_quantization_queue_descriptor.xhtml">FakeQuantizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                                                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;RefFakeQuantizationFloat32Workload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;}</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a2b793964f2c501b9ea343ffe310fc89e">  333</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a2b793964f2c501b9ea343ffe310fc89e">RefWorkloadFactory::CreateFill</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fill_queue_descriptor.xhtml">FillQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefFillWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;}</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#aac4c7cd17cf3dc3a23fd4a21933c60cb">  339</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#aac4c7cd17cf3dc3a23fd4a21933c60cb">RefWorkloadFactory::CreateFloor</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_floor_queue_descriptor.xhtml">FloorQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn.xhtml#ad44c007f21af2d0375e3ef9400a1b275">IsQuantizedType</a>(info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>[0].GetDataType()))</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    {</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    }</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    {</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefFloorWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    }</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;}</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a1fdd5dfd04433d84de96c71664cce5a9">  352</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a1fdd5dfd04433d84de96c71664cce5a9">RefWorkloadFactory::CreateFullyConnected</a>(</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">FullyConnectedQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefFullyConnectedWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;}</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a674b6d6de1db47959ad36831976ca3aa">  359</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a674b6d6de1db47959ad36831976ca3aa">RefWorkloadFactory::CreateGather</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_gather_queue_descriptor.xhtml">GatherQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefGatherWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;}</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a0b7d11f98c9c17dd23a94666fe35f226">  365</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a0b7d11f98c9c17dd23a94666fe35f226">RefWorkloadFactory::CreateGreater</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_greater_queue_descriptor.xhtml">GreaterQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <a class="code" href="structarmnn_1_1_comparison_queue_descriptor.xhtml">ComparisonQueueDescriptor</a> comparisonDescriptor;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    comparisonDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml#a865dc4f43cb0ff01a1dcf78036912fd1">m_Operation</a> = <a class="code" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">CreateComparison</a>(comparisonDescriptor, info);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">  375</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">RefWorkloadFactory::CreateInput</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">InputQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keywordflow">if</span> (info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>.empty() )</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    {</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;RefWorkloadFactory::CreateInput: Input cannot be zero length&quot;</span>);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    }</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordflow">if</span> (info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>.empty())</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    {</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;RefWorkloadFactory::CreateInput: Output cannot be zero length&quot;</span>);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    }</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordflow">if</span> (info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>[0].GetNumBytes() != info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>[0].GetNumBytes())</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    {</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;RefWorkloadFactory::CreateInput: data input and output differ in byte count.&quot;</span>);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    }</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;CopyMemGenericWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;}</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a5c2f4f703e07407e70c30cc770d02d6b">  395</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a5c2f4f703e07407e70c30cc770d02d6b">RefWorkloadFactory::CreateInstanceNormalization</a>(</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_instance_normalization_queue_descriptor.xhtml">InstanceNormalizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefInstanceNormalizationWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;}</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a1c511b4b70bc0b6cccbef2285ba292bc">  402</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a1c511b4b70bc0b6cccbef2285ba292bc">RefWorkloadFactory::CreateL2Normalization</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">L2NormalizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefL2NormalizationWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;}</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00408"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a6d9da6f30bce6aa09040e7e37485a3dc">  408</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a6d9da6f30bce6aa09040e7e37485a3dc">RefWorkloadFactory::CreateLogicalBinary</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_logical_binary_queue_descriptor.xhtml">LogicalBinaryQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefLogicalBinaryWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;}</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a02cbf5ef59219cec2ab9a5cfe79d04ec">  414</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a02cbf5ef59219cec2ab9a5cfe79d04ec">RefWorkloadFactory::CreateLogicalUnary</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefLogicalUnaryWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;}</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a95c212cdbcf2af9a845f19467c2f2f2e">  421</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a95c212cdbcf2af9a845f19467c2f2f2e">RefWorkloadFactory::CreateLogSoftmax</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">LogSoftmaxQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefLogSoftmaxWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;}</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a0dce100ea0fc5c44798736a4d879bd4d">  427</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a0dce100ea0fc5c44798736a4d879bd4d">RefWorkloadFactory::CreateLstm</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefLstmWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;}</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#ae2c6c12059f9cde37ff6bb8f682e9ceb">  433</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#ae2c6c12059f9cde37ff6bb8f682e9ceb">RefWorkloadFactory::CreateMaximum</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_maximum_queue_descriptor.xhtml">MaximumQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordflow">if</span> (info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>[0].GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>)</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    {</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefMaximumWorkload&lt;int32_t&gt;&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    }</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    {</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefMaximumWorkload&lt;float&gt;&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    }</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;}</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#aba5032787777bf0074ce70e2c2423d49">  446</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#aba5032787777bf0074ce70e2c2423d49">RefWorkloadFactory::CreateMean</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mean_queue_descriptor.xhtml">MeanQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keywordflow">return</span>  std::make_unique&lt;RefMeanWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;}</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a7cbe2f3dee6fad6a92a384455676fa63">  452</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a7cbe2f3dee6fad6a92a384455676fa63">RefWorkloadFactory::CreateMemCopy</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">MemCopyQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>.empty())</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    {</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;RefWorkloadFactory: CreateMemCopy() expected an input tensor.&quot;</span>);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    }</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;CopyMemGenericWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a44d5ee8d1c0bd414bf1dfb60d94a62d8">  462</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a44d5ee8d1c0bd414bf1dfb60d94a62d8">RefWorkloadFactory::CreateMemImport</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_import_queue_descriptor.xhtml">MemImportQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>.empty())</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    {</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;RefWorkloadFactory: CreateMemImport() expected an input tensor.&quot;</span>);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    }</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ImportMemGenericWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;}</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#ad4b8b34cc736f9d7778c6a2ab4fba25e">  472</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#ad4b8b34cc736f9d7778c6a2ab4fba25e">RefWorkloadFactory::CreateMerger</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_concat_queue_descriptor.xhtml">MergerQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a1f89ceb71ffc990170fe834cddb697fa">CreateConcat</a>(descriptor, info);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;}</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a39927b6e1faae50d9f804b435430bbf2">  478</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a39927b6e1faae50d9f804b435430bbf2">RefWorkloadFactory::CreateMinimum</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_minimum_queue_descriptor.xhtml">MinimumQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="keywordflow">if</span> (info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>[0].GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>)</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    {</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefMinimumWorkload&lt;int32_t&gt;&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    }</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    {</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefMinimumWorkload&lt;float&gt;&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    }</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;}</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a247e81465a607359f63756d13c417e70">  491</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a247e81465a607359f63756d13c417e70">RefWorkloadFactory::CreateMultiplication</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keywordflow">if</span> (info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>[0].GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>)</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    {</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefMultiplicationWorkload&lt;int32_t&gt;&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    }</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    {</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefMultiplicationWorkload&lt;float&gt;&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    }</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;}</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#aca46fe4cdc107d912d822a7618d4d2db">  504</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#aca46fe4cdc107d912d822a7618d4d2db">RefWorkloadFactory::CreateNormalization</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_normalization_queue_descriptor.xhtml">NormalizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefNormalizationWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;}</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">  510</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">RefWorkloadFactory::CreateOutput</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">OutputQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordflow">if</span> (info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>.empty() )</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    {</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;RefWorkloadFactory::CreateOutput: Input cannot be zero length&quot;</span>);</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    }</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="keywordflow">if</span> (info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>.empty())</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    {</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;RefWorkloadFactory::CreateOutput: Output cannot be zero length&quot;</span>);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    }</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keywordflow">if</span> (info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>[0].GetNumBytes() != info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>[0].GetNumBytes())</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    {</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;RefWorkloadFactory::CreateOutput: data input and output differ in byte count.&quot;</span>);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    }</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;CopyMemGenericWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;}</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a8fb2b01fe17e49e997fe59d86e4d5c9a">  529</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a8fb2b01fe17e49e997fe59d86e4d5c9a">RefWorkloadFactory::CreatePad</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pad_queue_descriptor.xhtml">PadQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefPadWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;}</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a7b6ac4b2de1550174ad661fa76ec3d2d">  535</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a7b6ac4b2de1550174ad661fa76ec3d2d">RefWorkloadFactory::CreatePermute</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_permute_queue_descriptor.xhtml">PermuteQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#abcd0d843d5736b78740ae73249b6b977">IsQSymmS16</a>(info))</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    {</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefPermuteQSymm16Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    }</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a3d504240723912bf9c76ff3afeaa25c5">IsBFloat16</a>(info))</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    {</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefPermuteBFloat16Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    }</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a47d136a5519331dee24f5e01b206ae7c">IsQAsymmS8</a>(info))</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    {</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefPermuteQAsymmS8Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    }</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keywordflow">return</span> MakeWorkloadHelper&lt;<a class="code" href="namespacearmnn.xhtml#ad1c0fb6bfa580b04574ab56971b6cbc6">RefPermuteFloat16Workload</a>, <a class="code" href="namespacearmnn.xhtml#a54c3f7c7b9909e828a084f68dc78a031">RefPermuteFloat32Workload</a>, <a class="code" href="namespacearmnn.xhtml#a50ffe5068ecb2fbf7f73b30ef0d753f8">RefPermuteQAsymm8Workload</a>,</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <a class="code" href="classarmnn_1_1_null_workload.xhtml">NullWorkload</a>, NullWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;}</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#ae22c3b8013c1ee7a5459016c0595d444">  554</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#ae22c3b8013c1ee7a5459016c0595d444">RefWorkloadFactory::CreatePooling2d</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">Pooling2dQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefPooling2dWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;}</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div><div class="line"><a name="l00560"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a3f21c47a41cbbcfe7d74becd76766c80">  560</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a3f21c47a41cbbcfe7d74becd76766c80">RefWorkloadFactory::CreatePreCompiled</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pre_compiled_queue_descriptor.xhtml">PreCompiledQueueDescriptor</a>&amp; <span class="comment">/*descriptor*/</span>,</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <span class="comment">/*info*/</span>)<span class="keyword"> const</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;}</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;</div><div class="line"><a name="l00566"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#ac4739f640f68405d2e5a4e4b716c3c59">  566</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#ac4739f640f68405d2e5a4e4b716c3c59">RefWorkloadFactory::CreatePrelu</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_prelu_queue_descriptor.xhtml">PreluQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefPreluWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;}</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;</div><div class="line"><a name="l00572"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a2edd58192b89ac27cf4be7d7ea6252d3">  572</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a2edd58192b89ac27cf4be7d7ea6252d3">RefWorkloadFactory::CreateQLstm</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">QLstmQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefQLstmWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;}</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div><div class="line"><a name="l00578"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a1782959d8ba043acbc72d6a06c00a7f4">  578</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a1782959d8ba043acbc72d6a06c00a7f4">RefWorkloadFactory::CreateQuantize</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_quantize_queue_descriptor.xhtml">QuantizeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefQuantizeWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;}</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div><div class="line"><a name="l00584"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#ac732fb2a7a5cc332339aa8686dd7e928">  584</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#ac732fb2a7a5cc332339aa8686dd7e928">RefWorkloadFactory::CreateRank</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_rank_queue_descriptor.xhtml">RankQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefRankWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;}</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a85d2e898648c795f462a15f5c03a67ac">  590</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a85d2e898648c795f462a15f5c03a67ac">RefWorkloadFactory::CreateReshape</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reshape_queue_descriptor.xhtml">ReshapeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefReshapeWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;}</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">  596</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">RefWorkloadFactory::CreateResize</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_queue_descriptor.xhtml">ResizeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefResizeWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;}</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#ae0895b3c5782c6094ce839e07cc17d58">  602</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#ae0895b3c5782c6094ce839e07cc17d58">RefWorkloadFactory::CreateResizeBilinear</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_bilinear_queue_descriptor.xhtml">ResizeBilinearQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <a class="code" href="structarmnn_1_1_resize_queue_descriptor.xhtml">ResizeQueueDescriptor</a> resizeDescriptor;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    resizeDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">m_Method</a>       = <a class="code" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">ResizeMethod::Bilinear</a>;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    resizeDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>   = descriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    resizeDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">m_TargetWidth</a>  = descriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">m_TargetWidth</a>;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    resizeDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">m_TargetHeight</a> = descriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">m_TargetHeight</a>;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">CreateResize</a>(resizeDescriptor, info);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;}</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#afddaf1bce21f092a34d877cffac411a3">  614</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#afddaf1bce21f092a34d877cffac411a3">RefWorkloadFactory::CreateRsqrt</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml">RsqrtQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <a class="code" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a> elementwiseUnaryDescriptor;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    elementwiseUnaryDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml#afe768be66897eb3d73284424e3239b23">m_Operation</a> = <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">CreateElementwiseUnary</a>(elementwiseUnaryDescriptor, info);</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;}</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div><div class="line"><a name="l00624"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#abda2c9b7c5fe4ca092d2224ba9679a06">  624</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#abda2c9b7c5fe4ca092d2224ba9679a06">RefWorkloadFactory::CreateSlice</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_slice_queue_descriptor.xhtml">SliceQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefSliceWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;}</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00630"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a457c416483289cc7c8a8511a67d95816">  630</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a457c416483289cc7c8a8511a67d95816">RefWorkloadFactory::CreateSoftmax</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">SoftmaxQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefSoftmaxWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;}</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a1d1feb2b5c6a4c6701a3dee01e65bee4">  636</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a1d1feb2b5c6a4c6701a3dee01e65bee4">RefWorkloadFactory::CreateSpaceToBatchNd</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_batch_nd_queue_descriptor.xhtml">SpaceToBatchNdQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefSpaceToBatchNdWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;}</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a2318d942f9615dff92fe75688bdd8c48">  642</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a2318d942f9615dff92fe75688bdd8c48">RefWorkloadFactory::CreateSpaceToDepth</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">SpaceToDepthQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefSpaceToDepthWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;}</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#aa98def0f9b9ff714a013f8083bbadf82">  648</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#aa98def0f9b9ff714a013f8083bbadf82">RefWorkloadFactory::CreateSplitter</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_splitter_queue_descriptor.xhtml">SplitterQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefSplitterWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;}</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;</div><div class="line"><a name="l00654"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a4d5371f67eabb04a38c69e97e67f1d35">  654</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a4d5371f67eabb04a38c69e97e67f1d35">RefWorkloadFactory::CreateStack</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stack_queue_descriptor.xhtml">StackQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefStackWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;}</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00660"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a5c46866e2a0d83e350ff70c12d9613bf">  660</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a5c46866e2a0d83e350ff70c12d9613bf">RefWorkloadFactory::CreateStridedSlice</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_strided_slice_queue_descriptor.xhtml">StridedSliceQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefStridedSliceWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;}</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a26563dd3de8f08475d30c8c8389f1ddc">  666</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a26563dd3de8f08475d30c8c8389f1ddc">RefWorkloadFactory::CreateSubtraction</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keywordflow">if</span> (info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>[0].GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>)</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    {</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefSubtractionWorkload&lt;int32_t&gt;&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    }</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    {</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefSubtractionWorkload&lt;float&gt;&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    }</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;}</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div><div class="line"><a name="l00679"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#ac302ae63e103b22d6ce4fef0f5513899">  679</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#ac302ae63e103b22d6ce4fef0f5513899">RefWorkloadFactory::CreateTranspose</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_queue_descriptor.xhtml">TransposeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#abcd0d843d5736b78740ae73249b6b977">IsQSymmS16</a>(info))</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    {</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefTransposeQSymm16Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    }</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a3d504240723912bf9c76ff3afeaa25c5">IsBFloat16</a>(info))</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    {</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefTransposeBFloat16Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    }</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a47d136a5519331dee24f5e01b206ae7c">IsQAsymmS8</a>(info))</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    {</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;RefTransposeQAsymmS8Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    }</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keywordflow">return</span> MakeWorkloadHelper&lt;<a class="code" href="namespacearmnn.xhtml#aefcfe4efab61267262d1e02cb8af739d">RefTransposeFloat16Workload</a>, <a class="code" href="namespacearmnn.xhtml#ad67165b4639bd5e50e5bc4538d226b35">RefTransposeFloat32Workload</a>, <a class="code" href="namespacearmnn.xhtml#a1d13693cba12d3e406454b852527fb37">RefTransposeQAsymm8Workload</a>,</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            <a class="code" href="classarmnn_1_1_null_workload.xhtml">NullWorkload</a>, NullWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;}</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div><div class="line"><a name="l00698"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_workload_factory.xhtml#a29e02d375261a32c39635d6833a49333">  698</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_ref_workload_factory.xhtml#a29e02d375261a32c39635d6833a49333">RefWorkloadFactory::CreateTransposeConvolution2d</a>(</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">TransposeConvolution2dQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;RefTransposeConvolution2dWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;}</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="structarmnn_1_1_multiplication_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">armnn::MultiplicationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00246">WorkloadData.hpp:246</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a7cbe2f3dee6fad6a92a384455676fa63"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a7cbe2f3dee6fad6a92a384455676fa63">armnn::RefWorkloadFactory::CreateMemCopy</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMemCopy(const MemCopyQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00452">RefWorkloadFactory.cpp:452</a></div></div>
<div class="ttc" id="_mem_copy_workload_8hpp_xhtml"><div class="ttname"><a href="_mem_copy_workload_8hpp.xhtml">MemCopyWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_afddaf1bce21f092a34d877cffac411a3"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#afddaf1bce21f092a34d877cffac411a3">armnn::RefWorkloadFactory::CreateRsqrt</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateRsqrt(const RsqrtQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00614">RefWorkloadFactory.cpp:614</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_queue_descriptor.xhtml">armnn::InstanceNormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00340">WorkloadData.hpp:340</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_aca46fe4cdc107d912d822a7618d4d2db"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#aca46fe4cdc107d912d822a7618d4d2db">armnn::RefWorkloadFactory::CreateNormalization</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateNormalization(const NormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00504">RefWorkloadFactory.cpp:504</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a3fffcec3624e83671b4623e22ca623e5"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a3fffcec3624e83671b4623e22ca623e5">armnn::RefWorkloadFactory::CreateArgMinMax</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateArgMinMax(const ArgMinMaxQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00162">RefWorkloadFactory.cpp:162</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_permute_queue_descriptor.xhtml">armnn::PermuteQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00180">WorkloadData.hpp:180</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_memory_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1_ref_memory_manager.xhtml">armnn::RefMemoryManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_ref_memory_manager_8hpp_source.xhtml#l00016">RefMemoryManager.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a85d2e898648c795f462a15f5c03a67ac"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a85d2e898648c795f462a15f5c03a67ac">armnn::RefWorkloadFactory::CreateReshape</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateReshape(const ReshapeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00590">RefWorkloadFactory.cpp:590</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a"><div class="ttname"><a href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::ComparisonOperation::Greater</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a3f15b1b391dd86de376ce541eadca3fa"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">armnn::RefWorkloadFactory::CreateResize</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateResize(const ResizeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00596">RefWorkloadFactory.cpp:596</a></div></div>
<div class="ttc" id="_ref_workload_factory_8hpp_xhtml"><div class="ttname"><a href="_ref_workload_factory_8hpp.xhtml">RefWorkloadFactory.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_ac5797618555c747b254667e328f8d5c3"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#ac5797618555c747b254667e328f8d5c3">armnn::RefWorkloadFactory::CreateFakeQuantization</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateFakeQuantization(const FakeQuantizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00327">RefWorkloadFactory.cpp:327</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a661b8b943d4a28ef6c8fd19bf223c61e"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a661b8b943d4a28ef6c8fd19bf223c61e">armnn::RefWorkloadFactory::CreateConvolution2d</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvolution2d(const Convolution2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00227">RefWorkloadFactory.cpp:227</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_descriptor_xhtml_afe768be66897eb3d73284424e3239b23"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_descriptor.xhtml#afe768be66897eb3d73284424e3239b23">armnn::ElementwiseUnaryDescriptor::m_Operation</a></div><div class="ttdeci">UnaryOperation m_Operation</div><div class="ttdoc">Specifies the elementwiseUnary operation to execute. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00109">Descriptors.hpp:109</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantize_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_quantize_queue_descriptor.xhtml">armnn::QuantizeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00281">WorkloadData.hpp:281</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_aa6ef3324f715ccf62d235aa54118d174"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#aa6ef3324f715ccf62d235aa54118d174">armnn::RefWorkloadFactory::CreateConstant</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConstant(const ConstantQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00193">RefWorkloadFactory.cpp:193</a></div></div>
<div class="ttc" id="_ref_backend_id_8hpp_xhtml"><div class="ttname"><a href="_ref_backend_id_8hpp.xhtml">RefBackendId.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_aa31f52c6b8c2092a41acb4890b910d2b"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#aa31f52c6b8c2092a41acb4890b910d2b">armnn::RefWorkloadFactory::CreateEqual</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateEqual(const EqualQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00317">RefWorkloadFactory.cpp:317</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a7b06edab4eef1822445e4201a1262635"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">armnn::RefWorkloadFactory::CreateInput</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateInput(const InputQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00375">RefWorkloadFactory.cpp:375</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_ae2c6c12059f9cde37ff6bb8f682e9ceb"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#ae2c6c12059f9cde37ff6bb8f682e9ceb">armnn::RefWorkloadFactory::CreateMaximum</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMaximum(const MaximumQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00433">RefWorkloadFactory.cpp:433</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00050">Types.hpp:50</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a674b6d6de1db47959ad36831976ca3aa"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a674b6d6de1db47959ad36831976ca3aa">armnn::RefWorkloadFactory::CreateGather</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateGather(const GatherQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00359">RefWorkloadFactory.cpp:359</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a1782959d8ba043acbc72d6a06c00a7f4"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a1782959d8ba043acbc72d6a06c00a7f4">armnn::RefWorkloadFactory::CreateQuantize</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateQuantize(const QuantizeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00578">RefWorkloadFactory.cpp:578</a></div></div>
<div class="ttc" id="structarmnn_1_1_maximum_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_maximum_queue_descriptor.xhtml">armnn::MaximumQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00264">WorkloadData.hpp:264</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">armnn::DetectionPostProcessQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00221">WorkloadData.hpp:221</a></div></div>
<div class="ttc" id="structarmnn_1_1_gather_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_gather_queue_descriptor.xhtml">armnn::GatherQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00497">WorkloadData.hpp:497</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5"><div class="ttname"><a href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">armnn::ComparisonOperation::Equal</a></div></div>
<div class="ttc" id="structarmnn_1_1_splitter_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_splitter_queue_descriptor.xhtml">armnn::SplitterQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00101">WorkloadData.hpp:101</a></div></div>
<div class="ttc" id="structarmnn_1_1_constant_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_constant_queue_descriptor.xhtml">armnn::ConstantQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00355">WorkloadData.hpp:355</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad44c007f21af2d0375e3ef9400a1b275"><div class="ttname"><a href="namespacearmnn.xhtml#ad44c007f21af2d0375e3ef9400a1b275">armnn::IsQuantizedType</a></div><div class="ttdeci">constexpr bool IsQuantizedType()</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00249">TypesUtils.hpp:249</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a29e02d375261a32c39635d6833a49333"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a29e02d375261a32c39635d6833a49333">armnn::RefWorkloadFactory::CreateTransposeConvolution2d</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateTransposeConvolution2d(const TransposeConvolution2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00698">RefWorkloadFactory.cpp:698</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a5c46866e2a0d83e350ff70c12d9613bf"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a5c46866e2a0d83e350ff70c12d9613bf">armnn::RefWorkloadFactory::CreateStridedSlice</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateStridedSlice(const StridedSliceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00660">RefWorkloadFactory.cpp:660</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a4e70ecb5f981d7c07971bd0740f53c05"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a4e70ecb5f981d7c07971bd0740f53c05">armnn::RefWorkloadFactory::CreateConvertFp32ToBf16</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvertFp32ToBf16(const ConvertFp32ToBf16QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00213">RefWorkloadFactory.cpp:213</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a457c416483289cc7c8a8511a67d95816"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a457c416483289cc7c8a8511a67d95816">armnn::RefWorkloadFactory::CreateSoftmax</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSoftmax(const SoftmaxQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00630">RefWorkloadFactory.cpp:630</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_bilinear_descriptor_xhtml_adcf5037208faac36c0788239a073f75c"><div class="ttname"><a href="structarmnn_1_1_resize_bilinear_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">armnn::ResizeBilinearDescriptor::m_TargetWidth</a></div><div class="ttdeci">uint32_t m_TargetWidth</div><div class="ttdoc">Target width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00768">Descriptors.hpp:768</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_bilinear_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_resize_bilinear_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::ResizeBilinearDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00772">Descriptors.hpp:772</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae7d50846b2769f81521af24d063bc093"><div class="ttname"><a href="namespacearmnn.xhtml#ae7d50846b2769f81521af24d063bc093">armnn::RefBackendId</a></div><div class="ttdeci">constexpr const char * RefBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_ref_backend_id_8hpp_source.xhtml#l00010">RefBackendId.hpp:10</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5b6893cda5b69359a4244c06054da18f"><div class="ttname"><a href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">armnn::ModelOptions</a></div><div class="ttdeci">std::vector&lt; BackendOptions &gt; ModelOptions</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00017">BackendOptions.hpp:17</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor.xhtml">armnn::ConvertBf16ToFp32QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00439">WorkloadData.hpp:439</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a247e81465a607359f63756d13c417e70"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a247e81465a607359f63756d13c417e70">armnn::RefWorkloadFactory::CreateMultiplication</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMultiplication(const MultiplicationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00491">RefWorkloadFactory.cpp:491</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a2318d942f9615dff92fe75688bdd8c48"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a2318d942f9615dff92fe75688bdd8c48">armnn::RefWorkloadFactory::CreateSpaceToDepth</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSpaceToDepth(const SpaceToDepthQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00642">RefWorkloadFactory.cpp:642</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a869254cb56968986a78a79e1d6d4a86b"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">armnn::ResizeDescriptor::m_Method</a></div><div class="ttdeci">ResizeMethod m_Method</div><div class="ttdoc">The Interpolation method to use (Bilinear, NearestNeighbor). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00807">Descriptors.hpp:807</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a8fb2b01fe17e49e997fe59d86e4d5c9a"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a8fb2b01fe17e49e997fe59d86e4d5c9a">armnn::RefWorkloadFactory::CreatePad</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePad(const PadQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00529">RefWorkloadFactory.cpp:529</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1c0fb6bfa580b04574ab56971b6cbc6"><div class="ttname"><a href="namespacearmnn.xhtml#ad1c0fb6bfa580b04574ab56971b6cbc6">armnn::RefPermuteFloat16Workload</a></div><div class="ttdeci">RefPermuteWorkload&lt; DataType::Float16 &gt; RefPermuteFloat16Workload</div><div class="ttdef"><b>Definition:</b> <a href="_ref_permute_workload_8hpp_source.xhtml#l00031">RefPermuteWorkload.hpp:31</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aefcfe4efab61267262d1e02cb8af739d"><div class="ttname"><a href="namespacearmnn.xhtml#aefcfe4efab61267262d1e02cb8af739d">armnn::RefTransposeFloat16Workload</a></div><div class="ttdeci">RefTransposeWorkload&lt; DataType::Float16 &gt; RefTransposeFloat16Workload</div><div class="ttdef"><b>Definition:</b> <a href="_ref_transpose_workload_8hpp_source.xhtml#l00031">RefTransposeWorkload.hpp:31</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stack_queue_descriptor.xhtml">armnn::StackQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00142">WorkloadData.hpp:142</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_ad4b8b34cc736f9d7778c6a2ab4fba25e"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#ad4b8b34cc736f9d7778c6a2ab4fba25e">armnn::RefWorkloadFactory::CreateMerger</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMerger(const MergerQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00472">RefWorkloadFactory.cpp:472</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a2d8ef97ae45e9a37d096f14b0a40136c"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">armnn::RefWorkloadFactory::CreateComparison</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateComparison(const ComparisonQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00181">RefWorkloadFactory.cpp:181</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="structarmnn_1_1_rsqrt_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml">armnn::RsqrtQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00492">WorkloadData.hpp:492</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a1d1feb2b5c6a4c6701a3dee01e65bee4"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a1d1feb2b5c6a4c6701a3dee01e65bee4">armnn::RefWorkloadFactory::CreateSpaceToBatchNd</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSpaceToBatchNd(const SpaceToBatchNdQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00636">RefWorkloadFactory.cpp:636</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a47d136a5519331dee24f5e01b206ae7c"><div class="ttname"><a href="namespacearmnn.xhtml#a47d136a5519331dee24f5e01b206ae7c">armnn::IsQAsymmS8</a></div><div class="ttdeci">bool IsQAsymmS8(const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00074">RefWorkloadFactory.cpp:74</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a95c212cdbcf2af9a845f19467c2f2f2e"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a95c212cdbcf2af9a845f19467c2f2f2e">armnn::RefWorkloadFactory::CreateLogSoftmax</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateLogSoftmax(const LogSoftmaxQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00421">RefWorkloadFactory.cpp:421</a></div></div>
<div class="ttc" id="structarmnn_1_1_addition_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00240">WorkloadData.hpp:240</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a54c3f7c7b9909e828a084f68dc78a031"><div class="ttname"><a href="namespacearmnn.xhtml#a54c3f7c7b9909e828a084f68dc78a031">armnn::RefPermuteFloat32Workload</a></div><div class="ttdeci">RefPermuteWorkload&lt; DataType::Float32 &gt; RefPermuteFloat32Workload</div><div class="ttdef"><b>Definition:</b> <a href="_ref_permute_workload_8hpp_source.xhtml#l00032">RefPermuteWorkload.hpp:32</a></div></div>
<div class="ttc" id="structarmnn_1_1_minimum_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_minimum_queue_descriptor.xhtml">armnn::MinimumQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00470">WorkloadData.hpp:470</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_ae9de0dcd1cd7bc40deb74c6926361401"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">armnn::RefWorkloadFactory::CreateElementwiseUnary</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateElementwiseUnary(const ElementwiseUnaryQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00307">RefWorkloadFactory.cpp:307</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_aefe6a68cb6d7ba517d7988195680c831"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#aefe6a68cb6d7ba517d7988195680c831">armnn::RefWorkloadFactory::CreateConvertFp16ToFp32</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvertFp16ToFp32(const ConvertFp16ToFp32QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00206">RefWorkloadFactory.cpp:206</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">armnn::FullyConnectedQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00165">WorkloadData.hpp:165</a></div></div>
<div class="ttc" id="_make_workload_helper_8hpp_xhtml"><div class="ttname"><a href="_make_workload_helper_8hpp.xhtml">MakeWorkloadHelper.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_ac732fb2a7a5cc332339aa8686dd7e928"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#ac732fb2a7a5cc332339aa8686dd7e928">armnn::RefWorkloadFactory::CreateRank</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateRank(const RankQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00584">RefWorkloadFactory.cpp:584</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_prelu_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_prelu_queue_descriptor.xhtml">armnn::PreluQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00529">WorkloadData.hpp:529</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a37c36bbf668cd8a0d7dcd731c9b591d7"><div class="ttname"><a href="namespacearmnn.xhtml#a37c36bbf668cd8a0d7dcd731c9b591d7">armnn::IsQAsymmU8</a></div><div class="ttdeci">bool IsQAsymmU8(const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00079">RefWorkloadFactory.cpp:79</a></div></div>
<div class="ttc" id="structarmnn_1_1_equal_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_equal_queue_descriptor.xhtml">armnn::EqualQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00287">WorkloadData.hpp:287</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a09a7cd515c3b495e61b2a5116bf6a335"><div class="ttname"><a href="namespacearmnn.xhtml#a09a7cd515c3b495e61b2a5116bf6a335">armnn::IsQSymmS8</a></div><div class="ttdeci">bool IsQSymmS8(const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00069">RefWorkloadFactory.cpp:69</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a6a2e058d934e9d784eab57ee7121d69c"><div class="ttname"><a href="namespacearmnn.xhtml#a6a2e058d934e9d784eab57ee7121d69c">armnn::IsDataType</a></div><div class="ttdeci">bool IsDataType(const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00033">RefWorkloadFactory.cpp:33</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a3d504240723912bf9c76ff3afeaa25c5"><div class="ttname"><a href="namespacearmnn.xhtml#a3d504240723912bf9c76ff3afeaa25c5">armnn::IsBFloat16</a></div><div class="ttdeci">bool IsBFloat16(const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00054">RefWorkloadFactory.cpp:54</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_queue_descriptor.xhtml">armnn::BatchToSpaceNdQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00459">WorkloadData.hpp:459</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_queue_descriptor.xhtml">armnn::SoftmaxQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00095">WorkloadData.hpp:95</a></div></div>
<div class="ttc" id="structarmnn_1_1_division_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_division_queue_descriptor.xhtml">armnn::DivisionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00252">WorkloadData.hpp:252</a></div></div>
<div class="ttc" id="_ref_fill_workload_8hpp_xhtml"><div class="ttname"><a href="_ref_fill_workload_8hpp.xhtml">RefFillWorkload.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00057">WorkloadData.hpp:57</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a33b291201b6716e295afb17c1eb0864e"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a33b291201b6716e295afb17c1eb0864e">armnn::RefWorkloadFactory::CreateConvertFp32ToFp16</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvertFp32ToFp16(const ConvertFp32ToFp16QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00220">RefWorkloadFactory.cpp:220</a></div></div>
<div class="ttc" id="structarmnn_1_1_subtraction_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">armnn::SubtractionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00258">WorkloadData.hpp:258</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a2b793964f2c501b9ea343ffe310fc89e"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a2b793964f2c501b9ea343ffe310fc89e">armnn::RefWorkloadFactory::CreateFill</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateFill(const FillQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00333">RefWorkloadFactory.cpp:333</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pad_queue_descriptor.xhtml">armnn::PadQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00276">WorkloadData.hpp:276</a></div></div>
<div class="ttc" id="structarmnn_1_1_concat_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_concat_queue_descriptor.xhtml">armnn::ConcatQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00120">WorkloadData.hpp:120</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_ae2cd7e29596b68884bfaade25f8f0dc0"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">armnn::RefWorkloadFactory::GetBackendId</a></div><div class="ttdeci">const BackendId &amp; GetBackendId() const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00094">RefWorkloadFactory.cpp:94</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">armnn::UnaryOperation::LogicalNot</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a9cce78b879d26312fd515270afc1e66a"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a9cce78b879d26312fd515270afc1e66a">armnn::RefWorkloadFactory::CreateBatchNormalization</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateBatchNormalization(const BatchNormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00168">RefWorkloadFactory.cpp:168</a></div></div>
<div class="ttc" id="_mem_import_workload_8hpp_xhtml"><div class="ttname"><a href="_mem_import_workload_8hpp.xhtml">MemImportWorkload.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">armnn::SpaceToDepthQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00377">WorkloadData.hpp:377</a></div></div>
<div class="ttc" id="structarmnn_1_1_abs_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_abs_queue_descriptor.xhtml">armnn::AbsQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00641">WorkloadData.hpp:641</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a1c511b4b70bc0b6cccbef2285ba292bc"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a1c511b4b70bc0b6cccbef2285ba292bc">armnn::RefWorkloadFactory::CreateL2Normalization</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateL2Normalization(const L2NormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00402">RefWorkloadFactory.cpp:402</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_queue_descriptor.xhtml">armnn::ResizeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00321">WorkloadData.hpp:321</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a0dce100ea0fc5c44798736a4d879bd4d"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a0dce100ea0fc5c44798736a4d879bd4d">armnn::RefWorkloadFactory::CreateLstm</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateLstm(const LstmQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00427">RefWorkloadFactory.cpp:427</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a1f89ceb71ffc990170fe834cddb697fa"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a1f89ceb71ffc990170fe834cddb697fa">armnn::RefWorkloadFactory::CreateConcat</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConcat(const ConcatQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00187">RefWorkloadFactory.cpp:187</a></div></div>
<div class="ttc" id="_ref_workloads_8hpp_xhtml"><div class="ttname"><a href="_ref_workloads_8hpp.xhtml">RefWorkloads.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_queue_descriptor.xhtml">armnn::SpaceToBatchNdQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00372">WorkloadData.hpp:372</a></div></div>
<div class="ttc" id="structarmnn_1_1_floor_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_floor_queue_descriptor.xhtml">armnn::FloorQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00382">WorkloadData.hpp:382</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml_ac97905bfa0daab357b91df1347600309"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">armnn::WorkloadInfo::m_InputTensorInfos</a></div><div class="ttdeci">std::vector&lt; TensorInfo &gt; m_InputTensorInfos</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00018">WorkloadInfo.hpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad78d822be14a8d585cd038cf0e73cd7e"><div class="ttname"><a href="namespacearmnn.xhtml#ad78d822be14a8d585cd038cf0e73cd7e">armnn::IsFloat16</a></div><div class="ttdeci">bool IsFloat16(const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00059">RefWorkloadFactory.cpp:59</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a26563dd3de8f08475d30c8c8389f1ddc"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a26563dd3de8f08475d30c8c8389f1ddc">armnn::RefWorkloadFactory::CreateSubtraction</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSubtraction(const SubtractionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00666">RefWorkloadFactory.cpp:666</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad67165b4639bd5e50e5bc4538d226b35"><div class="ttname"><a href="namespacearmnn.xhtml#ad67165b4639bd5e50e5bc4538d226b35">armnn::RefTransposeFloat32Workload</a></div><div class="ttdeci">RefTransposeWorkload&lt; DataType::Float32 &gt; RefTransposeFloat32Workload</div><div class="ttdef"><b>Definition:</b> <a href="_ref_transpose_workload_8hpp_source.xhtml#l00032">RefTransposeWorkload.hpp:32</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_bilinear_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_bilinear_queue_descriptor.xhtml">armnn::ResizeBilinearQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00316">WorkloadData.hpp:316</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a26b27b4f789cfda06b8843e5dea361b4"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a26b27b4f789cfda06b8843e5dea361b4">armnn::RefWorkloadFactory::RefWorkloadFactory</a></div><div class="ttdeci">RefWorkloadFactory()</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00089">RefWorkloadFactory.cpp:89</a></div></div>
<div class="ttc" id="structarmnn_1_1_fake_quantization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fake_quantization_queue_descriptor.xhtml">armnn::FakeQuantizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00326">WorkloadData.hpp:326</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1d13693cba12d3e406454b852527fb37"><div class="ttname"><a href="namespacearmnn.xhtml#a1d13693cba12d3e406454b852527fb37">armnn::RefTransposeQAsymm8Workload</a></div><div class="ttdeci">RefTransposeWorkload&lt; DataType::QAsymmU8 &gt; RefTransposeQAsymm8Workload</div><div class="ttdef"><b>Definition:</b> <a href="_ref_transpose_workload_8hpp_source.xhtml#l00034">RefTransposeWorkload.hpp:34</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_queue_descriptor.xhtml">armnn::LstmQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00387">WorkloadData.hpp:387</a></div></div>
<div class="ttc" id="structarmnn_1_1_greater_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_greater_queue_descriptor.xhtml">armnn::GreaterQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00476">WorkloadData.hpp:476</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a9992ea7c353e8597fbd8ae426f4612ae"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a9992ea7c353e8597fbd8ae426f4612ae">armnn::RefWorkloadFactory::IsLayerSupported</a></div><div class="ttdeci">static bool IsLayerSupported(const Layer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00099">RefWorkloadFactory.cpp:99</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_aca1333805c6665111154f10cc72c8234"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#aca1333805c6665111154f10cc72c8234">armnn::RefWorkloadFactory::CreateDebug</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDebug(const DebugQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00233">RefWorkloadFactory.cpp:233</a></div></div>
<div class="ttc" id="structarmnn_1_1_comparison_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_comparison_queue_descriptor.xhtml">armnn::ComparisonQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00656">WorkloadData.hpp:656</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a9da9a34fb99114f9d1fb705171a9a6ee"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a9da9a34fb99114f9d1fb705171a9a6ee">armnn::RefWorkloadFactory::CreateAddition</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateAddition(const AdditionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00149">RefWorkloadFactory.cpp:149</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_adcf5037208faac36c0788239a073f75c"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">armnn::ResizeDescriptor::m_TargetWidth</a></div><div class="ttdeci">uint32_t m_TargetWidth</div><div class="ttdoc">Target width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00802">Descriptors.hpp:802</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a87b99791ccf8793961db67ea19eb6fa4"><div class="ttname"><a href="namespacearmnn.xhtml#a87b99791ccf8793961db67ea19eb6fa4">armnn::IsSigned32</a></div><div class="ttdeci">bool IsSigned32(const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00049">RefWorkloadFactory.cpp:49</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">armnn::ConvertFp16ToFp32QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00449">WorkloadData.hpp:449</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml_a67b178f8a836bc1e52b8de109760adfd"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">armnn::WorkloadInfo::m_OutputTensorInfos</a></div><div class="ttdeci">std::vector&lt; TensorInfo &gt; m_OutputTensorInfos</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00019">WorkloadInfo.hpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a74dc9ec1a223eab8b072368b2dacee87"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">armnn::IWorkloadFactory::IsLayerSupported</a></div><div class="ttdeci">static bool IsLayerSupported(const BackendId &amp;backendId, const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01234">WorkloadFactory.cpp:1234</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_ae22c3b8013c1ee7a5459016c0595d444"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#ae22c3b8013c1ee7a5459016c0595d444">armnn::RefWorkloadFactory::CreatePooling2d</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePooling2d(const Pooling2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00554">RefWorkloadFactory.cpp:554</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_bilinear_descriptor_xhtml_a46c3fa15c46fb0d1dcdc24d0ea5cb5cd"><div class="ttname"><a href="structarmnn_1_1_resize_bilinear_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">armnn::ResizeBilinearDescriptor::m_TargetHeight</a></div><div class="ttdeci">uint32_t m_TargetHeight</div><div class="ttdoc">Target height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00770">Descriptors.hpp:770</a></div></div>
<div class="ttc" id="structarmnn_1_1_rank_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_rank_queue_descriptor.xhtml">armnn::RankQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00311">WorkloadData.hpp:311</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a46c3fa15c46fb0d1dcdc24d0ea5cb5cd"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">armnn::ResizeDescriptor::m_TargetHeight</a></div><div class="ttdeci">uint32_t m_TargetHeight</div><div class="ttdoc">Target height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00804">Descriptors.hpp:804</a></div></div>
<div class="ttc" id="_ref_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="_ref_tensor_handle_8hpp.xhtml">RefTensorHandle.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_logical_binary_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_logical_binary_queue_descriptor.xhtml">armnn::LogicalBinaryQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00666">WorkloadData.hpp:666</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_ac4739f640f68405d2e5a4e4b716c3c59"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#ac4739f640f68405d2e5a4e4b716c3c59">armnn::RefWorkloadFactory::CreatePrelu</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePrelu(const PreluQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00566">RefWorkloadFactory.cpp:566</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">armnn::ConvertFp32ToFp16QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00454">WorkloadData.hpp:454</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_aa98def0f9b9ff714a013f8083bbadf82"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#aa98def0f9b9ff714a013f8083bbadf82">armnn::RefWorkloadFactory::CreateSplitter</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSplitter(const SplitterQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00648">RefWorkloadFactory.cpp:648</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_ab345edf481dd64a3ced4c0808d4ee844"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#ab345edf481dd64a3ced4c0808d4ee844">armnn::RefWorkloadFactory::CreateDequantize</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDequantize(const DequantizeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00281">RefWorkloadFactory.cpp:281</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_aac4c7cd17cf3dc3a23fd4a21933c60cb"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#aac4c7cd17cf3dc3a23fd4a21933c60cb">armnn::RefWorkloadFactory::CreateFloor</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateFloor(const FloorQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00339">RefWorkloadFactory.cpp:339</a></div></div>
<div class="ttc" id="_cpu_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="_cpu_tensor_handle_8hpp.xhtml">CpuTensorHandle.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_comparison_descriptor_xhtml_a865dc4f43cb0ff01a1dcf78036912fd1"><div class="ttname"><a href="structarmnn_1_1_comparison_descriptor.xhtml#a865dc4f43cb0ff01a1dcf78036912fd1">armnn::ComparisonDescriptor::m_Operation</a></div><div class="ttdeci">ComparisonOperation m_Operation</div><div class="ttdoc">Specifies the comparison operation to execute. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00089">Descriptors.hpp:89</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">armnn::TransposeConvolution2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00534">WorkloadData.hpp:534</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">armnn::Convolution2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00192">WorkloadData.hpp:192</a></div></div>
<div class="ttc" id="structarmnn_1_1_mem_copy_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">armnn::MemCopyQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00076">WorkloadData.hpp:76</a></div></div>
<div class="ttc" id="structarmnn_1_1_fill_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fill_queue_descriptor.xhtml">armnn::FillQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00159">WorkloadData.hpp:159</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_abda2c9b7c5fe4ca092d2224ba9679a06"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#abda2c9b7c5fe4ca092d2224ba9679a06">armnn::RefWorkloadFactory::CreateSlice</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSlice(const SliceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00624">RefWorkloadFactory.cpp:624</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a1fdd5dfd04433d84de96c71664cce5a9"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a1fdd5dfd04433d84de96c71664cce5a9">armnn::RefWorkloadFactory::CreateFullyConnected</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateFullyConnected(const FullyConnectedQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00352">RefWorkloadFactory.cpp:352</a></div></div>
<div class="ttc" id="structarmnn_1_1_slice_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_slice_queue_descriptor.xhtml">armnn::SliceQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00646">WorkloadData.hpp:646</a></div></div>
<div class="ttc" id="_layer_8hpp_xhtml"><div class="ttname"><a href="_layer_8hpp.xhtml">Layer.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a455fcb54444e8286dbb3714310e4998b"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a455fcb54444e8286dbb3714310e4998b">armnn::RefWorkloadFactory::CreateBatchToSpaceNd</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateBatchToSpaceNd(const BatchToSpaceNdQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00175">RefWorkloadFactory.cpp:175</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a5c2f4f703e07407e70c30cc770d02d6b"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a5c2f4f703e07407e70c30cc770d02d6b">armnn::RefWorkloadFactory::CreateInstanceNormalization</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateInstanceNormalization(const InstanceNormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00395">RefWorkloadFactory.cpp:395</a></div></div>
<div class="ttc" id="structarmnn_1_1_depth_to_space_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depth_to_space_queue_descriptor.xhtml">armnn::DepthToSpaceQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00651">WorkloadData.hpp:651</a></div></div>
<div class="ttc" id="structarmnn_1_1_l2_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">armnn::L2NormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00345">WorkloadData.hpp:345</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_aba5032787777bf0074ce70e2c2423d49"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#aba5032787777bf0074ce70e2c2423d49">armnn::RefWorkloadFactory::CreateMean</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMean(const MeanQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00446">RefWorkloadFactory.cpp:446</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_aade1930aedd59e037337410381f7011d"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#aade1930aedd59e037337410381f7011d">armnn::RefWorkloadFactory::CreateConvertBf16ToFp32</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvertBf16ToFp32(const ConvertBf16ToFp32QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00199">RefWorkloadFactory.cpp:199</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a4d5371f67eabb04a38c69e97e67f1d35"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a4d5371f67eabb04a38c69e97e67f1d35">armnn::RefWorkloadFactory::CreateStack</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateStack(const StackQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00654">RefWorkloadFactory.cpp:654</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a11cb76f59b65109b8557d43b3cb1bc06"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a11cb76f59b65109b8557d43b3cb1bc06">armnn::RefWorkloadFactory::CreateDivision</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDivision(const DivisionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00294">RefWorkloadFactory.cpp:294</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_queue_descriptor.xhtml">armnn::TransposeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00547">WorkloadData.hpp:547</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_strided_slice_queue_descriptor.xhtml">armnn::StridedSliceQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00464">WorkloadData.hpp:464</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">armnn::QLstmQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00552">WorkloadData.hpp:552</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_queue_descriptor.xhtml">armnn::ArgMinMaxQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00153">WorkloadData.hpp:153</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f"><div class="ttname"><a href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::ResizeMethod::Bilinear</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">armnn::BatchNormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00293">WorkloadData.hpp:293</a></div></div>
<div class="ttc" id="structarmnn_1_1_mem_import_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mem_import_queue_descriptor.xhtml">armnn::MemImportQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00084">WorkloadData.hpp:84</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a0b7d11f98c9c17dd23a94666fe35f226"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a0b7d11f98c9c17dd23a94666fe35f226">armnn::RefWorkloadFactory::CreateGreater</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateGreater(const GreaterQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00365">RefWorkloadFactory.cpp:365</a></div></div>
<div class="ttc" id="classarmnn_1_1_null_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_null_workload.xhtml">armnn::NullWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_8hpp_source.xhtml#l00022">Workload.hpp:22</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor.xhtml">armnn::ConvertFp32ToBf16QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00444">WorkloadData.hpp:444</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a02cbf5ef59219cec2ab9a5cfe79d04ec"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a02cbf5ef59219cec2ab9a5cfe79d04ec">armnn::RefWorkloadFactory::CreateLogicalUnary</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateLogicalUnary(const ElementwiseUnaryQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00414">RefWorkloadFactory.cpp:414</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a7239477811c44d4398f0c2d291d9ea76"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">armnn::RefWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00114">RefWorkloadFactory.cpp:114</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a6d9da6f30bce6aa09040e7e37485a3dc"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a6d9da6f30bce6aa09040e7e37485a3dc">armnn::RefWorkloadFactory::CreateLogicalBinary</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateLogicalBinary(const LogicalBinaryQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00408">RefWorkloadFactory.cpp:408</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a902422ffa1b0076458972c3be051e44d"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a902422ffa1b0076458972c3be051e44d">armnn::RefWorkloadFactory::CreateAbs</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateAbs(const AbsQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00133">RefWorkloadFactory.cpp:133</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_ae0895b3c5782c6094ce839e07cc17d58"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#ae0895b3c5782c6094ce839e07cc17d58">armnn::RefWorkloadFactory::CreateResizeBilinear</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateResizeBilinear(const ResizeBilinearQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00602">RefWorkloadFactory.cpp:602</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a7b6ac4b2de1550174ad661fa76ec3d2d"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a7b6ac4b2de1550174ad661fa76ec3d2d">armnn::RefWorkloadFactory::CreatePermute</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePermute(const PermuteQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00535">RefWorkloadFactory.cpp:535</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_af5f7b0f6273c838b6b7d7de8447524f9"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#af5f7b0f6273c838b6b7d7de8447524f9">armnn::RefWorkloadFactory::CreateActivation</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateActivation(const ActivationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00143">RefWorkloadFactory.cpp:143</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_xhtml_a4b50e46a6810018f3edecfb68b2a76b3"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">armnn::QueueDescriptor::m_Inputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Inputs</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00030">WorkloadData.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_pre_compiled_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pre_compiled_queue_descriptor.xhtml">armnn::PreCompiledQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00502">WorkloadData.hpp:502</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a50ffe5068ecb2fbf7f73b30ef0d753f8"><div class="ttname"><a href="namespacearmnn.xhtml#a50ffe5068ecb2fbf7f73b30ef0d753f8">armnn::RefPermuteQAsymm8Workload</a></div><div class="ttdeci">RefPermuteWorkload&lt; DataType::QAsymmU8 &gt; RefPermuteQAsymm8Workload</div><div class="ttdef"><b>Definition:</b> <a href="_ref_permute_workload_8hpp_source.xhtml#l00034">RefPermuteWorkload.hpp:34</a></div></div>
<div class="ttc" id="structarmnn_1_1_dequantize_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_dequantize_queue_descriptor.xhtml">armnn::DequantizeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00514">WorkloadData.hpp:514</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">armnn::Pooling2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00186">WorkloadData.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::ResizeDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00809">Descriptors.hpp:809</a></div></div>
<div class="ttc" id="structarmnn_1_1_mean_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mean_queue_descriptor.xhtml">armnn::MeanQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00270">WorkloadData.hpp:270</a></div></div>
<div class="ttc" id="structarmnn_1_1_log_softmax_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">armnn::LogSoftmaxQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00350">WorkloadData.hpp:350</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a39927b6e1faae50d9f804b435430bbf2"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a39927b6e1faae50d9f804b435430bbf2">armnn::RefWorkloadFactory::CreateMinimum</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMinimum(const MinimumQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00478">RefWorkloadFactory.cpp:478</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a5d463f116733f47ce2bab08e430d1ba2"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">armnn::RefWorkloadFactory::CreateOutput</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateOutput(const OutputQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00510">RefWorkloadFactory.cpp:510</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a3f21c47a41cbbcfe7d74becd76766c80"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a3f21c47a41cbbcfe7d74becd76766c80">armnn::RefWorkloadFactory::CreatePreCompiled</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePreCompiled(const PreCompiledQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00560">RefWorkloadFactory.cpp:560</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_ac302ae63e103b22d6ce4fef0f5513899"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#ac302ae63e103b22d6ce4fef0f5513899">armnn::RefWorkloadFactory::CreateTranspose</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateTranspose(const TransposeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00679">RefWorkloadFactory.cpp:679</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reshape_queue_descriptor.xhtml">armnn::ReshapeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00367">WorkloadData.hpp:367</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a3a2d9b8e1156605172ada1472e9460cd"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a3a2d9b8e1156605172ada1472e9460cd">armnn::RefWorkloadFactory::CreateDetectionPostProcess</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDetectionPostProcess(const DetectionPostProcessQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00287">RefWorkloadFactory.cpp:287</a></div></div>
<div class="ttc" id="structarmnn_1_1_debug_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_debug_queue_descriptor.xhtml">armnn::DebugQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00481">WorkloadData.hpp:481</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">armnn::ElementwiseUnaryQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00661">WorkloadData.hpp:661</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abcd0d843d5736b78740ae73249b6b977"><div class="ttname"><a href="namespacearmnn.xhtml#abcd0d843d5736b78740ae73249b6b977">armnn::IsQSymmS16</a></div><div class="ttdeci">bool IsQSymmS16(const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00064">RefWorkloadFactory.cpp:64</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a48ebe514c1ca3e41edccdd7682bf38ca"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a48ebe514c1ca3e41edccdd7682bf38ca">armnn::RefWorkloadFactory::CreateDepthwiseConvolution2d</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDepthwiseConvolution2d(const DepthwiseConvolution2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00274">RefWorkloadFactory.cpp:274</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00210">Layer.hpp:210</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">armnn::DepthwiseConvolution2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00207">WorkloadData.hpp:207</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00148">WorkloadData.hpp:148</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a2edd58192b89ac27cf4be7d7ea6252d3"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a2edd58192b89ac27cf4be7d7ea6252d3">armnn::RefWorkloadFactory::CreateQLstm</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateQLstm(const QLstmQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00572">RefWorkloadFactory.cpp:572</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_a44d5ee8d1c0bd414bf1dfb60d94a62d8"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#a44d5ee8d1c0bd414bf1dfb60d94a62d8">armnn::RefWorkloadFactory::CreateMemImport</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMemImport(const MemImportQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00462">RefWorkloadFactory.cpp:462</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_normalization_queue_descriptor.xhtml">armnn::NormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00234">WorkloadData.hpp:234</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_workload_factory_xhtml_af77fb45622aedb3f2ee36b412fea8735"><div class="ttname"><a href="classarmnn_1_1_ref_workload_factory.xhtml#af77fb45622aedb3f2ee36b412fea8735">armnn::RefWorkloadFactory::CreateDepthToSpace</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDepthToSpace(const DepthToSpaceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_factory_8cpp_source.xhtml#l00268">RefWorkloadFactory.cpp:268</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="_ref_workload_factory_8cpp.xhtml">RefWorkloadFactory.cpp</a></li>
    <li class="footer">Generated on Wed Nov 25 2020 09:59:13 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
