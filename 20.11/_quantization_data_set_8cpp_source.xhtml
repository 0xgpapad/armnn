<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnQuantizer/QuantizationDataSet.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_quantization_data_set_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">QuantizationDataSet.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_quantization_data_set_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_quantization_data_set_8hpp.xhtml">QuantizationDataSet.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;fmt/format.h&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_string_utils_8hpp.xhtml">armnn/utility/StringUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_filesystem_8hpp.xhtml">Filesystem.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn_quantizer.xhtml">armnnQuantizer</a></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#abde793a2b4d01d22940ea8a2d49958fa">   17</a></span>&#160;<a class="code" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#abde793a2b4d01d22940ea8a2d49958fa">QuantizationDataSet::QuantizationDataSet</a>()</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;}</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#a4d38375d9df5fb0b69ee71bc03797f6f">   21</a></span>&#160;<a class="code" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#abde793a2b4d01d22940ea8a2d49958fa">QuantizationDataSet::QuantizationDataSet</a>(<span class="keyword">const</span> std::string csvFilePath):</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    m_QuantizationInputs(),</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    m_CsvFilePath(csvFilePath)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    ParseCsvFile();</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;}</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="namespacearmnn_quantizer.xhtml#ab8e5898c3b39c2d3c1dda16b157d519d">   28</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn_quantizer.xhtml#ab8e5898c3b39c2d3c1dda16b157d519d">AddInputData</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> passId,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                  <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> bindingId,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                  <span class="keyword">const</span> std::string&amp; inputFilePath,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                  std::map&lt;unsigned int, QuantizationInput&gt;&amp; passIdToQuantizationInput)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#a4aa8b89889236eb6ba7220442909c5b5">iterator</a> = passIdToQuantizationInput.find(passId);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#a4aa8b89889236eb6ba7220442909c5b5">iterator</a> == passIdToQuantizationInput.end())</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <a class="code" href="classarmnn_quantizer_1_1_quantization_input.xhtml">QuantizationInput</a> input(passId, bindingId, inputFilePath);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        passIdToQuantizationInput.emplace(passId, input);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    }</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keyword">auto</span> existingQuantizationInput = <a class="code" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#a4aa8b89889236eb6ba7220442909c5b5">iterator</a>-&gt;second;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        existingQuantizationInput.AddEntry(bindingId, inputFilePath);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#a26bb8e70d7f0597b67e61856e94156c5">   46</a></span>&#160;<a class="code" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#a26bb8e70d7f0597b67e61856e94156c5">QuantizationDataSet::~QuantizationDataSet</a>()</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classarmnn_quantizer_1_1_input_layer_visitor.xhtml#a0153ae82bec6d8b2e383d99faab51661">   50</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_quantizer_1_1_input_layer_visitor.xhtml#a0153ae82bec6d8b2e383d99faab51661">InputLayerVisitor::VisitInputLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                                        <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> <span class="keywordtype">id</span>,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                        <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(name);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    m_TensorInfos.emplace(<span class="keywordtype">id</span>, layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>());</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classarmnn_quantizer_1_1_input_layer_visitor.xhtml#a92c60f374eb3e8a6cdbce39cb57c1db4">   58</a></span>&#160;<a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="classarmnn_quantizer_1_1_input_layer_visitor.xhtml#a92c60f374eb3e8a6cdbce39cb57c1db4">InputLayerVisitor::GetTensorInfo</a>(<a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> layerBindingId)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#a4aa8b89889236eb6ba7220442909c5b5">iterator</a> = m_TensorInfos.find(layerBindingId);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#a4aa8b89889236eb6ba7220442909c5b5">iterator</a> != m_TensorInfos.end())</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">return</span> m_TensorInfos.at(layerBindingId);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;Could not retrieve tensor info for binding ID &quot;</span> + std::to_string(layerBindingId));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="namespacearmnn_quantizer.xhtml#a99c0e54acc977e7c0a06c99bc22674ce">   72</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearmnn_quantizer.xhtml#a99c0e54acc977e7c0a06c99bc22674ce">GetPassIdFromCsvRow</a>(std::vector&lt;std::string&gt; tokens, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> lineIndex)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> passId;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        passId = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::stoi(tokens[0]));</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::invalid_argument&amp;)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>(fmt::format(<span class="stringliteral">&quot;Pass ID [{}] is not correct format on CSV row {}&quot;</span>,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                                tokens[0], lineIndex));</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">return</span> passId;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="namespacearmnn_quantizer.xhtml#aa23e2b87263686b68dcf93197a58eaad">   87</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> <a class="code" href="namespacearmnn_quantizer.xhtml#aa23e2b87263686b68dcf93197a58eaad">GetBindingIdFromCsvRow</a>(std::vector&lt;std::string&gt; tokens, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> lineIndex)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> bindingId;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        bindingId = std::stoi(tokens[1]);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::invalid_argument&amp;)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>(fmt::format(<span class="stringliteral">&quot;Binding ID [{}] is not correct format on CSV row {}&quot;</span>,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                                tokens[1], lineIndex));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> bindingId;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="namespacearmnn_quantizer.xhtml#ad6177e03abd9f435ed544709eb97ed33">  102</a></span>&#160;std::string <a class="code" href="namespacearmnn_quantizer.xhtml#ad6177e03abd9f435ed544709eb97ed33">GetFileNameFromCsvRow</a>(std::vector&lt;std::string&gt; tokens, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> lineIndex)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    std::string fileName = <a class="code" href="namespacearmnn_1_1string_utils.xhtml#acdeebefc9791d026eeb564f373479510">armnn::stringUtils::StringTrim</a>(tokens[2]);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(fileName))</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>(fmt::format(<span class="stringliteral">&quot;File [{}] provided on CSV row {} does not exist.&quot;</span>,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                                fileName, lineIndex));</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span> (fileName.empty())</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>(fmt::format(<span class="stringliteral">&quot;Filename cannot be empty on CSV row {} &quot;</span>, lineIndex));</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">return</span> fileName;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keywordtype">void</span> QuantizationDataSet::ParseCsvFile()</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    std::map&lt;unsigned int, QuantizationInput&gt; passIdToQuantizationInput;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">if</span> (m_CsvFilePath == <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;CSV file not specified.&quot;</span>);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    std::ifstream inf (m_CsvFilePath.c_str());</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    std::string line;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    std::vector&lt;std::string&gt; tokens;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> lineIndex = 0;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">if</span> (!inf)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(fmt::format(<span class="stringliteral">&quot;CSV file {} not found.&quot;</span>, m_CsvFilePath));</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">while</span> (getline(inf, line))</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        tokens = <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a25545ea8edf6a26c00077b01294beac5">armnn::stringUtils::StringTokenizer</a>(line, <span class="stringliteral">&quot;,&quot;</span>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">if</span> (tokens.size() != 3)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(fmt::format(<span class="stringliteral">&quot;CSV file [{}] does not have correct number of entries&quot;</span> \</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                               <span class="stringliteral">&quot;on line {}. Expected 3 entries but was {}.&quot;</span>,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                               m_CsvFilePath, lineIndex, tokens.size()));</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> passId = <a class="code" href="namespacearmnn_quantizer.xhtml#a99c0e54acc977e7c0a06c99bc22674ce">GetPassIdFromCsvRow</a>(tokens, lineIndex);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> bindingId = <a class="code" href="namespacearmnn_quantizer.xhtml#aa23e2b87263686b68dcf93197a58eaad">GetBindingIdFromCsvRow</a>(tokens, lineIndex);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        std::string rawFileName = <a class="code" href="namespacearmnn_quantizer.xhtml#ad6177e03abd9f435ed544709eb97ed33">GetFileNameFromCsvRow</a>(tokens, lineIndex);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <a class="code" href="namespacearmnn_quantizer.xhtml#ab8e5898c3b39c2d3c1dda16b157d519d">AddInputData</a>(passId, bindingId, rawFileName, passIdToQuantizationInput);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        ++lineIndex;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">if</span> (passIdToQuantizationInput.empty())</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;Could not parse CSV file.&quot;</span>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// Once all entries in CSV file are parsed successfully and QuantizationInput map is populated, populate</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="comment">// QuantizationInputs iterator for easier access and clear the map</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> itr = passIdToQuantizationInput.begin(); itr != passIdToQuantizationInput.end(); ++itr)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        m_QuantizationInputs.emplace_back(itr-&gt;second);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1string_utils_xhtml_a25545ea8edf6a26c00077b01294beac5"><div class="ttname"><a href="namespacearmnn_1_1string_utils.xhtml#a25545ea8edf6a26c00077b01294beac5">armnn::stringUtils::StringTokenizer</a></div><div class="ttdeci">std::vector&lt; std::string &gt; StringTokenizer(const std::string &amp;str, const char *delimiters, bool tokenCompression=true)</div><div class="ttdoc">Function to take a string and a list of delimiters and split the string into tokens based on those de...</div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8hpp_source.xhtml#l00020">StringUtils.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_quantizer_xhtml_ab8e5898c3b39c2d3c1dda16b157d519d"><div class="ttname"><a href="namespacearmnn_quantizer.xhtml#ab8e5898c3b39c2d3c1dda16b157d519d">armnnQuantizer::AddInputData</a></div><div class="ttdeci">void AddInputData(unsigned int passId, armnn::LayerBindingId bindingId, const std::string &amp;inputFilePath, std::map&lt; unsigned int, QuantizationInput &gt; &amp;passIdToQuantizationInput)</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_data_set_8cpp_source.xhtml#l00028">QuantizationDataSet.cpp:28</a></div></div>
<div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="namespacearmnn_quantizer_xhtml_ad6177e03abd9f435ed544709eb97ed33"><div class="ttname"><a href="namespacearmnn_quantizer.xhtml#ad6177e03abd9f435ed544709eb97ed33">armnnQuantizer::GetFileNameFromCsvRow</a></div><div class="ttdeci">std::string GetFileNameFromCsvRow(std::vector&lt; std::string &gt; tokens, unsigned int lineIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_data_set_8cpp_source.xhtml#l00102">QuantizationDataSet.cpp:102</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_input_layer_visitor_xhtml_a0153ae82bec6d8b2e383d99faab51661"><div class="ttname"><a href="classarmnn_quantizer_1_1_input_layer_visitor.xhtml#a0153ae82bec6d8b2e383d99faab51661">armnnQuantizer::InputLayerVisitor::VisitInputLayer</a></div><div class="ttdeci">void VisitInputLayer(const armnn::IConnectableLayer *layer, armnn::LayerBindingId id, const char *name)</div><div class="ttdoc">Function that an InputLayer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_data_set_8cpp_source.xhtml#l00050">QuantizationDataSet.cpp:50</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_quantization_data_set_xhtml_a4aa8b89889236eb6ba7220442909c5b5"><div class="ttname"><a href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#a4aa8b89889236eb6ba7220442909c5b5">armnnQuantizer::QuantizationDataSet::iterator</a></div><div class="ttdeci">QuantizationInputs::iterator iterator</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_data_set_8hpp_source.xhtml#l00023">QuantizationDataSet.hpp:23</a></div></div>
<div class="ttc" id="namespacearmnn_quantizer_xhtml_aa23e2b87263686b68dcf93197a58eaad"><div class="ttname"><a href="namespacearmnn_quantizer.xhtml#aa23e2b87263686b68dcf93197a58eaad">armnnQuantizer::GetBindingIdFromCsvRow</a></div><div class="ttdeci">armnn::LayerBindingId GetBindingIdFromCsvRow(std::vector&lt; std::string &gt; tokens, unsigned int lineIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_data_set_8cpp_source.xhtml#l00087">QuantizationDataSet.cpp:87</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_quantization_input_xhtml"><div class="ttname"><a href="classarmnn_quantizer_1_1_quantization_input.xhtml">armnnQuantizer::QuantizationInput</a></div><div class="ttdoc">QuantizationInput for specific pass ID, can list a corresponding raw data file for each LayerBindingI...</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_input_8hpp_source.xhtml#l00016">QuantizationInput.hpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="_filesystem_8hpp_xhtml"><div class="ttname"><a href="_filesystem_8hpp.xhtml">Filesystem.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00202">Types.hpp:202</a></div></div>
<div class="ttc" id="_quantization_data_set_8hpp_xhtml"><div class="ttname"><a href="_quantization_data_set_8hpp.xhtml">QuantizationDataSet.hpp</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_input_layer_visitor_xhtml_a92c60f374eb3e8a6cdbce39cb57c1db4"><div class="ttname"><a href="classarmnn_quantizer_1_1_input_layer_visitor.xhtml#a92c60f374eb3e8a6cdbce39cb57c1db4">armnnQuantizer::InputLayerVisitor::GetTensorInfo</a></div><div class="ttdeci">armnn::TensorInfo GetTensorInfo(armnn::LayerBindingId)</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_data_set_8cpp_source.xhtml#l00058">QuantizationDataSet.cpp:58</a></div></div>
<div class="ttc" id="namespacearmnn_quantizer_xhtml_a99c0e54acc977e7c0a06c99bc22674ce"><div class="ttname"><a href="namespacearmnn_quantizer.xhtml#a99c0e54acc977e7c0a06c99bc22674ce">armnnQuantizer::GetPassIdFromCsvRow</a></div><div class="ttdeci">unsigned int GetPassIdFromCsvRow(std::vector&lt; std::string &gt; tokens, unsigned int lineIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_data_set_8cpp_source.xhtml#l00072">QuantizationDataSet.cpp:72</a></div></div>
<div class="ttc" id="namespacearmnn_quantizer_xhtml"><div class="ttname"><a href="namespacearmnn_quantizer.xhtml">armnnQuantizer</a></div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml#l00011">CommandLineProcessor.cpp:11</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="_string_utils_8hpp_xhtml"><div class="ttname"><a href="_string_utils_8hpp.xhtml">StringUtils.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a9943775a364fc4ab53b85ac88f311886"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">armnn::IOutputSlot::GetTensorInfo</a></div><div class="ttdeci">virtual const TensorInfo &amp; GetTensorInfo() const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_quantization_data_set_xhtml_a26bb8e70d7f0597b67e61856e94156c5"><div class="ttname"><a href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#a26bb8e70d7f0597b67e61856e94156c5">armnnQuantizer::QuantizationDataSet::~QuantizationDataSet</a></div><div class="ttdeci">~QuantizationDataSet()</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_data_set_8cpp_source.xhtml#l00046">QuantizationDataSet.cpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_1_1string_utils_xhtml_acdeebefc9791d026eeb564f373479510"><div class="ttname"><a href="namespacearmnn_1_1string_utils.xhtml#acdeebefc9791d026eeb564f373479510">armnn::stringUtils::StringTrim</a></div><div class="ttdeci">std::string &amp; StringTrim(std::string &amp;str, const std::string &amp;chars=&quot;\\\&quot;)</div><div class="ttdoc">Trim from both the start and the end of a string. </div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8hpp_source.xhtml#l00077">StringUtils.hpp:77</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_quantization_data_set_xhtml_abde793a2b4d01d22940ea8a2d49958fa"><div class="ttname"><a href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#abde793a2b4d01d22940ea8a2d49958fa">armnnQuantizer::QuantizationDataSet::QuantizationDataSet</a></div><div class="ttdeci">QuantizationDataSet()</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_data_set_8cpp_source.xhtml#l00017">QuantizationDataSet.cpp:17</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0de8a5774692585e465aba8075a97653.xhtml">armnnQuantizer</a></li><li class="navelem"><a class="el" href="_quantization_data_set_8cpp.xhtml">QuantizationDataSet.cpp</a></li>
    <li class="footer">Generated on Wed Nov 25 2020 09:59:11 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
