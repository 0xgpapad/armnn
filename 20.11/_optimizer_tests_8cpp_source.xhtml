<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/test/OptimizerTests.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_optimizer_tests_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">OptimizerTests.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_optimizer_tests_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_test_utils_8hpp.xhtml">TestUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_backend_settings_8hpp.xhtml">BackendSettings.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_graph_8hpp.xhtml">Graph.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_network_8hpp.xhtml">Network.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_optimizer_8hpp.xhtml">Optimizer.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_backend_registry_8hpp.xhtml">armnn/BackendRegistry.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_network_8hpp.xhtml">armnn/INetwork.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_layer_visitor_base_8hpp.xhtml">armnn/LayerVisitorBase.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_floating_point_converter_8hpp.xhtml">armnnUtils/FloatingPointConverter.hpp</a>&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_polymorphic_downcast_8hpp.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_cpu_tensor_handle_8hpp.xhtml">backendsCommon/CpuTensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="src_2backends_2backends_common_2_i_backend_internal_8hpp.xhtml">backendsCommon/IBackendInternal.hpp</a>&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_layer_support_base_8hpp.xhtml">backendsCommon/LayerSupportBase.hpp</a>&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;boost/test/unit_test.hpp&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keywordtype">void</span> CreateLSTMLayerHelper(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;graph, <span class="keywordtype">bool</span> CifgEnabled)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> layerDesc;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    layerDesc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = 4;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    layerDesc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> = 0.2f;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    layerDesc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a> = 0.4f;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    layerDesc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = CifgEnabled;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    layerDesc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    layerDesc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="classarmnn_1_1_lstm_layer.xhtml">LstmLayer</a>* <span class="keyword">const</span> layer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml">LstmLayer</a>&gt;(layerDesc, <span class="stringliteral">&quot;layer&quot;</span>);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 3;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = 2;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numUnits = 4;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputSize = 4;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a5a0d8af26a6aad1e5be521ea7dc550eb">m_InputToForgetWeights</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits, inputSize }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a14ab2bc78421c417c4f97a65b0bd78f9">m_InputToCellWeights</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits, inputSize }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#ae8d897b8d282f25a6eb784c4aaa98df6">m_InputToOutputWeights</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits, inputSize }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a3d5f129421bbe6479a66d4ed1356bf68">m_RecurrentToForgetWeights</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits, outputSize }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a6e8c3db3c5474f0760553ff93fbc39e6">m_RecurrentToCellWeights</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits, outputSize }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a91dda74af4085ae43913746ad817795a">m_RecurrentToOutputWeights</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits, outputSize }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a0e0e17d5b494993407cb75d614455ddd">m_ForgetGateBias</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a51255889cbc063130a3d691c1781c5d3">m_CellBias</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#aacb55e0992b6781a7bd3225ab6e6bb2f">m_OutputGateBias</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a5a0d8af26a6aad1e5be521ea7dc550eb">m_InputToForgetWeights</a>-&gt;Allocate();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a14ab2bc78421c417c4f97a65b0bd78f9">m_InputToCellWeights</a>-&gt;Allocate();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#ae8d897b8d282f25a6eb784c4aaa98df6">m_InputToOutputWeights</a>-&gt;Allocate();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a3d5f129421bbe6479a66d4ed1356bf68">m_RecurrentToForgetWeights</a>-&gt;Allocate();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a6e8c3db3c5474f0760553ff93fbc39e6">m_RecurrentToCellWeights</a>-&gt;Allocate();</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a91dda74af4085ae43913746ad817795a">m_RecurrentToOutputWeights</a>-&gt;Allocate();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a0e0e17d5b494993407cb75d614455ddd">m_ForgetGateBias</a>-&gt;Allocate();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#a51255889cbc063130a3d691c1781c5d3">m_CellBias</a>-&gt;Allocate();</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">m_BasicParameters</a>.<a class="code" href="structarmnn_1_1_lstm_basic_parameters.xhtml#aacb55e0992b6781a7bd3225ab6e6bb2f">m_OutputGateBias</a>-&gt;Allocate();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">if</span> (!layerDesc.m_CifgEnabled)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a0e940dfa428f4eb429f8bc0d138b20af">m_CifgParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_cifg_parameters.xhtml#a4d731c5e73638c7cf7e63f65e9f8b550">m_InputToInputWeights</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits, inputSize }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a0e940dfa428f4eb429f8bc0d138b20af">m_CifgParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_cifg_parameters.xhtml#a6e8971757790a032e5936da7847ba14b">m_RecurrentToInputWeights</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits, outputSize }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a0e940dfa428f4eb429f8bc0d138b20af">m_CifgParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_cifg_parameters.xhtml#a9945bc99f8a7400c0724117e29cb3abb">m_InputGateBias</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a0e940dfa428f4eb429f8bc0d138b20af">m_CifgParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_cifg_parameters.xhtml#a4d731c5e73638c7cf7e63f65e9f8b550">m_InputToInputWeights</a>-&gt;Allocate();</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a0e940dfa428f4eb429f8bc0d138b20af">m_CifgParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_cifg_parameters.xhtml#a6e8971757790a032e5936da7847ba14b">m_RecurrentToInputWeights</a>-&gt;Allocate();</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a0e940dfa428f4eb429f8bc0d138b20af">m_CifgParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_cifg_parameters.xhtml#a9945bc99f8a7400c0724117e29cb3abb">m_InputGateBias</a>-&gt;Allocate();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">if</span> (layerDesc.m_ProjectionEnabled)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a3d3e6d0c3e6e570d9f831489c3bd14ce">m_ProjectionParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_projection_parameters.xhtml#a3ec2885c48ce888516e27c8b75a8cb83">m_ProjectionWeights</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ outputSize, numUnits }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a3d3e6d0c3e6e570d9f831489c3bd14ce">m_ProjectionParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_projection_parameters.xhtml#aa9f2880e4e2a1eb731f61c1e0941c6a7">m_ProjectionBias</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ outputSize }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a3d3e6d0c3e6e570d9f831489c3bd14ce">m_ProjectionParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_projection_parameters.xhtml#a3ec2885c48ce888516e27c8b75a8cb83">m_ProjectionWeights</a>-&gt;Allocate();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a3d3e6d0c3e6e570d9f831489c3bd14ce">m_ProjectionParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_projection_parameters.xhtml#aa9f2880e4e2a1eb731f61c1e0941c6a7">m_ProjectionBias</a>-&gt;Allocate();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">if</span> (layerDesc.m_PeepholeEnabled)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">if</span> (!layerDesc.m_CifgEnabled)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a4efa0f4d46817ab94e36c8507c26f276">m_PeepholeParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_peephole_parameters.xhtml#a658f4245732f95c9fe756a934d370ca8">m_CellToInputWeights</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a4efa0f4d46817ab94e36c8507c26f276">m_PeepholeParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_peephole_parameters.xhtml#a658f4245732f95c9fe756a934d370ca8">m_CellToInputWeights</a>-&gt;Allocate();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a4efa0f4d46817ab94e36c8507c26f276">m_PeepholeParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_peephole_parameters.xhtml#a5d0ebbbb11b727a67877df40b59a628c">m_CellToForgetWeights</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a4efa0f4d46817ab94e36c8507c26f276">m_PeepholeParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_peephole_parameters.xhtml#a310e133b0b51b93a74b83008893792e9">m_CellToOutputWeights</a> = std::make_unique&lt;ScopedCpuTensorHandle&gt;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ numUnits }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a4efa0f4d46817ab94e36c8507c26f276">m_PeepholeParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_peephole_parameters.xhtml#a5d0ebbbb11b727a67877df40b59a628c">m_CellToForgetWeights</a>-&gt;Allocate();</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_lstm_layer.xhtml#a4efa0f4d46817ab94e36c8507c26f276">m_PeepholeParameters</a>.<a class="code" href="structarmnn_1_1_lstm_opt_peephole_parameters.xhtml#a310e133b0b51b93a74b83008893792e9">m_CellToOutputWeights</a>-&gt;Allocate();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">// create input and output layers</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* <span class="keyword">const</span> input = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* <span class="keyword">const</span> outputStateIn = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(1, <span class="stringliteral">&quot;outputStateIn&quot;</span>);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* <span class="keyword">const</span> cellStateIn = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(2, <span class="stringliteral">&quot;cellStateIn&quot;</span>);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* <span class="keyword">const</span> scratchBuffer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;scratchBuffer&quot;</span>);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* <span class="keyword">const</span> outputStateOut = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(1, <span class="stringliteral">&quot;outputStateOut&quot;</span>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* <span class="keyword">const</span> cellStateOut = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(2, <span class="stringliteral">&quot;cellStateOut&quot;</span>);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* <span class="keyword">const</span> output = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(3, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="comment">// connect up</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> lstmTensorInfo1({ batchSize, inputSize }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> lstmTensorInfo2({ batchSize, numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> lstmTensorInfo3({ batchSize, outputSize }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> lstmTensorInfoScratchBuff({ batchSize, numUnits * (layerDesc.m_CifgEnabled ? 3 : 4) },</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                                <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="_test_utils_8cpp.xhtml#a0b295acb179f15eb3fb862b32008f782">Connect</a>(input, layer, lstmTensorInfo1, 0, 0);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="_test_utils_8cpp.xhtml#a0b295acb179f15eb3fb862b32008f782">Connect</a>(cellStateIn, layer, lstmTensorInfo2, 0, 1);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="_test_utils_8cpp.xhtml#a0b295acb179f15eb3fb862b32008f782">Connect</a>(outputStateIn, layer, lstmTensorInfo3, 0, 2);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="_test_utils_8cpp.xhtml#a0b295acb179f15eb3fb862b32008f782">Connect</a>(layer, scratchBuffer, lstmTensorInfoScratchBuff, 0, 0);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="_test_utils_8cpp.xhtml#a0b295acb179f15eb3fb862b32008f782">Connect</a>(layer, outputStateOut, lstmTensorInfo3, 1, 0);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="_test_utils_8cpp.xhtml#a0b295acb179f15eb3fb862b32008f782">Connect</a>(layer, cellStateOut, lstmTensorInfo2, 2, 0);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="_test_utils_8cpp.xhtml#a0b295acb179f15eb3fb862b32008f782">Connect</a>(layer, output, lstmTensorInfo3, 3, 0);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<a class="code" href="_output_shape_of_squeeze_8cpp.xhtml#ae3a6cb217a792718f2bd0e8f45e3ca9e">BOOST_AUTO_TEST_SUITE</a>(<a class="code" href="classarmnn_1_1_optimizer.xhtml">Optimizer</a>)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearmnn_1_1optimizations.xhtml">armnn::optimizations</a>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a8839099137f1031b504d76090074142c">  145</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(LSTMValidateTensorShapesFromInputsCIFGDisabledTest)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">//Helper function creates graph containing LSTM layer with required input and output layers</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    CreateLSTMLayerHelper(graph, <span class="keyword">false</span>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">//This function used to call ValidateShapesFromInputs();</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a10342b734f73496052047f2b74b38cca">  156</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(LSTMValidateTensorShapesFromInputsCIFGEnabledTest)</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;{</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">//Helper function creates graph containing LSTM layer with required input and output layers</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    CreateLSTMLayerHelper(graph, <span class="keyword">true</span>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">//This function used to call ValidateShapesFromInputs();</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a09fa0a0ab3199f1a7bfc169bce93925d">  167</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(InsertConvertersTest)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>({ 1, 5, 2, 3 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a>);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">armnn::Graph</a> graph;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> inputId = 0;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* head = graph.AddLayer&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">armnn::OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    head = graph.InsertNewLayer&lt;<a class="code" href="classarmnn_1_1_addition_layer.xhtml">armnn::AdditionLayer</a>&gt;(head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0), <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">GetOutputHandler</a>().<a class="code" href="classarmnn_1_1_output_handler.xhtml#a97db12c41024f5545ef5cc4153e5443b">SetTensorInfo</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    graph.InsertNewLayer&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">armnn::InputLayer</a>&gt;(head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(1), inputId++, <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        -&gt;GetOutputHandler().SetTensorInfo(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    head = graph.InsertNewLayer&lt;<a class="code" href="classarmnn_1_1_floor_layer.xhtml">armnn::FloorLayer</a>&gt;(head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0), <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">GetOutputHandler</a>().<a class="code" href="classarmnn_1_1_output_handler.xhtml#a97db12c41024f5545ef5cc4153e5443b">SetTensorInfo</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    head = graph.InsertNewLayer&lt;<a class="code" href="classarmnn_1_1_mem_copy_layer.xhtml">armnn::MemCopyLayer</a>&gt;(head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0), <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">GetOutputHandler</a>().<a class="code" href="classarmnn_1_1_output_handler.xhtml#a97db12c41024f5545ef5cc4153e5443b">SetTensorInfo</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    graph.InsertNewLayer&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">armnn::InputLayer</a>&gt;(head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0), inputId++, <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        -&gt;GetOutputHandler().SetTensorInfo(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// Check graph layer sequence before inserting convert layers</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    BOOST_TEST(<a class="code" href="_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.cbegin(),</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                             graph.cend(),</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                             &amp;IsLayerOfType&lt;armnn::MemCopyLayer&gt;,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                             &amp;IsLayerOfType&lt;armnn::FloorLayer&gt;,</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                             &amp;IsLayerOfType&lt;armnn::AdditionLayer&gt;,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;));</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// Check layers have Float16 DataType</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; layer : graph)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keywordflow">if</span>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>()==<a class="code" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">LayerType::Floor</a> || layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a>)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="comment">// Insert convert layers either side of unsupported layer</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; layer : graph)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">if</span>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>()==<a class="code" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">LayerType::Floor</a> || layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a>)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <a class="code" href="namespacearmnn.xhtml#ad31c56533e4f9f9f51719599fbfcf7bb">InsertConvertFp16ToFp32LayersBefore</a>(graph, *layer);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <a class="code" href="namespacearmnn.xhtml#abf625e50a5eaeafce5b39580dc95a9d3">InsertConvertFp32ToFp16LayersAfter</a>(graph, *layer);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="comment">// Check layers have correct DataType after inserting convert layers</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; layer : graph)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">if</span> (layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>()==<a class="code" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">LayerType::Floor</a> || layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a>)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">LayerType::ConvertFp16ToFp32</a>)</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        }</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">LayerType::ConvertFp32ToFp16</a>)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="comment">// Check sequence of layers after inserting convert layers</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    BOOST_TEST(<a class="code" href="_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.cbegin(),</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                             graph.cend(),</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                             &amp;IsLayerOfType&lt;armnn::ConvertFp16ToFp32Layer&gt;,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                             &amp;IsLayerOfType&lt;armnn::MemCopyLayer&gt;,</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                             &amp;IsLayerOfType&lt;armnn::ConvertFp16ToFp32Layer&gt;,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                             &amp;IsLayerOfType&lt;armnn::FloorLayer&gt;,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                             &amp;IsLayerOfType&lt;armnn::ConvertFp32ToFp16Layer&gt;,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                             &amp;IsLayerOfType&lt;armnn::ConvertFp16ToFp32Layer&gt;,</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                             &amp;IsLayerOfType&lt;armnn::AdditionLayer&gt;,</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                             &amp;IsLayerOfType&lt;armnn::ConvertFp32ToFp16Layer&gt;,</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;));</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a5065b32dd0aa2c08ef75e953ebedbc16">  258</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_optimizer_tests_8cpp.xhtml#a5065b32dd0aa2c08ef75e953ebedbc16">CreateConvolution2dGraph</a>(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;graph, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* inputShape,</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                              <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* weightsShape, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* outputShape,</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                              <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputInfo(4, inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo(4, outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    std::vector&lt;float&gt; weightsVector(90);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> weights(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, weightsShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>), weightsVector);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> desc;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a> = 1;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a> = 1;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = dataLayout;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(inputInfo);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml">Convolution2dLayer</a>* layer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml">Convolution2dLayer</a>&gt;(desc, <span class="stringliteral">&quot;conv2d&quot;</span>);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a> = std::make_unique&lt;armnn::ScopedCpuTensorHandle&gt;(weights);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* output = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;}</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a6b7bebf2c0d384c3297a6c3b19346555">  286</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(Conv2dValidateTensorShapesFromInputs)</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;{</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { 1, 3, 8, 16 };</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsShape[] = { 2, 3, 5, 3 };</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 1, 2, 4, 14 };</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <a class="code" href="_optimizer_tests_8cpp.xhtml#a5065b32dd0aa2c08ef75e953ebedbc16">CreateConvolution2dGraph</a>(graph, inputShape, weightsShape, outputShape);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;}</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a67738cd9d506e11aa4f4f43b9dc30e2c">  297</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(Conv2dValidateTensorShapesFromInputsNhwc)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;{</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { 1, 8, 16, 3 };</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsShape[] = { 2, 5, 3, 3 };</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 1, 4, 14, 2 };</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <a class="code" href="_optimizer_tests_8cpp.xhtml#a5065b32dd0aa2c08ef75e953ebedbc16">CreateConvolution2dGraph</a>(graph, inputShape, weightsShape, outputShape, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#acd97facea671e23ec3e8b33c6c2ea321">  308</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_optimizer_tests_8cpp.xhtml#acd97facea671e23ec3e8b33c6c2ea321">CreateDepthwiseConvolution2dGraph</a>(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;graph, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* inputShape,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                       <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* weightsShape, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* outputShape,</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                       <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;{</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputInfo(4, inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo(4, outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    std::vector&lt;float&gt; weightsVector(18);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> weights(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, weightsShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>), weightsVector);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> desc;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a> = 1;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a> = 1;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = dataLayout;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(inputInfo);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <a class="code" href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml">DepthwiseConvolution2dLayer</a>* layer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml">DepthwiseConvolution2dLayer</a>&gt;(desc, <span class="stringliteral">&quot;depthwiseConv2d&quot;</span>);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a> = std::make_unique&lt;armnn::ScopedCpuTensorHandle&gt;(weights);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* output = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;}</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a93b5cb4143e78fec858fe77e86472bec">  336</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(DepthwiseConv2dValidateTensorShapesFromInputs)</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;{</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { 1, 2, 3, 3 };</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsShape[] = { 1, 2, 3, 3 };</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 1, 2, 1, 1 };</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <a class="code" href="_optimizer_tests_8cpp.xhtml#acd97facea671e23ec3e8b33c6c2ea321">CreateDepthwiseConvolution2dGraph</a>(graph, inputShape, weightsShape, outputShape);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;}</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#aa678f54308701529660f9ee2a70bd042">  347</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(DepthwiseConv2dValidateTensorShapesFromInputsNhwc)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;{</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { 1, 3, 3, 2 };</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsShape[] = { 1, 2, 3, 3 };</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 1, 1, 1, 2 };</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="_optimizer_tests_8cpp.xhtml#acd97facea671e23ec3e8b33c6c2ea321">CreateDepthwiseConvolution2dGraph</a>(graph, inputShape, weightsShape, outputShape, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a4756218150e4ca0da09d0ecc390a7a17">  358</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_optimizer_tests_8cpp.xhtml#a4756218150e4ca0da09d0ecc390a7a17">CreatePooling2dGraph</a>(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* inputShape,  <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* outputShape,</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                          <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;{</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputInfo(4, inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo(4, outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> desc;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">m_PoolType</a> = <a class="code" href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718ab1897515d548a960afe49ecf66a29021">armnn::PoolingAlgorithm::Average</a>;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">m_PoolWidth</a> = desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">m_PoolHeight</a> = 100;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a> = desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a> = 5;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a> = 50;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a> = 50;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a> = 50;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a> = 50;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a8c29d6ea9b4186d69aad5961c910939c">m_PaddingMethod</a> = <a class="code" href="namespacearmnn.xhtml#a3888429b6ebc79f9a7df549e5e4d9a2fa843f2812f595e7ec7c5036e89fde02d6">armnn::PaddingMethod::Exclude</a>;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = dataLayout;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(inputInfo);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <a class="code" href="classarmnn_1_1_pooling2d_layer.xhtml">Pooling2dLayer</a>* layer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_pooling2d_layer.xhtml">Pooling2dLayer</a>&gt;(desc, <span class="stringliteral">&quot;pooling2d&quot;</span>);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* output = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;}</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a8457188fd0859ae6a91c09c3266f58a5">  386</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(Pooling2dValidateTensorShapesFromInputs)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;{</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { 5, 3, 52, 60 };</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 5, 3, 11, 13 };</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <a class="code" href="_optimizer_tests_8cpp.xhtml#a4756218150e4ca0da09d0ecc390a7a17">CreatePooling2dGraph</a>(graph, inputShape, outputShape, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a1c7c22035e9b339dad1aedcf1d9c49e9">  396</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(Pooling2dValidateTensorShapesFromInputsNhwc)</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;{</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { 5, 52, 60, 3 };</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 5, 11, 13, 3 };</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <a class="code" href="_optimizer_tests_8cpp.xhtml#a4756218150e4ca0da09d0ecc390a7a17">CreatePooling2dGraph</a>(graph, inputShape, outputShape, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;}</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#aefb2c7f14f687a9432490a1bdee05458">  406</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_optimizer_tests_8cpp.xhtml#aefb2c7f14f687a9432490a1bdee05458">CreateResizeBilinearGraph</a>(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* inputShape, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* outputShape,</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                               <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputInfo(4, inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputInfo(4, outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> desc;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    desc.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">m_Method</a>       = <a class="code" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">ResizeMethod::Bilinear</a>;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    desc.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">m_TargetHeight</a> = 3;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    desc.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">m_TargetWidth</a>  = 4;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    desc.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>   = dataLayout;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(inputInfo);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <a class="code" href="classarmnn_1_1_resize_layer.xhtml">ResizeLayer</a>* layer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_resize_layer.xhtml">ResizeLayer</a>&gt;(desc, <span class="stringliteral">&quot;resizeBilinear&quot;</span>);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* output = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;}</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#acee9ba1427bd42cc38a0402969dd0d35">  429</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(ResizeBilinearValidateTensorShapesFromInputs)</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;{</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { 1, 2, 4, 5 };</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 1, 2, 3, 4 };</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <a class="code" href="_optimizer_tests_8cpp.xhtml#aefb2c7f14f687a9432490a1bdee05458">CreateResizeBilinearGraph</a>(graph, inputShape, outputShape);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;}</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#abbc42a4387722b0b5e0c00038288dd4e">  439</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(ResizeBilinearValidateTensorShapesFromInputsNhwc)</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;{</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { 1, 4, 5, 2 };</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 1, 3, 4, 2 };</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <a class="code" href="_optimizer_tests_8cpp.xhtml#aefb2c7f14f687a9432490a1bdee05458">CreateResizeBilinearGraph</a>(graph, inputShape, outputShape, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;}</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#aa4e793c84e5dfea800d4dba921651e5b">  449</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_optimizer_tests_8cpp.xhtml#aa4e793c84e5dfea800d4dba921651e5b">CreateGatherGraph</a>(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; paramsInfo, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; indicesInfo,</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo)</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;{</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input0 = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;params&quot;</span>);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(paramsInfo);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input1 = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(1, <span class="stringliteral">&quot;indices&quot;</span>);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(indicesInfo);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <a class="code" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> descriptor;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <a class="code" href="classarmnn_1_1_gather_layer.xhtml">GatherLayer</a>* layer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_gather_layer.xhtml">GatherLayer</a>&gt;(descriptor, <span class="stringliteral">&quot;gather&quot;</span>);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* output = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(1));</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;}</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a57aa1f639ec35a976735c91889d463a4">  468</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(GatherValidateTensorShapesFromInputs)</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;{</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> paramsInfo({10, 5}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> indicesInfo({3}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">DataType::Signed32</a>);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo({3, 5}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <a class="code" href="_optimizer_tests_8cpp.xhtml#aa4e793c84e5dfea800d4dba921651e5b">CreateGatherGraph</a>(graph, paramsInfo, indicesInfo, outputInfo);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;}</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#af31e0d94eb9ec7e72b9d6d70da3070ec">  480</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(GatherValidateTensorShapesFromInputs1DParams)</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;{</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> paramsInfo({8}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> indicesInfo({5}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">DataType::Signed32</a>);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo( {5}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <a class="code" href="_optimizer_tests_8cpp.xhtml#aa4e793c84e5dfea800d4dba921651e5b">CreateGatherGraph</a>(graph, paramsInfo, indicesInfo, outputInfo);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;}</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a65b5e30de580e14475b51da9b93c908b">  492</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(GatherValidateTensorShapesFromInputsMultiDimIndices)</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;{</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> paramsInfo({3, 2, 5}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> indicesInfo({2, 2}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">DataType::Signed32</a>);</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo({2, 2, 2, 5}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <a class="code" href="_optimizer_tests_8cpp.xhtml#aa4e793c84e5dfea800d4dba921651e5b">CreateGatherGraph</a>(graph, paramsInfo, indicesInfo, outputInfo);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;}</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a0ee7b0e1f8d1dd9a9e001720e69086eb">  504</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(DetectionPostProcessValidateTensorShapes)</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;{</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> boxEncodingsInfo({1, 10, 4}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>({1, 10, 4}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    std::vector&lt;uint8_t&gt; anchorsVector(40);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>({10, 4}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>), anchorsVector);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionBoxesInfo({1, 3, 4}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionScoresInfo({1, 3}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionClassesInfo({1, 3}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> numDetectionInfo({1}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input0 = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;boxEncodings&quot;</span>);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(boxEncodingsInfo);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input1 = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(1, <span class="stringliteral">&quot;score&quot;</span>);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> descriptor;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">m_MaxDetections</a> = 3;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml">DetectionPostProcessLayer</a>* layer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml">DetectionPostProcessLayer</a>&gt;(descriptor, <span class="stringliteral">&quot;detectionPostProcess&quot;</span>);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a6844fecab0edaf324de5a57fee8b65f1">m_Anchors</a> = std::make_unique&lt;armnn::ScopedCpuTensorHandle&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(detectionBoxesInfo);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(1).<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(detectionScoresInfo);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(2).<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(detectionClassesInfo);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(3).<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(numDetectionInfo);</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    input0-&gt;GetOutputSlot().Connect(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(1));</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    BOOST_CHECK_NO_THROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;}</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a4ef49bab7a1b82c389b3b45ffb767833">  539</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(FoldPadLayerIntoConvolution2dLayer)</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;{</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> paddedShape[] = { 1, 6, 6, 3 };</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsShape[] = { 1, 2, 3, 3 };</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 1, 2, 1, 1 };</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputInfo(4, inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> paddedInfo(4, paddedShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo(4, outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(inputInfo);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <a class="code" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> padDescriptor({{ 0, 0 }, { 2, 2 }, { 2, 2 }, { 0, 0 }});</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <a class="code" href="classarmnn_1_1_pad_layer.xhtml">PadLayer</a>* padLayer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_pad_layer.xhtml">PadLayer</a>&gt;(padDescriptor, <span class="stringliteral">&quot;pad&quot;</span>);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    padLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(paddedInfo);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> convolution2dDescriptor;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    convolution2dDescriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    convolution2dDescriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a> = 1;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    convolution2dDescriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a> = 1;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    convolution2dDescriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    std::vector&lt;float&gt; weightsVector(18);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> weights(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, weightsShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>), weightsVector);</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml">Convolution2dLayer</a>* conv2dLayer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml">Convolution2dLayer</a>&gt;(convolution2dDescriptor,<span class="stringliteral">&quot;conv2d&quot;</span>);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    conv2dLayer-&gt;<a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a> = std::make_unique&lt;armnn::ScopedCpuTensorHandle&gt;(weights);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    conv2dLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* output = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="comment">// Connect up layers - input -&gt; pad -&gt; conv2d -&gt; output</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(padLayer-&gt;GetInputSlot(0));</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    padLayer-&gt;GetOutputSlot().Connect(conv2dLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    conv2dLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keyword">auto</span> checkSimpleConv2d = [ ](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer) -&gt; <span class="keywordtype">bool</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    {</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> conv2dLayer = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml">armnn::Convolution2dLayer</a>*<span class="keyword">&gt;</span>(layer);</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> conv2dLayerParams = conv2dLayer-&gt;<a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#a502c06a1b13e6d90a6cbf47c081f1444">GetParameters</a>();</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        <span class="keywordflow">return</span> IsLayerOfType&lt;armnn::Convolution2dLayer&gt;(layer) &amp;&amp;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            (layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a9a97cb6d32661a57fc33bd29b8e41ff4">GetNameStr</a>() == <span class="stringliteral">&quot;conv2d&quot;</span>) &amp;&amp;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;            (conv2dLayerParams.m_PadLeft == 0) &amp;&amp;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            (conv2dLayerParams.m_PadRight == 0) &amp;&amp;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            (conv2dLayerParams.m_PadTop == 0) &amp;&amp;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            (conv2dLayerParams.m_PadBottom == 0) &amp;&amp;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            (conv2dLayerParams.m_BiasEnabled == <span class="keyword">false</span>) &amp;&amp;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            (conv2dLayerParams.m_StrideX == 1) &amp;&amp;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            (conv2dLayerParams.m_StrideY == 1) &amp;&amp;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            (conv2dLayerParams.m_DataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    };</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    BOOST_TEST(<a class="code" href="_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(),</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                             graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(),</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                             &amp;IsLayerOfType&lt;armnn::PadLayer&gt;,</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                             checkSimpleConv2d,</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;));</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <a class="code" href="classarmnn_1_1_optimizer.xhtml#a1f48ba622b76ea04d15c9b62f642bf08">armnn::Optimizer::Pass</a>(graph, <a class="code" href="namespacearmnn.xhtml#aa7427025a851113a492de0b68b23d22a">armnn::MakeOptimizations</a>(<a class="code" href="namespacearmnn_1_1optimizations.xhtml#add2180a15cdcf5a229de32bb956cb224">FoldPadIntoConvolution2d</a>()));</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="keyword">auto</span> checkPadFoldedIntoConv2d = [ ](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer) -&gt; <span class="keywordtype">bool</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    {</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> conv2dLayer = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml">armnn::Convolution2dLayer</a>*<span class="keyword">&gt;</span>(layer);</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> conv2dLayerParams = conv2dLayer-&gt;<a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#a502c06a1b13e6d90a6cbf47c081f1444">GetParameters</a>();</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        <span class="keywordflow">return</span> IsLayerOfType&lt;armnn::Convolution2dLayer&gt;(layer) &amp;&amp;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;               (layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a9a97cb6d32661a57fc33bd29b8e41ff4">GetNameStr</a>() == <span class="stringliteral">&quot;folded-pad-into-conv2d&quot;</span>) &amp;&amp;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;               (conv2dLayerParams.m_PadLeft == 2) &amp;&amp;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;               (conv2dLayerParams.m_PadRight == 2) &amp;&amp;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;               (conv2dLayerParams.m_PadTop == 2) &amp;&amp;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;               (conv2dLayerParams.m_PadBottom == 2) &amp;&amp;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;               (conv2dLayerParams.m_BiasEnabled == <span class="keyword">false</span>) &amp;&amp;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;               (conv2dLayerParams.m_StrideX == 1) &amp;&amp;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;               (conv2dLayerParams.m_StrideY == 1) &amp;&amp;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;               (conv2dLayerParams.m_DataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    };</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    BOOST_TEST(<a class="code" href="_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(),</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                             graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(),</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                             checkPadFoldedIntoConv2d,</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;));</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;}</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_mock_layer_support.xhtml">MockLayerSupport</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a> {</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespacearmnn.xhtml#a197a353aa963497d29a07796268ea5c1">IsInputSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <span class="comment">/*input*/</span>,</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> <span class="comment">/*reasonIfUnsupported = EmptyOptional()*/</span>)<span class="keyword"> const override</span></div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    }</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespacearmnn.xhtml#a701cecec7714cf8bc9dca804f473610d">IsOutputSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <span class="comment">/*input*/</span>,</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> <span class="comment">/*reasonIfUnsupported = EmptyOptional()*/</span>)<span class="keyword"> const override</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    }</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespacearmnn.xhtml#a58bfb9626d373249745d78b95543116e">IsActivationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <span class="comment">/*input0*/</span>,</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <span class="comment">/*output*/</span>,</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a>&amp; <span class="comment">/*descriptor*/</span>,</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                               <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> <span class="comment">/*reasonIfUnsupported = EmptyOptional()*/</span>)<span class="keyword"> const override</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    }</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;};</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> NamePolicy&gt;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_mock_backend.xhtml">MockBackend</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;{</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend.xhtml">MockBackend</a>()  = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    ~<a class="code" href="classarmnn_1_1_mock_backend.xhtml">MockBackend</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetIdStatic() { <span class="keywordflow">return</span> NamePolicy::GetIdStatic(); }</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetId()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> GetIdStatic(); }</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">IBackendInternal::IMemoryManagerUniquePtr</a> CreateMemoryManager()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">nullptr</span>; };</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a> CreateWorkloadFactory(</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IBackendInternal::IMemoryManagerSharedPtr</a>&amp;)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">nullptr</span>; }</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendInternal::IBackendContextPtr</a> CreateBackendContext(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a>&amp;)<span class="keyword"> const override</span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    }</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#ad1794808004025d6e06c176507197b24">IBackendInternal::Optimizations</a> GetOptimizations()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> {}; }</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">IBackendInternal::ILayerSupportSharedPtr</a> GetLayerSupport()<span class="keyword"> const override</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;MockLayerSupport&gt;();</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    }</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <a class="code" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a> OptimizeSubgraphView(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a>&amp;)<span class="keyword"> const override</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    };</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;};</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div><div class="line"><a name="l00682"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a69de6f6ae1c2ba029453ce16bd4250a8">  682</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(BackendHintTest)</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;{</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keyword">class </span>TestBackendAssignment : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_layer_visitor_base.xhtml">LayerVisitorBase</a>&lt;VisitorNoThrowPolicy&gt;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    {</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        <span class="keywordtype">void</span> VisitInputLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                             <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> <span class="keywordtype">id</span>,</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                             <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>)<span class="keyword"> override</span></div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(<span class="keywordtype">id</span>, name);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            <span class="keyword">auto</span> inputLayer = PolymorphicDowncast&lt;const InputLayer*&gt;(layer);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;            BOOST_TEST((inputLayer-&gt;GetBackendId() == <span class="stringliteral">&quot;MockBackend&quot;</span>));</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        }</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        <span class="keywordtype">void</span> VisitOutputLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                              <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> <span class="keywordtype">id</span>,</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                              <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>)<span class="keyword"> override</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(<span class="keywordtype">id</span>, name);</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            <span class="keyword">auto</span> outputLayer = PolymorphicDowncast&lt;const OutputLayer*&gt;(layer);</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            BOOST_TEST((outputLayer-&gt;GetBackendId() == <span class="stringliteral">&quot;MockBackend&quot;</span>));</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        }</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        <span class="keywordtype">void</span> VisitActivationLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a>&amp; activationDescriptor,</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>)<span class="keyword"> override</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(activationDescriptor, name);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            <span class="keyword">auto</span> activation = PolymorphicDowncast&lt;const ActivationLayer*&gt;(layer);</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            BOOST_TEST((activation-&gt;GetBackendId() == <span class="stringliteral">&quot;CustomBackend&quot;</span>));</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        }</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    };</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keyword">struct </span>CustomPolicy</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    {</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetIdStatic()</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        {</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> <span class="keywordtype">id</span>=<span class="stringliteral">&quot;CustomBackend&quot;</span>;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;            <span class="keywordflow">return</span> id;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        }</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    };</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="keyword">struct </span>MockPolicy</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    {</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetIdStatic()</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        {</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;            <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> <span class="keywordtype">id</span>=<span class="stringliteral">&quot;MockBackend&quot;</span>;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            <span class="keywordflow">return</span> id;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;        }</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    };</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keyword">auto</span>&amp; backendRegistry = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>();</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    backendRegistry.Register(<span class="stringliteral">&quot;MockBackend&quot;</span>, [](){</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;MockBackend&lt;MockPolicy&gt;&gt;();</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        });</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    backendRegistry.Register(<span class="stringliteral">&quot;CustomBackend&quot;</span>, [](){</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;MockBackend&lt;CustomPolicy&gt;&gt;();</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        });</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <span class="comment">// Define the network</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <span class="keyword">auto</span> network = <a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>();</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> desc;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b">ActivationFunction::Linear</a>;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    std::unique_ptr&lt;Graph&gt; graph = std::make_unique&lt;Graph&gt;();</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <span class="keyword">auto</span> input = graph-&gt;AddLayer&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    <span class="keyword">auto</span> act = graph-&gt;AddLayer&lt;<a class="code" href="classarmnn_1_1_activation_layer.xhtml">ActivationLayer</a>&gt;(desc, <span class="stringliteral">&quot;activation&quot;</span>);</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <span class="keyword">auto</span> output = graph-&gt;AddLayer&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> customBackendId(<span class="stringliteral">&quot;CustomBackend&quot;</span>);</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    act-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a43a46eafee5c08787ab17b4342730c20">BackendSelectionHint</a>(customBackendId);</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    input-&gt;GetOutputSlot(0).Connect(act-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    act-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <span class="keyword">auto</span> optNet = <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a>(<span class="keyword">new</span> <a class="code" href="classarmnn_1_1_optimized_network.xhtml">OptimizedNetwork</a>(std::move(graph)), &amp;<a class="code" href="classarmnn_1_1_i_optimized_network.xhtml#a58ee539cf95c1e99fe4f54ef6e8bbd05">IOptimizedNetwork::Destroy</a>);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <a class="code" href="classarmnn_1_1_optimized_network.xhtml">OptimizedNetwork</a>* optNetObjPtr = PolymorphicDowncast&lt;OptimizedNetwork*&gt;(optNet.get());</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <span class="comment">// Get the optimized graph</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; optGraph = optNetObjPtr-&gt;<a class="code" href="classarmnn_1_1_optimized_network.xhtml#a49800ad35ea869aa5569519760d3b339">GetGraph</a>();</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    std::vector&lt;BackendId&gt; prefs{<span class="stringliteral">&quot;MockBackend&quot;</span>, <span class="stringliteral">&quot;CustomBackend&quot;</span>};</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> availableBackends = {<span class="stringliteral">&quot;CustomBackend&quot;</span>, <span class="stringliteral">&quot;MockBackend&quot;</span>};</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    <a class="code" href="classarmnn_1_1_device_spec.xhtml">DeviceSpec</a> spec(availableBackends);</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <a class="code" href="structarmnn_1_1_backend_settings.xhtml">BackendSettings</a> backendSettings(prefs, spec);</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <span class="comment">// Assign an available backend to each layer</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml#acc25db0641c1c22faf95af3bb49080c9">Graph::Iterator</a> firstLayer = optGraph.begin();</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml#acc25db0641c1c22faf95af3bb49080c9">Graph::Iterator</a> lastLayer  = optGraph.end();</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <a class="code" href="structarmnn_1_1_optimization_result.xhtml">OptimizationResult</a> res = <a class="code" href="namespacearmnn.xhtml#a8acab870a91373c720c9822b59ecf3b8">AssignBackends</a>(optNetObjPtr,</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                                            backendSettings,</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                                            firstLayer,</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                                            lastLayer,</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                                            <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>());</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    BOOST_TEST(res.<a class="code" href="structarmnn_1_1_optimization_result.xhtml#a955b65059e7f9429a5d6041136bc1487">IsOk</a>());</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    TestBackendAssignment visitor;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it =firstLayer; it != lastLayer; ++it)</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    {</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        (*it)-&gt;Accept(visitor);</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    }</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;}</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="comment">// Tests that OptimizeForExclusiveConnections works, fusing when needed, using BatchNorm fusing as example</span></div><div class="line"><a name="l00792"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#ac44f534a66a9124fdebe5f6d566215be">  792</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(OptimizeForExclusiveConnectionsFuseTest)</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;{</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <span class="comment">// Define layers information</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> convolution2dDescriptor;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    convolution2dDescriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    convolution2dDescriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>  = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> batchNormDescriptor;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    batchNormDescriptor.<a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputDimensionSizes[]   = {1, 4, 4, 3};               <span class="comment">// NHWCin</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsDimensionSizes[] = {1, 2, 2, 3};               <span class="comment">// CoutHWCin</span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputDimensionSizes[]  = {1, 3, 3, 1};               <span class="comment">// NHWCout</span></div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannelSize[]     = {outputDimensionSizes[3]};  <span class="comment">// Cout</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputInfo(4, inputDimensionSizes, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputInfo(4, outputDimensionSizes, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    std::vector&lt;float&gt; weightsVector = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>        weights(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(4, weightsDimensionSizes, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>), weightsVector);</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    std::vector&lt;float&gt; betaVector     = { 0.1f };</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    std::vector&lt;float&gt; gammaVector    = { 0.5f };</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    std::vector&lt;float&gt; meanVector     = { 0 };</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    std::vector&lt;float&gt; varianceVector = { 1 };</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>        beta(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>), betaVector);</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>        gamma(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>), gammaVector);</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>        mean(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>), meanVector);</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>        variance(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>), varianceVector);</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <span class="comment">// Define the network</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <span class="keyword">auto</span>  input     = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    <span class="keyword">auto</span>  conv      = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml">Convolution2dLayer</a>&gt;(convolution2dDescriptor, <span class="stringliteral">&quot;convolution&quot;</span>);</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    <span class="keyword">auto</span>  batchNorm = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_batch_normalization_layer.xhtml">BatchNormalizationLayer</a>&gt;(batchNormDescriptor, <span class="stringliteral">&quot;batchNorm&quot;</span>);</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    <span class="keyword">auto</span>  output    = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <span class="comment">// Set layer information</span></div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(inputInfo);</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    batchNorm-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    conv-&gt;m_Weight        = std::make_unique&lt;ScopedCpuTensorHandle&gt;(weights);</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    batchNorm-&gt;m_Beta     = std::make_unique&lt;ScopedCpuTensorHandle&gt;(beta);</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    batchNorm-&gt;m_Gamma    = std::make_unique&lt;ScopedCpuTensorHandle&gt;(gamma);</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    batchNorm-&gt;m_Mean     = std::make_unique&lt;ScopedCpuTensorHandle&gt;(mean);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    batchNorm-&gt;m_Variance = std::make_unique&lt;ScopedCpuTensorHandle&gt;(variance);</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <span class="keywordflow">if</span> (convolution2dDescriptor.m_BiasEnabled)</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    {</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        std::vector&lt;float&gt; biasVector = {11};</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>        bias(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>), biasVector);</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;        conv-&gt;m_Bias      = std::make_unique&lt;ScopedCpuTensorHandle&gt;(bias);</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    }</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <span class="comment">// Connect layers</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(batchNorm-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    batchNorm-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    BOOST_CHECK(4 == graph.<a class="code" href="classarmnn_1_1_graph.xhtml#afdf8eb85585a798ad0e936bde884d87b">GetNumLayers</a>());</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    BOOST_TEST(<a class="code" href="_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(),</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                             graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(),</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                             &amp;IsLayerOfType&lt;InputLayer&gt;,</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                             &amp;IsLayerOfType&lt;Convolution2dLayer&gt;,</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                             &amp;IsLayerOfType&lt;BatchNormalizationLayer&gt;,</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;                             &amp;IsLayerOfType&lt;OutputLayer&gt;));</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="comment">// Optimize graph</span></div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <a class="code" href="classarmnn_1_1_optimizer.xhtml#a1f48ba622b76ea04d15c9b62f642bf08">armnn::Optimizer::Pass</a>(graph, <a class="code" href="namespacearmnn.xhtml#aa7427025a851113a492de0b68b23d22a">MakeOptimizations</a>(<a class="code" href="namespacearmnn_1_1optimizations.xhtml#aa52c06792e18dc13030e82476f706f9e">FuseBatchNormIntoConvolution2DFloat32</a>()));</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <span class="keyword">auto</span> checkFusedConv2d = [](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer)-&gt;<span class="keywordtype">bool</span> </div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    {</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        <span class="keywordflow">return</span> IsLayerOfType&lt;armnn::Convolution2dLayer&gt;(layer) &amp;&amp;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;            (layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a9a97cb6d32661a57fc33bd29b8e41ff4">GetNameStr</a>() == <span class="stringliteral">&quot;fused-batchNorm-into-convolution&quot;</span>);</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    };</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    BOOST_CHECK(3 == graph.<a class="code" href="classarmnn_1_1_graph.xhtml#afdf8eb85585a798ad0e936bde884d87b">GetNumLayers</a>());</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    BOOST_TEST(<a class="code" href="_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(),</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                             graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(),</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;                             &amp;IsLayerOfType&lt;InputLayer&gt;,</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;                             checkFusedConv2d,</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                             &amp;IsLayerOfType&lt;OutputLayer&gt;));</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;}</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="comment">// Tests that OptimizeForExclusiveConnections works, not fusing when not needed, using BatchNorm fusing as example</span></div><div class="line"><a name="l00876"></a><span class="lineno"><a class="line" href="_optimizer_tests_8cpp.xhtml#a73b9322c5ef957cedfd050053fd345c3">  876</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(OptimizeForExclusiveConnectionsWithoutFuseTest)</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;{</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    <span class="comment">// Define the network</span></div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>                        graph;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a>      convolution2dDescriptor;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> batchNormDescriptor;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    <span class="keyword">auto</span> input     = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <span class="keyword">auto</span> conv      = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml">Convolution2dLayer</a>&gt;(convolution2dDescriptor, <span class="stringliteral">&quot;convolution&quot;</span>);</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    <span class="keyword">auto</span> batchNorm = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_batch_normalization_layer.xhtml">BatchNormalizationLayer</a>&gt;(batchNormDescriptor, <span class="stringliteral">&quot;batchNorm&quot;</span>);</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    <span class="keyword">auto</span> output    = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    <span class="keyword">auto</span> output2   = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(1, <span class="stringliteral">&quot;output2&quot;</span>);</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    <span class="comment">// Connect layers</span></div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(batchNorm-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    batchNorm-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output2-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    BOOST_CHECK(5 == graph.<a class="code" href="classarmnn_1_1_graph.xhtml#afdf8eb85585a798ad0e936bde884d87b">GetNumLayers</a>());</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    BOOST_TEST(<a class="code" href="_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(),</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;                             graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(),</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                             &amp;IsLayerOfType&lt;armnn::Convolution2dLayer&gt;,</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                             &amp;IsLayerOfType&lt;armnn::BatchNormalizationLayer&gt;,</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;,</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;));</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    <span class="comment">// Optimize graph</span></div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <a class="code" href="classarmnn_1_1_optimizer.xhtml#a1f48ba622b76ea04d15c9b62f642bf08">armnn::Optimizer::Pass</a>(graph, <a class="code" href="namespacearmnn.xhtml#aa7427025a851113a492de0b68b23d22a">armnn::MakeOptimizations</a>(<a class="code" href="namespacearmnn_1_1optimizations.xhtml#aa52c06792e18dc13030e82476f706f9e">FuseBatchNormIntoConvolution2DFloat32</a>()));</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    BOOST_CHECK(5 == graph.<a class="code" href="classarmnn_1_1_graph.xhtml#afdf8eb85585a798ad0e936bde884d87b">GetNumLayers</a>());</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    BOOST_TEST(<a class="code" href="_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(),</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                             graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(),</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                             &amp;IsLayerOfType&lt;armnn::Convolution2dLayer&gt;,</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                             &amp;IsLayerOfType&lt;armnn::BatchNormalizationLayer&gt;,</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;,</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;));</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;}</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;<a class="code" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END</a>()</div><div class="ttc" id="_output_shape_of_squeeze_8cpp_xhtml_ae3a6cb217a792718f2bd0e8f45e3ca9e"><div class="ttname"><a href="_output_shape_of_squeeze_8cpp.xhtml#ae3a6cb217a792718f2bd0e8f45e3ca9e">BOOST_AUTO_TEST_SUITE</a></div><div class="ttdeci">BOOST_AUTO_TEST_SUITE(TensorflowLiteParser)</div></div>
<div class="ttc" id="structarmnn_1_1_lstm_basic_parameters_xhtml_a0e0e17d5b494993407cb75d614455ddd"><div class="ttname"><a href="structarmnn_1_1_lstm_basic_parameters.xhtml#a0e0e17d5b494993407cb75d614455ddd">armnn::LstmBasicParameters::m_ForgetGateBias</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_ForgetGateBias</div><div class="ttdoc">A unique pointer to represent 1D weights tensor with dimensions [num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00069">LstmLayer.hpp:69</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::Convolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00449">Descriptors.hpp:449</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_basic_parameters_xhtml_ae8d897b8d282f25a6eb784c4aaa98df6"><div class="ttname"><a href="structarmnn_1_1_lstm_basic_parameters.xhtml#ae8d897b8d282f25a6eb784c4aaa98df6">armnn::LstmBasicParameters::m_InputToOutputWeights</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_InputToOutputWeights</div><div class="ttdoc">A unique pointer to represent 2D weights tensor with dimensions [input_size, num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00061">LstmLayer.hpp:61</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_basic_parameters_xhtml_a6e8c3db3c5474f0760553ff93fbc39e6"><div class="ttname"><a href="structarmnn_1_1_lstm_basic_parameters.xhtml#a6e8c3db3c5474f0760553ff93fbc39e6">armnn::LstmBasicParameters::m_RecurrentToCellWeights</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_RecurrentToCellWeights</div><div class="ttdoc">A unique pointer to represent 2D weights tensor with dimensions [output_size, num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00065">LstmLayer.hpp:65</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml">armnn::LayerSupportBase</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8hpp_source.xhtml#l00013">LayerSupportBase.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_backend.xhtml">armnn::MockBackend</a></div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8hpp_source.xhtml#l00143">MockBackend.hpp:143</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a6c9de81fc65b3c4924cab11907075a17"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">armnn::LstmDescriptor::m_ProjectionEnabled</a></div><div class="ttdeci">bool m_ProjectionEnabled</div><div class="ttdoc">Enable/disable the projection layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00931">Descriptors.hpp:931</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::Convolution2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00451">Descriptors.hpp:451</a></div></div>
<div class="ttc" id="classarmnn_1_1_lstm_layer_xhtml_a8838b317568861294a9df608221f185e"><div class="ttname"><a href="classarmnn_1_1_lstm_layer.xhtml#a8838b317568861294a9df608221f185e">armnn::LstmLayer::m_BasicParameters</a></div><div class="ttdeci">LstmBasicParameters m_BasicParameters</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00081">LstmLayer.hpp:81</a></div></div>
<div class="ttc" id="classarmnn_1_1_batch_normalization_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_batch_normalization_layer.xhtml">armnn::BatchNormalizationLayer</a></div><div class="ttdoc">This layer represents a batch normalization operation. </div><div class="ttdef"><b>Definition:</b> <a href="_batch_normalization_layer_8hpp_source.xhtml#l00015">BatchNormalizationLayer.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a72ca1cf423bda4b0a9ffb789627126de"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">armnn::IBackendInternal::IWorkloadFactoryPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkloadFactory &gt; IWorkloadFactoryPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_backend_internal_8hpp_source.xhtml#l00080">IBackendInternal.hpp:80</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::Pooling2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00366">Descriptors.hpp:366</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abf625e50a5eaeafce5b39580dc95a9d3"><div class="ttname"><a href="namespacearmnn.xhtml#abf625e50a5eaeafce5b39580dc95a9d3">armnn::InsertConvertFp32ToFp16LayersAfter</a></div><div class="ttdeci">std::vector&lt; ConvertFp32ToFp16Layer * &gt; InsertConvertFp32ToFp16LayersAfter(Graph &amp;graph, Layer &amp;layer)</div><div class="ttdef"><b>Definition:</b> <a href="_network_utils_8cpp_source.xhtml#l00201">NetworkUtils.cpp:201</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::DepthwiseConvolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00501">Descriptors.hpp:501</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_ad1794808004025d6e06c176507197b24"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#ad1794808004025d6e06c176507197b24">armnn::IBackendInternal::Optimizations</a></div><div class="ttdeci">std::vector&lt; OptimizationPtr &gt; Optimizations</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_backend_internal_8hpp_source.xhtml#l00086">IBackendInternal.hpp:86</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_with_parameters_xhtml_a502c06a1b13e6d90a6cbf47c081f1444"><div class="ttname"><a href="classarmnn_1_1_layer_with_parameters.xhtml#a502c06a1b13e6d90a6cbf47c081f1444">armnn::LayerWithParameters::GetParameters</a></div><div class="ttdeci">const Parameters &amp; GetParameters() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_with_parameters_8hpp_source.xhtml#l00018">LayerWithParameters.hpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00050">Types.hpp:50</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad31c56533e4f9f9f51719599fbfcf7bb"><div class="ttname"><a href="namespacearmnn.xhtml#ad31c56533e4f9f9f51719599fbfcf7bb">armnn::InsertConvertFp16ToFp32LayersBefore</a></div><div class="ttdeci">std::vector&lt; ConvertFp16ToFp32Layer * &gt; InsertConvertFp16ToFp32LayersBefore(Graph &amp;graph, Layer &amp;layer, bool expectCorrectInputType)</div><div class="ttdef"><b>Definition:</b> <a href="_network_utils_8cpp_source.xhtml#l00129">NetworkUtils.cpp:129</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_opt_cifg_parameters_xhtml_a4d731c5e73638c7cf7e63f65e9f8b550"><div class="ttname"><a href="structarmnn_1_1_lstm_opt_cifg_parameters.xhtml#a4d731c5e73638c7cf7e63f65e9f8b550">armnn::LstmOptCifgParameters::m_InputToInputWeights</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_InputToInputWeights</div><div class="ttdoc">A unique pointer to represent 2D weights tensor with dimensions [input_size, num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00029">LstmLayer.hpp:29</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::Pooling2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00360">Descriptors.hpp:360</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa7427025a851113a492de0b68b23d22a"><div class="ttname"><a href="namespacearmnn.xhtml#aa7427025a851113a492de0b68b23d22a">armnn::MakeOptimizations</a></div><div class="ttdeci">Optimizer::Optimizations MakeOptimizations(Args &amp;&amp;... args)</div><div class="ttdef"><b>Definition:</b> <a href="_optimizer_8hpp_source.xhtml#l00043">Optimizer.hpp:43</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a86e88bef0df4df96df752b4b8955a3af"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">armnn::LstmDescriptor::m_ClippingThresProj</a></div><div class="ttdeci">float m_ClippingThresProj</div><div class="ttdoc">Clipping threshold value for the projection. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00925">Descriptors.hpp:925</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml">armnn::IBackendInternal</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_backend_internal_8hpp_source.xhtml#l00068">IBackendInternal.hpp:68</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3"><div class="ttname"><a href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::OutputShapeRounding::Floor</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00191">BackendId.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a43a46eafee5c08787ab17b4342730c20"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a43a46eafee5c08787ab17b4342730c20">armnn::Layer::BackendSelectionHint</a></div><div class="ttdeci">void BackendSelectionHint(Optional&lt; BackendId &gt; backend) final</div><div class="ttdoc">Provide a hint for the optimizer as to which backend to prefer for this layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00327">Layer.hpp:327</a></div></div>
<div class="ttc" id="_floating_point_converter_8hpp_xhtml"><div class="ttname"><a href="_floating_point_converter_8hpp.xhtml">FloatingPointConverter.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_layer_support_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_layer_support.xhtml">armnn::MockLayerSupport</a></div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8hpp_source.xhtml#l00171">MockBackend.hpp:171</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::DepthwiseConvolution2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00503">Descriptors.hpp:503</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml">armnn::DeviceSpec</a></div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00014">DeviceSpec.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_depthwise_convolution2d_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml">armnn::DepthwiseConvolution2dLayer</a></div><div class="ttdoc">This layer represents a depthwise convolution 2d operation. </div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution2d_layer_8hpp_source.xhtml#l00015">DepthwiseConvolution2dLayer.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_1_1optimizations_xhtml"><div class="ttname"><a href="namespacearmnn_1_1optimizations.xhtml">armnn::optimizations</a></div><div class="ttdef"><b>Definition:</b> <a href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00014">AddBroadcastReshapeLayer.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a7563c5b899e7d0ada08fd0fdb202f205"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">armnn::Graph::AddLayer</a></div><div class="ttdeci">LayerT * AddLayer(Args &amp;&amp;... args)</div><div class="ttdoc">Adds a new layer, of type LayerType, to the graph constructed with the arguments passed. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00402">Graph.hpp:402</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a6d8fb685cc1ff224f25aa127fcf62c86"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">armnn::Pooling2dDescriptor::m_PoolWidth</a></div><div class="ttdeci">uint32_t m_PoolWidth</div><div class="ttdoc">Pooling width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00368">Descriptors.hpp:368</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a98b1109a9006f8cc7d4566146a3bd737"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">armnn::Graph::cbegin</a></div><div class="ttdeci">ConstIterator cbegin() const</div><div class="ttdoc">Returns const iterator pointing to the beginning of the list. Lowercase for range-based for loops...</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00172">Graph.hpp:172</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00403">Descriptors.hpp:403</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a></div></div>
<div class="ttc" id="_optimizer_tests_8cpp_xhtml_aefb2c7f14f687a9432490a1bdee05458"><div class="ttname"><a href="_optimizer_tests_8cpp.xhtml#aefb2c7f14f687a9432490a1bdee05458">CreateResizeBilinearGraph</a></div><div class="ttdeci">void CreateResizeBilinearGraph(Graph &amp;graph, const unsigned int *inputShape, const unsigned int *outputShape, DataLayout dataLayout=DataLayout::NCHW)</div><div class="ttdef"><b>Definition:</b> <a href="_optimizer_tests_8cpp_source.xhtml#l00406">OptimizerTests.cpp:406</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_basic_parameters_xhtml_a3d5f129421bbe6479a66d4ed1356bf68"><div class="ttname"><a href="structarmnn_1_1_lstm_basic_parameters.xhtml#a3d5f129421bbe6479a66d4ed1356bf68">armnn::LstmBasicParameters::m_RecurrentToForgetWeights</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_RecurrentToForgetWeights</div><div class="ttdoc">A unique pointer to represent 2D weights tensor with dimensions [output_size, num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00063">LstmLayer.hpp:63</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_adcfb97035799ea4c043f9ef370714815"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">armnn::OutputSlot::Connect</a></div><div class="ttdeci">int Connect(InputSlot &amp;destination)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00083">Layer.cpp:83</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a869254cb56968986a78a79e1d6d4a86b"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">armnn::ResizeDescriptor::m_Method</a></div><div class="ttdeci">ResizeMethod m_Method</div><div class="ttdoc">The Interpolation method to use (Bilinear, NearestNeighbor). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00807">Descriptors.hpp:807</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimizer_xhtml_a1f48ba622b76ea04d15c9b62f642bf08"><div class="ttname"><a href="classarmnn_1_1_optimizer.xhtml#a1f48ba622b76ea04d15c9b62f642bf08">armnn::Optimizer::Pass</a></div><div class="ttdeci">static void Pass(Graph &amp;graph, const Optimizations &amp;optimizations)</div><div class="ttdef"><b>Definition:</b> <a href="_optimizer_8cpp_source.xhtml#l00016">Optimizer.cpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a3888429b6ebc79f9a7df549e5e4d9a2fa843f2812f595e7ec7c5036e89fde02d6"><div class="ttname"><a href="namespacearmnn.xhtml#a3888429b6ebc79f9a7df549e5e4d9a2fa843f2812f595e7ec7c5036e89fde02d6">armnn::PaddingMethod::Exclude</a></div><div class="ttdoc">The padding fields don&amp;#39;t count and are ignored. </div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a8c29d6ea9b4186d69aad5961c910939c"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a8c29d6ea9b4186d69aad5961c910939c">armnn::Pooling2dDescriptor::m_PaddingMethod</a></div><div class="ttdeci">PaddingMethod m_PaddingMethod</div><div class="ttdoc">The padding method to be used. (Exclude, IgnoreValue). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00378">Descriptors.hpp:378</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::BatchNormalizationDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00636">Descriptors.hpp:636</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_basic_parameters_xhtml_aacb55e0992b6781a7bd3225ab6e6bb2f"><div class="ttname"><a href="structarmnn_1_1_lstm_basic_parameters.xhtml#aacb55e0992b6781a7bd3225ab6e6bb2f">armnn::LstmBasicParameters::m_OutputGateBias</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_OutputGateBias</div><div class="ttdoc">A unique pointer to represent 1D weights tensor with dimensions [num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00073">LstmLayer.hpp:73</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">armnn::LayerType::ConvertFp32ToFp16</a></div></div>
<div class="ttc" id="namespacearmnn_1_1optimizations_xhtml_aa52c06792e18dc13030e82476f706f9e"><div class="ttname"><a href="namespacearmnn_1_1optimizations.xhtml#aa52c06792e18dc13030e82476f706f9e">armnn::optimizations::FuseBatchNormIntoConvolution2DFloat32</a></div><div class="ttdeci">OptimizeForExclusiveConnection&lt; Convolution2dLayer, BatchNormalizationLayer, FuseBatchNorm&lt; Convolution2dLayer, armnn::DataType::Float32 &gt; &gt; FuseBatchNormIntoConvolution2DFloat32</div><div class="ttdef"><b>Definition:</b> <a href="_fuse_batch_norm_8hpp_source.xhtml#l00187">FuseBatchNorm.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_activation_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_activation_layer.xhtml">armnn::ActivationLayer</a></div><div class="ttdoc">This layer represents an activation operation with the specified activation function. </div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_8hpp_source.xhtml#l00012">ActivationLayer.hpp:12</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimization_views_xhtml"><div class="ttname"><a href="classarmnn_1_1_optimization_views.xhtml">armnn::OptimizationViews</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00013">OptimizationViews.hpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::Pooling2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00364">Descriptors.hpp:364</a></div></div>
<div class="ttc" id="_backend_settings_8hpp_xhtml"><div class="ttname"><a href="_backend_settings_8hpp.xhtml">BackendSettings.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimized_network_xhtml_a49800ad35ea869aa5569519760d3b339"><div class="ttname"><a href="classarmnn_1_1_optimized_network.xhtml#a49800ad35ea869aa5569519760d3b339">armnn::OptimizedNetwork::GetGraph</a></div><div class="ttdeci">Graph &amp; GetGraph()</div><div class="ttdef"><b>Definition:</b> <a href="_network_8hpp_source.xhtml#l00294">Network.hpp:294</a></div></div>
<div class="ttc" id="classarmnn_1_1_detection_post_process_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_detection_post_process_layer.xhtml">armnn::DetectionPostProcessLayer</a></div><div class="ttdoc">This layer represents a detection postprocess operator. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_8hpp_source.xhtml#l00016">DetectionPostProcessLayer.hpp:16</a></div></div>
<div class="ttc" id="_test_utils_8hpp_xhtml"><div class="ttname"><a href="_test_utils_8hpp.xhtml">TestUtils.hpp</a></div></div>
<div class="ttc" id="_optimizer_tests_8cpp_xhtml_a4756218150e4ca0da09d0ecc390a7a17"><div class="ttname"><a href="_optimizer_tests_8cpp.xhtml#a4756218150e4ca0da09d0ecc390a7a17">CreatePooling2dGraph</a></div><div class="ttdeci">void CreatePooling2dGraph(Graph &amp;graph, const unsigned int *inputShape, const unsigned int *outputShape, DataLayout dataLayout=DataLayout::NCHW)</div><div class="ttdef"><b>Definition:</b> <a href="_optimizer_tests_8cpp_source.xhtml#l00358">OptimizerTests.cpp:358</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a12bff6d51d63dac1375c89bc8415dc46"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">armnn::IBackendInternal::IMemoryManagerUniquePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IMemoryManager &gt; IMemoryManagerUniquePtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_backend_internal_8hpp_source.xhtml#l00091">IBackendInternal.hpp:91</a></div></div>
<div class="ttc" id="classarmnn_1_1_pad_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_pad_layer.xhtml">armnn::PadLayer</a></div><div class="ttdoc">This layer represents a pad operation. </div><div class="ttdef"><b>Definition:</b> <a href="_pad_layer_8hpp_source.xhtml#l00014">PadLayer.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_lstm_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_lstm_layer.xhtml">armnn::LstmLayer</a></div><div class="ttdoc">This layer represents a LSTM operation. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00077">LstmLayer.hpp:77</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_1_1optimizations_xhtml_add2180a15cdcf5a229de32bb956cb224"><div class="ttname"><a href="namespacearmnn_1_1optimizations.xhtml#add2180a15cdcf5a229de32bb956cb224">armnn::optimizations::FoldPadIntoConvolution2d</a></div><div class="ttdeci">OptimizeForConnection&lt; PadLayer, Convolution2dLayer, FoldPadIntoConvolution2dImpl &gt; FoldPadIntoConvolution2d</div><div class="ttdef"><b>Definition:</b> <a href="_fold_pad_into_convolution2d_8hpp_source.xhtml#l00088">FoldPadIntoConvolution2d.hpp:88</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_acc25db0641c1c22faf95af3bb49080c9"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#acc25db0641c1c22faf95af3bb49080c9">armnn::Graph::Iterator</a></div><div class="ttdeci">LayerList::const_iterator Iterator</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00050">Graph.hpp:50</a></div></div>
<div class="ttc" id="_backend_registry_8hpp_xhtml"><div class="ttname"><a href="_backend_registry_8hpp.xhtml">BackendRegistry.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Pooling2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00372">Descriptors.hpp:372</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_basic_parameters_xhtml_a51255889cbc063130a3d691c1781c5d3"><div class="ttname"><a href="structarmnn_1_1_lstm_basic_parameters.xhtml#a51255889cbc063130a3d691c1781c5d3">armnn::LstmBasicParameters::m_CellBias</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_CellBias</div><div class="ttdoc">A unique pointer to represent 1D weights tensor with dimensions [num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00071">LstmLayer.hpp:71</a></div></div>
<div class="ttc" id="_layer_support_base_8hpp_xhtml"><div class="ttname"><a href="_layer_support_base_8hpp.xhtml">LayerSupportBase.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00202">Types.hpp:202</a></div></div>
<div class="ttc" id="_optimizer_8hpp_xhtml"><div class="ttname"><a href="_optimizer_8hpp.xhtml">Optimizer.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a></div><div class="ttdoc">A ResizeDescriptor for the ResizeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00780">Descriptors.hpp:780</a></div></div>
<div class="ttc" id="src_2backends_2backends_common_2_i_backend_internal_8hpp_xhtml"><div class="ttname"><a href="src_2backends_2backends_common_2_i_backend_internal_8hpp.xhtml">IBackendInternal.hpp</a></div></div>
<div class="ttc" id="_polymorphic_downcast_8hpp_xhtml"><div class="ttname"><a href="_polymorphic_downcast_8hpp.xhtml">PolymorphicDowncast.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a197a353aa963497d29a07796268ea5c1"><div class="ttname"><a href="namespacearmnn.xhtml#a197a353aa963497d29a07796268ea5c1">armnn::IsInputSupported</a></div><div class="ttdeci">bool IsInputSupported(const BackendId &amp;backend, const TensorInfo &amp;input, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_8cpp_source.xhtml#l00346">LayerSupport.cpp:346</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml">armnn::SubgraphView</a></div><div class="ttdoc">The SubgraphView class represents a subgraph of a Graph. </div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_8hpp_source.xhtml#l00023">SubgraphView.hpp:23</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a5699e8606c37d18c03910b242cd1b010"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">armnn::Pooling2dDescriptor::m_PoolHeight</a></div><div class="ttdeci">uint32_t m_PoolHeight</div><div class="ttdoc">Pooling height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00370">Descriptors.hpp:370</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae72089bcab60ac175557f4241b16a014"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">armnn::DetectionPostProcessDescriptor::m_MaxDetections</a></div><div class="ttdeci">uint32_t m_MaxDetections</div><div class="ttdoc">Maximum numbers of detections. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00538">Descriptors.hpp:538</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a></div><div class="ttdoc">A PadDescriptor for the PadLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00961">Descriptors.hpp:961</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_opt_peephole_parameters_xhtml_a5d0ebbbb11b727a67877df40b59a628c"><div class="ttname"><a href="structarmnn_1_1_lstm_opt_peephole_parameters.xhtml#a5d0ebbbb11b727a67877df40b59a628c">armnn::LstmOptPeepholeParameters::m_CellToForgetWeights</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_CellToForgetWeights</div><div class="ttdoc">A unique pointer to represent 1D weights tensor with dimensions [num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00049">LstmLayer.hpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_acf8b8e23bf647836592982f97088d375"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">armnn::Layer::GetInputSlot</a></div><div class="ttdeci">const InputSlot &amp; GetInputSlot(unsigned int index) const override</div><div class="ttdoc">Get a const input slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00313">Layer.hpp:313</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Convolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00441">Descriptors.hpp:441</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">armnn::LayerType::ConvertFp16ToFp32</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::DepthwiseConvolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00493">Descriptors.hpp:493</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_output_layer.xhtml">armnn::OutputLayer</a></div><div class="ttdoc">A layer user-provided data can be bound to (e.g. inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_output_layer_8hpp_source.xhtml#l00013">OutputLayer.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_gather_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_gather_layer.xhtml">armnn::GatherLayer</a></div><div class="ttdoc">This layer represents a Gather operator. </div><div class="ttdef"><b>Definition:</b> <a href="_gather_layer_8hpp_source.xhtml#l00014">GatherLayer.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_detection_post_process_layer_xhtml_a6844fecab0edaf324de5a57fee8b65f1"><div class="ttname"><a href="classarmnn_1_1_detection_post_process_layer.xhtml#a6844fecab0edaf324de5a57fee8b65f1">armnn::DetectionPostProcessLayer::m_Anchors</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_Anchors</div><div class="ttdoc">A unique pointer to store Anchor values. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_8hpp_source.xhtml#l00020">DetectionPostProcessLayer.hpp:20</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a></div><div class="ttdoc">An LstmDescriptor for the LstmLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00897">Descriptors.hpp:897</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::Pooling2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00362">Descriptors.hpp:362</a></div></div>
<div class="ttc" id="_optimizer_tests_8cpp_xhtml_aa4e793c84e5dfea800d4dba921651e5b"><div class="ttname"><a href="_optimizer_tests_8cpp.xhtml#aa4e793c84e5dfea800d4dba921651e5b">CreateGatherGraph</a></div><div class="ttdeci">void CreateGatherGraph(Graph &amp;graph, const armnn::TensorInfo &amp;paramsInfo, const armnn::TensorInfo &amp;indicesInfo, const armnn::TensorInfo &amp;outputInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_optimizer_tests_8cpp_source.xhtml#l00449">OptimizerTests.cpp:449</a></div></div>
<div class="ttc" id="_graph_8hpp_xhtml"><div class="ttname"><a href="_graph_8hpp.xhtml">Graph.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a693b40e6b94e958836aeb0410ca186bd"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; IMemoryManagerSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_backend_internal_8hpp_source.xhtml#l00092">IBackendInternal.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a701cecec7714cf8bc9dca804f473610d"><div class="ttname"><a href="namespacearmnn.xhtml#a701cecec7714cf8bc9dca804f473610d">armnn::IsOutputSupported</a></div><div class="ttdeci">bool IsOutputSupported(const BackendId &amp;backend, const TensorInfo &amp;output, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_8cpp_source.xhtml#l00471">LayerSupport.cpp:471</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00194">Tensor.hpp:194</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimization_result_xhtml_a955b65059e7f9429a5d6041136bc1487"><div class="ttname"><a href="structarmnn_1_1_optimization_result.xhtml#a955b65059e7f9429a5d6041136bc1487">armnn::OptimizationResult::IsOk</a></div><div class="ttdeci">bool IsOk() const</div><div class="ttdef"><b>Definition:</b> <a href="_network_8hpp_source.xhtml#l00319">Network.hpp:319</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_opt_peephole_parameters_xhtml_a658f4245732f95c9fe756a934d370ca8"><div class="ttname"><a href="structarmnn_1_1_lstm_opt_peephole_parameters.xhtml#a658f4245732f95c9fe756a934d370ca8">armnn::LstmOptPeepholeParameters::m_CellToInputWeights</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_CellToInputWeights</div><div class="ttdoc">A unique pointer to represent 1D weights tensor with dimensions [num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00047">LstmLayer.hpp:47</a></div></div>
<div class="ttc" id="classarmnn_1_1_convolution2d_layer_xhtml_a2664044e28e69309ea08ef385fe53903"><div class="ttname"><a href="classarmnn_1_1_convolution2d_layer.xhtml#a2664044e28e69309ea08ef385fe53903">armnn::Convolution2dLayer::m_Weight</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_Weight</div><div class="ttdoc">A unique pointer to store Weight values. </div><div class="ttdef"><b>Definition:</b> <a href="_convolution2d_layer_8hpp_source.xhtml#l00020">Convolution2dLayer.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00314">Tensor.hpp:314</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a9a97cb6d32661a57fc33bd29b8e41ff4"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a9a97cb6d32661a57fc33bd29b8e41ff4">armnn::Layer::GetNameStr</a></div><div class="ttdeci">const std::string &amp; GetNameStr() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00217">Layer.hpp:217</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_adcf5037208faac36c0788239a073f75c"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">armnn::ResizeDescriptor::m_TargetWidth</a></div><div class="ttdeci">uint32_t m_TargetWidth</div><div class="ttdoc">Target width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00802">Descriptors.hpp:802</a></div></div>
<div class="ttc" id="structarmnn_1_1_gather_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a></div><div class="ttdoc">A GatherDescriptor for the GatherLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00737">Descriptors.hpp:737</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a2837b4396f20c956952d1a7286cab5f8"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">armnn::LstmDescriptor::m_PeepholeEnabled</a></div><div class="ttdeci">bool m_PeepholeEnabled</div><div class="ttdoc">Enable/disable peephole. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00929">Descriptors.hpp:929</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00600">INetwork.hpp:600</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a961bbfe1db71a848eff5a1f0ab775718ab1897515d548a960afe49ecf66a29021"><div class="ttname"><a href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718ab1897515d548a960afe49ecf66a29021">armnn::PoolingAlgorithm::Average</a></div></div>
<div class="ttc" id="classarmnn_1_1_mem_copy_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_mem_copy_layer.xhtml">armnn::MemCopyLayer</a></div><div class="ttdoc">This layer represents a memory copy operation. </div><div class="ttdef"><b>Definition:</b> <a href="_mem_copy_layer_8hpp_source.xhtml#l00013">MemCopyLayer.hpp:13</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a10d15f3df1ab52b3b915a4be1dbf386b"><div class="ttname"><a href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">armnn::BOOST_AUTO_TEST_CASE</a></div><div class="ttdeci">BOOST_AUTO_TEST_CASE(CheckConvolution2dLayer)</div><div class="ttdef"><b>Definition:</b> <a href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00268">ConstTensorLayerVisitor.cpp:268</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a58bfb9626d373249745d78b95543116e"><div class="ttname"><a href="namespacearmnn.xhtml#a58bfb9626d373249745d78b95543116e">armnn::IsActivationSupported</a></div><div class="ttdeci">bool IsActivationSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_8cpp_source.xhtml#l00069">LayerSupport.cpp:69</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00020">Descriptors.hpp:20</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimization_result_xhtml"><div class="ttname"><a href="structarmnn_1_1_optimization_result.xhtml">armnn::OptimizationResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_8hpp_source.xhtml#l00305">Network.hpp:305</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div></div>
<div class="ttc" id="classarmnn_1_1_floor_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_floor_layer.xhtml">armnn::FloorLayer</a></div><div class="ttdoc">This layer represents a floor operation. </div><div class="ttdef"><b>Definition:</b> <a href="_floor_layer_8hpp_source.xhtml#l00013">FloorLayer.hpp:13</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_opt_cifg_parameters_xhtml_a6e8971757790a032e5936da7847ba14b"><div class="ttname"><a href="structarmnn_1_1_lstm_opt_cifg_parameters.xhtml#a6e8971757790a032e5936da7847ba14b">armnn::LstmOptCifgParameters::m_RecurrentToInputWeights</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_RecurrentToInputWeights</div><div class="ttdoc">A unique pointer to represent 2D weights tensor with dimensions [input_size, num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00031">LstmLayer.hpp:31</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a46c3fa15c46fb0d1dcdc24d0ea5cb5cd"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">armnn::ResizeDescriptor::m_TargetHeight</a></div><div class="ttdeci">uint32_t m_TargetHeight</div><div class="ttdoc">Target height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00804">Descriptors.hpp:804</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ae1b07ed928036004bd257169e5aeeef4"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">armnn::LstmDescriptor::m_ActivationFunc</a></div><div class="ttdeci">uint32_t m_ActivationFunc</div><div class="ttdoc">The activation function to use. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00921">Descriptors.hpp:921</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_visitor_base_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer_visitor_base.xhtml">armnn::LayerVisitorBase</a></div><div class="ttdoc">Visitor base class with empty implementations. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_visitor_base_8hpp_source.xhtml#l00025">LayerVisitorBase.hpp:25</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Convolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00443">Descriptors.hpp:443</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00029">Graph.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_pooling2d_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_pooling2d_layer.xhtml">armnn::Pooling2dLayer</a></div><div class="ttdoc">This layer represents a pooling 2d operation. </div><div class="ttdef"><b>Definition:</b> <a href="_pooling2d_layer_8hpp_source.xhtml#l00013">Pooling2dLayer.hpp:13</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a531a3907ec13d3772370da88030191a5"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">armnn::LstmDescriptor::m_ClippingThresCell</a></div><div class="ttdeci">float m_ClippingThresCell</div><div class="ttdoc">Clipping threshold value for the cell state. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00923">Descriptors.hpp:923</a></div></div>
<div class="ttc" id="_i_network_8hpp_xhtml"><div class="ttname"><a href="_i_network_8hpp.xhtml">INetwork.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::Pooling2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00380">Descriptors.hpp:380</a></div></div>
<div class="ttc" id="classarmnn_1_1_addition_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_addition_layer.xhtml">armnn::AdditionLayer</a></div><div class="ttdoc">This layer represents an addition operation. </div><div class="ttdef"><b>Definition:</b> <a href="_addition_layer_8hpp_source.xhtml#l00013">AdditionLayer.hpp:13</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_basic_parameters_xhtml_a91dda74af4085ae43913746ad817795a"><div class="ttname"><a href="structarmnn_1_1_lstm_basic_parameters.xhtml#a91dda74af4085ae43913746ad817795a">armnn::LstmBasicParameters::m_RecurrentToOutputWeights</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_RecurrentToOutputWeights</div><div class="ttdoc">A unique pointer to represent 2D weights tensor with dimensions [output_size, num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00067">LstmLayer.hpp:67</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00042">IRuntime.hpp:42</a></div></div>
<div class="ttc" id="classarmnn_1_1_lstm_layer_xhtml_a4efa0f4d46817ab94e36c8507c26f276"><div class="ttname"><a href="classarmnn_1_1_lstm_layer.xhtml#a4efa0f4d46817ab94e36c8507c26f276">armnn::LstmLayer::m_PeepholeParameters</a></div><div class="ttdeci">LstmOptPeepholeParameters m_PeepholeParameters</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00084">LstmLayer.hpp:84</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_handler_xhtml_a97db12c41024f5545ef5cc4153e5443b"><div class="ttname"><a href="classarmnn_1_1_output_handler.xhtml#a97db12c41024f5545ef5cc4153e5443b">armnn::OutputHandler::SetTensorInfo</a></div><div class="ttdeci">void SetTensorInfo(const TensorInfo &amp;tensorInfo)</div><div class="ttdoc">Sets the TensorInfo used by this output handler. </div><div class="ttdef"><b>Definition:</b> <a href="_output_handler_8cpp_source.xhtml#l00015">OutputHandler.cpp:15</a></div></div>
<div class="ttc" id="_cpu_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="_cpu_tensor_handle_8hpp.xhtml">CpuTensorHandle.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a11fa919c11fe46aad613b2e960fcfe90"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">armnn::IBackendInternal::ILayerSupportSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; ILayerSupport &gt; ILayerSupportSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_backend_internal_8hpp_source.xhtml#l00087">IBackendInternal.hpp:87</a></div></div>
<div class="ttc" id="classarmnn_1_1_lstm_layer_xhtml_a3d3e6d0c3e6e570d9f831489c3bd14ce"><div class="ttname"><a href="classarmnn_1_1_lstm_layer.xhtml#a3d3e6d0c3e6e570d9f831489c3bd14ce">armnn::LstmLayer::m_ProjectionParameters</a></div><div class="ttdeci">LstmOptProjectionParameters m_ProjectionParameters</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00083">LstmLayer.hpp:83</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8acab870a91373c720c9822b59ecf3b8"><div class="ttname"><a href="namespacearmnn.xhtml#a8acab870a91373c720c9822b59ecf3b8">armnn::AssignBackends</a></div><div class="ttdeci">OptimizationResult AssignBackends(OptimizedNetwork *optNetObjPtr, BackendSettings &amp;backendSettings, Graph::Iterator &amp;firstLayer, Graph::Iterator &amp;lastLayer, Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; errMessages)</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00378">Network.cpp:378</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_opt_projection_parameters_xhtml_aa9f2880e4e2a1eb731f61c1e0941c6a7"><div class="ttname"><a href="structarmnn_1_1_lstm_opt_projection_parameters.xhtml#aa9f2880e4e2a1eb731f61c1e0941c6a7">armnn::LstmOptProjectionParameters::m_ProjectionBias</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_ProjectionBias</div><div class="ttdoc">A unique pointer to represent 1D weights tensor with dimensions [output_size]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00041">LstmLayer.hpp:41</a></div></div>
<div class="ttc" id="_profiler_tests_8cpp_xhtml_af7f71af5c6c124222dd1c42c5df892f4"><div class="ttname"><a href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END</a></div><div class="ttdeci">BOOST_AUTO_TEST_SUITE_END()</div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ad474e5c51a0b194ef32e812b86c0cbdb"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">armnn::LstmDescriptor::m_CifgEnabled</a></div><div class="ttdeci">bool m_CifgEnabled</div><div class="ttdoc">Enable/disable cifg (coupled input &amp; forget gate). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00927">Descriptors.hpp:927</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_basic_parameters_xhtml_a14ab2bc78421c417c4f97a65b0bd78f9"><div class="ttname"><a href="structarmnn_1_1_lstm_basic_parameters.xhtml#a14ab2bc78421c417c4f97a65b0bd78f9">armnn::LstmBasicParameters::m_InputToCellWeights</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_InputToCellWeights</div><div class="ttdoc">A unique pointer to represent 2D weights tensor with dimensions [input_size, num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00059">LstmLayer.hpp:59</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a0031997bf43bd2747656c31e4977793a"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">armnn::Pooling2dDescriptor::m_PoolType</a></div><div class="ttdeci">PoolingAlgorithm m_PoolType</div><div class="ttdoc">The pooling algorithm to use (Max. Average, L2). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00358">Descriptors.hpp:358</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::DepthwiseConvolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00495">Descriptors.hpp:495</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a2ceda8d369e861997d558fac74d79c33"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">armnn::Graph::InferTensorInfos</a></div><div class="ttdeci">void InferTensorInfos()</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00529">Graph.cpp:529</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_af2c0edc7ea62a8baaec4d3d9b2b09256"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">armnn::Layer::GetOutputHandler</a></div><div class="ttdeci">const OutputHandler &amp; GetOutputHandler(unsigned int i=0) const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00222">Layer.hpp:222</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f"><div class="ttname"><a href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::ResizeMethod::Bilinear</a></div></div>
<div class="ttc" id="classarmnn_1_1_input_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_input_layer.xhtml">armnn::InputLayer</a></div><div class="ttdoc">A layer user-provided data can be bound to (e.g. inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_input_layer_8hpp_source.xhtml#l00013">InputLayer.hpp:13</a></div></div>
<div class="ttc" id="_network_8hpp_xhtml"><div class="ttname"><a href="_network_8hpp.xhtml">Network.hpp</a></div></div>
<div class="ttc" id="_test_utils_8hpp_xhtml_a0eedb278f57355b47fa983450d4e378c"><div class="ttname"><a href="_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a></div><div class="ttdeci">bool CheckSequence(const armnn::Graph::ConstIterator first, const armnn::Graph::ConstIterator last)</div><div class="ttdef"><b>Definition:</b> <a href="_test_utils_8hpp_source.xhtml#l00021">TestUtils.hpp:21</a></div></div>
<div class="ttc" id="_optimizer_tests_8cpp_xhtml_a5065b32dd0aa2c08ef75e953ebedbc16"><div class="ttname"><a href="_optimizer_tests_8cpp.xhtml#a5065b32dd0aa2c08ef75e953ebedbc16">CreateConvolution2dGraph</a></div><div class="ttdeci">void CreateConvolution2dGraph(Graph &amp;graph, const unsigned int *inputShape, const unsigned int *weightsShape, const unsigned int *outputShape, DataLayout dataLayout=DataLayout::NCHW)</div><div class="ttdef"><b>Definition:</b> <a href="_optimizer_tests_8cpp_source.xhtml#l00258">OptimizerTests.cpp:258</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a7e5c5771d741dd5473989047a9314728"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">armnn::OutputSlot::SetTensorInfo</a></div><div class="ttdeci">void SetTensorInfo(const TensorInfo &amp;tensorInfo) override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00058">Layer.cpp:58</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a64c1dd1b6dd60be9f4a16db9c8f427a5"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a></div><div class="ttdeci">armnn::TensorInfo scoresInfo({ 1, 6, 3 }, armnn::DataType::Float32)</div></div>
<div class="ttc" id="structarmnn_1_1_lstm_opt_peephole_parameters_xhtml_a310e133b0b51b93a74b83008893792e9"><div class="ttname"><a href="structarmnn_1_1_lstm_opt_peephole_parameters.xhtml#a310e133b0b51b93a74b83008893792e9">armnn::LstmOptPeepholeParameters::m_CellToOutputWeights</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_CellToOutputWeights</div><div class="ttdoc">A unique pointer to represent 1D weights tensor with dimensions [num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00051">LstmLayer.hpp:51</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aea909c7327109228ef618d459015def3">armnn::Layer::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00283">Layer.cpp:283</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_aaef29472862381822654ab6cbf7cba2a"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">armnn::Layer::GetType</a></div><div class="ttdeci">LayerType GetType() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00262">Layer.hpp:262</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a0e36688a43c35668d8db5257274c68fe"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">armnn::Layer::GetOutputSlot</a></div><div class="ttdeci">const OutputSlot &amp; GetOutputSlot(unsigned int index=0) const override</div><div class="ttdoc">Get the const output slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00315">Layer.hpp:315</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_opt_projection_parameters_xhtml_a3ec2885c48ce888516e27c8b75a8cb83"><div class="ttname"><a href="structarmnn_1_1_lstm_opt_projection_parameters.xhtml#a3ec2885c48ce888516e27c8b75a8cb83">armnn::LstmOptProjectionParameters::m_ProjectionWeights</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_ProjectionWeights</div><div class="ttdoc">A unique pointer to represent 2D weights tensor with dimensions [output_size, num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00039">LstmLayer.hpp:39</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_lstm_layer_xhtml_a0e940dfa428f4eb429f8bc0d138b20af"><div class="ttname"><a href="classarmnn_1_1_lstm_layer.xhtml#a0e940dfa428f4eb429f8bc0d138b20af">armnn::LstmLayer::m_CifgParameters</a></div><div class="ttdeci">LstmOptCifgParameters m_CifgParameters</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00082">LstmLayer.hpp:82</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a02fd29b6dc3e21fbe4484362d85893bc"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">armnn::Graph::cend</a></div><div class="ttdeci">ConstIterator cend() const</div><div class="ttdoc">Returns const iterator pointing to the end of the list. Lowercase for range-based for loops...</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00174">Graph.hpp:174</a></div></div>
<div class="ttc" id="classarmnn_1_1_convolution2d_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_convolution2d_layer.xhtml">armnn::Convolution2dLayer</a></div><div class="ttdoc">This layer represents a convolution 2d operation. </div><div class="ttdef"><b>Definition:</b> <a href="_convolution2d_layer_8hpp_source.xhtml#l00015">Convolution2dLayer.hpp:15</a></div></div>
<div class="ttc" id="_test_utils_8cpp_xhtml_a0b295acb179f15eb3fb862b32008f782"><div class="ttname"><a href="_test_utils_8cpp.xhtml#a0b295acb179f15eb3fb862b32008f782">Connect</a></div><div class="ttdeci">void Connect(armnn::IConnectableLayer *from, armnn::IConnectableLayer *to, const armnn::TensorInfo &amp;tensorInfo, unsigned int fromIndex, unsigned int toIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_test_utils_8cpp_source.xhtml#l00012">TestUtils.cpp:12</a></div></div>
<div class="ttc" id="_layer_visitor_base_8hpp_xhtml"><div class="ttname"><a href="_layer_visitor_base_8hpp.xhtml">LayerVisitorBase.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
<div class="ttc" id="classarmnn_1_1_depthwise_convolution2d_layer_xhtml_a2664044e28e69309ea08ef385fe53903"><div class="ttname"><a href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml#a2664044e28e69309ea08ef385fe53903">armnn::DepthwiseConvolution2dLayer::m_Weight</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_Weight</div><div class="ttdoc">A unique pointer to store Weight values. </div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution2d_layer_8hpp_source.xhtml#l00019">DepthwiseConvolution2dLayer.hpp:19</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00324">Descriptors.hpp:324</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_settings_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_settings.xhtml">armnn::BackendSettings</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_settings_8hpp_source.xhtml#l00018">BackendSettings.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_afdf8eb85585a798ad0e936bde884d87b"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#afdf8eb85585a798ad0e936bde884d87b">armnn::Graph::GetNumLayers</a></div><div class="ttdeci">size_t GetNumLayers() const</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00191">Graph.hpp:191</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::ResizeDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00809">Descriptors.hpp:809</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00506">Descriptors.hpp:506</a></div></div>
<div class="ttc" id="_optimizer_tests_8cpp_xhtml_acd97facea671e23ec3e8b33c6c2ea321"><div class="ttname"><a href="_optimizer_tests_8cpp.xhtml#acd97facea671e23ec3e8b33c6c2ea321">CreateDepthwiseConvolution2dGraph</a></div><div class="ttdeci">void CreateDepthwiseConvolution2dGraph(Graph &amp;graph, const unsigned int *inputShape, const unsigned int *weightsShape, const unsigned int *outputShape, DataLayout dataLayout=DataLayout::NCHW)</div><div class="ttdef"><b>Definition:</b> <a href="_optimizer_tests_8cpp_source.xhtml#l00308">OptimizerTests.cpp:308</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b">armnn::ActivationFunction::Linear</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ada2ad7d1caeeb4ef6195c8925fad6a65"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">armnn::OutputSlot::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00063">Layer.cpp:63</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00046">Network.cpp:46</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_optimized_network_xhtml_a58ee539cf95c1e99fe4f54ef6e8bbd05"><div class="ttname"><a href="classarmnn_1_1_i_optimized_network.xhtml#a58ee539cf95c1e99fe4f54ef6e8bbd05">armnn::IOptimizedNetwork::Destroy</a></div><div class="ttdeci">static void Destroy(IOptimizedNetwork *network)</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00056">Network.cpp:56</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_basic_parameters_xhtml_a5a0d8af26a6aad1e5be521ea7dc550eb"><div class="ttname"><a href="structarmnn_1_1_lstm_basic_parameters.xhtml#a5a0d8af26a6aad1e5be521ea7dc550eb">armnn::LstmBasicParameters::m_InputToForgetWeights</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_InputToForgetWeights</div><div class="ttdoc">A unique pointer to represent 2D weights tensor with dimensions [input_size, num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00057">LstmLayer.hpp:57</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu, LeakyReLu, Abs, Sqrt, Square, Elu). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00043">Descriptors.hpp:43</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_opt_cifg_parameters_xhtml_a9945bc99f8a7400c0724117e29cb3abb"><div class="ttname"><a href="structarmnn_1_1_lstm_opt_cifg_parameters.xhtml#a9945bc99f8a7400c0724117e29cb3abb">armnn::LstmOptCifgParameters::m_InputGateBias</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_InputGateBias</div><div class="ttdoc">A unique pointer to represent 1D weights tensor with dimensions [num_units]. </div><div class="ttdef"><b>Definition:</b> <a href="_lstm_layer_8hpp_source.xhtml#l00033">LstmLayer.hpp:33</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Pooling2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00374">Descriptors.hpp:374</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a></div><div class="ttdoc">A DepthwiseConvolution2dDescriptor for the DepthwiseConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00455">Descriptors.hpp:455</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00210">Layer.hpp:210</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimizer_xhtml"><div class="ttname"><a href="classarmnn_1_1_optimizer.xhtml">armnn::Optimizer</a></div><div class="ttdef"><b>Definition:</b> <a href="_optimizer_8hpp_source.xhtml#l00014">Optimizer.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a></div><div class="ttdoc">A BatchNormalizationDescriptor for the BatchNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00621">Descriptors.hpp:621</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
<div class="ttc" id="classarmnn_1_1_resize_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_resize_layer.xhtml">armnn::ResizeLayer</a></div><div class="ttdoc">This layer represents a resize operation. </div><div class="ttdef"><b>Definition:</b> <a href="_resize_layer_8hpp_source.xhtml#l00013">ResizeLayer.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimized_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_optimized_network.xhtml">armnn::OptimizedNetwork</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_8hpp_source.xhtml#l00282">Network.hpp:282</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ac0981848e4ae57729f14f72bd4caa9f8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a></div><div class="ttdeci">std::vector&lt; float &gt; anchors({ 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 100.5f, 1.0f, 1.0f })</div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_ada6d56575c0fe53cf23c7ae4610c6367"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">armnn::IBackendInternal::IBackendContextPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IBackendContext &gt; IBackendContextPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_backend_internal_8hpp_source.xhtml#l00081">IBackendInternal.hpp:81</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9d86fd1fbecbedf5bdb69c7e7235fe5f.xhtml">test</a></li><li class="navelem"><a class="el" href="_optimizer_tests_8cpp.xhtml">OptimizerTests.cpp</a></li>
    <li class="footer">Generated on Wed Nov 25 2020 09:59:10 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
