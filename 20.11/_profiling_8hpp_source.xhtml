<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/Profiling.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_profiling_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Profiling.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_profiling_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_profiling_event_8hpp.xhtml">ProfilingEvent.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_profiler_8hpp.xhtml">armnn/IProfiler.hpp</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_wall_clock_timer_8hpp.xhtml">WallClockTimer.hpp</a>&quot;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;chrono&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;iosfwd&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;ctime&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;stack&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">// Simple single-threaded profiler.</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">// Tracks events reported by BeginEvent()/EndEvent() and outputs detailed information and stats when</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">// Profiler::AnalyzeEventsAndWriteResults() is called.</span></div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler.xhtml">   27</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_profiler.xhtml">Profiler</a> final : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_i_profiler.xhtml">IProfiler</a></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="classarmnn_1_1_profiler.xhtml#a997beb676bd403881fa274ec7ac9854c">Profiler</a>();</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <a class="code" href="classarmnn_1_1_profiler.xhtml#aa0f87e10a29a76f6358f43b09621df51">~Profiler</a>();</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler.xhtml#a70926d23f3aef7e657a9057a7badb014">   32</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarmnn_1_1_profiler.xhtml#a70926d23f3aef7e657a9057a7badb014">InstrumentPtr</a> = std::unique_ptr&lt;Instrument&gt;;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="comment">// Marks the beginning of a user-defined event.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="comment">// No attempt will be made to copy the name string: it must be known at compile time.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="classarmnn_1_1_event.xhtml">Event</a>* <a class="code" href="classarmnn_1_1_profiler.xhtml#abaf660a136b904fbcbd0c374fea38cd0">BeginEvent</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; backendId, <span class="keyword">const</span> std::string&amp; name, std::vector&lt;InstrumentPtr&gt;&amp;&amp; instruments);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="comment">// Marks the end of a user-defined event.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler.xhtml#a8ed16398e69bb7b0625e3cf4a279b1f3">EndEvent</a>(<a class="code" href="classarmnn_1_1_event.xhtml">Event</a>* event);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="comment">// Enables/disables profiling.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler.xhtml#a537b76b2a9f7fbcb538eabe994e424e0">EnableProfiling</a>(<span class="keywordtype">bool</span> enableProfiling) <span class="keyword">override</span>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="comment">// Checks if profiling is enabled.</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_profiler.xhtml#ad5ac843dd60a0ff7d4ab327f43fb88a5">IsProfilingEnabled</a>() <span class="keyword">override</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="comment">// Increments the event tag, allowing grouping of events in a user-defined manner (e.g. per inference).</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler.xhtml#afb5ba6c1110d2ea400f49ad7f3ac4d15">UpdateEventTag</a>();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="comment">// Analyzes the tracked events and writes the results to the given output stream.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">// Please refer to the configuration variables in Profiling.cpp to customize the information written.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler.xhtml#aeb61437c18e4bc111811428aec0e3ae9">AnalyzeEventsAndWriteResults</a>(std::ostream&amp; outStream) <span class="keyword">const override</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// Print stats for events in JSON Format to the given output stream.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler.xhtml#a352a82f3a338acf06a20d290f605c489">Print</a>(std::ostream&amp; outStream) <span class="keyword">const override</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// Gets the color to render an event with, based on which device it denotes.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    uint32_t <a class="code" href="classarmnn_1_1_profiler.xhtml#ac2afea56b7e3ffcc81f49f15febf88f1">GetEventColor</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; backendId) <span class="keyword">const</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">using</span> EventPtr = std::unique_ptr&lt;Event&gt;;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">struct </span>Marker</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        std::size_t m_Id;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    };</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">struct </span>ProfilingEventStats</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordtype">double</span> m_TotalMs;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordtype">double</span> m_MinMs;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordtype">double</span> m_MaxMs;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        uint32_t m_Count;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    };</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> EventIterType&gt;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordtype">void</span> AnalyzeEventSequenceAndWriteResults(EventIterType first, EventIterType last, std::ostream&amp; outStream) <span class="keyword">const</span>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    std::map&lt;std::string, ProfilingEventStats&gt; CalculateProfilingEventStats() <span class="keyword">const</span>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">void</span> PopulateInferences(std::vector&lt;const Event*&gt;&amp; outInferences, <span class="keywordtype">int</span>&amp; outBaseLevel) <span class="keyword">const</span>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">void</span> PopulateDescendants(std::map&lt;<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_event.xhtml">Event</a>*, std::vector&lt;const Event*&gt;&gt;&amp; outDescendantsMap) <span class="keyword">const</span>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    std::stack&lt;Event*&gt; m_Parents;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    std::vector&lt;EventPtr&gt; m_EventSequence;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordtype">bool</span> m_ProfilingEnabled;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment">// Friend functions for unit testing, see ProfilerTests.cpp.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">friend</span> <span class="keywordtype">size_t</span> <a class="code" href="classarmnn_1_1_profiler.xhtml#a3269840850209f5ae295310924b6175f">GetProfilerEventSequenceSize</a>(<a class="code" href="classarmnn_1_1_profiler.xhtml">armnn::Profiler</a>* profiler);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;};</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">// Singleton profiler manager.</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">// Keeps track of all the running profiler instances.</span></div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler_manager.xhtml">   93</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="comment">// Register the given profiler as a thread local pointer.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">void</span> RegisterProfiler(<a class="code" href="classarmnn_1_1_profiler.xhtml">Profiler</a>* profiler);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// Gets the thread local pointer to the profiler.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="classarmnn_1_1_profiler.xhtml">Profiler</a>* GetProfiler();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">// Accesses the singleton.</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a>&amp; GetInstance();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">// The constructor is kept private so that other instances of this class (other that the singleton&#39;s)</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">// can&#39;t be allocated.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a>() {}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;};</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">// Helper to easily add event markers to the codebase.</span></div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_profiling_event.xhtml">  112</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_scoped_profiling_event.xhtml">ScopedProfilingEvent</a></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_profiling_event.xhtml#a70926d23f3aef7e657a9057a7badb014">  115</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarmnn_1_1_scoped_profiling_event.xhtml#a70926d23f3aef7e657a9057a7badb014">InstrumentPtr</a> = std::unique_ptr&lt;Instrument&gt;;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_profiling_event.xhtml#aab2a17ec54b25439c22adab5b757d923">  118</a></span>&#160;    <a class="code" href="classarmnn_1_1_scoped_profiling_event.xhtml#aab2a17ec54b25439c22adab5b757d923">ScopedProfilingEvent</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; backendId, <span class="keyword">const</span> std::string&amp; name, Args&amp;&amp;... args)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        : m_Event(nullptr)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        , m_Profiler(<a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a>::GetInstance().GetProfiler())</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">if</span> (m_Profiler &amp;&amp; m_Profiler-&gt;IsProfilingEnabled())</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            std::vector&lt;InstrumentPtr&gt; instruments(0);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            instruments.reserve(<span class="keyword">sizeof</span>...(args)); <span class="comment">//One allocation</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            ConstructNextInVector(instruments, std::forward&lt;Args&gt;(args)...);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            m_Event = m_Profiler-&gt;BeginEvent(backendId, name, std::move(instruments));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_profiling_event.xhtml#aa4f6b27d8649f796fba223997c3a9087">  131</a></span>&#160;    <a class="code" href="classarmnn_1_1_scoped_profiling_event.xhtml#aa4f6b27d8649f796fba223997c3a9087">~ScopedProfilingEvent</a>()</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">if</span> (m_Profiler &amp;&amp; m_Event)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            m_Profiler-&gt;EndEvent(m_Event);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordtype">void</span> ConstructNextInVector(std::vector&lt;InstrumentPtr&gt;&amp; instruments)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(instruments);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Arg, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordtype">void</span> ConstructNextInVector(std::vector&lt;InstrumentPtr&gt;&amp; instruments, Arg&amp;&amp; arg, Args&amp;&amp;... args)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        instruments.emplace_back(std::make_unique&lt;Arg&gt;(std::forward&lt;Arg&gt;(arg)));</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        ConstructNextInVector(instruments, std::forward&lt;Args&gt;(args)...);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <a class="code" href="classarmnn_1_1_event.xhtml">Event</a>* m_Event;       <span class="comment">///&lt; Event to track</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_profiler.xhtml">Profiler</a>* m_Profiler; <span class="comment">///&lt; Profiler used</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="_profiling_8hpp.xhtml#abf950f66309182de79de30d6c8b02e9b">  159</a></span>&#160;<span class="preprocessor">#define ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS_UNIQUE_LOC_INNER(lineNumber, backendId, </span><span class="comment">/*name,*/</span><span class="preprocessor"> ...) \</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">    armnn::ScopedProfilingEvent e_ ## lineNumber(backendId, </span><span class="comment">/*name,*/</span><span class="preprocessor"> __VA_ARGS__);</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="_profiling_8hpp.xhtml#aafe12e2ab6c42b62466a8e4d6f9dc5bc">  162</a></span>&#160;<span class="preprocessor">#define ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS_UNIQUE_LOC(lineNumber, backendId, </span><span class="comment">/*name,*/</span><span class="preprocessor"> ...) \</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor">    ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS_UNIQUE_LOC_INNER(lineNumber, backendId, </span><span class="comment">/*name,*/</span><span class="preprocessor"> __VA_ARGS__)</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">// The event name must be known at compile time i.e. if you are going to use this version of the macro</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">// in code the first argument you supply after the backendId must be the name.</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">// NOTE: need to pass the line number as an argument from here so by the time it gets to the UNIQUE_LOC_INNER</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">//       above it has expanded to a string and will concat (##) correctly with the &#39;e_&#39; prefix to yield a</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">//       legal and unique variable name (so long as you don&#39;t use the macro twice on the same line).</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">//       The concat preprocessing operator (##) very unhelpfully will not expand macros see</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">//       https://gcc.gnu.org/onlinedocs/cpp/Concatenation.html for the gory details.</span></div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="_profiling_8hpp.xhtml#a1a638e817a4bf185cd95dc61f8cca62c">  172</a></span>&#160;<span class="preprocessor">#define ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS(backendId, </span><span class="comment">/*name,*/</span><span class="preprocessor"> ...) \</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="preprocessor">    ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS_UNIQUE_LOC(__LINE__,backendId, </span><span class="comment">/*name,*/</span><span class="preprocessor"> __VA_ARGS__)</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">  175</a></span>&#160;<span class="preprocessor">#define ARMNN_SCOPED_PROFILING_EVENT(backendId, name) \</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">    ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS(backendId, name, armnn::WallClockTimer())</span></div><div class="ttc" id="classarmnn_1_1_profiler_xhtml_a8ed16398e69bb7b0625e3cf4a279b1f3"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#a8ed16398e69bb7b0625e3cf4a279b1f3">armnn::Profiler::EndEvent</a></div><div class="ttdeci">void EndEvent(Event *event)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00217">Profiling.cpp:217</a></div></div>
<div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_event_xhtml"><div class="ttname"><a href="classarmnn_1_1_event.xhtml">armnn::Event</a></div><div class="ttdoc">Event class records measurements reported by BeginEvent()/EndEvent() and returns measurements when Ev...</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_event_8hpp_source.xhtml#l00023">ProfilingEvent.hpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_profiling_event_xhtml_a70926d23f3aef7e657a9057a7badb014"><div class="ttname"><a href="classarmnn_1_1_scoped_profiling_event.xhtml#a70926d23f3aef7e657a9057a7badb014">armnn::ScopedProfilingEvent::InstrumentPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Instrument &gt; InstrumentPtr</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00115">Profiling.hpp:115</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_a997beb676bd403881fa274ec7ac9854c"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#a997beb676bd403881fa274ec7ac9854c">armnn::Profiler::Profiler</a></div><div class="ttdeci">Profiler()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00165">Profiling.cpp:165</a></div></div>
<div class="ttc" id="_wall_clock_timer_8hpp_xhtml"><div class="ttname"><a href="_wall_clock_timer_8hpp.xhtml">WallClockTimer.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_a537b76b2a9f7fbcb538eabe994e424e0"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#a537b76b2a9f7fbcb538eabe994e424e0">armnn::Profiler::EnableProfiling</a></div><div class="ttdeci">void EnableProfiling(bool enableProfiling) override</div><div class="ttdoc">Enables/disables profiling for this profiler. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00195">Profiling.cpp:195</a></div></div>
<div class="ttc" id="_profiling_event_8hpp_xhtml"><div class="ttname"><a href="_profiling_event_8hpp.xhtml">ProfilingEvent.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_profiling_event_xhtml_aab2a17ec54b25439c22adab5b757d923"><div class="ttname"><a href="classarmnn_1_1_scoped_profiling_event.xhtml#aab2a17ec54b25439c22adab5b757d923">armnn::ScopedProfilingEvent::ScopedProfilingEvent</a></div><div class="ttdeci">ScopedProfilingEvent(const BackendId &amp;backendId, const std::string &amp;name, Args &amp;&amp;... args)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00118">Profiling.hpp:118</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_aeb61437c18e4bc111811428aec0e3ae9"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#aeb61437c18e4bc111811428aec0e3ae9">armnn::Profiler::AnalyzeEventsAndWriteResults</a></div><div class="ttdeci">void AnalyzeEventsAndWriteResults(std::ostream &amp;outStream) const override</div><div class="ttdoc">Analyzes the tracked events and writes the results to the given output stream. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00380">Profiling.cpp:380</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml">armnn::Profiler</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00027">Profiling.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_ad5ac843dd60a0ff7d4ab327f43fb88a5"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#ad5ac843dd60a0ff7d4ab327f43fb88a5">armnn::Profiler::IsProfilingEnabled</a></div><div class="ttdeci">bool IsProfilingEnabled() override</div><div class="ttdoc">Checks whether profiling is enabled. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00190">Profiling.cpp:190</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_aa0f87e10a29a76f6358f43b09621df51"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#aa0f87e10a29a76f6358f43b09621df51">armnn::Profiler::~Profiler</a></div><div class="ttdeci">~Profiler()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00176">Profiling.cpp:176</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_abaf660a136b904fbcbd0c374fea38cd0"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#abaf660a136b904fbcbd0c374fea38cd0">armnn::Profiler::BeginEvent</a></div><div class="ttdeci">Event * BeginEvent(const BackendId &amp;backendId, const std::string &amp;name, std::vector&lt; InstrumentPtr &gt; &amp;&amp;instruments)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00200">Profiling.cpp:200</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml">armnn::ProfilerManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00093">Profiling.hpp:93</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_profiling_event_xhtml"><div class="ttname"><a href="classarmnn_1_1_scoped_profiling_event.xhtml">armnn::ScopedProfilingEvent</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00112">Profiling.hpp:112</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_profiler_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_profiler.xhtml">armnn::IProfiler</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_profiler_8hpp_source.xhtml#l00013">IProfiler.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_profiling_event_xhtml_aa4f6b27d8649f796fba223997c3a9087"><div class="ttname"><a href="classarmnn_1_1_scoped_profiling_event.xhtml#aa4f6b27d8649f796fba223997c3a9087">armnn::ScopedProfilingEvent::~ScopedProfilingEvent</a></div><div class="ttdeci">~ScopedProfilingEvent()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00131">Profiling.hpp:131</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_a3269840850209f5ae295310924b6175f"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#a3269840850209f5ae295310924b6175f">armnn::Profiler::GetProfilerEventSequenceSize</a></div><div class="ttdeci">friend size_t GetProfilerEventSequenceSize(armnn::Profiler *profiler)</div><div class="ttdef"><b>Definition:</b> <a href="_profiler_tests_8cpp_source.xhtml#l00022">ProfilerTests.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_ac2afea56b7e3ffcc81f49f15febf88f1"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#ac2afea56b7e3ffcc81f49f15febf88f1">armnn::Profiler::GetEventColor</a></div><div class="ttdeci">uint32_t GetEventColor(const BackendId &amp;backendId) const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00463">Profiling.cpp:463</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_afb5ba6c1110d2ea400f49ad7f3ac4d15"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#afb5ba6c1110d2ea400f49ad7f3ac4d15">armnn::Profiler::UpdateEventTag</a></div><div class="ttdeci">void UpdateEventTag()</div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_a352a82f3a338acf06a20d290f605c489"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#a352a82f3a338acf06a20d290f605c489">armnn::Profiler::Print</a></div><div class="ttdeci">void Print(std::ostream &amp;outStream) const override</div><div class="ttdoc">Print stats for events in JSON Format to the given output stream. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00330">Profiling.cpp:330</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_a70926d23f3aef7e657a9057a7badb014"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#a70926d23f3aef7e657a9057a7badb014">armnn::Profiler::InstrumentPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Instrument &gt; InstrumentPtr</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00032">Profiling.hpp:32</a></div></div>
<div class="ttc" id="_i_profiler_8hpp_xhtml"><div class="ttname"><a href="_i_profiler_8hpp.xhtml">IProfiler.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_profiling_8hpp.xhtml">Profiling.hpp</a></li>
    <li class="footer">Generated on Thu Nov 26 2020 11:04:22 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
