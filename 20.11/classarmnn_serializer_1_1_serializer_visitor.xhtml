<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: SerializerVisitor Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_serializer_1_1_serializer_visitor.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_serializer_1_1_serializer_visitor-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SerializerVisitor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_serializer_8hpp_source.xhtml">Serializer.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for SerializerVisitor:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_serializer_1_1_serializer_visitor.png" usemap="#SerializerVisitor_map" alt=""/>
  <map id="SerializerVisitor_map" name="SerializerVisitor_map">
<area href="classarmnn_1_1_i_layer_visitor.xhtml" alt="ILayerVisitor" shape="rect" coords="0,0,102,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a430a872adcc26d52cf028edeec429382"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a430a872adcc26d52cf028edeec429382">SerializerVisitor</a> ()</td></tr>
<tr class="separator:a430a872adcc26d52cf028edeec429382"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3bae9f8bf1876586b2628c120694024"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ab3bae9f8bf1876586b2628c120694024">~SerializerVisitor</a> ()</td></tr>
<tr class="separator:ab3bae9f8bf1876586b2628c120694024"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab409abc02fdc367d3b95e6c14500616a"><td class="memItemLeft" align="right" valign="top">flatbuffers::FlatBufferBuilder &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ab409abc02fdc367d3b95e6c14500616a">GetFlatBufferBuilder</a> ()</td></tr>
<tr class="separator:ab409abc02fdc367d3b95e6c14500616a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab590ced8474cd5e0fa28912231b93f61"><td class="memItemLeft" align="right" valign="top">std::vector&lt; int &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ab590ced8474cd5e0fa28912231b93f61">GetInputIds</a> ()</td></tr>
<tr class="separator:ab590ced8474cd5e0fa28912231b93f61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05c5792591b9e83396c09ab21143cc44"><td class="memItemLeft" align="right" valign="top">std::vector&lt; int &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a05c5792591b9e83396c09ab21143cc44">GetOutputIds</a> ()</td></tr>
<tr class="separator:a05c5792591b9e83396c09ab21143cc44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05e611493d1b74287eed5e3af7594538"><td class="memItemLeft" align="right" valign="top">std::vector&lt; flatbuffers::Offset&lt; armnnSerializer::AnyLayer &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a05e611493d1b74287eed5e3af7594538">GetSerializedLayers</a> ()</td></tr>
<tr class="separator:a05e611493d1b74287eed5e3af7594538"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7594572286ad32d17d57eaa4cdde53f9"><td class="memItemLeft" align="right" valign="top">flatbuffers::Offset&lt; armnnSerializer::FeatureCompatibilityVersions &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a7594572286ad32d17d57eaa4cdde53f9">GetVersionTable</a> ()</td></tr>
<tr class="separator:a7594572286ad32d17d57eaa4cdde53f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb3379853398423f791269433f6bb43c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#afb3379853398423f791269433f6bb43c">VisitAbsLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:afb3379853398423f791269433f6bb43c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an absolute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#afb3379853398423f791269433f6bb43c">More...</a><br /></td></tr>
<tr class="separator:afb3379853398423f791269433f6bb43c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f7b255222c79282f598eb8efefa880b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a3f7b255222c79282f598eb8efefa880b">VisitActivationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a> &amp;descriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a3f7b255222c79282f598eb8efefa880b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a3f7b255222c79282f598eb8efefa880b">More...</a><br /></td></tr>
<tr class="separator:a3f7b255222c79282f598eb8efefa880b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b608d5a44e36e6cd96e915658d49da3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a7b608d5a44e36e6cd96e915658d49da3">VisitAdditionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a7b608d5a44e36e6cd96e915658d49da3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an addition layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a7b608d5a44e36e6cd96e915658d49da3">More...</a><br /></td></tr>
<tr class="separator:a7b608d5a44e36e6cd96e915658d49da3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7c76e1781b02bcc685ec87fe071b1fc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ad7c76e1781b02bcc685ec87fe071b1fc">VisitArgMinMaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a> &amp;argMinMaxDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ad7c76e1781b02bcc685ec87fe071b1fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an arg min max layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ad7c76e1781b02bcc685ec87fe071b1fc">More...</a><br /></td></tr>
<tr class="separator:ad7c76e1781b02bcc685ec87fe071b1fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d1235559a11a1aa63724eba742ad29c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a1d1235559a11a1aa63724eba742ad29c">VisitBatchToSpaceNdLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a> &amp;descriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a1d1235559a11a1aa63724eba742ad29c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a1d1235559a11a1aa63724eba742ad29c">More...</a><br /></td></tr>
<tr class="separator:a1d1235559a11a1aa63724eba742ad29c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53e3051bacbfc5d901184eb7cb29c8c2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a53e3051bacbfc5d901184eb7cb29c8c2">VisitBatchNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a> &amp;<a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a>, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;mean, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;variance, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;beta, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;gamma, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a53e3051bacbfc5d901184eb7cb29c8c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a53e3051bacbfc5d901184eb7cb29c8c2">More...</a><br /></td></tr>
<tr class="separator:a53e3051bacbfc5d901184eb7cb29c8c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb1afddc0f2cb1caac0daf5bbd13c8c8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#afb1afddc0f2cb1caac0daf5bbd13c8c8">VisitComparisonLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">armnn::ComparisonDescriptor</a> &amp;descriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:afb1afddc0f2cb1caac0daf5bbd13c8c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Comparison layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#afb1afddc0f2cb1caac0daf5bbd13c8c8">More...</a><br /></td></tr>
<tr class="separator:afb1afddc0f2cb1caac0daf5bbd13c8c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a148d342b40eada32d536c2ccda673405"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a148d342b40eada32d536c2ccda673405">VisitConcatLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">armnn::ConcatDescriptor</a> &amp;concatDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a148d342b40eada32d536c2ccda673405"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a148d342b40eada32d536c2ccda673405">More...</a><br /></td></tr>
<tr class="separator:a148d342b40eada32d536c2ccda673405"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7bb76117b0e10efef5d3d6637df4480"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ae7bb76117b0e10efef5d3d6637df4480">VisitConstantLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;input, const char *=nullptr) override</td></tr>
<tr class="memdesc:ae7bb76117b0e10efef5d3d6637df4480"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a layer with no inputs and a single output, which always corresponds to the passed in constant tensor should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ae7bb76117b0e10efef5d3d6637df4480">More...</a><br /></td></tr>
<tr class="separator:ae7bb76117b0e10efef5d3d6637df4480"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4c7002e267521e7ea0933ef2b767f9e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#af4c7002e267521e7ea0933ef2b767f9e">VisitConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &gt; &amp;biases, const char *=nullptr) override</td></tr>
<tr class="memdesc:af4c7002e267521e7ea0933ef2b767f9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#af4c7002e267521e7ea0933ef2b767f9e">More...</a><br /></td></tr>
<tr class="separator:af4c7002e267521e7ea0933ef2b767f9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac30449d327001492692fa23a666efd7f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ac30449d327001492692fa23a666efd7f">VisitDepthToSpaceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">armnn::DepthToSpaceDescriptor</a> &amp;descriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ac30449d327001492692fa23a666efd7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a depth to space layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ac30449d327001492692fa23a666efd7f">More...</a><br /></td></tr>
<tr class="separator:ac30449d327001492692fa23a666efd7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd318b4ffed3c04a4807ca2c13077ab7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#afd318b4ffed3c04a4807ca2c13077ab7">VisitDepthwiseConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &gt; &amp;biases, const char *name=nullptr) override</td></tr>
<tr class="memdesc:afd318b4ffed3c04a4807ca2c13077ab7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D depthwise convolution layer with biases should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#afd318b4ffed3c04a4807ca2c13077ab7">More...</a><br /></td></tr>
<tr class="separator:afd318b4ffed3c04a4807ca2c13077ab7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a502d24112baa19f11c76bc651e0cc0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a9a502d24112baa19f11c76bc651e0cc0">VisitDequantizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a9a502d24112baa19f11c76bc651e0cc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a Dequantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a9a502d24112baa19f11c76bc651e0cc0">More...</a><br /></td></tr>
<tr class="separator:a9a502d24112baa19f11c76bc651e0cc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace945f2f1d416b240f9c0344671b17ad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ace945f2f1d416b240f9c0344671b17ad">VisitDetectionPostProcessLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;<a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ace945f2f1d416b240f9c0344671b17ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a Detection PostProcess layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ace945f2f1d416b240f9c0344671b17ad">More...</a><br /></td></tr>
<tr class="separator:ace945f2f1d416b240f9c0344671b17ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cc611872dcd6b526c84231e0b6920da"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a9cc611872dcd6b526c84231e0b6920da">VisitDivisionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a9cc611872dcd6b526c84231e0b6920da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a division layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a9cc611872dcd6b526c84231e0b6920da">More...</a><br /></td></tr>
<tr class="separator:a9cc611872dcd6b526c84231e0b6920da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e0686c8a9f4a53f78fd35f83fa77c56"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a2e0686c8a9f4a53f78fd35f83fa77c56">VisitElementwiseUnaryLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">armnn::ElementwiseUnaryDescriptor</a> &amp;descriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a2e0686c8a9f4a53f78fd35f83fa77c56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a2e0686c8a9f4a53f78fd35f83fa77c56">More...</a><br /></td></tr>
<tr class="separator:a2e0686c8a9f4a53f78fd35f83fa77c56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a778b3249ab3704387496d45c39480ecb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a778b3249ab3704387496d45c39480ecb">VisitEqualLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a778b3249ab3704387496d45c39480ecb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an Equal layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a778b3249ab3704387496d45c39480ecb">More...</a><br /></td></tr>
<tr class="separator:a778b3249ab3704387496d45c39480ecb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cba52e71687c849f356dd218bd7707c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a5cba52e71687c849f356dd218bd7707c">VisitFillLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">armnn::FillDescriptor</a> &amp;fillDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a5cba52e71687c849f356dd218bd7707c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a fill layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a5cba52e71687c849f356dd218bd7707c">More...</a><br /></td></tr>
<tr class="separator:a5cba52e71687c849f356dd218bd7707c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64c53003d714d4957829f821a5e4153d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a64c53003d714d4957829f821a5e4153d">VisitFloorLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a64c53003d714d4957829f821a5e4153d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a floor layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a64c53003d714d4957829f821a5e4153d">More...</a><br /></td></tr>
<tr class="separator:a64c53003d714d4957829f821a5e4153d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d4758122aed43d472cdbd59e84bc047"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a0d4758122aed43d472cdbd59e84bc047">VisitFullyConnectedLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a> &amp;fullyConnectedDescriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &gt; &amp;biases, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a0d4758122aed43d472cdbd59e84bc047"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a0d4758122aed43d472cdbd59e84bc047">More...</a><br /></td></tr>
<tr class="separator:a0d4758122aed43d472cdbd59e84bc047"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad297ae199a9fa61e1fd983d645da6471"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ad297ae199a9fa61e1fd983d645da6471">VisitGatherLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ad297ae199a9fa61e1fd983d645da6471"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ad297ae199a9fa61e1fd983d645da6471">More...</a><br /></td></tr>
<tr class="separator:ad297ae199a9fa61e1fd983d645da6471"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2398d989dad3d2be45a91343f1f1e3f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ab2398d989dad3d2be45a91343f1f1e3f">VisitGatherLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a> &amp;gatherDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ab2398d989dad3d2be45a91343f1f1e3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ab2398d989dad3d2be45a91343f1f1e3f">More...</a><br /></td></tr>
<tr class="separator:ab2398d989dad3d2be45a91343f1f1e3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0d8bc8095f70f4616bc3ace8dd46b02"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ab0d8bc8095f70f4616bc3ace8dd46b02">VisitGreaterLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ab0d8bc8095f70f4616bc3ace8dd46b02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Greater layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ab0d8bc8095f70f4616bc3ace8dd46b02">More...</a><br /></td></tr>
<tr class="separator:ab0d8bc8095f70f4616bc3ace8dd46b02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade20ba84b9c46a9afedf0b969f870919"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ade20ba84b9c46a9afedf0b969f870919">VisitInputLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> id, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ade20ba84b9c46a9afedf0b969f870919"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an InputLayer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ade20ba84b9c46a9afedf0b969f870919">More...</a><br /></td></tr>
<tr class="separator:ade20ba84b9c46a9afedf0b969f870919"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae3bf0ab71205ddf8916512ac8330a1e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#aae3bf0ab71205ddf8916512ac8330a1e">VisitInstanceNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">armnn::InstanceNormalizationDescriptor</a> &amp;instanceNormalizationDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:aae3bf0ab71205ddf8916512ac8330a1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an instance normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aae3bf0ab71205ddf8916512ac8330a1e">More...</a><br /></td></tr>
<tr class="separator:aae3bf0ab71205ddf8916512ac8330a1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a227d927a30f0700956047d9f65fca813"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a227d927a30f0700956047d9f65fca813">VisitL2NormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">armnn::L2NormalizationDescriptor</a> &amp;l2NormalizationDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a227d927a30f0700956047d9f65fca813"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an L2 normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a227d927a30f0700956047d9f65fca813">More...</a><br /></td></tr>
<tr class="separator:a227d927a30f0700956047d9f65fca813"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34dbb365c6adc4f1709d79e4f0f71d65"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a34dbb365c6adc4f1709d79e4f0f71d65">VisitLogicalBinaryLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">armnn::LogicalBinaryDescriptor</a> &amp;descriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a34dbb365c6adc4f1709d79e4f0f71d65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a logical binary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a34dbb365c6adc4f1709d79e4f0f71d65">More...</a><br /></td></tr>
<tr class="separator:a34dbb365c6adc4f1709d79e4f0f71d65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c02b1f1028daf64f7c6244ac68b37f5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a5c02b1f1028daf64f7c6244ac68b37f5">VisitLogSoftmaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">armnn::LogSoftmaxDescriptor</a> &amp;logSoftmaxDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a5c02b1f1028daf64f7c6244ac68b37f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a log softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a5c02b1f1028daf64f7c6244ac68b37f5">More...</a><br /></td></tr>
<tr class="separator:a5c02b1f1028daf64f7c6244ac68b37f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b37a5d520204e4e1652e6d4d38774b3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a2b37a5d520204e4e1652e6d4d38774b3">VisitLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">armnn::LstmInputParams</a> &amp;params, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a2b37a5d520204e4e1652e6d4d38774b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an Lstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a2b37a5d520204e4e1652e6d4d38774b3">More...</a><br /></td></tr>
<tr class="separator:a2b37a5d520204e4e1652e6d4d38774b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1404339c6c051dc6924a16172db4b3ee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a1404339c6c051dc6924a16172db4b3ee">VisitMeanLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a> &amp;descriptor, const char *name) override</td></tr>
<tr class="memdesc:a1404339c6c051dc6924a16172db4b3ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Mean layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a1404339c6c051dc6924a16172db4b3ee">More...</a><br /></td></tr>
<tr class="separator:a1404339c6c051dc6924a16172db4b3ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87432c758f53e21892780fc3b10b5c2a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a87432c758f53e21892780fc3b10b5c2a">VisitMinimumLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a87432c758f53e21892780fc3b10b5c2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Minimum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a87432c758f53e21892780fc3b10b5c2a">More...</a><br /></td></tr>
<tr class="separator:a87432c758f53e21892780fc3b10b5c2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29cb9e904f31bcc86b1ab75d13d343a4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a29cb9e904f31bcc86b1ab75d13d343a4">VisitMaximumLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a29cb9e904f31bcc86b1ab75d13d343a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Maximum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a29cb9e904f31bcc86b1ab75d13d343a4">More...</a><br /></td></tr>
<tr class="separator:a29cb9e904f31bcc86b1ab75d13d343a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae91857ae8a9be3557316eb446c40ba98"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ae91857ae8a9be3557316eb446c40ba98">VisitMergeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ae91857ae8a9be3557316eb446c40ba98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a merge layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ae91857ae8a9be3557316eb446c40ba98">More...</a><br /></td></tr>
<tr class="separator:ae91857ae8a9be3557316eb446c40ba98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6013ef93bf6ec846910e019a54cf021"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ac6013ef93bf6ec846910e019a54cf021">VisitMergerLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="namespacearmnn.xhtml#a003d213dd28b0b8c0f26fbf268ccb975">armnn::MergerDescriptor</a> &amp;mergerDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ac6013ef93bf6ec846910e019a54cf021"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a merger layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ac6013ef93bf6ec846910e019a54cf021">More...</a><br /></td></tr>
<tr class="separator:ac6013ef93bf6ec846910e019a54cf021"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23e516e20d857cd11ce80d0967ae48f3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a23e516e20d857cd11ce80d0967ae48f3">VisitMultiplicationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a23e516e20d857cd11ce80d0967ae48f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a multiplication layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a23e516e20d857cd11ce80d0967ae48f3">More...</a><br /></td></tr>
<tr class="separator:a23e516e20d857cd11ce80d0967ae48f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56858f9071c8bf57fdb31a96833ff4bd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a56858f9071c8bf57fdb31a96833ff4bd">VisitOutputLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> id, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a56858f9071c8bf57fdb31a96833ff4bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an output layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a56858f9071c8bf57fdb31a96833ff4bd">More...</a><br /></td></tr>
<tr class="separator:a56858f9071c8bf57fdb31a96833ff4bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3569b9af864b7b141b067e7de3902bf3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a3569b9af864b7b141b067e7de3902bf3">VisitPadLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a> &amp;<a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a>, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a3569b9af864b7b141b067e7de3902bf3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a pad layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a3569b9af864b7b141b067e7de3902bf3">More...</a><br /></td></tr>
<tr class="separator:a3569b9af864b7b141b067e7de3902bf3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac81df940ac47b39a703a2cbe017bda8e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ac81df940ac47b39a703a2cbe017bda8e">VisitPermuteLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a> &amp;<a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a>, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ac81df940ac47b39a703a2cbe017bda8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ac81df940ac47b39a703a2cbe017bda8e">More...</a><br /></td></tr>
<tr class="separator:ac81df940ac47b39a703a2cbe017bda8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3c8fcc1045d3379148d4298b27c20d3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ab3c8fcc1045d3379148d4298b27c20d3">VisitPooling2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a> &amp;pooling2dDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ab3c8fcc1045d3379148d4298b27c20d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ab3c8fcc1045d3379148d4298b27c20d3">More...</a><br /></td></tr>
<tr class="separator:ab3c8fcc1045d3379148d4298b27c20d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26930996b666eef0b5b1fe562644f5c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a26930996b666eef0b5b1fe562644f5c9">VisitPreluLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a26930996b666eef0b5b1fe562644f5c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a PReLU activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a26930996b666eef0b5b1fe562644f5c9">More...</a><br /></td></tr>
<tr class="separator:a26930996b666eef0b5b1fe562644f5c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25ee3712e8012235fedcd41fdd1b78a3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a25ee3712e8012235fedcd41fdd1b78a3">VisitQuantizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a25ee3712e8012235fedcd41fdd1b78a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a quantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a25ee3712e8012235fedcd41fdd1b78a3">More...</a><br /></td></tr>
<tr class="separator:a25ee3712e8012235fedcd41fdd1b78a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af01d9d7ba6c29a2a0e2efa291f6887f6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#af01d9d7ba6c29a2a0e2efa291f6887f6">VisitQLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">armnn::QLstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">armnn::LstmInputParams</a> &amp;params, const char *name=nullptr) override</td></tr>
<tr class="memdesc:af01d9d7ba6c29a2a0e2efa291f6887f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a QLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#af01d9d7ba6c29a2a0e2efa291f6887f6">More...</a><br /></td></tr>
<tr class="separator:af01d9d7ba6c29a2a0e2efa291f6887f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a598e914a8657aca24ed847d9069ad025"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a598e914a8657aca24ed847d9069ad025">VisitQuantizedLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">armnn::QuantizedLstmInputParams</a> &amp;params, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a598e914a8657aca24ed847d9069ad025"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a QuantizedLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a598e914a8657aca24ed847d9069ad025">More...</a><br /></td></tr>
<tr class="separator:a598e914a8657aca24ed847d9069ad025"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d260d77fa97488a8fd0ef0e6fd4177a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a9d260d77fa97488a8fd0ef0e6fd4177a">VisitRankLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a9d260d77fa97488a8fd0ef0e6fd4177a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a rank layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a9d260d77fa97488a8fd0ef0e6fd4177a">More...</a><br /></td></tr>
<tr class="separator:a9d260d77fa97488a8fd0ef0e6fd4177a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada00d4a9cb133fef352290610f257000"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ada00d4a9cb133fef352290610f257000">VisitReshapeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a> &amp;reshapeDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ada00d4a9cb133fef352290610f257000"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ada00d4a9cb133fef352290610f257000">More...</a><br /></td></tr>
<tr class="separator:ada00d4a9cb133fef352290610f257000"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7df3f2ae8cbb23bb8651fff4d079718"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ad7df3f2ae8cbb23bb8651fff4d079718">VisitResizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a> &amp;resizeDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ad7df3f2ae8cbb23bb8651fff4d079718"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ad7df3f2ae8cbb23bb8651fff4d079718">More...</a><br /></td></tr>
<tr class="separator:ad7df3f2ae8cbb23bb8651fff4d079718"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa243ee90086da1e8270b8391dd8f221"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#afa243ee90086da1e8270b8391dd8f221">VisitResizeBilinearLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">armnn::ResizeBilinearDescriptor</a> &amp;resizeDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:afa243ee90086da1e8270b8391dd8f221"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#afa243ee90086da1e8270b8391dd8f221">More...</a><br /></td></tr>
<tr class="separator:afa243ee90086da1e8270b8391dd8f221"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9fea44d69144543d711293ab4a61af4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#af9fea44d69144543d711293ab4a61af4">VisitRsqrtLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:af9fea44d69144543d711293ab4a61af4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Reciprocal of square root layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#af9fea44d69144543d711293ab4a61af4">More...</a><br /></td></tr>
<tr class="separator:af9fea44d69144543d711293ab4a61af4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8931b9c0199822fe3db2fdbde579a96e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a8931b9c0199822fe3db2fdbde579a96e">VisitSliceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">armnn::SliceDescriptor</a> &amp;sliceDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a8931b9c0199822fe3db2fdbde579a96e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8931b9c0199822fe3db2fdbde579a96e">More...</a><br /></td></tr>
<tr class="separator:a8931b9c0199822fe3db2fdbde579a96e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22d44460791b64d4e1d65f8107f69786"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a22d44460791b64d4e1d65f8107f69786">VisitSoftmaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a> &amp;softmaxDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a22d44460791b64d4e1d65f8107f69786"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a22d44460791b64d4e1d65f8107f69786">More...</a><br /></td></tr>
<tr class="separator:a22d44460791b64d4e1d65f8107f69786"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ca05fff57392b368ce229af4721aa19"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a4ca05fff57392b368ce229af4721aa19">VisitSpaceToBatchNdLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a> &amp;spaceToBatchNdDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a4ca05fff57392b368ce229af4721aa19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a4ca05fff57392b368ce229af4721aa19">More...</a><br /></td></tr>
<tr class="separator:a4ca05fff57392b368ce229af4721aa19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3c4485dc7e9529e9a03e74ba69bd624"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#aa3c4485dc7e9529e9a03e74ba69bd624">VisitSpaceToDepthLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::SpaceToDepthDescriptor</a> &amp;spaceToDepthDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:aa3c4485dc7e9529e9a03e74ba69bd624"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a space to depth layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aa3c4485dc7e9529e9a03e74ba69bd624">More...</a><br /></td></tr>
<tr class="separator:aa3c4485dc7e9529e9a03e74ba69bd624"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf9c46396d90c17839fcbdd9f400166e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#adf9c46396d90c17839fcbdd9f400166e">VisitNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a> &amp;normalizationDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:adf9c46396d90c17839fcbdd9f400166e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#adf9c46396d90c17839fcbdd9f400166e">More...</a><br /></td></tr>
<tr class="separator:adf9c46396d90c17839fcbdd9f400166e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab24e753aaf05ae1f1b099ec020bbb0df"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ab24e753aaf05ae1f1b099ec020bbb0df">VisitSplitterLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">armnn::ViewsDescriptor</a> &amp;viewsDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:ab24e753aaf05ae1f1b099ec020bbb0df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ab24e753aaf05ae1f1b099ec020bbb0df">More...</a><br /></td></tr>
<tr class="separator:ab24e753aaf05ae1f1b099ec020bbb0df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdc56797f18b4ec2b66469bd4553d65b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#afdc56797f18b4ec2b66469bd4553d65b">VisitStandInLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">armnn::StandInDescriptor</a> &amp;standInDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:afdc56797f18b4ec2b66469bd4553d65b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a StandInLayer should call back to when its Accept(ILaterVisitor&amp;) function is invoked.  <a href="#afdc56797f18b4ec2b66469bd4553d65b">More...</a><br /></td></tr>
<tr class="separator:afdc56797f18b4ec2b66469bd4553d65b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6835f67d172384fb91ca5e7d0933a00"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#aa6835f67d172384fb91ca5e7d0933a00">VisitStackLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">armnn::StackDescriptor</a> &amp;stackDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:aa6835f67d172384fb91ca5e7d0933a00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a stack layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aa6835f67d172384fb91ca5e7d0933a00">More...</a><br /></td></tr>
<tr class="separator:aa6835f67d172384fb91ca5e7d0933a00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f0cb9c392102c5108766a0faa754d92"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a4f0cb9c392102c5108766a0faa754d92">VisitStridedSliceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a> &amp;stridedSliceDescriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a4f0cb9c392102c5108766a0faa754d92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a4f0cb9c392102c5108766a0faa754d92">More...</a><br /></td></tr>
<tr class="separator:a4f0cb9c392102c5108766a0faa754d92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f33221ab8f8feb4f2bbd5ddaa5bfa02"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a8f33221ab8f8feb4f2bbd5ddaa5bfa02">VisitSubtractionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a8f33221ab8f8feb4f2bbd5ddaa5bfa02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a subtraction layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8f33221ab8f8feb4f2bbd5ddaa5bfa02">More...</a><br /></td></tr>
<tr class="separator:a8f33221ab8f8feb4f2bbd5ddaa5bfa02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20396d2da2d38ae69bd5bda5d8c1e8dc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a20396d2da2d38ae69bd5bda5d8c1e8dc">VisitSwitchLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a20396d2da2d38ae69bd5bda5d8c1e8dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a switch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a20396d2da2d38ae69bd5bda5d8c1e8dc">More...</a><br /></td></tr>
<tr class="separator:a20396d2da2d38ae69bd5bda5d8c1e8dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa46bee20f6017ada3c3a46e1bdf23011"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#aa46bee20f6017ada3c3a46e1bdf23011">VisitTransposeConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">armnn::TransposeConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &gt; &amp;biases, const char *=nullptr) override</td></tr>
<tr class="memdesc:aa46bee20f6017ada3c3a46e1bdf23011"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D transpose convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aa46bee20f6017ada3c3a46e1bdf23011">More...</a><br /></td></tr>
<tr class="separator:aa46bee20f6017ada3c3a46e1bdf23011"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82daa527121e400d8bab5eecc77f6fcb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a82daa527121e400d8bab5eecc77f6fcb">VisitTransposeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a> &amp;descriptor, const char *name=nullptr) override</td></tr>
<tr class="memdesc:a82daa527121e400d8bab5eecc77f6fcb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a transpose layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a82daa527121e400d8bab5eecc77f6fcb">More...</a><br /></td></tr>
<tr class="separator:a82daa527121e400d8bab5eecc77f6fcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_layer_visitor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_layer_visitor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a></td></tr>
<tr class="memitem:a463965a96896bf0d261b44eea5172c7b inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a463965a96896bf0d261b44eea5172c7b">StartVisit</a> ()</td></tr>
<tr class="separator:a463965a96896bf0d261b44eea5172c7b inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4549b1bbb63fa26700d74854e388784f inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a4549b1bbb63fa26700d74854e388784f">FinishVisit</a> ()</td></tr>
<tr class="separator:a4549b1bbb63fa26700d74854e388784f inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_layer_visitor"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_layer_visitor')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a></td></tr>
<tr class="memitem:a27fa880bce96ac7355284a7681f2377e inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a27fa880bce96ac7355284a7681f2377e">ILayerVisitor</a> ()</td></tr>
<tr class="separator:a27fa880bce96ac7355284a7681f2377e inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ad7aeeaf26228ef11c15fa5d4507d8a inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7ad7aeeaf26228ef11c15fa5d4507d8a">~ILayerVisitor</a> ()</td></tr>
<tr class="separator:a7ad7aeeaf26228ef11c15fa5d4507d8a inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_serializer_8hpp_source.xhtml#l00021">21</a> of file <a class="el" href="_serializer_8hpp_source.xhtml">Serializer.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a430a872adcc26d52cf028edeec429382"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a430a872adcc26d52cf028edeec429382">&#9670;&nbsp;</a></span>SerializerVisitor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml">SerializerVisitor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_serializer_8hpp_source.xhtml#l00024">24</a> of file <a class="el" href="_serializer_8hpp_source.xhtml">Serializer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;: m_layerId(0) {}</div></div><!-- fragment -->
</div>
</div>
<a id="ab3bae9f8bf1876586b2628c120694024"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3bae9f8bf1876586b2628c120694024">&#9670;&nbsp;</a></span>~SerializerVisitor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml">SerializerVisitor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_serializer_8hpp_source.xhtml#l00025">25</a> of file <a class="el" href="_serializer_8hpp_source.xhtml">Serializer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ab409abc02fdc367d3b95e6c14500616a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab409abc02fdc367d3b95e6c14500616a">&#9670;&nbsp;</a></span>GetFlatBufferBuilder()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">flatbuffers::FlatBufferBuilder&amp; GetFlatBufferBuilder </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_serializer_8hpp_source.xhtml#l00027">27</a> of file <a class="el" href="_serializer_8hpp_source.xhtml">Serializer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keywordflow">return</span> m_flatBufferBuilder;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="ab590ced8474cd5e0fa28912231b93f61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab590ced8474cd5e0fa28912231b93f61">&#9670;&nbsp;</a></span>GetInputIds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;int&gt;&amp; GetInputIds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_serializer_8hpp_source.xhtml#l00032">32</a> of file <a class="el" href="_serializer_8hpp_source.xhtml">Serializer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordflow">return</span> m_inputIds;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a05c5792591b9e83396c09ab21143cc44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05c5792591b9e83396c09ab21143cc44">&#9670;&nbsp;</a></span>GetOutputIds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;int&gt;&amp; GetOutputIds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_serializer_8hpp_source.xhtml#l00037">37</a> of file <a class="el" href="_serializer_8hpp_source.xhtml">Serializer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">return</span> m_outputIds;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a05e611493d1b74287eed5e3af7594538"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05e611493d1b74287eed5e3af7594538">&#9670;&nbsp;</a></span>GetSerializedLayers()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;flatbuffers::Offset&lt;armnnSerializer::AnyLayer&gt; &gt;&amp; GetSerializedLayers </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_serializer_8hpp_source.xhtml#l00042">42</a> of file <a class="el" href="_serializer_8hpp_source.xhtml">Serializer.hpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors()</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00043">ARMNN_DEPRECATED_MSG</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01681">SerializerVisitor::GetVersionTable()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00128">SerializerVisitor::VisitAbsLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00138">SerializerVisitor::VisitActivationLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00163">SerializerVisitor::VisitAdditionLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00178">SerializerVisitor::VisitArgMinMaxLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00231">SerializerVisitor::VisitBatchNormalizationLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00201">SerializerVisitor::VisitBatchToSpaceNdLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00262">SerializerVisitor::VisitComparisonLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00769">SerializerVisitor::VisitConcatLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00278">SerializerVisitor::VisitConstantLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00299">SerializerVisitor::VisitConvolution2dLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00340">SerializerVisitor::VisitDepthToSpaceLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00356">SerializerVisitor::VisitDepthwiseConvolution2dLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00393">SerializerVisitor::VisitDequantizeLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00404">SerializerVisitor::VisitDetectionPostProcessLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00435">SerializerVisitor::VisitDivisionLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00445">SerializerVisitor::VisitElementwiseUnaryLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00460">SerializerVisitor::VisitEqualLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00470">SerializerVisitor::VisitFillLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00485">SerializerVisitor::VisitFloorLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01056">SerializerVisitor::VisitFullyConnectedLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00495">SerializerVisitor::VisitGatherLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00516">SerializerVisitor::VisitGreaterLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00086">SerializerVisitor::VisitInputLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00526">SerializerVisitor::VisitInstanceNormalizationLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00546">SerializerVisitor::VisitL2NormalizationLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00567">SerializerVisitor::VisitLogicalBinaryLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00582">SerializerVisitor::VisitLogSoftmaxLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00606">SerializerVisitor::VisitLstmLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00714">SerializerVisitor::VisitMaximumLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00724">SerializerVisitor::VisitMeanLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00752">SerializerVisitor::VisitMergeLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00762">SerializerVisitor::VisitMergerLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00742">SerializerVisitor::VisitMinimumLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00804">SerializerVisitor::VisitMultiplicationLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01212">SerializerVisitor::VisitNormalizationLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00108">SerializerVisitor::VisitOutputLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00815">SerializerVisitor::VisitPadLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00841">SerializerVisitor::VisitPermuteLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01001">SerializerVisitor::VisitPooling2dLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01030">SerializerVisitor::VisitPreluLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01387">SerializerVisitor::VisitQLstmLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01512">SerializerVisitor::VisitQuantizedLstmLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01045">SerializerVisitor::VisitQuantizeLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00869">SerializerVisitor::VisitRankLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00879">SerializerVisitor::VisitReshapeLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00905">SerializerVisitor::VisitResizeBilinearLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00928">SerializerVisitor::VisitResizeLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00952">SerializerVisitor::VisitRsqrtLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00962">SerializerVisitor::VisitSliceLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00979">SerializerVisitor::VisitSoftmaxLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01095">SerializerVisitor::VisitSpaceToBatchNdLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01126">SerializerVisitor::VisitSpaceToDepthLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01146">SerializerVisitor::VisitSplitterLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01237">SerializerVisitor::VisitStackLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01260">SerializerVisitor::VisitStandInLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01276">SerializerVisitor::VisitStridedSliceLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01303">SerializerVisitor::VisitSubtractionLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01313">SerializerVisitor::VisitSwitchLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01323">SerializerVisitor::VisitTransposeConvolution2dLayer()</a>, and <a class="el" href="_serializer_8cpp_source.xhtml#l01360">SerializerVisitor::VisitTransposeLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">return</span> m_serializedLayers;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a7594572286ad32d17d57eaa4cdde53f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7594572286ad32d17d57eaa4cdde53f9">&#9670;&nbsp;</a></span>GetVersionTable()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">flatbuffers::Offset&lt; armnnSerializer::FeatureCompatibilityVersions &gt; GetVersionTable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01681">1681</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a41d30a9cd272e05986d71a69d6ad618b">IOutputSlot::CalculateIndexOnOwner()</a>, <a class="el" href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">IInputSlot::GetConnection()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">IConnectableLayer::GetNumInputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">IConnectableLayer::GetNumOutputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ad0c3555b126975ad6b3e250fe2a59534">IOutputSlot::GetOwningLayerGuid()</a>, and <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">IOutputSlot::GetTensorInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;{</div><div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;    flatbuffers::Offset&lt;armnnSerializer::FeatureCompatibilityVersions&gt; versionsTable =</div><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;        serializer::CreateFeatureCompatibilityVersions(</div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;                m_flatBufferBuilder,</div><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;                1 <span class="comment">// Binding ids scheme version</span></div><div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;            );</div><div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;    <span class="keywordflow">return</span> versionsTable;</div><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afb3379853398423f791269433f6bb43c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb3379853398423f791269433f6bb43c">&#9670;&nbsp;</a></span>VisitAbsLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitAbsLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function an absolute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a288db083c224e756f7bb35afe6289b7f">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00128">128</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Abs);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">auto</span> flatBufferAbsLayer  = serializer::CreateAbsLayer(m_flatBufferBuilder, flatBufferBaseLayer);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    CreateAnyLayer(flatBufferAbsLayer.o, serializer::Layer::Layer_AbsLayer);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3f7b255222c79282f598eb8efefa880b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f7b255222c79282f598eb8efefa880b">&#9670;&nbsp;</a></span>VisitActivationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitActivationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>activationDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">activationDescriptor</td><td>- ActivationDescriptor to configure the activation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab2a1e493b983a932792bc5d0c1a20127">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00138">138</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_8cpp_source.xhtml#l00026">armnnSerializer::GetFlatBufferActivationFunction()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00045">ActivationDescriptor::m_A</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00047">ActivationDescriptor::m_B</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00043">ActivationDescriptor::m_Function</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Activation);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="comment">// Create the FlatBuffer ActivationDescriptor</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor = CreateActivationDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                                           <a class="code" href="namespacearmnn_serializer.xhtml#aac3bf4453f8a909ca23f290089df8ff1">GetFlatBufferActivationFunction</a>(descriptor.m_Function),</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                                           descriptor.m_A,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                                           descriptor.m_B);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="comment">// Create the FlatBuffer ActivationLayer</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">auto</span> flatBufferAdditionLayer = CreateActivationLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                                         flatBufferBaseLayer,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                                         flatBufferDescriptor);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    CreateAnyLayer(flatBufferAdditionLayer.o, serializer::Layer::Layer_ActivationLayer);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="ttc" id="namespacearmnn_serializer_xhtml_aac3bf4453f8a909ca23f290089df8ff1"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#aac3bf4453f8a909ca23f290089df8ff1">armnnSerializer::GetFlatBufferActivationFunction</a></div><div class="ttdeci">serializer::ActivationFunction GetFlatBufferActivationFunction(armnn::ActivationFunction function)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_8cpp_source.xhtml#l00026">Serializer.cpp:26</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7b608d5a44e36e6cd96e915658d49da3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b608d5a44e36e6cd96e915658d49da3">&#9670;&nbsp;</a></span>VisitAdditionLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitAdditionLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an addition layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2d20b94b7de822f3d29ab12e47e3be4e">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00163">163</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;{</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">auto</span> flatBufferAdditionBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Addition);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="comment">// Create the FlatBuffer AdditionLayer</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">auto</span> flatBufferAdditionLayer = serializer::CreateAdditionLayer(m_flatBufferBuilder, flatBufferAdditionBaseLayer);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    CreateAnyLayer(flatBufferAdditionLayer.o, serializer::Layer::Layer_AdditionLayer);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad7c76e1781b02bcc685ec87fe071b1fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7c76e1781b02bcc685ec87fe071b1fc">&#9670;&nbsp;</a></span>VisitArgMinMaxLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitArgMinMaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>argMinMaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an arg min max layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">argMinMaxDescriptor</td><td>- ArgMinMaxDescriptor to configure the activation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8423316906ebe6ae6d28c7f69ad91248">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00178">178</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_8cpp_source.xhtml#l00057">armnnSerializer::GetFlatBufferArgMinMaxFunction()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00067">ArgMinMaxDescriptor::m_Axis</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00065">ArgMinMaxDescriptor::m_Function</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_ArgMinMax);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">// Create FlatBuffer Descriptor</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor = CreateArgMinMaxDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                                          <a class="code" href="namespacearmnn_serializer.xhtml#a6fcb1eefde815b0b7465a689c8d26b50">GetFlatBufferArgMinMaxFunction</a>(descriptor.m_Function),</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                                          descriptor.m_Axis);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// Create FlatBuffer ArgMinMaxLayer</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = CreateArgMinMaxLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                                flatBufferBaseLayer,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                                flatBufferDescriptor);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_ArgMinMaxLayer);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6fcb1eefde815b0b7465a689c8d26b50"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6fcb1eefde815b0b7465a689c8d26b50">armnnSerializer::GetFlatBufferArgMinMaxFunction</a></div><div class="ttdeci">serializer::ArgMinMaxFunction GetFlatBufferArgMinMaxFunction(armnn::ArgMinMaxFunction function)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_8cpp_source.xhtml#l00057">Serializer.cpp:57</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a53e3051bacbfc5d901184eb7cb29c8c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53e3051bacbfc5d901184eb7cb29c8c2">&#9670;&nbsp;</a></span>VisitBatchNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitBatchNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>variance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">mean</td><td>- Pre-calculated mean for each channel. </td></tr>
    <tr><td class="paramname">variance</td><td>- Pre-calculated variance for each channel. </td></tr>
    <tr><td class="paramname">beta</td><td>- Per-channel additive factor. </td></tr>
    <tr><td class="paramname">gamma</td><td>- Per-channel multiplicative factor. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a9e642355474f31268e66a404e6c1b81d">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00231">231</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00636">BatchNormalizationDescriptor::m_DataLayout</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00634">BatchNormalizationDescriptor::m_Eps</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">auto</span> fbBatchNormalizationBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_BatchNormalization);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">auto</span> fbBatchNormalizationDescriptor = serializer::CreateBatchNormalizationDescriptor(</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                                  m_flatBufferBuilder,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                                  batchNormDescriptor.m_Eps,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                                  <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(batchNormDescriptor.m_DataLayout));</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">auto</span> fbMeanConstTensorInfo     = CreateConstTensorInfo(mean);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">auto</span> fbVarianceConstTensorInfo = CreateConstTensorInfo(variance);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">auto</span> fbBetaConstTensorInfo     = CreateConstTensorInfo(beta);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">auto</span> fbGammaConstTensorInfo    = CreateConstTensorInfo(gamma);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">auto</span> fbBatchNormalizationLayer = serializer::CreateBatchNormalizationLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                                                               fbBatchNormalizationBaseLayer,</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                                                               fbBatchNormalizationDescriptor,</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                                                               fbMeanConstTensorInfo,</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                                                               fbVarianceConstTensorInfo,</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                                                               fbBetaConstTensorInfo,</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                                                               fbGammaConstTensorInfo);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    CreateAnyLayer(fbBatchNormalizationLayer.o, serializer::Layer::Layer_BatchNormalizationLayer);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1d1235559a11a1aa63724eba742ad29c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d1235559a11a1aa63724eba742ad29c">&#9670;&nbsp;</a></span>VisitBatchToSpaceNdLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitBatchToSpaceNdLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>batchToSpaceNdDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">batchToSpaceNdDescriptor</td><td>- Description of the layer. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a1cee693185bcda15bd777008e60c7cf7">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00201">201</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00691">BatchToSpaceNdDescriptor::m_BlockShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00693">BatchToSpaceNdDescriptor::m_Crops</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00695">BatchToSpaceNdDescriptor::m_DataLayout</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;{</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_BatchToSpaceNd);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    std::vector&lt;unsigned int&gt; crops;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    crops.reserve(descriptor.m_Crops.size() * 2);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; crop : descriptor.m_Crops)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        crops.push_back(crop.first);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        crops.push_back(crop.second);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor =</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        CreateBatchToSpaceNdDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                       m_flatBufferBuilder.CreateVector(descriptor.m_BlockShape),</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                       m_flatBufferBuilder.CreateVector(crops),</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                       <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.m_DataLayout));</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateBatchToSpaceNdLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                                                 flatBufferBaseLayer,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                                                 flatBufferDescriptor);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_BatchToSpaceNdLayer);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afb1afddc0f2cb1caac0daf5bbd13c8c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb1afddc0f2cb1caac0daf5bbd13c8c8">&#9670;&nbsp;</a></span>VisitComparisonLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitComparisonLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">armnn::ComparisonDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>comparisonDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Comparison layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">comparisonDescriptor</td><td>- Description of the layer. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a6a1a6856fe4210d9c84c4fb86b4b661e">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00262">262</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00011">armnnSerializer::GetFlatBufferComparisonOperation()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00089">ComparisonDescriptor::m_Operation</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;{</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Comparison);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateComparisonDescriptor(</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#a1c88cccaeb232c6fe8022c7006bb21bc">GetFlatBufferComparisonOperation</a>(descriptor.m_Operation));</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">auto</span> fbLayer = serializer::CreateComparisonLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_ComparisonLayer);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a1c88cccaeb232c6fe8022c7006bb21bc"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a1c88cccaeb232c6fe8022c7006bb21bc">armnnSerializer::GetFlatBufferComparisonOperation</a></div><div class="ttdeci">armnnSerializer::ComparisonOperation GetFlatBufferComparisonOperation(armnn::ComparisonOperation comparisonOperation)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00011">SerializerUtils.cpp:11</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a148d342b40eada32d536c2ccda673405"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a148d342b40eada32d536c2ccda673405">&#9670;&nbsp;</a></span>VisitConcatLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitConcatLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">armnn::ConcatDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>concatDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">concatDescriptor</td><td>- ConcatDescriptor (synonym for OriginsDescriptor) to configure the concatenation process. Number of Views must be equal to the number of inputs, and their order must match - e.g. first view corresponds to the first input, second view to the second input, etc.... </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aeb90d7587f7887aee1f2b43261d4ee5c">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00769">769</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_descriptors_8cpp_source.xhtml#l00162">OriginsDescriptor::GetConcatAxis()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00192">OriginsDescriptor::GetNumDimensions()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00187">OriginsDescriptor::GetNumViews()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00197">OriginsDescriptor::GetViewOrigin()</a>, and <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;{</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="keyword">auto</span> flatBufferConcatBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Concat);</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    std::vector&lt;flatbuffers::Offset&lt;UintVector&gt;&gt; views;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> v = 0; v &lt; concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a35546e7b56e6e972a495b48748478ede">GetNumViews</a>(); ++v)</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    {</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        <span class="keyword">const</span> uint32_t* origin = concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#ab78e6fe963508c1ac5c00d04bb3361a3">GetViewOrigin</a>(v);</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        std::vector&lt;uint32_t&gt; origins;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0; d &lt; concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>(); ++d)</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        {</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;            origins.push_back(origin[d]);</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        }</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        <span class="keyword">auto</span> view = m_flatBufferBuilder.CreateVector(origins);</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        <span class="keyword">auto</span> uintVector = CreateUintVector(m_flatBufferBuilder, view);</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        views.push_back(uintVector);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    }</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="keyword">auto</span> flatBufferConcatDescriptor = CreateOriginsDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                                                              concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a379929e3b277f1ef94f3ce645870589d">GetConcatAxis</a>(),</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                                                              concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a35546e7b56e6e972a495b48748478ede">GetNumViews</a>(),</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                                                              concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>(),</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                                                              m_flatBufferBuilder.CreateVector(views));</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = CreateConcatLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                                             flatBufferConcatBaseLayer,</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                                             flatBufferConcatDescriptor);</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_ConcatLayer);</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml_ab78e6fe963508c1ac5c00d04bb3361a3"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#ab78e6fe963508c1ac5c00d04bb3361a3">armnn::OriginsDescriptor::GetViewOrigin</a></div><div class="ttdeci">const uint32_t * GetViewOrigin(uint32_t idx) const</div><div class="ttdoc">Return the view origin at the int value idx. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00197">Descriptors.cpp:197</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml_a78e8266be865fdd92cadd04d6e25ae1f"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">armnn::OriginsDescriptor::GetNumDimensions</a></div><div class="ttdeci">uint32_t GetNumDimensions() const</div><div class="ttdoc">Get the number of dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00192">Descriptors.cpp:192</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml_a35546e7b56e6e972a495b48748478ede"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#a35546e7b56e6e972a495b48748478ede">armnn::OriginsDescriptor::GetNumViews</a></div><div class="ttdeci">uint32_t GetNumViews() const</div><div class="ttdoc">Get the number of views. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00187">Descriptors.cpp:187</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml_a379929e3b277f1ef94f3ce645870589d"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#a379929e3b277f1ef94f3ce645870589d">armnn::OriginsDescriptor::GetConcatAxis</a></div><div class="ttdeci">unsigned int GetConcatAxis() const</div><div class="ttdoc">Get the concatenation axis value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00162">Descriptors.cpp:162</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae7bb76117b0e10efef5d3d6637df4480"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7bb76117b0e10efef5d3d6637df4480">&#9670;&nbsp;</a></span>VisitConstantLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitConstantLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a layer with no inputs and a single output, which always corresponds to the passed in constant tensor should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">input</td><td>- Tensor to be provided as the only output of the layer. The layer will maintain its own copy of the tensor data, meaning the memory referenced by <em>input</em> can be freed or reused after this function is called. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2f123a6a99ac143c0f3806cb505765cd">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00278">278</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;{</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">auto</span> flatBufferConstantBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Constant);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">auto</span> flatBufferConstTensorInfo = CreateConstTensorInfo(input);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="comment">// Create the FlatBuffer ConstantLayer</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = CreateConstantLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                               flatBufferConstantBaseLayer,</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                               flatBufferConstTensorInfo);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_ConstantLayer);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af4c7002e267521e7ea0933ef2b767f9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4c7002e267521e7ea0933ef2b767f9e">&#9670;&nbsp;</a></span>VisitConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">convolution2dDescriptor</td><td>- Description of the 2D convolution layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- Tensor for the weights data. </td></tr>
    <tr><td class="paramname">biases</td><td>- Optional tensor for the bias data. If specified, must match the output tensor shape. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#abc8fe4c6cbc8fa2b13c525500dddfbf6">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00299">299</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00449">Convolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00451">Convolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00445">Convolution2dDescriptor::m_DilationX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00447">Convolution2dDescriptor::m_DilationY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00439">Convolution2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00433">Convolution2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00435">Convolution2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00437">Convolution2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00441">Convolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00443">Convolution2dDescriptor::m_StrideY</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;{</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Convolution2d);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor = CreateConvolution2dDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                                              descriptor.m_PadLeft,</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                                              descriptor.m_PadRight,</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                                              descriptor.m_PadTop,</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                                              descriptor.m_PadBottom,</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                                                              descriptor.m_StrideX,</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                                                              descriptor.m_StrideY,</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                                                              descriptor.m_DilationX,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                                              descriptor.m_DilationY,</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                                              descriptor.m_BiasEnabled,</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                                              <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.m_DataLayout));</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keyword">auto</span> flatBufferWeightsConstTensorInfo = CreateConstTensorInfo(weights);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; flatBufferBiasesConstTensorInfo;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keywordflow">if</span> (biases.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>())</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        flatBufferBiasesConstTensorInfo = CreateConstTensorInfo(biases.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>());</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="comment">// Create the FlatBuffer Convolution2dLayer</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = CreateConvolution2dLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                                                    flatBufferBaseLayer,</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                                                    flatBufferDescriptor,</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                                                    flatBufferWeightsConstTensorInfo,</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                                                    flatBufferBiasesConstTensorInfo);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_Convolution2dLayer);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac30449d327001492692fa23a666efd7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac30449d327001492692fa23a666efd7f">&#9670;&nbsp;</a></span>VisitDepthToSpaceLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitDepthToSpaceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">armnn::DepthToSpaceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>depthToSpaceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a depth to space layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">depthToSpaceDescriptor</td><td>- Parameters for the depth to space operation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a72d308d6f24ffb8846375d770394af66">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00340">340</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00887">SpaceToDepthDescriptor::m_BlockSize</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00890">SpaceToDepthDescriptor::m_DataLayout</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_DepthToSpace);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keyword">auto</span> fbDescriptor = CreateDepthToSpaceDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                                     descriptor.m_BlockSize,</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                                     <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.m_DataLayout));</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keyword">auto</span> fbLayer = serializer::CreateDepthToSpaceLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_DepthToSpaceLayer);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afd318b4ffed3c04a4807ca2c13077ab7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd318b4ffed3c04a4807ca2c13077ab7">&#9670;&nbsp;</a></span>VisitDepthwiseConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitDepthwiseConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a 2D depthwise convolution layer with biases should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">convolution2dDescriptor</td><td>- Description of the 2D depthwise convolution layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- Tensor for the weights. Expected format: [channelMultiplier, inputChannels, height, width]. </td></tr>
    <tr><td class="paramname">biases</td><td>- Optional tensor for the bias data. If specified, must match the output tensor shape. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ad39aaac8f8fb790ae364c87f1a249d68">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00356">356</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00501">DepthwiseConvolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00503">DepthwiseConvolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00497">DepthwiseConvolution2dDescriptor::m_DilationX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00499">DepthwiseConvolution2dDescriptor::m_DilationY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00491">DepthwiseConvolution2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00485">DepthwiseConvolution2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00487">DepthwiseConvolution2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00489">DepthwiseConvolution2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00493">DepthwiseConvolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00495">DepthwiseConvolution2dDescriptor::m_StrideY</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;{</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_DepthwiseConvolution2d);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keyword">auto</span> fbDescriptor = CreateDepthwiseConvolution2dDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                                               descriptor.m_PadLeft,</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                                               descriptor.m_PadRight,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                                               descriptor.m_PadTop,</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                                               descriptor.m_PadBottom,</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                                               descriptor.m_StrideX,</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                                               descriptor.m_StrideY,</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                                               descriptor.m_DilationX,</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                                               descriptor.m_DilationY,</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                                               descriptor.m_BiasEnabled,</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                                               <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.m_DataLayout));</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; fbWeightsConstTensorInfo = CreateConstTensorInfo(weights);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; fbBiasesConstTensorInfo;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">if</span> (biases.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>())</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    {</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        fbBiasesConstTensorInfo = CreateConstTensorInfo(biases.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>());</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    }</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = CreateDepthwiseConvolution2dLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                                             fbBaseLayer,</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                                             fbDescriptor,</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                                                             fbWeightsConstTensorInfo,</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                                             fbBiasesConstTensorInfo);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_DepthwiseConvolution2dLayer);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9a502d24112baa19f11c76bc651e0cc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a502d24112baa19f11c76bc651e0cc0">&#9670;&nbsp;</a></span>VisitDequantizeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitDequantizeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a Dequantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a0fa32cbc3ca68467c749d50e844faeaf">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00393">393</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;{</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keyword">auto</span> fbDequantizeBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Dequantize);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keyword">auto</span> fbDequantizeLayer     = serializer::CreateDequantizeLayer(m_flatBufferBuilder, fbDequantizeBaseLayer);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    CreateAnyLayer(fbDequantizeLayer.o, serializer::Layer::Layer_DequantizeLayer);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ace945f2f1d416b240f9c0344671b17ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace945f2f1d416b240f9c0344671b17ad">&#9670;&nbsp;</a></span>VisitDetectionPostProcessLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitDetectionPostProcessLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a Detection PostProcess layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">descriptor</td><td>- Description of the Detection PostProcess layer. </td></tr>
    <tr><td class="paramname">anchors</td><td>- Tensor for the anchors. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab270e1bebbe01a22543cc49ac3a14c25">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00404">404</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00542">DetectionPostProcessDescriptor::m_DetectionsPerClass</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00540">DetectionPostProcessDescriptor::m_MaxClassesPerDetection</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00538">DetectionPostProcessDescriptor::m_MaxDetections</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00546">DetectionPostProcessDescriptor::m_NmsIouThreshold</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00544">DetectionPostProcessDescriptor::m_NmsScoreThreshold</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00548">DetectionPostProcessDescriptor::m_NumClasses</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00558">DetectionPostProcessDescriptor::m_ScaleH</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00556">DetectionPostProcessDescriptor::m_ScaleW</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00552">DetectionPostProcessDescriptor::m_ScaleX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00554">DetectionPostProcessDescriptor::m_ScaleY</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00550">DetectionPostProcessDescriptor::m_UseRegularNms</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_DetectionPostProcess);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">auto</span> fbDescriptor = CreateDetectionPostProcessDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">m_MaxDetections</a>,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">m_MaxClassesPerDetection</a>,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7e2f87544b8bc7e497e1dec8d3ca4055">m_DetectionsPerClass</a>,</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a4392dd6b4862cc9cf95ae8f1001ba592">m_NmsScoreThreshold</a>,</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a53c8a7f33a40e1e240256bcfcf41b101">m_NmsIouThreshold</a>,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">m_NumClasses</a>,</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">m_UseRegularNms</a>,</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae64523937ea910030ad66fee6fddd51f">m_ScaleX</a>,</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7a2156ec7d9c012ce00bbcc6afcb9028">m_ScaleY</a>,</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ab509802c659de19929f18bad14a35c58">m_ScaleW</a>,</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#aa61510cbd529870182e918ac6e8b9d72">m_ScaleH</a>);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; fbAnchorsConstTensorInfo = CreateConstTensorInfo(anchors);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = CreateDetectionPostProcessLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                                                           fbBaseLayer,</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                                           fbDescriptor,</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                                           fbAnchorsConstTensorInfo);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_DetectionPostProcessLayer);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ab509802c659de19929f18bad14a35c58"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ab509802c659de19929f18bad14a35c58">armnn::DetectionPostProcessDescriptor::m_ScaleW</a></div><div class="ttdeci">float m_ScaleW</div><div class="ttdoc">Center size encoding scale weight. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00556">Descriptors.hpp:556</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae64523937ea910030ad66fee6fddd51f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae64523937ea910030ad66fee6fddd51f">armnn::DetectionPostProcessDescriptor::m_ScaleX</a></div><div class="ttdeci">float m_ScaleX</div><div class="ttdoc">Center size encoding scale x. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00552">Descriptors.hpp:552</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7e2f87544b8bc7e497e1dec8d3ca4055"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7e2f87544b8bc7e497e1dec8d3ca4055">armnn::DetectionPostProcessDescriptor::m_DetectionsPerClass</a></div><div class="ttdeci">uint32_t m_DetectionsPerClass</div><div class="ttdoc">Detections per classes, used in Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00542">Descriptors.hpp:542</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a9ae2c9796692ebeafe19a4d3f09c8ea8"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">armnn::DetectionPostProcessDescriptor::m_MaxClassesPerDetection</a></div><div class="ttdeci">uint32_t m_MaxClassesPerDetection</div><div class="ttdoc">Maximum numbers of classes per detection, used in Fast NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00540">Descriptors.hpp:540</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae72089bcab60ac175557f4241b16a014"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">armnn::DetectionPostProcessDescriptor::m_MaxDetections</a></div><div class="ttdeci">uint32_t m_MaxDetections</div><div class="ttdoc">Maximum numbers of detections. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00538">Descriptors.hpp:538</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a53c8a7f33a40e1e240256bcfcf41b101"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a53c8a7f33a40e1e240256bcfcf41b101">armnn::DetectionPostProcessDescriptor::m_NmsIouThreshold</a></div><div class="ttdeci">float m_NmsIouThreshold</div><div class="ttdoc">Intersection over union threshold. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00546">Descriptors.hpp:546</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a3a04b0ccee4bb2f21721ee5045e83df4"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">armnn::DetectionPostProcessDescriptor::m_NumClasses</a></div><div class="ttdeci">uint32_t m_NumClasses</div><div class="ttdoc">Number of classes. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00548">Descriptors.hpp:548</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7ed9bc7c26df67d274d5dd4cd83adf0f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">armnn::DetectionPostProcessDescriptor::m_UseRegularNms</a></div><div class="ttdeci">bool m_UseRegularNms</div><div class="ttdoc">Use Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00550">Descriptors.hpp:550</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_aa61510cbd529870182e918ac6e8b9d72"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#aa61510cbd529870182e918ac6e8b9d72">armnn::DetectionPostProcessDescriptor::m_ScaleH</a></div><div class="ttdeci">float m_ScaleH</div><div class="ttdoc">Center size encoding scale height. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00558">Descriptors.hpp:558</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7a2156ec7d9c012ce00bbcc6afcb9028"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7a2156ec7d9c012ce00bbcc6afcb9028">armnn::DetectionPostProcessDescriptor::m_ScaleY</a></div><div class="ttdeci">float m_ScaleY</div><div class="ttdoc">Center size encoding scale y. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00554">Descriptors.hpp:554</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a4392dd6b4862cc9cf95ae8f1001ba592"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a4392dd6b4862cc9cf95ae8f1001ba592">armnn::DetectionPostProcessDescriptor::m_NmsScoreThreshold</a></div><div class="ttdeci">float m_NmsScoreThreshold</div><div class="ttdoc">NMS score threshold. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00544">Descriptors.hpp:544</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9cc611872dcd6b526c84231e0b6920da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9cc611872dcd6b526c84231e0b6920da">&#9670;&nbsp;</a></span>VisitDivisionLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitDivisionLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a division layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ada3c96a7b0d4251edb24584096b90a24">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00435">435</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;{</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keyword">auto</span> fbDivisionBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Division);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keyword">auto</span> fbDivisionLayer     = serializer::CreateDivisionLayer(m_flatBufferBuilder, fbDivisionBaseLayer);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    CreateAnyLayer(fbDivisionLayer.o, serializer::Layer::Layer_DivisionLayer);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2e0686c8a9f4a53f78fd35f83fa77c56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e0686c8a9f4a53f78fd35f83fa77c56">&#9670;&nbsp;</a></span>VisitElementwiseUnaryLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitElementwiseUnaryLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">armnn::ElementwiseUnaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>elementwiseUnaryDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">elementwiseUnaryDescriptor</td><td>- Description of the layer. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aaf99c2bdfe61c48821f23826433a5abc">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00445">445</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00101">armnnSerializer::GetFlatBufferUnaryOperation()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00109">ElementwiseUnaryDescriptor::m_Operation</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;{</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_ElementwiseUnary);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateElementwiseUnaryDescriptor(</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#ae4ba1925d55937fdb1770852ff0554bf">GetFlatBufferUnaryOperation</a>(descriptor.m_Operation));</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">auto</span> fbLayer = serializer::CreateElementwiseUnaryLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_ElementwiseUnaryLayer);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;}</div><div class="ttc" id="namespacearmnn_serializer_xhtml_ae4ba1925d55937fdb1770852ff0554bf"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#ae4ba1925d55937fdb1770852ff0554bf">armnnSerializer::GetFlatBufferUnaryOperation</a></div><div class="ttdeci">armnnSerializer::UnaryOperation GetFlatBufferUnaryOperation(armnn::UnaryOperation comparisonOperation)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00101">SerializerUtils.cpp:101</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a778b3249ab3704387496d45c39480ecb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a778b3249ab3704387496d45c39480ecb">&#9670;&nbsp;</a></span>VisitEqualLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitEqualLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function an Equal layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ae242b544b15e9d80aa2f3be385540eb6">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00460">460</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;{</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Equal);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="keyword">auto</span> fbEqualLayer = serializer::CreateEqualLayer(m_flatBufferBuilder, fbBaseLayer);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    CreateAnyLayer(fbEqualLayer.o, serializer::Layer::Layer_EqualLayer);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5cba52e71687c849f356dd218bd7707c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5cba52e71687c849f356dd218bd7707c">&#9670;&nbsp;</a></span>VisitFillLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitFillLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">armnn::FillDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>fillDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a fill layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">fillDescriptor</td><td>- Description of the layer </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#abf67d8273706f9dfc51be559b8505199">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00470">470</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00733">FillDescriptor::m_Value</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;{</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keyword">auto</span> fbFillBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Fill);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateFillDescriptor(m_flatBufferBuilder, fillDescriptor.<a class="code" href="structarmnn_1_1_fill_descriptor.xhtml#ab3ebc5cf4a617d43371a4cb7fecdeb32">m_Value</a>);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keyword">auto</span> fbFillLayer = serializer::CreateFillLayer(m_flatBufferBuilder, fbFillBaseLayer, fbDescriptor);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    CreateAnyLayer(fbFillLayer.o, serializer::Layer::Layer_FillLayer);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_fill_descriptor_xhtml_ab3ebc5cf4a617d43371a4cb7fecdeb32"><div class="ttname"><a href="structarmnn_1_1_fill_descriptor.xhtml#ab3ebc5cf4a617d43371a4cb7fecdeb32">armnn::FillDescriptor::m_Value</a></div><div class="ttdeci">float m_Value</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00733">Descriptors.hpp:733</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a64c53003d714d4957829f821a5e4153d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64c53003d714d4957829f821a5e4153d">&#9670;&nbsp;</a></span>VisitFloorLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitFloorLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a floor layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a3fd73f343863eedb8dde418c6183193c">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00485">485</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;{</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keyword">auto</span> flatBufferFloorBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Floor);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keyword">auto</span> flatBufferFloorLayer = serializer::CreateFloorLayer(m_flatBufferBuilder, flatBufferFloorBaseLayer);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    CreateAnyLayer(flatBufferFloorLayer.o, serializer::Layer::Layer_FloorLayer);</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0d4758122aed43d472cdbd59e84bc047"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d4758122aed43d472cdbd59e84bc047">&#9670;&nbsp;</a></span>VisitFullyConnectedLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitFullyConnectedLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>fullyConnectedDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">fullyConnectedDescriptor</td><td>- Description of the fully connected layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- Tensor for the weights data. </td></tr>
    <tr><td class="paramname">biases</td><td>- Optional tensor for the bias data. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab93a48970564c6eabbc982a2116c1262">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01056">1056</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00397">FullyConnectedDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00399">FullyConnectedDescriptor::m_TransposeWeightMatrix</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;{</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_FullyConnected);</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;    <span class="comment">// Create FlatBuffer FullyConnectedDescriptor</span></div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor =</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;        serializer::CreateFullyConnectedDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                                                   fullyConnectedDescriptor.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a>,</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                                                   fullyConnectedDescriptor.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#a281fcaec86e17c97f7b8402633f6b55a">m_TransposeWeightMatrix</a>);</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    <span class="comment">// Create FlatBuffer weights data</span></div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    <span class="keyword">auto</span> flatBufferWeights = CreateConstTensorInfo(weights);</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;    <span class="comment">// Create FlatBuffer bias data</span></div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; flatBufferBiases;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;    <span class="keywordflow">if</span> (fullyConnectedDescriptor.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a>)</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;    {</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;        flatBufferBiases = CreateConstTensorInfo(biases.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>());</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    }</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;    <span class="comment">// Create FlatBuffer FullyConnectedLayer</span></div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateFullyConnectedLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;                                                                 flatBufferBaseLayer,</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                                                                 flatBufferDescriptor,</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                                                                 flatBufferWeights,</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                                                                 flatBufferBiases);</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;    <span class="comment">// Add created FullyConnectedLayer to the FlatBufferLayers</span></div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_FullyConnectedLayer);</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml_a281fcaec86e17c97f7b8402633f6b55a"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml#a281fcaec86e17c97f7b8402633f6b55a">armnn::FullyConnectedDescriptor::m_TransposeWeightMatrix</a></div><div class="ttdeci">bool m_TransposeWeightMatrix</div><div class="ttdoc">Enable/disable transpose weight matrix. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00399">Descriptors.hpp:399</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::FullyConnectedDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00397">Descriptors.hpp:397</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad297ae199a9fa61e1fd983d645da6471"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad297ae199a9fa61e1fd983d645da6471">&#9670;&nbsp;</a></span>VisitGatherLayer() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitGatherLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8b19c99b738524199b49d4b9819d4d8a">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00495">495</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <a class="code" href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a> gatherDescriptor{};</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <a class="code" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ad297ae199a9fa61e1fd983d645da6471">VisitGatherLayer</a>(layer, gatherDescriptor, name);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;}</div><div class="ttc" id="classarmnn_serializer_1_1_serializer_visitor_xhtml_ad297ae199a9fa61e1fd983d645da6471"><div class="ttname"><a href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ad297ae199a9fa61e1fd983d645da6471">armnnSerializer::SerializerVisitor::VisitGatherLayer</a></div><div class="ttdeci">void VisitGatherLayer(const armnn::IConnectableLayer *layer, const char *name=nullptr) override</div><div class="ttdoc">Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_8cpp_source.xhtml#l00495">Serializer.cpp:495</a></div></div>
<div class="ttc" id="structarmnn_1_1_gather_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a></div><div class="ttdoc">A GatherDescriptor for the GatherLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00737">Descriptors.hpp:737</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab2398d989dad3d2be45a91343f1f1e3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2398d989dad3d2be45a91343f1f1e3f">&#9670;&nbsp;</a></span>VisitGatherLayer() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitGatherLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>gatherDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">gatherDescriptor</td><td>- Parameters for the gather operation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ad2e2934576c5b4755cc9b36671227bc2">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00502">502</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00753">GatherDescriptor::m_Axis</a>.</p>
<div class="fragment"><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;{</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keyword">auto</span> fbGatherDescriptor = CreateGatherDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                                                     gatherDescriptor.<a class="code" href="structarmnn_1_1_gather_descriptor.xhtml#a35d11c7d509d1adbae1ae01c58394a7f">m_Axis</a>);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keyword">auto</span> fbGatherBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Gather);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keyword">auto</span> flatBufferLayer   = serializer::CreateGatherLayer(m_flatBufferBuilder, fbGatherBaseLayer, fbGatherDescriptor);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_GatherLayer);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_gather_descriptor_xhtml_a35d11c7d509d1adbae1ae01c58394a7f"><div class="ttname"><a href="structarmnn_1_1_gather_descriptor.xhtml#a35d11c7d509d1adbae1ae01c58394a7f">armnn::GatherDescriptor::m_Axis</a></div><div class="ttdeci">int32_t m_Axis</div><div class="ttdoc">The axis in params to gather indices from. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00753">Descriptors.hpp:753</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab0d8bc8095f70f4616bc3ace8dd46b02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0d8bc8095f70f4616bc3ace8dd46b02">&#9670;&nbsp;</a></span>VisitGreaterLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitGreaterLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Greater layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ac81739b57b9a27fb0c363bcd6479692e">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00516">516</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;{</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keyword">auto</span> fbGreaterBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Greater);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keyword">auto</span> fbGreaterLayer = serializer::CreateGreaterLayer(m_flatBufferBuilder, fbGreaterBaseLayer);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    CreateAnyLayer(fbGreaterLayer.o, serializer::Layer::Layer_GreaterLayer);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ade20ba84b9c46a9afedf0b969f870919"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade20ba84b9c46a9afedf0b969f870919">&#9670;&nbsp;</a></span>VisitInputLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitInputLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an InputLayer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">id</td><td>- User generated id to uniquely identify a particular input. The same id needs to be specified when passing the inputs to the IRuntime::EnqueueWorkload() function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab6dc51682cb4178194f3f00c2309ec7b">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00086">86</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">auto</span> flatBufferInputBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Input);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// Create FlatBuffer BindableBaseLayer</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">auto</span> flatBufferInputBindableBaseLayer = serializer::CreateBindableLayerBase(m_flatBufferBuilder,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                                                                flatBufferInputBaseLayer,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                                                                <span class="keywordtype">id</span>);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// Push layer binding id to outputIds.</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    m_inputIds.push_back(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Create the FlatBuffer InputLayer</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">auto</span> flatBufferInputLayer = serializer::CreateInputLayer(m_flatBufferBuilder, flatBufferInputBindableBaseLayer);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    CreateAnyLayer(flatBufferInputLayer.o, serializer::Layer::Layer_InputLayer);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aae3bf0ab71205ddf8916512ac8330a1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae3bf0ab71205ddf8916512ac8330a1e">&#9670;&nbsp;</a></span>VisitInstanceNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitInstanceNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">armnn::InstanceNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an instance normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">desc</td><td>- Parameters for the instance normalization operation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aaf4e8d2b1ed2612f4821ed1d2351667b">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00526">526</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00660">InstanceNormalizationDescriptor::m_Beta</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00664">InstanceNormalizationDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00662">InstanceNormalizationDescriptor::m_Eps</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00658">InstanceNormalizationDescriptor::m_Gamma</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;{</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateInstanceNormalizationDescriptor(</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            m_flatBufferBuilder,</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            instanceNormalizationDescriptor.m_Gamma,</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            instanceNormalizationDescriptor.m_Beta,</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            instanceNormalizationDescriptor.m_Eps,</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(instanceNormalizationDescriptor.m_DataLayout));</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="keyword">auto</span> fbBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_InstanceNormalization);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keyword">auto</span> fbLayer     = serializer::CreateInstanceNormalizationLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_InstanceNormalizationLayer);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a227d927a30f0700956047d9f65fca813"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a227d927a30f0700956047d9f65fca813">&#9670;&nbsp;</a></span>VisitL2NormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitL2NormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">armnn::L2NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an L2 normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<p>Normalization is performed along dimension 1, but requires a 4d input. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">desc</td><td>- Parameters for the L2 normalization operation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a0678ff146765cea41b6d577773680fda">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00546">546</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00617">L2NormalizationDescriptor::m_DataLayout</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00615">L2NormalizationDescriptor::m_Eps</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;{</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="keyword">auto</span> fbBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_L2Normalization);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="comment">// Create the FlatBuffer L2Normalization Descriptor</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateL2NormalizationDescriptor(</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            m_flatBufferBuilder,</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(l2NormalizationDescriptor.m_DataLayout),</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;            l2NormalizationDescriptor.m_Eps);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="comment">// Create FlatBuffer layer</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keyword">auto</span> fbLayer = serializer::CreateL2NormalizationLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_L2NormalizationLayer);</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a34dbb365c6adc4f1709d79e4f0f71d65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34dbb365c6adc4f1709d79e4f0f71d65">&#9670;&nbsp;</a></span>VisitLogicalBinaryLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitLogicalBinaryLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">armnn::LogicalBinaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>logicalBinaryDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a logical binary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">logicalBinaryDescriptor</td><td>- LogicalBinaryDescriptor to configure the logical unary layer. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a42258b02ff22765d6f2eeba7bff7f802">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00567">567</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00031">armnnSerializer::GetFlatBufferLogicalBinaryOperation()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l01286">LogicalBinaryDescriptor::m_Operation</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;{</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_LogicalBinary);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateLogicalBinaryDescriptor(</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#a3078a3b577bbd2aa0b133d4732b8e645">GetFlatBufferLogicalBinaryOperation</a>(descriptor.m_Operation));</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keyword">auto</span> fbLayer = serializer::CreateLogicalBinaryLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_LogicalBinaryLayer);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a3078a3b577bbd2aa0b133d4732b8e645"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a3078a3b577bbd2aa0b133d4732b8e645">armnnSerializer::GetFlatBufferLogicalBinaryOperation</a></div><div class="ttdeci">armnnSerializer::LogicalBinaryOperation GetFlatBufferLogicalBinaryOperation(armnn::LogicalBinaryOperation logicalBinaryOperation)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00031">SerializerUtils.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5c02b1f1028daf64f7c6244ac68b37f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c02b1f1028daf64f7c6244ac68b37f5">&#9670;&nbsp;</a></span>VisitLogSoftmaxLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitLogSoftmaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">armnn::LogSoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>logSoftmaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a log softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">logSoftmaxDescriptor</td><td>- LogSoftmaxDescriptor to configure the log softmax. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2db103c5db69877b05b365e50ee3bd5b">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00582">582</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00149">SoftmaxDescriptor::m_Axis</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00147">SoftmaxDescriptor::m_Beta</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;{</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keyword">auto</span> flatBufferLogSoftmaxBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_LogSoftmax);</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="comment">// Create the FlatBuffer LogSoftmaxDescriptor</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keyword">auto</span> flatBufferLogSoftmaxDesc =</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        serializer::CreateLogSoftmaxDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                                               logSoftmaxDescriptor.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a>,</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                                               logSoftmaxDescriptor.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">m_Axis</a>);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="comment">// Create the FlatBuffer LogSoftmaxLayer</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <span class="keyword">auto</span> flatBufferLogSoftmaxLayer =</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        serializer::CreateLogSoftmaxLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                                          flatBufferLogSoftmaxBaseLayer,</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                                          flatBufferLogSoftmaxDesc);</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    CreateAnyLayer(flatBufferLogSoftmaxLayer.o, serializer::Layer::Layer_LogSoftmaxLayer);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml_a214c3636fdf0ea5bac8edb42d0e6c7f0"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">armnn::SoftmaxDescriptor::m_Axis</a></div><div class="ttdeci">int m_Axis</div><div class="ttdoc">Scalar, defaulted to the last index (-1), specifying the dimension the activation will be performed o...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00149">Descriptors.hpp:149</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml_a8275d51ef9a584feb95726ea0522f6e5"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">armnn::SoftmaxDescriptor::m_Beta</a></div><div class="ttdeci">float m_Beta</div><div class="ttdoc">Exponentiation value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00147">Descriptors.hpp:147</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2b37a5d520204e4e1652e6d4d38774b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b37a5d520204e4e1652e6d4d38774b3">&#9670;&nbsp;</a></span>VisitLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">armnn::LstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function an Lstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">descriptor</td><td>- Parameters controlling the operation of the Lstm operation. </td></tr>
    <tr><td class="paramname">params</td><td>- The weights and biases for the LSTM cell. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aed730aaef50861ea8b7b6276ce880c9a">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00606">606</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00921">LstmDescriptor::m_ActivationFunc</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00053">LstmInputParams::m_CellBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00059">LstmInputParams::m_CellLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00049">LstmInputParams::m_CellToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00048">LstmInputParams::m_CellToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00050">LstmInputParams::m_CellToOutputWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00927">LstmDescriptor::m_CifgEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00923">LstmDescriptor::m_ClippingThresCell</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00925">LstmDescriptor::m_ClippingThresProj</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00052">LstmInputParams::m_ForgetGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00058">LstmInputParams::m_ForgetLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00051">LstmInputParams::m_InputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00057">LstmInputParams::m_InputLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00042">LstmInputParams::m_InputToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00041">LstmInputParams::m_InputToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00040">LstmInputParams::m_InputToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00043">LstmInputParams::m_InputToOutputWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00933">LstmDescriptor::m_LayerNormEnabled</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00054">LstmInputParams::m_OutputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00060">LstmInputParams::m_OutputLayerNormWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00929">LstmDescriptor::m_PeepholeEnabled</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00056">LstmInputParams::m_ProjectionBias</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00931">LstmDescriptor::m_ProjectionEnabled</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00055">LstmInputParams::m_ProjectionWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00046">LstmInputParams::m_RecurrentToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00045">LstmInputParams::m_RecurrentToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00044">LstmInputParams::m_RecurrentToInputWeights</a>, and <a class="el" href="_lstm_params_8hpp_source.xhtml#l00047">LstmInputParams::m_RecurrentToOutputWeights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;{</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keyword">auto</span> fbLstmBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Lstm);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="keyword">auto</span> fbLstmDescriptor = serializer::CreateLstmDescriptor(</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a>,</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a>,</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a>,</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>,</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>,</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>,</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>);</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <span class="comment">// Get mandatory input parameters</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keyword">auto</span> inputToForgetWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a31da1ead6794dd64571afdd0b6efc771">m_InputToForgetWeights</a>);</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="keyword">auto</span> inputToCellWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a49e11acda22742cbaf6f1b259ead0d84">m_InputToCellWeights</a>);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="keyword">auto</span> inputToOutputWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a6e30c7b3451da3ea9cf4259fb602e6e6">m_InputToOutputWeights</a>);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keyword">auto</span> recurrentToForgetWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ae83131e16df1cace69395a5f99bc5ecb">m_RecurrentToForgetWeights</a>);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="keyword">auto</span> recurrentToCellWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a1759754ccb88ecc9af44f3aae6e244ee">m_RecurrentToCellWeights</a>);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keyword">auto</span> recurrentToOutputWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a56b81ca8ba4b4937e0787e4951f043fc">m_RecurrentToOutputWeights</a>);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keyword">auto</span> forgetGateBias = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ace7a1f1f1041b412b7d8ef82b95ff352">m_ForgetGateBias</a>);</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keyword">auto</span> cellBias = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a4a9d678146f572808a361dbdc5489f38">m_CellBias</a>);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keyword">auto</span> outputGateBias = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a8c0f6d48705f40c5590dde09be262222">m_OutputGateBias</a>);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="comment">//Define optional parameters, these will be set depending on configuration in Lstm descriptor</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputToInputWeights;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; recurrentToInputWeights;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToInputWeights;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputGateBias;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; projectionWeights;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; projectionBias;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToForgetWeights;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToOutputWeights;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputLayerNormWeights;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; forgetLayerNormWeights;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellLayerNormWeights;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; outputLayerNormWeights;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    {</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        inputToInputWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">m_InputToInputWeights</a>);</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        recurrentToInputWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">m_RecurrentToInputWeights</a>);</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        cellToInputWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a484bafa2f8453a7c5a4a00b92a61b006">m_CellToInputWeights</a>);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        inputGateBias = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">m_InputGateBias</a>);</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    }</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>)</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    {</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        projectionWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ab03e6e1514f74427916c892f473fe04c">m_ProjectionWeights</a>);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        projectionBias = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a44b0e6b16708df7f0d2bbab141688aaa">m_ProjectionBias</a>);</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    }</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>)</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    {</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        cellToForgetWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a35b112e30c3eb153806a2a8c16d178e3">m_CellToForgetWeights</a>);</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        cellToOutputWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#afe204ca375b74e9a72640c9227918d0a">m_CellToOutputWeights</a>);</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    }</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>)</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    {</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        {</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;            inputLayerNormWeights = CreateConstTensorInfo((*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a0cd848f65ec31778d708852f0042fe37">m_InputLayerNormWeights</a>));</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        }</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        forgetLayerNormWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#af0f796fba1a2be9c56b4c9ee534577ee">m_ForgetLayerNormWeights</a>);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        cellLayerNormWeights   = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ad0b8c32bb5381f4cc999093ba3b98b43">m_CellLayerNormWeights</a>);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        outputLayerNormWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9b18daea2e9f42386055326fd016519a">m_OutputLayerNormWeights</a>);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    }</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keyword">auto</span> fbLstmParams = serializer::CreateLstmInputParams(</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        inputToForgetWeights,</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        inputToCellWeights,</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        inputToOutputWeights,</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        recurrentToForgetWeights,</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        recurrentToCellWeights,</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        recurrentToOutputWeights,</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        forgetGateBias,</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        cellBias,</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        outputGateBias,</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        inputToInputWeights,</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        recurrentToInputWeights,</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        cellToInputWeights,</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        inputGateBias,</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        projectionWeights,</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        projectionBias,</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        cellToForgetWeights,</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        cellToOutputWeights,</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        inputLayerNormWeights,</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        forgetLayerNormWeights,</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        cellLayerNormWeights,</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        outputLayerNormWeights);</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <span class="keyword">auto</span> fbLstmLayer = serializer::CreateLstmLayer(</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        fbLstmBaseLayer,</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        fbLstmDescriptor,</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        fbLstmParams);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    CreateAnyLayer(fbLstmLayer.o, serializer::Layer::Layer_LstmLayer);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a6c9de81fc65b3c4924cab11907075a17"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">armnn::LstmDescriptor::m_ProjectionEnabled</a></div><div class="ttdeci">bool m_ProjectionEnabled</div><div class="ttdoc">Enable/disable the projection layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00931">Descriptors.hpp:931</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_ab03e6e1514f74427916c892f473fe04c"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#ab03e6e1514f74427916c892f473fe04c">armnn::LstmInputParams::m_ProjectionWeights</a></div><div class="ttdeci">const ConstTensor * m_ProjectionWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00055">LstmParams.hpp:55</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a4a9d678146f572808a361dbdc5489f38"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a4a9d678146f572808a361dbdc5489f38">armnn::LstmInputParams::m_CellBias</a></div><div class="ttdeci">const ConstTensor * m_CellBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00053">LstmParams.hpp:53</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a86e88bef0df4df96df752b4b8955a3af"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">armnn::LstmDescriptor::m_ClippingThresProj</a></div><div class="ttdeci">float m_ClippingThresProj</div><div class="ttdoc">Clipping threshold value for the projection. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00925">Descriptors.hpp:925</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_afe204ca375b74e9a72640c9227918d0a"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#afe204ca375b74e9a72640c9227918d0a">armnn::LstmInputParams::m_CellToOutputWeights</a></div><div class="ttdeci">const ConstTensor * m_CellToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00050">LstmParams.hpp:50</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a484bafa2f8453a7c5a4a00b92a61b006"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a484bafa2f8453a7c5a4a00b92a61b006">armnn::LstmInputParams::m_CellToInputWeights</a></div><div class="ttdeci">const ConstTensor * m_CellToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00048">LstmParams.hpp:48</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a9e081a9b94defb30d1558dc912507e0e"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">armnn::LstmInputParams::m_InputGateBias</a></div><div class="ttdeci">const ConstTensor * m_InputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00051">LstmParams.hpp:51</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a1759754ccb88ecc9af44f3aae6e244ee"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a1759754ccb88ecc9af44f3aae6e244ee">armnn::LstmInputParams::m_RecurrentToCellWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00046">LstmParams.hpp:46</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_af0f796fba1a2be9c56b4c9ee534577ee"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#af0f796fba1a2be9c56b4c9ee534577ee">armnn::LstmInputParams::m_ForgetLayerNormWeights</a></div><div class="ttdeci">const ConstTensor * m_ForgetLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00058">LstmParams.hpp:58</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a35b112e30c3eb153806a2a8c16d178e3"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a35b112e30c3eb153806a2a8c16d178e3">armnn::LstmInputParams::m_CellToForgetWeights</a></div><div class="ttdeci">const ConstTensor * m_CellToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00049">LstmParams.hpp:49</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a8c0f6d48705f40c5590dde09be262222"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a8c0f6d48705f40c5590dde09be262222">armnn::LstmInputParams::m_OutputGateBias</a></div><div class="ttdeci">const ConstTensor * m_OutputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00054">LstmParams.hpp:54</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a0cd848f65ec31778d708852f0042fe37"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a0cd848f65ec31778d708852f0042fe37">armnn::LstmInputParams::m_InputLayerNormWeights</a></div><div class="ttdeci">const ConstTensor * m_InputLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00057">LstmParams.hpp:57</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a56b81ca8ba4b4937e0787e4951f043fc"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a56b81ca8ba4b4937e0787e4951f043fc">armnn::LstmInputParams::m_RecurrentToOutputWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00047">LstmParams.hpp:47</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a44b0e6b16708df7f0d2bbab141688aaa"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a44b0e6b16708df7f0d2bbab141688aaa">armnn::LstmInputParams::m_ProjectionBias</a></div><div class="ttdeci">const ConstTensor * m_ProjectionBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00056">LstmParams.hpp:56</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a2837b4396f20c956952d1a7286cab5f8"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">armnn::LstmDescriptor::m_PeepholeEnabled</a></div><div class="ttdeci">bool m_PeepholeEnabled</div><div class="ttdoc">Enable/disable peephole. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00929">Descriptors.hpp:929</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ae1b07ed928036004bd257169e5aeeef4"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">armnn::LstmDescriptor::m_ActivationFunc</a></div><div class="ttdeci">uint32_t m_ActivationFunc</div><div class="ttdoc">The activation function to use. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00921">Descriptors.hpp:921</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a531a3907ec13d3772370da88030191a5"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">armnn::LstmDescriptor::m_ClippingThresCell</a></div><div class="ttdeci">float m_ClippingThresCell</div><div class="ttdoc">Clipping threshold value for the cell state. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00923">Descriptors.hpp:923</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_ad0b8c32bb5381f4cc999093ba3b98b43"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#ad0b8c32bb5381f4cc999093ba3b98b43">armnn::LstmInputParams::m_CellLayerNormWeights</a></div><div class="ttdeci">const ConstTensor * m_CellLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00059">LstmParams.hpp:59</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_ace7a1f1f1041b412b7d8ef82b95ff352"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#ace7a1f1f1041b412b7d8ef82b95ff352">armnn::LstmInputParams::m_ForgetGateBias</a></div><div class="ttdeci">const ConstTensor * m_ForgetGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00052">LstmParams.hpp:52</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a49e11acda22742cbaf6f1b259ead0d84"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a49e11acda22742cbaf6f1b259ead0d84">armnn::LstmInputParams::m_InputToCellWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00042">LstmParams.hpp:42</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a6e30c7b3451da3ea9cf4259fb602e6e6"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a6e30c7b3451da3ea9cf4259fb602e6e6">armnn::LstmInputParams::m_InputToOutputWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00043">LstmParams.hpp:43</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ad474e5c51a0b194ef32e812b86c0cbdb"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">armnn::LstmDescriptor::m_CifgEnabled</a></div><div class="ttdeci">bool m_CifgEnabled</div><div class="ttdoc">Enable/disable cifg (coupled input &amp; forget gate). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00927">Descriptors.hpp:927</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_ae83131e16df1cace69395a5f99bc5ecb"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#ae83131e16df1cace69395a5f99bc5ecb">armnn::LstmInputParams::m_RecurrentToForgetWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00045">LstmParams.hpp:45</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a435d3651482bbfcc11263b4e4e0c900f"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">armnn::LstmInputParams::m_RecurrentToInputWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00044">LstmParams.hpp:44</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a4a8ec49f130084445d44297549254780"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">armnn::LstmDescriptor::m_LayerNormEnabled</a></div><div class="ttdeci">bool m_LayerNormEnabled</div><div class="ttdoc">Enable/disable layer normalization. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00933">Descriptors.hpp:933</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a9b18daea2e9f42386055326fd016519a"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a9b18daea2e9f42386055326fd016519a">armnn::LstmInputParams::m_OutputLayerNormWeights</a></div><div class="ttdeci">const ConstTensor * m_OutputLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00060">LstmParams.hpp:60</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a31da1ead6794dd64571afdd0b6efc771"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a31da1ead6794dd64571afdd0b6efc771">armnn::LstmInputParams::m_InputToForgetWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00041">LstmParams.hpp:41</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_affcee5f4ab5994a21bee3b78b4e43de3"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">armnn::LstmInputParams::m_InputToInputWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00040">LstmParams.hpp:40</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a29cb9e904f31bcc86b1ab75d13d343a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29cb9e904f31bcc86b1ab75d13d343a4">&#9670;&nbsp;</a></span>VisitMaximumLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMaximumLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Maximum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a9cbdbdbda6abefbc2e1eacaad47795bd">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00714">714</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;{</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="keyword">auto</span> fbMaximumBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Maximum);</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <span class="keyword">auto</span> fbMaximumLayer     = serializer::CreateMaximumLayer(m_flatBufferBuilder, fbMaximumBaseLayer);</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    CreateAnyLayer(fbMaximumLayer.o, serializer::Layer::Layer_MaximumLayer);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1404339c6c051dc6924a16172db4b3ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1404339c6c051dc6924a16172db4b3ee">&#9670;&nbsp;</a></span>VisitMeanLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMeanLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>meanDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Mean layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">meanDescriptor</td><td>- Parameters for the mean operation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab33e9cae83e312ccc9e12adcf53494e3">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00724">724</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00955">MeanDescriptor::m_Axis</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00957">MeanDescriptor::m_KeepDims</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;{</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="keyword">auto</span> fbMeanBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Mean);</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keyword">auto</span> fbMeanDescriptor = serializer::CreateMeanDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                                                             m_flatBufferBuilder.CreateVector(descriptor.m_Axis),</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                                                             descriptor.m_KeepDims);</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="keyword">auto</span> fbMeanLayer = serializer::CreateMeanLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                                                   fbMeanBaseLayer,</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                                                   fbMeanDescriptor);</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    CreateAnyLayer(fbMeanLayer.o, serializer::Layer::Layer_MeanLayer);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae91857ae8a9be3557316eb446c40ba98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae91857ae8a9be3557316eb446c40ba98">&#9670;&nbsp;</a></span>VisitMergeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMergeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a merge layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a002ed3346c6a89035f54e11155d5b1e1">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00752">752</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;{</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    <span class="keyword">auto</span> fbMergeBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Merge);</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <span class="keyword">auto</span> fbMergeLayer     = serializer::CreateMergeLayer(m_flatBufferBuilder, fbMergeBaseLayer);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    CreateAnyLayer(fbMergeLayer.o, serializer::Layer::Layer_MergeLayer);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac6013ef93bf6ec846910e019a54cf021"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6013ef93bf6ec846910e019a54cf021">&#9670;&nbsp;</a></span>VisitMergerLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMergerLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a003d213dd28b0b8c0f26fbf268ccb975">armnn::MergerDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>mergerDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a merger layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">mergerDescriptor</td><td>- MergerDescriptor (synonym for OriginsDescriptor) to configure the concatenation process. Number of Views must be equal to the number of inputs, and their order must match - e.g. first view corresponds to the first input, second view to the second input, etc.... </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#acc80689b27497fe0c4ee3c27b50d1f31">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00762">762</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;{</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <a class="code" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a148d342b40eada32d536c2ccda673405">VisitConcatLayer</a>(layer, mergerDescriptor, name);</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;}</div><div class="ttc" id="classarmnn_serializer_1_1_serializer_visitor_xhtml_a148d342b40eada32d536c2ccda673405"><div class="ttname"><a href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a148d342b40eada32d536c2ccda673405">armnnSerializer::SerializerVisitor::VisitConcatLayer</a></div><div class="ttdeci">void VisitConcatLayer(const armnn::IConnectableLayer *layer, const armnn::ConcatDescriptor &amp;concatDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_8cpp_source.xhtml#l00769">Serializer.cpp:769</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a87432c758f53e21892780fc3b10b5c2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87432c758f53e21892780fc3b10b5c2a">&#9670;&nbsp;</a></span>VisitMinimumLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMinimumLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Minimum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a63187da01b5bb0bd4500ddf851edd0ff">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00742">742</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;{</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <span class="keyword">auto</span> fbMinimumBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Minimum);</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    <span class="keyword">auto</span> fbMinimumLayer     = serializer::CreateMinimumLayer(m_flatBufferBuilder, fbMinimumBaseLayer);</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    CreateAnyLayer(fbMinimumLayer.o, serializer::Layer::Layer_MinimumLayer);</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a23e516e20d857cd11ce80d0967ae48f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23e516e20d857cd11ce80d0967ae48f3">&#9670;&nbsp;</a></span>VisitMultiplicationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMultiplicationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a multiplication layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a1e415ad61a4fa40d85a4f0da855cf485">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00804">804</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;{</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <span class="keyword">auto</span> fbMultiplicationBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Multiplication);</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    <span class="keyword">auto</span> fbMultiplicationLayer     = serializer::CreateMultiplicationLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                                                                           fbMultiplicationBaseLayer);</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    CreateAnyLayer(fbMultiplicationLayer.o, serializer::Layer::Layer_MultiplicationLayer);</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adf9c46396d90c17839fcbdd9f400166e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf9c46396d90c17839fcbdd9f400166e">&#9670;&nbsp;</a></span>VisitNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>normalizationDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">normalizationDescriptor</td><td>- NormalizationDescriptor to configure the normalization. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a96501b3e43422b9fdf6fc45d89b20992">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01212">1212</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00160">armnnSerializer::GetFlatBufferNormalizationAlgorithmChannel()</a>, <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00174">armnnSerializer::GetFlatBufferNormalizationAlgorithmMethod()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00592">NormalizationDescriptor::m_Alpha</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00594">NormalizationDescriptor::m_Beta</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00598">NormalizationDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00596">NormalizationDescriptor::m_K</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00586">NormalizationDescriptor::m_NormChannelType</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00588">NormalizationDescriptor::m_NormMethodType</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00590">NormalizationDescriptor::m_NormSize</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;{</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    <span class="keyword">auto</span> fbNormalizationBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Normalization);</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    <span class="keyword">auto</span> fbNormalizationDescriptor = serializer::CreateNormalizationDescriptor(</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#af279947f1e42035d0f611e5b8cd70cb2">GetFlatBufferNormalizationAlgorithmChannel</a>(descriptor.m_NormChannelType),</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#ac813f02c91c348db92b5a40ecfa0135e">GetFlatBufferNormalizationAlgorithmMethod</a>(descriptor.m_NormMethodType),</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;        descriptor.m_NormSize,</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;        descriptor.m_Alpha,</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;        descriptor.m_Beta,</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;        descriptor.m_K,</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.m_DataLayout));</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateNormalizationLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;                                                                fbNormalizationBaseLayer,</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;                                                                fbNormalizationDescriptor);</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_NormalizationLayer);</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;}</div><div class="ttc" id="namespacearmnn_serializer_xhtml_ac813f02c91c348db92b5a40ecfa0135e"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#ac813f02c91c348db92b5a40ecfa0135e">armnnSerializer::GetFlatBufferNormalizationAlgorithmMethod</a></div><div class="ttdeci">armnnSerializer::NormalizationAlgorithmMethod GetFlatBufferNormalizationAlgorithmMethod(armnn::NormalizationAlgorithmMethod normalizationAlgorithmMethod)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00174">SerializerUtils.cpp:174</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_af279947f1e42035d0f611e5b8cd70cb2"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#af279947f1e42035d0f611e5b8cd70cb2">armnnSerializer::GetFlatBufferNormalizationAlgorithmChannel</a></div><div class="ttdeci">armnnSerializer::NormalizationAlgorithmChannel GetFlatBufferNormalizationAlgorithmChannel(armnn::NormalizationAlgorithmChannel normalizationAlgorithmChannel)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00160">SerializerUtils.cpp:160</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a56858f9071c8bf57fdb31a96833ff4bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56858f9071c8bf57fdb31a96833ff4bd">&#9670;&nbsp;</a></span>VisitOutputLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitOutputLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function an output layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">id</td><td>- User generated id to uniquely identify a particular output. The same id needs to be specified when passing the outputs to the IRuntime::EnqueueWorkload() function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a0da6bde681d919b7282eddad4a446890">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00108">108</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">auto</span> flatBufferOutputBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Output);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">// Create FlatBuffer BindableBaseLayer</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keyword">auto</span> flatBufferOutputBindableBaseLayer = serializer::CreateBindableLayerBase(m_flatBufferBuilder,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                                                                 flatBufferOutputBaseLayer,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                                                                 <span class="keywordtype">id</span>);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">// Push layer binding id to outputIds.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    m_outputIds.push_back(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// Create the FlatBuffer OutputLayer</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">auto</span> flatBufferOutputLayer = serializer::CreateOutputLayer(m_flatBufferBuilder, flatBufferOutputBindableBaseLayer);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    CreateAnyLayer(flatBufferOutputLayer.o, serializer::Layer::Layer_OutputLayer);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3569b9af864b7b141b067e7de3902bf3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3569b9af864b7b141b067e7de3902bf3">&#9670;&nbsp;</a></span>VisitPadLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitPadLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>padDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a pad layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">paddings</td><td>- n by 2 tensor, where n is the rank of the input tensor, such that paddings[i,0] indicates the amount of padding to add in front of dimension i, and paddings[i,1] indicates the amount of padding to add after the end of dimension i </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aab2febd844bcf654e80cf164984c8904">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00815">815</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00980">PadDescriptor::m_PadList</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00983">PadDescriptor::m_PadValue</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;{</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Pad);</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    std::vector&lt;unsigned int&gt; padList;</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; p: padDescriptor.<a class="code" href="structarmnn_1_1_pad_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">m_PadList</a>)</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    {</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        padList.push_back(p.first);</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        padList.push_back(p.second);</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    }</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="keyword">auto</span> flatBufferPadDesc = serializer::CreatePadDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                                                             m_flatBufferBuilder.CreateVector(padList),</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                                                             padDescriptor.<a class="code" href="structarmnn_1_1_pad_descriptor.xhtml#a410fa919f78af0f0f100bd1594eca4ab">m_PadValue</a>);</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <span class="keyword">auto</span> flatBufferPadLayer = serializer::CreatePadLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                                                         flatBufferBaseLayer,</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                                                         flatBufferPadDesc);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    CreateAnyLayer(flatBufferPadLayer.o, serializer::Layer::Layer_PadLayer);</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml_a410fa919f78af0f0f100bd1594eca4ab"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml#a410fa919f78af0f0f100bd1594eca4ab">armnn::PadDescriptor::m_PadValue</a></div><div class="ttdeci">float m_PadValue</div><div class="ttdoc">Optional value to use for padding, defaults to 0. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00983">Descriptors.hpp:983</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml_a85f98c94e11f65a6b73f831735c040f3"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">armnn::PadDescriptor::m_PadList</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; m_PadList</div><div class="ttdoc">Specifies the padding for input dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00980">Descriptors.hpp:980</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac81df940ac47b39a703a2cbe017bda8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac81df940ac47b39a703a2cbe017bda8e">&#9670;&nbsp;</a></span>VisitPermuteLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitPermuteLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>permuteDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">permuteDescriptor</td><td>- PermuteDescriptor to configure the permute. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a211e587a05b0c7e7202f8f8894f89894">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00841">841</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_types_8hpp_source.xhtml#l00233">PermutationVector::GetSize()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00130">PermuteDescriptor::m_DimMappings</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;{</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <span class="keyword">auto</span> flatBufferPermuteBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Permute);</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    std::vector&lt;unsigned int&gt; dimMappings;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;permuteDescriptor.<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">m_DimMappings</a>.<a class="code" href="classarmnn_1_1_permutation_vector.xhtml#a490ec6b59006d1fe1ec2ea30e69fb97c">GetSize</a>(); ++i)</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    {</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;        dimMappings.push_back(permuteDescriptor.<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">m_DimMappings</a>[i]);</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    }</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="keyword">auto</span> flatBufferPermuteDesc = serializer::CreatePermuteDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                                                                     m_flatBufferBuilder.CreateVector(dimMappings));</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="comment">// Create the FlatBuffer PermuteLayer</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    <span class="keyword">auto</span> flatBufferPermuteLayer = serializer::CreatePermuteLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                                                                 flatBufferPermuteBaseLayer,</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;                                                                 flatBufferPermuteDesc);</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    CreateAnyLayer(flatBufferPermuteLayer.o, serializer::Layer::Layer_PermuteLayer);</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_permutation_vector_xhtml_a490ec6b59006d1fe1ec2ea30e69fb97c"><div class="ttname"><a href="classarmnn_1_1_permutation_vector.xhtml#a490ec6b59006d1fe1ec2ea30e69fb97c">armnn::PermutationVector::GetSize</a></div><div class="ttdeci">SizeType GetSize() const</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00233">Types.hpp:233</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_descriptor_xhtml_a14433af2b223695b40d8c8f8ba2ebb8f"><div class="ttname"><a href="structarmnn_1_1_permute_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">armnn::PermuteDescriptor::m_DimMappings</a></div><div class="ttdeci">PermutationVector m_DimMappings</div><div class="ttdoc">Indicates how to translate tensor elements from a given source into the target destination, when source and target potentially have different memory layouts e.g. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00130">Descriptors.hpp:130</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab3c8fcc1045d3379148d4298b27c20d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3c8fcc1045d3379148d4298b27c20d3">&#9670;&nbsp;</a></span>VisitPooling2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitPooling2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>pooling2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">pooling2dDescriptor</td><td>- Pooling2dDescriptor to configure the pooling. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aef56afef7d87afa51fd363487c375af5">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01001">1001</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00136">armnnSerializer::GetFlatBufferOutputShapeRounding()</a>, <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00148">armnnSerializer::GetFlatBufferPaddingMethod()</a>, <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00122">armnnSerializer::GetFlatBufferPoolingAlgorithm()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00380">Pooling2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00376">Pooling2dDescriptor::m_OutputShapeRounding</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00366">Pooling2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00378">Pooling2dDescriptor::m_PaddingMethod</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00360">Pooling2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00362">Pooling2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00364">Pooling2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00370">Pooling2dDescriptor::m_PoolHeight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00358">Pooling2dDescriptor::m_PoolType</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00368">Pooling2dDescriptor::m_PoolWidth</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00372">Pooling2dDescriptor::m_StrideX</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00374">Pooling2dDescriptor::m_StrideY</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;{</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    <span class="keyword">auto</span> fbPooling2dBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Pooling2d);</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    <span class="keyword">auto</span> fbPooling2dDescriptor = serializer::CreatePooling2dDescriptor(</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#ac2eceb2274af867d713fe44720fc2d4e">GetFlatBufferPoolingAlgorithm</a>(pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">m_PoolType</a>),</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>,</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>,</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>,</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>,</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">m_PoolWidth</a>,</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">m_PoolHeight</a>,</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>,</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>,</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#aa5f62540b7f991c1522cf9c43fc005ee">GetFlatBufferOutputShapeRounding</a>(pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#affb5b68b3eba3ed45a06c7cde7781962">m_OutputShapeRounding</a>),</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#a30eb1e8d2a9b090243c4ededa17746b7">GetFlatBufferPaddingMethod</a>(pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a8c29d6ea9b4186d69aad5961c910939c">m_PaddingMethod</a>),</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <span class="keyword">auto</span> fbPooling2dLayer = serializer::CreatePooling2dLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;                                                             fbPooling2dBaseLayer,</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;                                                             fbPooling2dDescriptor);</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    CreateAnyLayer(fbPooling2dLayer.o, serializer::Layer::Layer_Pooling2dLayer);</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::Pooling2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00366">Descriptors.hpp:366</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::Pooling2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00360">Descriptors.hpp:360</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a6d8fb685cc1ff224f25aa127fcf62c86"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">armnn::Pooling2dDescriptor::m_PoolWidth</a></div><div class="ttdeci">uint32_t m_PoolWidth</div><div class="ttdoc">Pooling width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00368">Descriptors.hpp:368</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_aa5f62540b7f991c1522cf9c43fc005ee"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#aa5f62540b7f991c1522cf9c43fc005ee">armnnSerializer::GetFlatBufferOutputShapeRounding</a></div><div class="ttdeci">armnnSerializer::OutputShapeRounding GetFlatBufferOutputShapeRounding(armnn::OutputShapeRounding outputShapeRounding)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00136">SerializerUtils.cpp:136</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a8c29d6ea9b4186d69aad5961c910939c"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a8c29d6ea9b4186d69aad5961c910939c">armnn::Pooling2dDescriptor::m_PaddingMethod</a></div><div class="ttdeci">PaddingMethod m_PaddingMethod</div><div class="ttdoc">The padding method to be used. (Exclude, IgnoreValue). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00378">Descriptors.hpp:378</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::Pooling2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00364">Descriptors.hpp:364</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Pooling2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00372">Descriptors.hpp:372</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a5699e8606c37d18c03910b242cd1b010"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">armnn::Pooling2dDescriptor::m_PoolHeight</a></div><div class="ttdeci">uint32_t m_PoolHeight</div><div class="ttdoc">Pooling height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00370">Descriptors.hpp:370</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::Pooling2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00362">Descriptors.hpp:362</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::Pooling2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00380">Descriptors.hpp:380</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a0031997bf43bd2747656c31e4977793a"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">armnn::Pooling2dDescriptor::m_PoolType</a></div><div class="ttdeci">PoolingAlgorithm m_PoolType</div><div class="ttdoc">The pooling algorithm to use (Max. Average, L2). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00358">Descriptors.hpp:358</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_affb5b68b3eba3ed45a06c7cde7781962"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#affb5b68b3eba3ed45a06c7cde7781962">armnn::Pooling2dDescriptor::m_OutputShapeRounding</a></div><div class="ttdeci">OutputShapeRounding m_OutputShapeRounding</div><div class="ttdoc">The rounding method for the output shape. (Floor, Ceiling). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00376">Descriptors.hpp:376</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a30eb1e8d2a9b090243c4ededa17746b7"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a30eb1e8d2a9b090243c4ededa17746b7">armnnSerializer::GetFlatBufferPaddingMethod</a></div><div class="ttdeci">armnnSerializer::PaddingMethod GetFlatBufferPaddingMethod(armnn::PaddingMethod paddingMethod)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00148">SerializerUtils.cpp:148</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_ac2eceb2274af867d713fe44720fc2d4e"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#ac2eceb2274af867d713fe44720fc2d4e">armnnSerializer::GetFlatBufferPoolingAlgorithm</a></div><div class="ttdeci">armnnSerializer::PoolingAlgorithm GetFlatBufferPoolingAlgorithm(armnn::PoolingAlgorithm poolingAlgorithm)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00122">SerializerUtils.cpp:122</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Pooling2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00374">Descriptors.hpp:374</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a26930996b666eef0b5b1fe562644f5c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26930996b666eef0b5b1fe562644f5c9">&#9670;&nbsp;</a></span>VisitPreluLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitPreluLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a PReLU activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a4f6971a5d2c164c691dc7943f4befd5c">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01030">1030</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;{</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    <span class="keyword">auto</span> flatBufferPreluBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Prelu);</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    <span class="comment">// Create the FlatBuffer AdditionLayer</span></div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    <span class="keyword">auto</span> flatBufferPreluLayer = serializer::CreatePreluLayer(m_flatBufferBuilder, flatBufferPreluBaseLayer);</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;    CreateAnyLayer(flatBufferPreluLayer.o, serializer::Layer::Layer_PreluLayer);</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af01d9d7ba6c29a2a0e2efa291f6887f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af01d9d7ba6c29a2a0e2efa291f6887f6">&#9670;&nbsp;</a></span>VisitQLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitQLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">armnn::QLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">armnn::LstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a QLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">descriptor</td><td>- Parameters controlling the operation of the QLstm operation. </td></tr>
    <tr><td class="paramname">params</td><td>- The weights and biases for the layer </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a3f99f4f70c011a8ab5234e5595350781">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01387">1387</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00053">LstmInputParams::m_CellBias</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01173">QLstmDescriptor::m_CellClip</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01189">QLstmDescriptor::m_CellIntermediateScale</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00059">LstmInputParams::m_CellLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00049">LstmInputParams::m_CellToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00048">LstmInputParams::m_CellToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00050">LstmInputParams::m_CellToOutputWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01177">QLstmDescriptor::m_CifgEnabled</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00052">LstmInputParams::m_ForgetGateBias</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01187">QLstmDescriptor::m_ForgetIntermediateScale</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00058">LstmInputParams::m_ForgetLayerNormWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01195">QLstmDescriptor::m_HiddenStateScale</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01193">QLstmDescriptor::m_HiddenStateZeroPoint</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00051">LstmInputParams::m_InputGateBias</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01185">QLstmDescriptor::m_InputIntermediateScale</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00057">LstmInputParams::m_InputLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00042">LstmInputParams::m_InputToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00041">LstmInputParams::m_InputToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00040">LstmInputParams::m_InputToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00043">LstmInputParams::m_InputToOutputWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01183">QLstmDescriptor::m_LayerNormEnabled</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00054">LstmInputParams::m_OutputGateBias</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01191">QLstmDescriptor::m_OutputIntermediateScale</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00060">LstmInputParams::m_OutputLayerNormWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01179">QLstmDescriptor::m_PeepholeEnabled</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00056">LstmInputParams::m_ProjectionBias</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01175">QLstmDescriptor::m_ProjectionClip</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01181">QLstmDescriptor::m_ProjectionEnabled</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00055">LstmInputParams::m_ProjectionWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00046">LstmInputParams::m_RecurrentToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00045">LstmInputParams::m_RecurrentToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00044">LstmInputParams::m_RecurrentToInputWeights</a>, and <a class="el" href="_lstm_params_8hpp_source.xhtml#l00047">LstmInputParams::m_RecurrentToOutputWeights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;{</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    <span class="keyword">auto</span> fbQLstmBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_QLstm);</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;    <span class="keyword">auto</span> fbQLstmDescriptor = serializer::CreateQLstmDescriptor(</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;            m_flatBufferBuilder,</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>,</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>,</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>,</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>,</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ac81fb0e66dc623dc37c77f219f53a6d3">m_CellClip</a>,</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa6a518b65088f34803b3214334bdff61">m_ProjectionClip</a>,</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a09e1f097944f61cc901240f9300364cf">m_InputIntermediateScale</a>,</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#afec7f36158448f723b426a9527acb189">m_ForgetIntermediateScale</a>,</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a0477ee1b44ace6090119178eea78cb0b">m_CellIntermediateScale</a>,</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa43409f9b457352c95c89f20ce5d844d">m_OutputIntermediateScale</a>,</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4556cbd764d4848d8ad0637a9eed580d">m_HiddenStateZeroPoint</a>,</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#af8f724af7210b52529216feefa993c98">m_HiddenStateScale</a></div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;            );</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;    <span class="comment">// Mandatory params</span></div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;    <span class="keyword">auto</span> inputToForgetWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a31da1ead6794dd64571afdd0b6efc771">m_InputToForgetWeights</a>);</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;    <span class="keyword">auto</span> inputToCellWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a49e11acda22742cbaf6f1b259ead0d84">m_InputToCellWeights</a>);</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    <span class="keyword">auto</span> inputToOutputWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a6e30c7b3451da3ea9cf4259fb602e6e6">m_InputToOutputWeights</a>);</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    <span class="keyword">auto</span> recurrentToForgetWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ae83131e16df1cace69395a5f99bc5ecb">m_RecurrentToForgetWeights</a>);</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;    <span class="keyword">auto</span> recurrentToCellWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a1759754ccb88ecc9af44f3aae6e244ee">m_RecurrentToCellWeights</a>);</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    <span class="keyword">auto</span> recurrentToOutputWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a56b81ca8ba4b4937e0787e4951f043fc">m_RecurrentToOutputWeights</a>);</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;    <span class="keyword">auto</span> forgetGateBias = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ace7a1f1f1041b412b7d8ef82b95ff352">m_ForgetGateBias</a>);</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;    <span class="keyword">auto</span> cellBias = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a4a9d678146f572808a361dbdc5489f38">m_CellBias</a>);</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    <span class="keyword">auto</span> outputGateBias = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a8c0f6d48705f40c5590dde09be262222">m_OutputGateBias</a>);</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;    <span class="comment">// CIFG</span></div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputToInputWeights;</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; recurrentToInputWeights;</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputGateBias;</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;    <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;    {</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;        inputToInputWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">m_InputToInputWeights</a>);</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;        recurrentToInputWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">m_RecurrentToInputWeights</a>);</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;        inputGateBias = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">m_InputGateBias</a>);</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    }</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;    <span class="comment">// Projectiom</span></div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; projectionWeights;</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; projectionBias;</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>)</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;    {</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;        projectionWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ab03e6e1514f74427916c892f473fe04c">m_ProjectionWeights</a>);</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;        projectionBias = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a44b0e6b16708df7f0d2bbab141688aaa">m_ProjectionBias</a>);</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;    }</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;    <span class="comment">// Peephole</span></div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToInputWeights;</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToForgetWeights;</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToOutputWeights;</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>)</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    {</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;        <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;        {</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;            cellToInputWeights  = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a484bafa2f8453a7c5a4a00b92a61b006">m_CellToInputWeights</a>);</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;        }</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;        cellToForgetWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a35b112e30c3eb153806a2a8c16d178e3">m_CellToForgetWeights</a>);</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;        cellToOutputWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#afe204ca375b74e9a72640c9227918d0a">m_CellToOutputWeights</a>);</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    }</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    <span class="comment">// Layer norm</span></div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputLayerNormWeights;</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; forgetLayerNormWeights;</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellLayerNormWeights;</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; outputLayerNormWeights;</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>)</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    {</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;        <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;        {</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;            inputLayerNormWeights = CreateConstTensorInfo((*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a0cd848f65ec31778d708852f0042fe37">m_InputLayerNormWeights</a>));</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;        }</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;        forgetLayerNormWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#af0f796fba1a2be9c56b4c9ee534577ee">m_ForgetLayerNormWeights</a>);</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;        cellLayerNormWeights   = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ad0b8c32bb5381f4cc999093ba3b98b43">m_CellLayerNormWeights</a>);</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;        outputLayerNormWeights = CreateConstTensorInfo(*params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9b18daea2e9f42386055326fd016519a">m_OutputLayerNormWeights</a>);</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;    }</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    <span class="keyword">auto</span> fbQLstmParams = serializer::CreateQLstmInputParams(</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;            m_flatBufferBuilder,</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;            inputToForgetWeights,</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;            inputToCellWeights,</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;            inputToOutputWeights,</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;            recurrentToForgetWeights,</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;            recurrentToCellWeights,</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;            recurrentToOutputWeights,</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;            forgetGateBias,</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;            cellBias,</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;            outputGateBias,</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;            inputToInputWeights,</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;            recurrentToInputWeights,</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;            inputGateBias,</div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;            projectionWeights,</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;            projectionBias,</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;            cellToInputWeights,</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;            cellToForgetWeights,</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;            cellToOutputWeights,</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;            inputLayerNormWeights,</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;            forgetLayerNormWeights,</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;            cellLayerNormWeights,</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;            outputLayerNormWeights);</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    <span class="keyword">auto</span> fbQLstmLayer = serializer::CreateQLstmLayer(</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;            m_flatBufferBuilder,</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;            fbQLstmBaseLayer,</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;            fbQLstmDescriptor,</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;            fbQLstmParams);</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    CreateAnyLayer(fbQLstmLayer.o, serializer::Layer::Layer_QLstmLayer);</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_ab03e6e1514f74427916c892f473fe04c"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#ab03e6e1514f74427916c892f473fe04c">armnn::LstmInputParams::m_ProjectionWeights</a></div><div class="ttdeci">const ConstTensor * m_ProjectionWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00055">LstmParams.hpp:55</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a4a9d678146f572808a361dbdc5489f38"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a4a9d678146f572808a361dbdc5489f38">armnn::LstmInputParams::m_CellBias</a></div><div class="ttdeci">const ConstTensor * m_CellBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00053">LstmParams.hpp:53</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_afe204ca375b74e9a72640c9227918d0a"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#afe204ca375b74e9a72640c9227918d0a">armnn::LstmInputParams::m_CellToOutputWeights</a></div><div class="ttdeci">const ConstTensor * m_CellToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00050">LstmParams.hpp:50</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a2837b4396f20c956952d1a7286cab5f8"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">armnn::QLstmDescriptor::m_PeepholeEnabled</a></div><div class="ttdeci">bool m_PeepholeEnabled</div><div class="ttdoc">Enable/disable peephole. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01179">Descriptors.hpp:1179</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_af8f724af7210b52529216feefa993c98"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#af8f724af7210b52529216feefa993c98">armnn::QLstmDescriptor::m_HiddenStateScale</a></div><div class="ttdeci">float m_HiddenStateScale</div><div class="ttdoc">Hidden State quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01195">Descriptors.hpp:1195</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a484bafa2f8453a7c5a4a00b92a61b006"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a484bafa2f8453a7c5a4a00b92a61b006">armnn::LstmInputParams::m_CellToInputWeights</a></div><div class="ttdeci">const ConstTensor * m_CellToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00048">LstmParams.hpp:48</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_aa43409f9b457352c95c89f20ce5d844d"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa43409f9b457352c95c89f20ce5d844d">armnn::QLstmDescriptor::m_OutputIntermediateScale</a></div><div class="ttdeci">float m_OutputIntermediateScale</div><div class="ttdoc">Output intermediate quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01191">Descriptors.hpp:1191</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a9e081a9b94defb30d1558dc912507e0e"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">armnn::LstmInputParams::m_InputGateBias</a></div><div class="ttdeci">const ConstTensor * m_InputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00051">LstmParams.hpp:51</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a1759754ccb88ecc9af44f3aae6e244ee"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a1759754ccb88ecc9af44f3aae6e244ee">armnn::LstmInputParams::m_RecurrentToCellWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00046">LstmParams.hpp:46</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_af0f796fba1a2be9c56b4c9ee534577ee"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#af0f796fba1a2be9c56b4c9ee534577ee">armnn::LstmInputParams::m_ForgetLayerNormWeights</a></div><div class="ttdeci">const ConstTensor * m_ForgetLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00058">LstmParams.hpp:58</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a35b112e30c3eb153806a2a8c16d178e3"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a35b112e30c3eb153806a2a8c16d178e3">armnn::LstmInputParams::m_CellToForgetWeights</a></div><div class="ttdeci">const ConstTensor * m_CellToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00049">LstmParams.hpp:49</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a8c0f6d48705f40c5590dde09be262222"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a8c0f6d48705f40c5590dde09be262222">armnn::LstmInputParams::m_OutputGateBias</a></div><div class="ttdeci">const ConstTensor * m_OutputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00054">LstmParams.hpp:54</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a0cd848f65ec31778d708852f0042fe37"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a0cd848f65ec31778d708852f0042fe37">armnn::LstmInputParams::m_InputLayerNormWeights</a></div><div class="ttdeci">const ConstTensor * m_InputLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00057">LstmParams.hpp:57</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a4a8ec49f130084445d44297549254780"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">armnn::QLstmDescriptor::m_LayerNormEnabled</a></div><div class="ttdeci">bool m_LayerNormEnabled</div><div class="ttdoc">Enable/disable layer normalization. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01183">Descriptors.hpp:1183</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a56b81ca8ba4b4937e0787e4951f043fc"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a56b81ca8ba4b4937e0787e4951f043fc">armnn::LstmInputParams::m_RecurrentToOutputWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00047">LstmParams.hpp:47</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a44b0e6b16708df7f0d2bbab141688aaa"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a44b0e6b16708df7f0d2bbab141688aaa">armnn::LstmInputParams::m_ProjectionBias</a></div><div class="ttdeci">const ConstTensor * m_ProjectionBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00056">LstmParams.hpp:56</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_aa6a518b65088f34803b3214334bdff61"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa6a518b65088f34803b3214334bdff61">armnn::QLstmDescriptor::m_ProjectionClip</a></div><div class="ttdeci">float m_ProjectionClip</div><div class="ttdoc">Clipping threshold value for the projection. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01175">Descriptors.hpp:1175</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a09e1f097944f61cc901240f9300364cf"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a09e1f097944f61cc901240f9300364cf">armnn::QLstmDescriptor::m_InputIntermediateScale</a></div><div class="ttdeci">float m_InputIntermediateScale</div><div class="ttdoc">Input intermediate quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01185">Descriptors.hpp:1185</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_afec7f36158448f723b426a9527acb189"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#afec7f36158448f723b426a9527acb189">armnn::QLstmDescriptor::m_ForgetIntermediateScale</a></div><div class="ttdeci">float m_ForgetIntermediateScale</div><div class="ttdoc">Forget intermediate quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01187">Descriptors.hpp:1187</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_ad0b8c32bb5381f4cc999093ba3b98b43"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#ad0b8c32bb5381f4cc999093ba3b98b43">armnn::LstmInputParams::m_CellLayerNormWeights</a></div><div class="ttdeci">const ConstTensor * m_CellLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00059">LstmParams.hpp:59</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_ace7a1f1f1041b412b7d8ef82b95ff352"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#ace7a1f1f1041b412b7d8ef82b95ff352">armnn::LstmInputParams::m_ForgetGateBias</a></div><div class="ttdeci">const ConstTensor * m_ForgetGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00052">LstmParams.hpp:52</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a49e11acda22742cbaf6f1b259ead0d84"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a49e11acda22742cbaf6f1b259ead0d84">armnn::LstmInputParams::m_InputToCellWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00042">LstmParams.hpp:42</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a6e30c7b3451da3ea9cf4259fb602e6e6"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a6e30c7b3451da3ea9cf4259fb602e6e6">armnn::LstmInputParams::m_InputToOutputWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00043">LstmParams.hpp:43</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_ac81fb0e66dc623dc37c77f219f53a6d3"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#ac81fb0e66dc623dc37c77f219f53a6d3">armnn::QLstmDescriptor::m_CellClip</a></div><div class="ttdeci">float m_CellClip</div><div class="ttdoc">Clipping threshold value for the cell state. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01173">Descriptors.hpp:1173</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_ae83131e16df1cace69395a5f99bc5ecb"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#ae83131e16df1cace69395a5f99bc5ecb">armnn::LstmInputParams::m_RecurrentToForgetWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00045">LstmParams.hpp:45</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a6c9de81fc65b3c4924cab11907075a17"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">armnn::QLstmDescriptor::m_ProjectionEnabled</a></div><div class="ttdeci">bool m_ProjectionEnabled</div><div class="ttdoc">Enable/disable the projection layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01181">Descriptors.hpp:1181</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a435d3651482bbfcc11263b4e4e0c900f"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">armnn::LstmInputParams::m_RecurrentToInputWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00044">LstmParams.hpp:44</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a9b18daea2e9f42386055326fd016519a"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a9b18daea2e9f42386055326fd016519a">armnn::LstmInputParams::m_OutputLayerNormWeights</a></div><div class="ttdeci">const ConstTensor * m_OutputLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00060">LstmParams.hpp:60</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a0477ee1b44ace6090119178eea78cb0b"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a0477ee1b44ace6090119178eea78cb0b">armnn::QLstmDescriptor::m_CellIntermediateScale</a></div><div class="ttdeci">float m_CellIntermediateScale</div><div class="ttdoc">Cell intermediate quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01189">Descriptors.hpp:1189</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_ad474e5c51a0b194ef32e812b86c0cbdb"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">armnn::QLstmDescriptor::m_CifgEnabled</a></div><div class="ttdeci">bool m_CifgEnabled</div><div class="ttdoc">Enable/disable CIFG (coupled input &amp; forget gate). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01177">Descriptors.hpp:1177</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_a31da1ead6794dd64571afdd0b6efc771"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a31da1ead6794dd64571afdd0b6efc771">armnn::LstmInputParams::m_InputToForgetWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00041">LstmParams.hpp:41</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a4556cbd764d4848d8ad0637a9eed580d"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4556cbd764d4848d8ad0637a9eed580d">armnn::QLstmDescriptor::m_HiddenStateZeroPoint</a></div><div class="ttdeci">int32_t m_HiddenStateZeroPoint</div><div class="ttdoc">Hidden State zero point. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01193">Descriptors.hpp:1193</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml_affcee5f4ab5994a21bee3b78b4e43de3"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">armnn::LstmInputParams::m_InputToInputWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00040">LstmParams.hpp:40</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a598e914a8657aca24ed847d9069ad025"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a598e914a8657aca24ed847d9069ad025">&#9670;&nbsp;</a></span>VisitQuantizedLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitQuantizedLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">armnn::QuantizedLstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a QuantizedLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">params</td><td>- The weights and biases for the Quantized LSTM cell </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#acb1bac244973743d460064c1e0d816fd">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01512">1512</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::BFloat16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::Boolean</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::Float16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00108">QuantizedLstmInputParams::GetCellBias()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00194">TensorInfo::GetDataType()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00092">TensorShape::GetDimensionality()</a>, <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00045">armnnSerializer::GetFlatBufferConstTensorData()</a>, <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00064">armnnSerializer::GetFlatBufferDataType()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00103">QuantizedLstmInputParams::GetForgetGateBias()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#afb5e65c770f6cee222db8af7581541a6">IConnectableLayer::GetGuid()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00282">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00098">QuantizedLstmInputParams::GetInputGateBias()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00068">QuantizedLstmInputParams::GetInputToCellWeights()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00063">QuantizedLstmInputParams::GetInputToForgetWeights()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00058">QuantizedLstmInputParams::GetInputToInputWeights()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00073">QuantizedLstmInputParams::GetInputToOutputWeights()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00292">BaseTensor&lt; MemoryType &gt;::GetMemoryArea()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#afcc1c3a20bd2860e0ddd21674389246f">IConnectableLayer::GetName()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00289">BaseTensor&lt; MemoryType &gt;::GetNumBytes()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00113">QuantizedLstmInputParams::GetOutputGateBias()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00485">TensorInfo::GetQuantizationDim()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00469">TensorInfo::GetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00452">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00442">TensorInfo::GetQuantizationScales()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00088">QuantizedLstmInputParams::GetRecurrentToCellWeights()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00083">QuantizedLstmInputParams::GetRecurrentToForgetWeights()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00078">QuantizedLstmInputParams::GetRecurrentToInputWeights()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00093">QuantizedLstmInputParams::GetRecurrentToOutputWeights()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00437">TensorInfo::HasPerAxisQuantization()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;{</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;    <span class="keyword">auto</span> fbQuantizedLstmBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_QuantizedLstm);</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    <span class="comment">// Get input parameters</span></div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;    <span class="keyword">auto</span> inputToInputWeights = CreateConstTensorInfo(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a23d6133552ba91cc0571517896792ea4">GetInputToInputWeights</a>());</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    <span class="keyword">auto</span> inputToForgetWeights = CreateConstTensorInfo(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a339c19855613274cf0ea13921af9e5a3">GetInputToForgetWeights</a>());</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;    <span class="keyword">auto</span> inputToCellWeights = CreateConstTensorInfo(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a928f70dd19a2b0d3e9b75c27a2099c44">GetInputToCellWeights</a>());</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    <span class="keyword">auto</span> inputToOutputWeights = CreateConstTensorInfo(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a477440c44fe870fb6f2486bf68214395">GetInputToOutputWeights</a>());</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;    <span class="keyword">auto</span> recurrentToInputWeights = CreateConstTensorInfo(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#ad2e53e6428416a65ae4ba566207cc6bf">GetRecurrentToInputWeights</a>());</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    <span class="keyword">auto</span> recurrentToForgetWeights = CreateConstTensorInfo(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a8ad69d6d46b4b12f47fbe6032c9b7a18">GetRecurrentToForgetWeights</a>());</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;    <span class="keyword">auto</span> recurrentToCellWeights = CreateConstTensorInfo(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a63e34dd3e41262e750f7a54de8ca81d1">GetRecurrentToCellWeights</a>());</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    <span class="keyword">auto</span> recurrentToOutputWeights = CreateConstTensorInfo(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a94645f29b99800c2e57acc4832519a53">GetRecurrentToOutputWeights</a>());</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;    <span class="keyword">auto</span> inputGateBias = CreateConstTensorInfo(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#aba6d12c9d5671017b6711b80316069ff">GetInputGateBias</a>());</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;    <span class="keyword">auto</span> forgetGateBias = CreateConstTensorInfo(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a715696f29b5376cbb8aaec0b77a092af">GetForgetGateBias</a>());</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    <span class="keyword">auto</span> cellBias = CreateConstTensorInfo(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a89f3c8b72e3a802240156915141de5ca">GetCellBias</a>());</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    <span class="keyword">auto</span> outputGateBias = CreateConstTensorInfo(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a1691bf16df2cabf1a4b82aecbb021f31">GetOutputGateBias</a>());</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;    <span class="keyword">auto</span> fbQuantizedLstmParams = serializer::CreateQuantizedLstmInputParams(</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;        inputToInputWeights,</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;        inputToForgetWeights,</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;        inputToCellWeights,</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;        inputToOutputWeights,</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;        recurrentToInputWeights,</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;        recurrentToForgetWeights,</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;        recurrentToCellWeights,</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;        recurrentToOutputWeights,</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;        inputGateBias,</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;        forgetGateBias,</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;        cellBias,</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;        outputGateBias);</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;    <span class="keyword">auto</span> fbQuantizedLstmLayer = serializer::CreateQuantizedLstmLayer(</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;        fbQuantizedLstmBaseLayer,</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;        fbQuantizedLstmParams);</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;    CreateAnyLayer(fbQuantizedLstmLayer.o, serializer::Layer::Layer_QuantizedLstmLayer);</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_xhtml_a94645f29b99800c2e57acc4832519a53"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a94645f29b99800c2e57acc4832519a53">armnn::QuantizedLstmInputParams::GetRecurrentToOutputWeights</a></div><div class="ttdeci">const ConstTensor &amp; GetRecurrentToOutputWeights() const</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00093">QuantizedLstmParams.hpp:93</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_xhtml_a8ad69d6d46b4b12f47fbe6032c9b7a18"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a8ad69d6d46b4b12f47fbe6032c9b7a18">armnn::QuantizedLstmInputParams::GetRecurrentToForgetWeights</a></div><div class="ttdeci">const ConstTensor &amp; GetRecurrentToForgetWeights() const</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00083">QuantizedLstmParams.hpp:83</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_xhtml_a89f3c8b72e3a802240156915141de5ca"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a89f3c8b72e3a802240156915141de5ca">armnn::QuantizedLstmInputParams::GetCellBias</a></div><div class="ttdeci">const ConstTensor &amp; GetCellBias() const</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00108">QuantizedLstmParams.hpp:108</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_xhtml_a477440c44fe870fb6f2486bf68214395"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a477440c44fe870fb6f2486bf68214395">armnn::QuantizedLstmInputParams::GetInputToOutputWeights</a></div><div class="ttdeci">const ConstTensor &amp; GetInputToOutputWeights() const</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00073">QuantizedLstmParams.hpp:73</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_xhtml_a928f70dd19a2b0d3e9b75c27a2099c44"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a928f70dd19a2b0d3e9b75c27a2099c44">armnn::QuantizedLstmInputParams::GetInputToCellWeights</a></div><div class="ttdeci">const ConstTensor &amp; GetInputToCellWeights() const</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00068">QuantizedLstmParams.hpp:68</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_xhtml_a23d6133552ba91cc0571517896792ea4"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a23d6133552ba91cc0571517896792ea4">armnn::QuantizedLstmInputParams::GetInputToInputWeights</a></div><div class="ttdeci">const ConstTensor &amp; GetInputToInputWeights() const</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00058">QuantizedLstmParams.hpp:58</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_xhtml_a715696f29b5376cbb8aaec0b77a092af"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a715696f29b5376cbb8aaec0b77a092af">armnn::QuantizedLstmInputParams::GetForgetGateBias</a></div><div class="ttdeci">const ConstTensor &amp; GetForgetGateBias() const</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00103">QuantizedLstmParams.hpp:103</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_xhtml_aba6d12c9d5671017b6711b80316069ff"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#aba6d12c9d5671017b6711b80316069ff">armnn::QuantizedLstmInputParams::GetInputGateBias</a></div><div class="ttdeci">const ConstTensor &amp; GetInputGateBias() const</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00098">QuantizedLstmParams.hpp:98</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_xhtml_a63e34dd3e41262e750f7a54de8ca81d1"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a63e34dd3e41262e750f7a54de8ca81d1">armnn::QuantizedLstmInputParams::GetRecurrentToCellWeights</a></div><div class="ttdeci">const ConstTensor &amp; GetRecurrentToCellWeights() const</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00088">QuantizedLstmParams.hpp:88</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_xhtml_a339c19855613274cf0ea13921af9e5a3"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a339c19855613274cf0ea13921af9e5a3">armnn::QuantizedLstmInputParams::GetInputToForgetWeights</a></div><div class="ttdeci">const ConstTensor &amp; GetInputToForgetWeights() const</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00063">QuantizedLstmParams.hpp:63</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_xhtml_ad2e53e6428416a65ae4ba566207cc6bf"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#ad2e53e6428416a65ae4ba566207cc6bf">armnn::QuantizedLstmInputParams::GetRecurrentToInputWeights</a></div><div class="ttdeci">const ConstTensor &amp; GetRecurrentToInputWeights() const</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00078">QuantizedLstmParams.hpp:78</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_xhtml_a1691bf16df2cabf1a4b82aecbb021f31"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a1691bf16df2cabf1a4b82aecbb021f31">armnn::QuantizedLstmInputParams::GetOutputGateBias</a></div><div class="ttdeci">const ConstTensor &amp; GetOutputGateBias() const</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00113">QuantizedLstmParams.hpp:113</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a25ee3712e8012235fedcd41fdd1b78a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25ee3712e8012235fedcd41fdd1b78a3">&#9670;&nbsp;</a></span>VisitQuantizeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitQuantizeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a quantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a78ec371d5935104926bca5c5febf6780">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01045">1045</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;{</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    <span class="keyword">auto</span> fbQuantizeBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Quantize);</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    <span class="keyword">auto</span> fbQuantizeLayer = serializer::CreateQuantizeLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                                                           fbQuantizeBaseLayer);</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;    CreateAnyLayer(fbQuantizeLayer.o, serializer::Layer::Layer_QuantizeLayer);</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9d260d77fa97488a8fd0ef0e6fd4177a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d260d77fa97488a8fd0ef0e6fd4177a">&#9670;&nbsp;</a></span>VisitRankLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitRankLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a rank layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7b2632b6e22ac7bc314bad5532fdb3c9">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00869">869</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;{</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Rank);</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    <span class="keyword">auto</span> flatBufferRankLayer = serializer::CreateRankLayer(m_flatBufferBuilder, flatBufferBaseLayer);</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    CreateAnyLayer(flatBufferRankLayer.o, serializer::Layer::Layer_RankLayer);</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ada00d4a9cb133fef352290610f257000"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada00d4a9cb133fef352290610f257000">&#9670;&nbsp;</a></span>VisitReshapeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitReshapeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>reshapeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">reshapeDescriptor</td><td>- Parameters for the reshape operation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#acb732489554691ba852ca323888093ac">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00879">879</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00834">ReshapeDescriptor::m_TargetShape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;{</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    <span class="keyword">auto</span> flatBufferReshapeBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Reshape);</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    std::vector&lt;unsigned int&gt; targetShape;</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i =0; i &lt; reshapeDescriptor.<a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">m_TargetShape</a>.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    {</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;        targetShape.push_back(reshapeDescriptor.<a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">m_TargetShape</a>[i]);</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    }</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <span class="keyword">auto</span> flatBufferReshapeDesc = serializer::CreateReshapeDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                                                                     m_flatBufferBuilder.CreateVector(targetShape));</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    <span class="comment">// Create the FlatBuffer ReshapeLayer</span></div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <span class="keyword">auto</span> flatBufferReshapeLayer = serializer::CreateReshapeLayer(m_flatBufferBuilder, flatBufferReshapeBaseLayer,</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                                                                 flatBufferReshapeDesc);</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    CreateAnyLayer(flatBufferReshapeLayer.o, serializer::Layer::Layer_ReshapeLayer);</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_descriptor_xhtml_a1178f4dafdda81f59c15145ec327f7d9"><div class="ttname"><a href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">armnn::ReshapeDescriptor::m_TargetShape</a></div><div class="ttdeci">TensorShape m_TargetShape</div><div class="ttdoc">Target shape value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00834">Descriptors.hpp:834</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afa243ee90086da1e8270b8391dd8f221"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa243ee90086da1e8270b8391dd8f221">&#9670;&nbsp;</a></span>VisitResizeBilinearLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitResizeBilinearLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">armnn::ResizeBilinearDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>resizeDesc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">resizeDesc</td><td>- Parameters for the resize operation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8d87dab666a8aa6e132fcd93717a3c4b">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00905">905</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00774">ResizeBilinearDescriptor::m_AlignCorners</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00772">ResizeBilinearDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00776">ResizeBilinearDescriptor::m_HalfPixelCenters</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00770">ResizeBilinearDescriptor::m_TargetHeight</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00768">ResizeBilinearDescriptor::m_TargetWidth</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;{</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_ResizeBilinear);</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor =</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        CreateResizeBilinearDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;                                       resizeDescriptor.m_TargetWidth,</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;                                       resizeDescriptor.m_TargetHeight,</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;                                       <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(resizeDescriptor.m_DataLayout),</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;                                       resizeDescriptor.m_AlignCorners,</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;                                       resizeDescriptor.m_HalfPixelCenters);</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateResizeBilinearLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;                                                                 flatBufferBaseLayer,</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;                                                                 flatBufferDescriptor);</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_ResizeBilinearLayer);</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad7df3f2ae8cbb23bb8651fff4d079718"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7df3f2ae8cbb23bb8651fff4d079718">&#9670;&nbsp;</a></span>VisitResizeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitResizeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>resizeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">resizeDescriptor</td><td>- Parameters for the resize operation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a306e22f3cc6baaf7a6f1390f669be42e">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00928">928</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00188">armnnSerializer::GetFlatBufferResizeMethod()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00811">ResizeDescriptor::m_AlignCorners</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00809">ResizeDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00813">ResizeDescriptor::m_HalfPixelCenters</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00807">ResizeDescriptor::m_Method</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00804">ResizeDescriptor::m_TargetHeight</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00802">ResizeDescriptor::m_TargetWidth</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;{</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Resize);</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor =</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;            CreateResizeDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                                   resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">m_TargetHeight</a>,</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                                   resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">m_TargetWidth</a>,</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                                   <a class="code" href="namespacearmnn_serializer.xhtml#a255a85366167a060a9e33ce2378f28a0">GetFlatBufferResizeMethod</a>(resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">m_Method</a>),</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                                   <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>),</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                                   resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#ae1a4b3b6c60552509b89747cebb900a2">m_AlignCorners</a>,</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                                   resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a4022d5107338aaf5eb7abebf78a1360b">m_HalfPixelCenters</a>);</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateResizeLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                                                         flatBufferBaseLayer,</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                                                         flatBufferDescriptor);</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_ResizeLayer);</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a869254cb56968986a78a79e1d6d4a86b"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">armnn::ResizeDescriptor::m_Method</a></div><div class="ttdeci">ResizeMethod m_Method</div><div class="ttdoc">The Interpolation method to use (Bilinear, NearestNeighbor). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00807">Descriptors.hpp:807</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_adcf5037208faac36c0788239a073f75c"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">armnn::ResizeDescriptor::m_TargetWidth</a></div><div class="ttdeci">uint32_t m_TargetWidth</div><div class="ttdoc">Target width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00802">Descriptors.hpp:802</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a4022d5107338aaf5eb7abebf78a1360b"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a4022d5107338aaf5eb7abebf78a1360b">armnn::ResizeDescriptor::m_HalfPixelCenters</a></div><div class="ttdeci">bool m_HalfPixelCenters</div><div class="ttdoc">Half Pixel Centers. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00813">Descriptors.hpp:813</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a46c3fa15c46fb0d1dcdc24d0ea5cb5cd"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">armnn::ResizeDescriptor::m_TargetHeight</a></div><div class="ttdeci">uint32_t m_TargetHeight</div><div class="ttdoc">Target height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00804">Descriptors.hpp:804</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_ae1a4b3b6c60552509b89747cebb900a2"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#ae1a4b3b6c60552509b89747cebb900a2">armnn::ResizeDescriptor::m_AlignCorners</a></div><div class="ttdeci">bool m_AlignCorners</div><div class="ttdoc">Aligned corners. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00811">Descriptors.hpp:811</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a255a85366167a060a9e33ce2378f28a0"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a255a85366167a060a9e33ce2378f28a0">armnnSerializer::GetFlatBufferResizeMethod</a></div><div class="ttdeci">armnnSerializer::ResizeMethod GetFlatBufferResizeMethod(armnn::ResizeMethod method)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00188">SerializerUtils.cpp:188</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::ResizeDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00809">Descriptors.hpp:809</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af9fea44d69144543d711293ab4a61af4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9fea44d69144543d711293ab4a61af4">&#9670;&nbsp;</a></span>VisitRsqrtLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitRsqrtLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Reciprocal of square root layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a413253dbf325ea0b44559b55242170d1">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00952">952</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;{</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    <span class="keyword">auto</span> fbRsqrtBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Rsqrt);</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    <span class="keyword">auto</span> fbRsqrtLayer     = serializer::CreateRsqrtLayer(m_flatBufferBuilder, fbRsqrtBaseLayer);</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    CreateAnyLayer(fbRsqrtLayer.o, serializer::Layer::Layer_RsqrtLayer);</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8931b9c0199822fe3db2fdbde579a96e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8931b9c0199822fe3db2fdbde579a96e">&#9670;&nbsp;</a></span>VisitSliceLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSliceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">armnn::SliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>sliceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">sliceDescriptor</td><td>- SliceDescriptor to configure the slice operation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aad5c9d5c9cf256ea990097732fd1f108">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00962">962</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01003">SliceDescriptor::m_Begin</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l01006">SliceDescriptor::m_Size</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;{</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    <span class="keyword">auto</span> fbSliceBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Slice);</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    <span class="keyword">auto</span> fbSliceDescriptor = CreateSliceDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;                                                   m_flatBufferBuilder.CreateVector(sliceDescriptor.<a class="code" href="structarmnn_1_1_slice_descriptor.xhtml#a4939f00778f08d6c6fec6f74c0a59b7e">m_Begin</a>),</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                                                   m_flatBufferBuilder.CreateVector(sliceDescriptor.<a class="code" href="structarmnn_1_1_slice_descriptor.xhtml#ab52cabf19232290fa6b49828ba957ac0">m_Size</a>));</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    <span class="keyword">auto</span> fbSliceLayer = serializer::CreateSliceLayer(m_flatBufferBuilder, fbSliceBaseLayer, fbSliceDescriptor);</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    CreateAnyLayer(fbSliceLayer.o, serializer::Layer::Layer_SliceLayer);</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_slice_descriptor_xhtml_ab52cabf19232290fa6b49828ba957ac0"><div class="ttname"><a href="structarmnn_1_1_slice_descriptor.xhtml#ab52cabf19232290fa6b49828ba957ac0">armnn::SliceDescriptor::m_Size</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_Size</div><div class="ttdoc">Size of the slice in each dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01006">Descriptors.hpp:1006</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_slice_descriptor_xhtml_a4939f00778f08d6c6fec6f74c0a59b7e"><div class="ttname"><a href="structarmnn_1_1_slice_descriptor.xhtml#a4939f00778f08d6c6fec6f74c0a59b7e">armnn::SliceDescriptor::m_Begin</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_Begin</div><div class="ttdoc">Beginning indices of the slice in each dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01003">Descriptors.hpp:1003</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a22d44460791b64d4e1d65f8107f69786"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22d44460791b64d4e1d65f8107f69786">&#9670;&nbsp;</a></span>VisitSoftmaxLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSoftmaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>softmaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">softmaxDescriptor</td><td>- SoftmaxDescriptor to configure the softmax. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ae47c90e3188970462a28d297644133d1">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l00979">979</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00147">SoftmaxDescriptor::m_Beta</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;{</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    <span class="keyword">auto</span> flatBufferSoftmaxBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Softmax);</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    <span class="comment">// Create the FlatBuffer SoftmaxDescriptor</span></div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    <span class="keyword">auto</span> flatBufferSoftmaxDesc =</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;        serializer::CreateSoftmaxDescriptor(m_flatBufferBuilder, softmaxDescriptor.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a>);</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    <span class="comment">// Create the FlatBuffer SoftmaxLayer</span></div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    <span class="keyword">auto</span> flatBufferSoftmaxLayer =</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;        serializer::CreateSoftmaxLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;                                       flatBufferSoftmaxBaseLayer,</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;                                       flatBufferSoftmaxDesc);</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    CreateAnyLayer(flatBufferSoftmaxLayer.o, serializer::Layer::Layer_SoftmaxLayer);</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml_a8275d51ef9a584feb95726ea0522f6e5"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">armnn::SoftmaxDescriptor::m_Beta</a></div><div class="ttdeci">float m_Beta</div><div class="ttdoc">Exponentiation value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00147">Descriptors.hpp:147</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4ca05fff57392b368ce229af4721aa19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ca05fff57392b368ce229af4721aa19">&#9670;&nbsp;</a></span>VisitSpaceToBatchNdLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSpaceToBatchNdLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>spaceToBatchNdDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">spaceToBatchNdDescriptor</td><td>- Parameters for the space to batch operation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aa8c1ec6712293700fb3874f63f2ec5f0">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01095">1095</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00861">SpaceToBatchNdDescriptor::m_BlockShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00866">SpaceToBatchNdDescriptor::m_DataLayout</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00864">SpaceToBatchNdDescriptor::m_PadList</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;{</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_SpaceToBatchNd);</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    std::vector&lt;unsigned int&gt; padList;</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;    padList.reserve(spaceToBatchNdDescriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">m_PadList</a>.size()*2);</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; pad : spaceToBatchNdDescriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">m_PadList</a>)</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;    {</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;        padList.push_back(pad.first);</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;        padList.push_back(pad.second);</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    }</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor =</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;        CreateSpaceToBatchNdDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;                                       m_flatBufferBuilder.CreateVector(spaceToBatchNdDescriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">m_BlockShape</a>),</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;                                       m_flatBufferBuilder.CreateVector(padList),</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;                                       <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(spaceToBatchNdDescriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateSpaceToBatchNdLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;                                                                 flatBufferBaseLayer,</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                                                                 flatBufferDescriptor);</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_SpaceToBatchNdLayer);</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml_a85f98c94e11f65a6b73f831735c040f3"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">armnn::SpaceToBatchNdDescriptor::m_PadList</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; m_PadList</div><div class="ttdoc">Specifies the padding values for the input dimension: heightPad{top, bottom} widthPad{left, right}. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00864">Descriptors.hpp:864</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::SpaceToBatchNdDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00866">Descriptors.hpp:866</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml_a02e143524aefddd40b485fcf7dea6696"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">armnn::SpaceToBatchNdDescriptor::m_BlockShape</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_BlockShape</div><div class="ttdoc">Block shape value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00861">Descriptors.hpp:861</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa3c4485dc7e9529e9a03e74ba69bd624"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3c4485dc7e9529e9a03e74ba69bd624">&#9670;&nbsp;</a></span>VisitSpaceToDepthLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSpaceToDepthLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::SpaceToDepthDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>spaceToDepthDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a space to depth layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">spaceToDepthDescriptor</td><td>- Parameters for the space to depth operation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7ac3fe15d509443ffbe985370b61b913">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01126">1126</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00887">SpaceToDepthDescriptor::m_BlockSize</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00890">SpaceToDepthDescriptor::m_DataLayout</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;{</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_SpaceToDepth);</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor =</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;        CreateSpaceToDepthDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;                                     spaceToDepthDescriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6c6b8957f1e176867e5fb05b1a1a1486">m_BlockSize</a>,</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;                                     <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(spaceToDepthDescriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateSpaceToDepthLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;                                                               flatBufferBaseLayer,</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;                                                               flatBufferDescriptor);</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_SpaceToDepthLayer);</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_descriptor_xhtml_a6c6b8957f1e176867e5fb05b1a1a1486"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6c6b8957f1e176867e5fb05b1a1a1486">armnn::SpaceToDepthDescriptor::m_BlockSize</a></div><div class="ttdeci">unsigned int m_BlockSize</div><div class="ttdoc">Scalar specifying the input block size. It must be &gt;= 1. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00887">Descriptors.hpp:887</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::SpaceToDepthDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00890">Descriptors.hpp:890</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab24e753aaf05ae1f1b099ec020bbb0df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab24e753aaf05ae1f1b099ec020bbb0df">&#9670;&nbsp;</a></span>VisitSplitterLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSplitterLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">armnn::ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>splitterDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">splitterDescriptor</td><td>- ViewsDescriptor to configure the splitting process. Number of Views must be equal to the number of outputs, and their order must match - e.g. first view corresponds to the first output, second view to the second output, etc.... </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a45c613d43c30b3314cafb1be3ef7685c">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01146">1146</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_descriptors_8cpp_source.xhtml#l00162">OriginsDescriptor::GetConcatAxis()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00192">OriginsDescriptor::GetNumDimensions()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00300">ViewsDescriptor::GetNumDimensions()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00187">OriginsDescriptor::GetNumViews()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00295">ViewsDescriptor::GetNumViews()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00345">ViewsDescriptor::GetOrigins()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00305">ViewsDescriptor::GetViewOrigin()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00340">ViewsDescriptor::GetViewSizes()</a>, and <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;{</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    <span class="comment">// Create FlatBuffer ViewOrigins</span></div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;    std::vector&lt;flatbuffers::Offset&lt;UintVector&gt;&gt; flatBufferViewOrigins;</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    flatBufferViewOrigins.reserve(viewsDescriptor.GetNumViews());</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vIdx = 0; vIdx &lt; viewsDescriptor.GetNumViews(); ++vIdx)</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;    {</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;        std::vector&lt;uint32_t&gt; viewOrigin;</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;        viewOrigin.reserve(viewsDescriptor.GetNumDimensions());</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;        <span class="comment">// Copy vector</span></div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dIdx = 0; dIdx &lt; viewsDescriptor.GetNumDimensions(); ++dIdx)</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;        {</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;            viewOrigin.push_back(viewsDescriptor.GetViewOrigin(vIdx)[dIdx]);</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;        }</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;        flatBufferViewOrigins.push_back(CreateUintVector(m_flatBufferBuilder,</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;                                                         m_flatBufferBuilder.CreateVector(viewOrigin)));</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    }</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    <span class="comment">// Create FlatBuffer OriginsDescriptor</span></div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    <span class="keyword">auto</span> flatBufferOriginDescriptor = CreateOriginsDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;                                                              viewsDescriptor.GetOrigins().GetConcatAxis(),</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;                                                              viewsDescriptor.GetOrigins().GetNumViews(),</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;                                                              viewsDescriptor.GetOrigins().GetNumDimensions(),</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;                                                              m_flatBufferBuilder.CreateVector(flatBufferViewOrigins));</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    <span class="comment">// Create FlatBuffer ViewOrigins</span></div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    std::vector&lt;flatbuffers::Offset&lt;UintVector&gt;&gt; flatBufferViewSizes;</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    flatBufferViewSizes.reserve(viewsDescriptor.GetNumViews());</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vIdx = 0; vIdx &lt; viewsDescriptor.GetNumViews(); ++vIdx)</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    {</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;        std::vector&lt;uint32_t&gt; viewSize;</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;        viewSize.reserve(viewsDescriptor.GetNumDimensions());</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;        <span class="comment">// Copy vector</span></div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dIdx = 0; dIdx &lt; viewsDescriptor.GetNumDimensions(); ++dIdx)</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;        {</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;            viewSize.push_back(viewsDescriptor.GetViewSizes(vIdx)[dIdx]);</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;        }</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;        flatBufferViewSizes.push_back(CreateUintVector(m_flatBufferBuilder,</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;                                                       m_flatBufferBuilder.CreateVector(viewSize)));</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    }</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    <span class="comment">// Create FlatBuffer ViewsDescriptor</span></div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    <span class="keyword">auto</span> flatBufferViewsDescriptor = CreateViewsDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;                                                           flatBufferOriginDescriptor,</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;                                                           m_flatBufferBuilder.CreateVector(flatBufferViewSizes));</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Splitter);</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;    <span class="keyword">auto</span> flatBufferSplitterLayer = serializer::CreateSplitterLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;                                                                   flatBufferBaseLayer,</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;                                                                   flatBufferViewsDescriptor);</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    CreateAnyLayer(flatBufferSplitterLayer.o, serializer::Layer::Layer_SplitterLayer);</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa6835f67d172384fb91ca5e7d0933a00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6835f67d172384fb91ca5e7d0933a00">&#9670;&nbsp;</a></span>VisitStackLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitStackLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">armnn::StackDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>stackDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a stack layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">stackDescriptor</td><td>- Parameters for the stack operation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a5c7df9d37959280f4328848ae4b2be37">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01237">1237</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01032">StackDescriptor::m_Axis</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01036">StackDescriptor::m_InputShape</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l01034">StackDescriptor::m_NumInputs</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;{</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    <span class="keyword">auto</span> stackBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Stack);</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    std::vector&lt;unsigned int&gt; inputShape;</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i =0; i &lt; stackDescriptor.<a class="code" href="structarmnn_1_1_stack_descriptor.xhtml#a2bea87b470268bb0b73457c3733dbc04">m_InputShape</a>.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    {</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;        inputShape.push_back(stackDescriptor.<a class="code" href="structarmnn_1_1_stack_descriptor.xhtml#a2bea87b470268bb0b73457c3733dbc04">m_InputShape</a>[i]);</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;    }</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    <span class="keyword">auto</span> flatBufferStackDescriptor = CreateStackDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;                                                           stackDescriptor.<a class="code" href="structarmnn_1_1_stack_descriptor.xhtml#ab218de7805899c8412d75d1fd1d846d2">m_Axis</a>,</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;                                                           stackDescriptor.<a class="code" href="structarmnn_1_1_stack_descriptor.xhtml#aed6086070440ceb94129bef06f70173f">m_NumInputs</a>,</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;                                                           m_flatBufferBuilder.CreateVector(inputShape));</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;    <span class="keyword">auto</span> stackLayer = serializer::CreateStackLayer(m_flatBufferBuilder, stackBaseLayer, flatBufferStackDescriptor);</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;    CreateAnyLayer(stackLayer.o, serializer::Layer::Layer_StackLayer);</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml_ab218de7805899c8412d75d1fd1d846d2"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml#ab218de7805899c8412d75d1fd1d846d2">armnn::StackDescriptor::m_Axis</a></div><div class="ttdeci">uint32_t m_Axis</div><div class="ttdoc">0-based axis along which to stack the input tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01032">Descriptors.hpp:1032</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml_a2bea87b470268bb0b73457c3733dbc04"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml#a2bea87b470268bb0b73457c3733dbc04">armnn::StackDescriptor::m_InputShape</a></div><div class="ttdeci">TensorShape m_InputShape</div><div class="ttdoc">Required shape of all input tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01036">Descriptors.hpp:1036</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml_aed6086070440ceb94129bef06f70173f"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml#aed6086070440ceb94129bef06f70173f">armnn::StackDescriptor::m_NumInputs</a></div><div class="ttdeci">uint32_t m_NumInputs</div><div class="ttdoc">Number of input tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01034">Descriptors.hpp:1034</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afdc56797f18b4ec2b66469bd4553d65b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afdc56797f18b4ec2b66469bd4553d65b">&#9670;&nbsp;</a></span>VisitStandInLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitStandInLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">armnn::StandInDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>standInDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a StandInLayer should call back to when its Accept(ILaterVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">standInDescriptor</td><td>- Parameters for the stand-in layer. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2c97836f7288428fe4f070033d2f0aea">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01260">1260</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01056">StandInDescriptor::m_NumInputs</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l01058">StandInDescriptor::m_NumOutputs</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;{</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateStandInDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;                                                            standInDescriptor.<a class="code" href="structarmnn_1_1_stand_in_descriptor.xhtml#aed6086070440ceb94129bef06f70173f">m_NumInputs</a>,</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;                                                            standInDescriptor.<a class="code" href="structarmnn_1_1_stand_in_descriptor.xhtml#abb8a2d2bb8cc594c26aaa70c820ac5cc">m_NumOutputs</a>);</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    <span class="keyword">auto</span> fbBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_StandIn);</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;    <span class="keyword">auto</span> fbLayer     = serializer::CreateStandInLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_StandInLayer);</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_stand_in_descriptor_xhtml_abb8a2d2bb8cc594c26aaa70c820ac5cc"><div class="ttname"><a href="structarmnn_1_1_stand_in_descriptor.xhtml#abb8a2d2bb8cc594c26aaa70c820ac5cc">armnn::StandInDescriptor::m_NumOutputs</a></div><div class="ttdeci">uint32_t m_NumOutputs</div><div class="ttdoc">Number of output tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01058">Descriptors.hpp:1058</a></div></div>
<div class="ttc" id="structarmnn_1_1_stand_in_descriptor_xhtml_aed6086070440ceb94129bef06f70173f"><div class="ttname"><a href="structarmnn_1_1_stand_in_descriptor.xhtml#aed6086070440ceb94129bef06f70173f">armnn::StandInDescriptor::m_NumInputs</a></div><div class="ttdeci">uint32_t m_NumInputs</div><div class="ttdoc">Number of input tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01056">Descriptors.hpp:1056</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4f0cb9c392102c5108766a0faa754d92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f0cb9c392102c5108766a0faa754d92">&#9670;&nbsp;</a></span>VisitStridedSliceLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitStridedSliceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>stridedSliceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">stridedSliceDescriptor</td><td>- Parameters for the strided slice operation. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ac2f4ca5ada6d8fcf82d7bea2e6a06924">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01276">1276</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01101">StridedSliceDescriptor::m_Begin</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01109">StridedSliceDescriptor::m_BeginMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01122">StridedSliceDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01116">StridedSliceDescriptor::m_EllipsisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01103">StridedSliceDescriptor::m_End</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01112">StridedSliceDescriptor::m_EndMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01119">StridedSliceDescriptor::m_NewAxisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01114">StridedSliceDescriptor::m_ShrinkAxisMask</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l01105">StridedSliceDescriptor::m_Stride</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;{</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_StridedSlice);</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor =</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;        CreateStridedSliceDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;                                     m_flatBufferBuilder.CreateVector(stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a118fe06b7c2599da60398ee311ede923">m_Begin</a>),</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;                                     m_flatBufferBuilder.CreateVector(stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#aa68194dd6258ab5b04123005a066ea25">m_End</a>),</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;                                     m_flatBufferBuilder.CreateVector(stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">m_Stride</a>),</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;                                     stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a61081be1483984e33db452c75d569f51">m_BeginMask</a>,</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;                                     stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#ac37e49c0d6e6e54f9d2015d0f11f8ee7">m_EndMask</a>,</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;                                     stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6d0384878432cfc9652b7ae8bc59506f">m_ShrinkAxisMask</a>,</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;                                     stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#af996d82c47e43a16f4c8faa6c6b3e030">m_EllipsisMask</a>,</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;                                     stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a7c91eda2b331d607bae92cd8ebf50bb9">m_NewAxisMask</a>,</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;                                     <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateStridedSliceLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;                                                               flatBufferBaseLayer,</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;                                                               flatBufferDescriptor);</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_StridedSliceLayer);</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a6d0384878432cfc9652b7ae8bc59506f"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6d0384878432cfc9652b7ae8bc59506f">armnn::StridedSliceDescriptor::m_ShrinkAxisMask</a></div><div class="ttdeci">int32_t m_ShrinkAxisMask</div><div class="ttdoc">Shrink axis mask value. If set, the nth specification shrinks the dimensionality by 1...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01114">Descriptors.hpp:1114</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a118fe06b7c2599da60398ee311ede923"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a118fe06b7c2599da60398ee311ede923">armnn::StridedSliceDescriptor::m_Begin</a></div><div class="ttdeci">std::vector&lt; int &gt; m_Begin</div><div class="ttdoc">Begin values for the input that will be sliced. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01101">Descriptors.hpp:1101</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::StridedSliceDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01122">Descriptors.hpp:1122</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a61081be1483984e33db452c75d569f51"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a61081be1483984e33db452c75d569f51">armnn::StridedSliceDescriptor::m_BeginMask</a></div><div class="ttdeci">int32_t m_BeginMask</div><div class="ttdoc">Begin mask value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01109">Descriptors.hpp:1109</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_ac37e49c0d6e6e54f9d2015d0f11f8ee7"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#ac37e49c0d6e6e54f9d2015d0f11f8ee7">armnn::StridedSliceDescriptor::m_EndMask</a></div><div class="ttdeci">int32_t m_EndMask</div><div class="ttdoc">End mask value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01112">Descriptors.hpp:1112</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a7c91eda2b331d607bae92cd8ebf50bb9"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a7c91eda2b331d607bae92cd8ebf50bb9">armnn::StridedSliceDescriptor::m_NewAxisMask</a></div><div class="ttdeci">int32_t m_NewAxisMask</div><div class="ttdoc">New axis mask value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01119">Descriptors.hpp:1119</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_af996d82c47e43a16f4c8faa6c6b3e030"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#af996d82c47e43a16f4c8faa6c6b3e030">armnn::StridedSliceDescriptor::m_EllipsisMask</a></div><div class="ttdeci">int32_t m_EllipsisMask</div><div class="ttdoc">Ellipsis mask value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01116">Descriptors.hpp:1116</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a0d53caff836b84204adbd1c28752a201"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">armnn::StridedSliceDescriptor::m_Stride</a></div><div class="ttdeci">std::vector&lt; int &gt; m_Stride</div><div class="ttdoc">Stride values for the input that will be sliced. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01105">Descriptors.hpp:1105</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_aa68194dd6258ab5b04123005a066ea25"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#aa68194dd6258ab5b04123005a066ea25">armnn::StridedSliceDescriptor::m_End</a></div><div class="ttdeci">std::vector&lt; int &gt; m_End</div><div class="ttdoc">End values for the input that will be sliced. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01103">Descriptors.hpp:1103</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8f33221ab8f8feb4f2bbd5ddaa5bfa02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f33221ab8f8feb4f2bbd5ddaa5bfa02">&#9670;&nbsp;</a></span>VisitSubtractionLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSubtractionLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a subtraction layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ad339435c8d56522efc647da668d47047">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01303">1303</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;{</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;    <span class="keyword">auto</span> fbSubtractionBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Subtraction);</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;    <span class="keyword">auto</span> fbSubtractionLayer = serializer::CreateSubtractionLayer(m_flatBufferBuilder, fbSubtractionBaseLayer);</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;    CreateAnyLayer(fbSubtractionLayer.o, serializer::Layer::Layer_SubtractionLayer);</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a20396d2da2d38ae69bd5bda5d8c1e8dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20396d2da2d38ae69bd5bda5d8c1e8dc">&#9670;&nbsp;</a></span>VisitSwitchLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSwitchLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a switch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a6d33c538a0f3f179ec2eeb4dcee2a21e">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01313">1313</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;{</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    <span class="keyword">auto</span> fbSwitchBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Switch);</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    <span class="keyword">auto</span> fbSwitchLayer = serializer::CreateSwitchLayer(m_flatBufferBuilder, fbSwitchBaseLayer);</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    CreateAnyLayer(fbSwitchLayer.o, serializer::Layer::Layer_SwitchLayer);</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa46bee20f6017ada3c3a46e1bdf23011"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa46bee20f6017ada3c3a46e1bdf23011">&#9670;&nbsp;</a></span>VisitTransposeConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitTransposeConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">armnn::TransposeConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a 2D transpose convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">descriptor</td><td>- Description of the 2D transpose convolution layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- Tensor for the weights data. </td></tr>
    <tr><td class="paramname">biases</td><td>- Optional tensor for the bias data. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a58bb3bc96c089a4d0b954be81f1899c6">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01323">1323</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_serializer_utils_8cpp_source.xhtml#l00089">armnnSerializer::GetFlatBufferDataLayout()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01240">TransposeConvolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01242">TransposeConvolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01234">TransposeConvolution2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01228">TransposeConvolution2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01230">TransposeConvolution2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01232">TransposeConvolution2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01236">TransposeConvolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01238">TransposeConvolution2dDescriptor::m_StrideY</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;{</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Convolution2d);</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <span class="keyword">auto</span> fbDescriptor = CreateTransposeConvolution2dDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>,</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>,</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>,</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>,</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>,</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>,</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a>,</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;                                                               <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    <span class="comment">// weights &amp; biases</span></div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;    <span class="keyword">auto</span> fbWeightsConstTensorInfo = CreateConstTensorInfo(weights);</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; fbBiasesConstTensorInfo;</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;    <span class="keywordflow">if</span> (biases.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>())</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;    {</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;        fbBiasesConstTensorInfo = CreateConstTensorInfo(biases.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>());</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    }</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    <span class="keyword">auto</span> fbLayer = CreateTransposeConvolution2dLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;                                                     fbBaseLayer,</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;                                                     fbDescriptor,</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;                                                     fbWeightsConstTensorInfo,</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;                                                     fbBiasesConstTensorInfo);</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_TransposeConvolution2dLayer);</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::TransposeConvolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01240">Descriptors.hpp:1240</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::TransposeConvolution2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01234">Descriptors.hpp:1234</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::TransposeConvolution2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01232">Descriptors.hpp:1232</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::TransposeConvolution2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01242">Descriptors.hpp:1242</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00089">SerializerUtils.cpp:89</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::TransposeConvolution2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01228">Descriptors.hpp:1228</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::TransposeConvolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01236">Descriptors.hpp:1236</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::TransposeConvolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01238">Descriptors.hpp:1238</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::TransposeConvolution2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01230">Descriptors.hpp:1230</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a82daa527121e400d8bab5eecc77f6fcb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82daa527121e400d8bab5eecc77f6fcb">&#9670;&nbsp;</a></span>VisitTransposeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitTransposeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>transposeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a transpose layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">transposeDescriptor</td><td>- TransposeDescriptor to configure the transpose. </td></tr>
    <tr><td class="paramname">name</td><td>- Optional name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a5e101341277244c45eb20f4db63c77a3">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_serializer_8cpp_source.xhtml#l01360">1360</a> of file <a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_types_8hpp_source.xhtml#l00233">PermutationVector::GetSize()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l01266">TransposeDescriptor::m_DimMappings</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8hpp_source.xhtml#l00042">SerializerVisitor::GetSerializedLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;{</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Transpose);</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    std::vector&lt;unsigned int&gt; dimMappings;</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;descriptor.m_DimMappings.GetSize(); ++i)</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;    {</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;        dimMappings.push_back(descriptor.m_DimMappings[i]);</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;    }</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;    <span class="keyword">auto</span> flatBufferDesc = serializer::CreateTransposeDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;                                                                m_flatBufferBuilder.CreateVector(dimMappings));</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;    <span class="comment">// Create the FlatBuffer TransposeLayer</span></div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateTransposeLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;                                                            flatBufferBaseLayer,</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;                                                            flatBufferDesc);</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_TransposeLayer);</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnnSerializer/<a class="el" href="_serializer_8hpp_source.xhtml">Serializer.hpp</a></li>
<li>src/armnnSerializer/<a class="el" href="_serializer_8cpp_source.xhtml">Serializer.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn_serializer.xhtml">armnnSerializer</a></li><li class="navelem"><a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml">SerializerVisitor</a></li>
    <li class="footer">Generated on Thu Nov 26 2020 11:04:34 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
