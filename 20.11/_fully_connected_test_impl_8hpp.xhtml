<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/layerTests/FullyConnectedTestImpl.hpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_fully_connected_test_impl_8hpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">FullyConnectedTestImpl.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_layer_test_result_8hpp_source.xhtml">LayerTestResult.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_resolve_type_8hpp_source.xhtml">ResolveType.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_2backends_2_i_backend_internal_8hpp_source.xhtml">armnn/backends/IBackendInternal.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_workload_factory_8hpp_source.xhtml">backendsCommon/WorkloadFactory.hpp</a>&gt;</code><br />
</div>
<p><a href="_fully_connected_test_impl_8hpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a834305b5bfdbee9e753bb7ad299944cf"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a834305b5bfdbee9e753bb7ad299944cf"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 2 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_fully_connected_test_impl_8hpp.xhtml#a834305b5bfdbee9e753bb7ad299944cf">FullyConnectedTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory, bool biasEnabled)</td></tr>
<tr class="separator:a834305b5bfdbee9e753bb7ad299944cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb505feb224a201164ab815b8a6159cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 2 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_fully_connected_test_impl_8hpp.xhtml#afb505feb224a201164ab815b8a6159cf">FullyConnectedFloat32Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory, bool biasEnabled, bool transposeWeights)</td></tr>
<tr class="separator:afb505feb224a201164ab815b8a6159cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa50f043364dd453338261e82397c3e1b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 2 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_fully_connected_test_impl_8hpp.xhtml#aa50f043364dd453338261e82397c3e1b">FullyConnectedLargeTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory, bool transposeWeights)</td></tr>
<tr class="separator:aa50f043364dd453338261e82397c3e1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="afb505feb224a201164ab815b8a6159cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb505feb224a201164ab815b8a6159cf">&#9670;&nbsp;</a></span>FullyConnectedFloat32Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 2&gt; FullyConnectedFloat32Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>biasEnabled</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>transposeWeights</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00253">253</a> of file <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml">FullyConnectedTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult&lt; T, n &gt;::outputExpected</a>, and <a class="el" href="_descriptors_8cpp_source.xhtml#l00350">armnn::swap()</a>.</p>
<div class="fragment"><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;{</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth = 1;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = 1;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels = 5;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputNum = 2;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannels = 3;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputNum = 2;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="comment">// Define the tensor descriptors.</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> weightsDesc;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> biasesDesc;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[]   = { inputNum, inputChannels, inputHeight, inputWidth };</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[]  = { outputNum, outputChannels };</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsShape[] = { inputChannels, outputChannels };</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">if</span> (transposeWeights)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    {</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a14d7f180bf51e86850305965c3707e07">std::swap</a>(weightsShape[0], weightsShape[1]);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> biasShape[] = { outputChannels };</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    inputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(2, outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    weightsDesc = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(2, weightsShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    biasesDesc = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(1, biasShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 2&gt;</a> result(outputTensorInfo);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    boost::multi_array&lt;float, 4&gt; input = MakeTensor&lt;float, 4&gt;(inputTensorInfo, std::vector&lt;float&gt;(</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            1.0f, 2.0f, 3.0f, 4.0f, 5.0f,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            5.0f, 4.0f, 3.0f, 2.0f, 1.0f</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        })</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    );</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    boost::multi_array&lt;float, 2&gt; weights = MakeTensor&lt;float, 2&gt;(weightsDesc, std::vector&lt;float&gt;(</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            .5f, 2.f, .5f,</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            .5f, 2.f, 1.f,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            .5f, 2.f, 2.f,</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            .5f, 2.f, 3.f,</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            .5f, 2.f, 4.f</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        }));</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordflow">if</span> (transposeWeights)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        weights = MakeTensor&lt;float, 2&gt;(weightsDesc, std::vector&lt;float&gt;(</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        {</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            .5f, .5f, .5f, .5f, .5f,</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            2.f, 2.f, 2.f, 2.f, 2.f,</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            .5f, 1.f, 2.f, 3.f, 4.f</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        }));</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    std::vector&lt;float&gt; biasValues({0.f, 0.f, 0.f});</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keywordflow">if</span> (biasEnabled)</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        biasValues =  std::vector&lt;float&gt;({10.f, 20.f, 30.f});</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    }</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    boost::multi_array&lt;float, 1&gt; bias = MakeTensor&lt;float, 1&gt;(biasesDesc, biasValues);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    result = SimpleFullyConnectedTestImpl&lt;float&gt;(</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        workloadFactory,</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        memoryManager,</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        tensorHandleFactory,</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        inputTensorInfo, outputTensorInfo,</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        weightsDesc, biasesDesc,</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        weights, bias, input,</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        biasEnabled, transposeWeights</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    );</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    result.outputExpected = MakeTensor&lt;float, 2&gt;(outputTensorInfo, std::vector&lt;float&gt;(</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            0.5f + 1.0f + 1.5f + 2.0f + 2.5f + biasValues[0],</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            2.0f + 4.0f + 6.0f + 8.0f + 10.f + biasValues[1],</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            0.5f + 2.0f + 6.0f + 12.f + 20.f + biasValues[2],</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            2.5f + 2.0f + 1.5f + 1.0f + 0.5f + biasValues[0],</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            10.0f + 8.0f + 6.0f + 4.0f + 2.f + biasValues[1],</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            2.5f + 4.0f + 6.0f + 6.f + 4.f   + biasValues[2]</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        })</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    );</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a14d7f180bf51e86850305965c3707e07"><div class="ttname"><a href="namespacearmnn.xhtml#a14d7f180bf51e86850305965c3707e07">armnn::swap</a></div><div class="ttdeci">void swap(OriginsDescriptor &amp;first, OriginsDescriptor &amp;second)</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00350">Descriptors.cpp:350</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00030">LayerTestResult.hpp:30</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa50f043364dd453338261e82397c3e1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa50f043364dd453338261e82397c3e1b">&#9670;&nbsp;</a></span>FullyConnectedLargeTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 2&gt; FullyConnectedLargeTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>transposeWeights</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00352">352</a> of file <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml">FullyConnectedTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;{</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordflow">return</span> FullyConnectedLargeTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory,</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                                                                   memoryManager,</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                                                   tensorHandleFactory,</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                                                   transposeWeights);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a834305b5bfdbee9e753bb7ad299944cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a834305b5bfdbee9e753bb7ad299944cf">&#9670;&nbsp;</a></span>FullyConnectedTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 2&gt; FullyConnectedTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>biasEnabled</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00071">71</a> of file <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml">FullyConnectedTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00014">armnn::GetBiasTypeFromWeightsType()</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult&lt; T, n &gt;::outputExpected</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00464">TensorInfo::SetQuantizationScale()</a>, and <a class="el" href="_cl_layer_tests_8cpp_source.xhtml#l00212">true</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth = 3u;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = 2u;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels = 1u;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = inputWidth * inputHeight * inputChannels;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannels = 2u;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({ 1, inputChannels, inputHeight, inputWidth }, ArmnnType);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.1f);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    inputTensorInfo.SetQuantizationOffset(63);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({ 1, outputChannels }, ArmnnType);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(5.f);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    outputTensorInfo.SetQuantizationOffset(biasEnabled ? -50 : 10);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> weightsDesc({ outputChannels, inputSize }, ArmnnType);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    weightsDesc.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.2f);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    weightsDesc.SetQuantizationOffset(93);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> biasesDesc({ outputChannels }, <a class="code" href="namespacearmnn.xhtml#a83c4a275acf59f62b8387f389d0929d5">GetBiasTypeFromWeightsType</a>(weightsDesc.GetDataType()).value());</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    biasesDesc.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(inputTensorInfo.GetQuantizationScale() * weightsDesc.GetQuantizationScale());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    biasesDesc.SetQuantizationOffset(0);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 2&gt;</a> result(outputTensorInfo);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">auto</span> input = MakeTensor&lt;T, 4&gt;(inputTensorInfo, ConvertToDataType&lt;ArmnnType&gt;(</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            -1.2f, 6.1f, -3.5f,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            18.8f, -5.5f, 2.9f</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        },</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        inputTensorInfo));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">auto</span> weights = MakeTensor&lt;T, 2&gt;(weightsDesc, ConvertToDataType&lt;ArmnnType&gt;(</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            -8.4f, 20.0f, -10.4f, -8, 16.4f, -11.8f,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            23.4f, 10.4f, -14.0f, -3.8f, -11.8f, 11.4f</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        },</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        weightsDesc));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">auto</span> bias = MakeTensor&lt;int32_t, 1&gt;(biasesDesc, std::vector&lt;int32_t&gt;{9250, 67500});</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    result = SimpleFullyConnectedTestImpl&lt;T&gt;(</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            workloadFactory,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            memoryManager,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            tensorHandleFactory,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            inputTensorInfo, outputTensorInfo,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            weightsDesc, biasesDesc,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            weights, bias, input,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            biasEnabled, <a class="code" href="_cl_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    );</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">if</span> (biasEnabled)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        result.outputExpected = MakeTensor&lt;T, 2&gt;(outputTensorInfo,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                                 ConvertToDataType&lt;ArmnnType&gt;({80.f, 1460.f}, outputTensorInfo));</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        result.outputExpected = MakeTensor&lt;T, 2&gt;(outputTensorInfo,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                                 ConvertToDataType&lt;ArmnnType&gt;({-107.04f, 110.f}, outputTensorInfo));</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83c4a275acf59f62b8387f389d0929d5"><div class="ttname"><a href="namespacearmnn.xhtml#a83c4a275acf59f62b8387f389d0929d5">armnn::GetBiasTypeFromWeightsType</a></div><div class="ttdeci">armnn::Optional&lt; armnn::DataType &gt; GetBiasTypeFromWeightsType(armnn::Optional&lt; armnn::DataType &gt; weightsType)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_rules_8hpp_source.xhtml#l00014">LayerSupportRules.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00464">Tensor.cpp:464</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00030">LayerTestResult.hpp:30</a></div></div>
<div class="ttc" id="_cl_layer_tests_8cpp_xhtml_a88d84cc49602ca19491dea9c998035fe"><div class="ttname"><a href="_cl_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a></div><div class="ttdeci">DataLayout::NCHW DataLayout::NCHW DataLayout::NHWC DataLayout::NHWC true</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_tests_8cpp_source.xhtml#l00212">ClLayerTests.cpp:212</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_99a30439342d160875b21dac3498ad7f.xhtml">layerTests</a></li><li class="navelem"><a class="el" href="_fully_connected_test_impl_8hpp.xhtml">FullyConnectedTestImpl.hpp</a></li>
    <li class="footer">Generated on Wed Nov 25 2020 09:59:15 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
