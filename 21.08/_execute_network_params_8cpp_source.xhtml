<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/ExecuteNetwork/ExecuteNetworkParams.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_execute_network_params_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ExecuteNetworkParams.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_execute_network_params_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2020 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_execute_network_params_8hpp.xhtml">ExecuteNetworkParams.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_network_execution_utils_8hpp.xhtml">NetworkExecutionUtils/NetworkExecutionUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_inference_model_8hpp.xhtml">InferenceModel.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_logging_8hpp.xhtml">armnn/Logging.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;fmt/format.h&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="_execute_network_params_8cpp.xhtml#a59c1f5f5c5c9fc85c284e0518d32cfad">   14</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="_execute_network_params_8cpp.xhtml#a59c1f5f5c5c9fc85c284e0518d32cfad">IsModelBinary</a>(<span class="keyword">const</span> std::string&amp; modelFormat)</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="comment">// Parse model binary flag from the model-format string we got from the command-line</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;binary&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    }</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;txt&quot;</span>) != std::string::npos || modelFormat.find(<span class="stringliteral">&quot;text&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    }</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Unknown model format: &#39;{}&#39;. &quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                                          <span class="stringliteral">&quot;Please include &#39;binary&#39; or &#39;text&#39;&quot;</span>,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                                          modelFormat));</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    }</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="_execute_network_params_8cpp.xhtml#a4da63fa4fda7dbcd1f71f813fbd527eb">   33</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_execute_network_params_8cpp.xhtml#a4da63fa4fda7dbcd1f71f813fbd527eb">CheckModelFormat</a>(<span class="keyword">const</span> std::string&amp; modelFormat)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="comment">// Forward to implementation based on the parser type</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;armnn&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#if defined(ARMNN_SERIALIZER)</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;Can&#39;t run model in armnn format without a &quot;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                              <span class="stringliteral">&quot;built with serialization support.&quot;</span>);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;onnx&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#if defined(ARMNN_ONNX_PARSER)</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;Can&#39;t run model in onnx format without a &quot;</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                                              <span class="stringliteral">&quot;built with Onnx parser support.&quot;</span>);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;tflite&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#if defined(ARMNN_TF_LITE_PARSER)</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="_execute_network_params_8cpp.xhtml#a59c1f5f5c5c9fc85c284e0518d32cfad">IsModelBinary</a>(modelFormat))</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Unknown model format: &#39;{}&#39;. Only &#39;binary&#39; &quot;</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                                                              <span class="stringliteral">&quot;format supported for tflite files&quot;</span>,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                                              modelFormat));</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">#elif defined(ARMNN_TFLITE_DELEGATE)</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;Can&#39;t run model in tflite format without a &quot;</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                              <span class="stringliteral">&quot;built with Tensorflow Lite parser support.&quot;</span>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Unknown model format: &#39;{}&#39;. &quot;</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                                                          <span class="stringliteral">&quot;Please include &#39;tflite&#39; or &#39;onnx&#39;&quot;</span>,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                                          modelFormat));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="_execute_network_params_8cpp.xhtml#a1271e91c17f407e0f4912edffcd44942">   75</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_execute_network_params_8cpp.xhtml#a1271e91c17f407e0f4912edffcd44942">CheckClTuningParameter</a>(<span class="keyword">const</span> <span class="keywordtype">int</span>&amp; tuningLevel,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                            <span class="keyword">const</span> std::string&amp; tuningPath,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                            <span class="keyword">const</span> std::vector&lt;armnn::BackendId&gt; computeDevices)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">if</span> (!tuningPath.empty())</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">if</span> (tuningLevel == 0)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Using cl tuning file: &quot;</span> &lt;&lt; tuningPath &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="_network_execution_utils_8cpp.xhtml#a6506f23e2f4153a68c87ea03ae423b12">ValidatePath</a>(tuningPath, <span class="keyword">true</span>))</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;The tuning path is not valid&quot;</span>);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((1 &lt;= tuningLevel) &amp;&amp; (tuningLevel &lt;= 3))</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Starting execution to generate a cl tuning file: &quot;</span> &lt;&lt; tuningPath &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                            &lt;&lt; <span class="stringliteral">&quot;Tuning level in use: &quot;</span> &lt;&lt; tuningLevel &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((0 &lt; tuningLevel) || (tuningLevel &gt; 3))</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;The tuning level {} is not valid.&quot;</span>,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                                              tuningLevel));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="comment">// Ensure that a GpuAcc is enabled. Otherwise no tuning data are used or genereted</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="comment">// Only warn if it&#39;s not enabled</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keyword">auto</span> it = std::find(computeDevices.begin(), computeDevices.end(), <span class="stringliteral">&quot;GpuAcc&quot;</span>);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span> (it == computeDevices.end())</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;To use Cl Tuning the compute device GpuAcc needs to be active.&quot;</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="struct_execute_network_params.xhtml#a96a7042f9c83beec8e30088f3d85ed9c">  111</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="struct_execute_network_params.xhtml#a96a7042f9c83beec8e30088f3d85ed9c">ExecuteNetworkParams::ValidateParams</a>()</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;{</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a> == <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="comment">// Check compute devices are valid unless they are dynamically loaded at runtime</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        std::string invalidBackends;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">if</span> (!CheckRequestedBackendsAreValid(<a class="code" href="struct_execute_network_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">m_ComputeDevices</a>, <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&amp;&gt;</a>(invalidBackends)))</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;The list of preferred devices contains invalid backend IDs: &quot;</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                             &lt;&lt; invalidBackends;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="_execute_network_params_8cpp.xhtml#a1271e91c17f407e0f4912edffcd44942">CheckClTuningParameter</a>(<a class="code" href="struct_execute_network_params.xhtml#ad14d073dddd554025957ef73ac183649">m_TuningLevel</a>, <a class="code" href="struct_execute_network_params.xhtml#aaa966b4792eae29d659a78cd6faf1a68">m_TuningPath</a>, <a class="code" href="struct_execute_network_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">m_ComputeDevices</a>);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="struct_execute_network_params.xhtml#a0b99050baebe1d169392461b3a9be08d">m_EnableBf16TurboMode</a> &amp;&amp; <a class="code" href="struct_execute_network_params.xhtml#a513151623e8d448951a0b94ad1946fbe">m_EnableFp16TurboMode</a>)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;BFloat16 and Float16 turbo mode cannot be &quot;</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                              <span class="stringliteral">&quot;enabled at the same time.&quot;</span>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="struct_execute_network_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a> = <a class="code" href="_execute_network_params_8cpp.xhtml#a59c1f5f5c5c9fc85c284e0518d32cfad">IsModelBinary</a>(<a class="code" href="struct_execute_network_params.xhtml#a86800ee44cdb3d1bfd169ec4200212d2">m_ModelFormat</a>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="_execute_network_params_8cpp.xhtml#a4da63fa4fda7dbcd1f71f813fbd527eb">CheckModelFormat</a>(<a class="code" href="struct_execute_network_params.xhtml#a86800ee44cdb3d1bfd169ec4200212d2">m_ModelFormat</a>);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">// Check input tensor shapes</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">if</span> ((<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>.size() != 0) &amp;&amp;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        (<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>.size() != <a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a>.size()))</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;input-name and input-tensor-shape must have &quot;</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                              <span class="stringliteral">&quot;the same amount of elements. &quot;</span>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>.size() != 0)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="_network_execution_utils_8cpp.xhtml#aa8ad60308ed132ba939a09d48a97ac30">ValidatePaths</a>(<a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>, <span class="keyword">true</span>))</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;One or more input data file paths are not valid.&quot;</span>);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>.size() &lt; <a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a>.size())</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    fmt::format(<span class="stringliteral">&quot;According to the number of input names the user provided the network has {} &quot;</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                <span class="stringliteral">&quot;inputs. But only {} input-tensor-data file paths were provided. Each input of the &quot;</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                <span class="stringliteral">&quot;model is expected to be stored in it&#39;s own file.&quot;</span>,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                <a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a>.size(),</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                <a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>.size()));</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>.size() % <a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a>.size() != 0)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    fmt::format(<span class="stringliteral">&quot;According to the number of input names the user provided the network has {} &quot;</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                <span class="stringliteral">&quot;inputs. The user specified {} input-tensor-data file paths which is not &quot;</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                <span class="stringliteral">&quot;divisible by the number of inputs.&quot;</span>,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                <a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a>.size(),</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                <a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>.size()));</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="struct_execute_network_params.xhtml#acc7592cbdfe2e70cbc3794fb1e7eaeb9">m_InputTypes</a>.size() == 0)</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="comment">//Defaults the value of all inputs to &quot;float&quot;</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <a class="code" href="struct_execute_network_params.xhtml#acc7592cbdfe2e70cbc3794fb1e7eaeb9">m_InputTypes</a>.assign(<a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a>.size(), <span class="stringliteral">&quot;float&quot;</span>);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((<a class="code" href="struct_execute_network_params.xhtml#acc7592cbdfe2e70cbc3794fb1e7eaeb9">m_InputTypes</a>.size() != 0) &amp;&amp;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;             (<a class="code" href="struct_execute_network_params.xhtml#acc7592cbdfe2e70cbc3794fb1e7eaeb9">m_InputTypes</a>.size() != <a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a>.size()))</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;input-name and input-type must have the same amount of elements.&quot;</span>);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="comment">// Make sure that the number of input files given is divisible by the number of inputs of the model</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">if</span> (!(<a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>.size() % <a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a>.size() == 0))</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                fmt::format(<span class="stringliteral">&quot;The number of input-tensor-data files ({0}) is not divisible by the &quot;</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                            <span class="stringliteral">&quot;number of inputs ({1} according to the number of input names).&quot;</span>,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                            <a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>.size(),</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                            <a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a>.size()));</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>.size() == 0)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="comment">//Defaults the value of all outputs to &quot;float&quot;</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>.assign(<a class="code" href="struct_execute_network_params.xhtml#a982d4141ecde3eb220a136610d853df2">m_OutputNames</a>.size(), <span class="stringliteral">&quot;float&quot;</span>);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>.size() != 0) &amp;&amp;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;             (<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>.size() != <a class="code" href="struct_execute_network_params.xhtml#a982d4141ecde3eb220a136610d853df2">m_OutputNames</a>.size()))</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;output-name and output-type must have the same amount of elements.&quot;</span>);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// Make sure that the number of output files given is equal to the number of outputs of the model</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// or equal to the number of outputs of the model multiplied with the number of iterations</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.empty())</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">if</span> ((<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.size() != <a class="code" href="struct_execute_network_params.xhtml#a982d4141ecde3eb220a136610d853df2">m_OutputNames</a>.size()) &amp;&amp;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            (<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.size() != <a class="code" href="struct_execute_network_params.xhtml#a982d4141ecde3eb220a136610d853df2">m_OutputNames</a>.size() * <a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>))</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            std::stringstream errmsg;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keyword">auto</span> numOutputs = <a class="code" href="struct_execute_network_params.xhtml#a982d4141ecde3eb220a136610d853df2">m_OutputNames</a>.size();</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    fmt::format(<span class="stringliteral">&quot;The user provided {0} output-tensor files. The only allowed number of output-tensor &quot;</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                                <span class="stringliteral">&quot;files is the number of outputs of the network ({1} according to the number of &quot;</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                <span class="stringliteral">&quot;output names) or the number of outputs multiplied with the number of times the &quot;</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                <span class="stringliteral">&quot;network should be executed (NumOutputs * NumIterations = {1} * {2} = {3}).&quot;</span>,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                <a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.size(),</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                numOutputs,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                <a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                numOutputs*<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>));</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="comment">// Check that threshold time is not less than zero</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a> &lt; 0)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;Threshold time supplied as a command line argument is less than zero.&quot;</span>);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">// Warn if ExecuteNetwork will generate dummy input data</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a>)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;No input files provided, input tensors will be filled with 0s.&quot;</span>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    }</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div><div class="ttc" id="struct_execute_network_params_xhtml_acc7592cbdfe2e70cbc3794fb1e7eaeb9"><div class="ttname"><a href="struct_execute_network_params.xhtml#acc7592cbdfe2e70cbc3794fb1e7eaeb9">ExecuteNetworkParams::m_InputTypes</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputTypes</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00040">ExecuteNetworkParams.hpp:40</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a091cda9098c6f03f91f477a22327892d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">ExecuteNetworkParams::m_InputTensorShapes</a></div><div class="ttdeci">std::vector&lt; TensorShapePtr &gt; m_InputTensorShapes</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00039">ExecuteNetworkParams.hpp:39</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a513151623e8d448951a0b94ad1946fbe"><div class="ttname"><a href="struct_execute_network_params.xhtml#a513151623e8d448951a0b94ad1946fbe">ExecuteNetworkParams::m_EnableFp16TurboMode</a></div><div class="ttdeci">bool m_EnableFp16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00031">ExecuteNetworkParams.hpp:31</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">ExecuteNetworkParams::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00028">ExecuteNetworkParams.hpp:28</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00202">Logging.hpp:202</a></div></div>
<div class="ttc" id="_inference_model_8hpp_xhtml"><div class="ttname"><a href="_inference_model_8hpp.xhtml">InferenceModel.hpp</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a982d4141ecde3eb220a136610d853df2"><div class="ttname"><a href="struct_execute_network_params.xhtml#a982d4141ecde3eb220a136610d853df2">ExecuteNetworkParams::m_OutputNames</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputNames</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00047">ExecuteNetworkParams.hpp:47</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a74d346297c55b516908c541030adc88d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">ExecuteNetworkParams::m_OutputTensorFiles</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputTensorFiles</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00048">ExecuteNetworkParams.hpp:48</a></div></div>
<div class="ttc" id="_execute_network_params_8hpp_xhtml"><div class="ttname"><a href="_execute_network_params_8hpp.xhtml">ExecuteNetworkParams.hpp</a></div></div>
<div class="ttc" id="_execute_network_params_8cpp_xhtml_a1271e91c17f407e0f4912edffcd44942"><div class="ttname"><a href="_execute_network_params_8cpp.xhtml#a1271e91c17f407e0f4912edffcd44942">CheckClTuningParameter</a></div><div class="ttdeci">void CheckClTuningParameter(const int &amp;tuningLevel, const std::string &amp;tuningPath, const std::vector&lt; armnn::BackendId &gt; computeDevices)</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8cpp_source.xhtml#l00075">ExecuteNetworkParams.cpp:75</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a2d54e6252c1c9a0e29f7706ba03b2b74"><div class="ttname"><a href="struct_execute_network_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">ExecuteNetworkParams::m_ComputeDevices</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; m_ComputeDevices</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00025">ExecuteNetworkParams.hpp:25</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a810addfa426b5ac1476035dedee7cda5"><div class="ttname"><a href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">ExecuteNetworkParams::m_OutputTypes</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputTypes</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00049">ExecuteNetworkParams.hpp:49</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a6bf2f586c403977d31c7d32d371918cf"><div class="ttname"><a href="struct_execute_network_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">ExecuteNetworkParams::m_IsModelBinary</a></div><div class="ttdeci">bool m_IsModelBinary</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00041">ExecuteNetworkParams.hpp:41</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_aaa966b4792eae29d659a78cd6faf1a68"><div class="ttname"><a href="struct_execute_network_params.xhtml#aaa966b4792eae29d659a78cd6faf1a68">ExecuteNetworkParams::m_TuningPath</a></div><div class="ttdeci">std::string m_TuningPath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00058">ExecuteNetworkParams.hpp:58</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a6e4eff6a5f40cb026ea76d3c13c96341"><div class="ttname"><a href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">ExecuteNetworkParams::m_Iterations</a></div><div class="ttdeci">size_t m_Iterations</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00042">ExecuteNetworkParams.hpp:42</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a99c7360a4d4b248b3f10607bc5d2fe7b"><div class="ttname"><a href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">ExecuteNetworkParams::m_GenerateTensorData</a></div><div class="ttdeci">bool m_GenerateTensorData</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00034">ExecuteNetworkParams.hpp:34</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a96a7042f9c83beec8e30088f3d85ed9c"><div class="ttname"><a href="struct_execute_network_params.xhtml#a96a7042f9c83beec8e30088f3d85ed9c">ExecuteNetworkParams::ValidateParams</a></div><div class="ttdeci">void ValidateParams()</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8cpp_source.xhtml#l00111">ExecuteNetworkParams.cpp:111</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a318999172ae5197f56326b12d29104b7"><div class="ttname"><a href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">ExecuteNetworkParams::m_ThresholdTime</a></div><div class="ttdeci">double m_ThresholdTime</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00056">ExecuteNetworkParams.hpp:56</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_aaf3c7f286030842a31025309ab6a8329"><div class="ttname"><a href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">ExecuteNetworkParams::m_InputNames</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputNames</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00037">ExecuteNetworkParams.hpp:37</a></div></div>
<div class="ttc" id="_execute_network_params_8cpp_xhtml_a4da63fa4fda7dbcd1f71f813fbd527eb"><div class="ttname"><a href="_execute_network_params_8cpp.xhtml#a4da63fa4fda7dbcd1f71f813fbd527eb">CheckModelFormat</a></div><div class="ttdeci">void CheckModelFormat(const std::string &amp;modelFormat)</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8cpp_source.xhtml#l00033">ExecuteNetworkParams.cpp:33</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_aa8ad60308ed132ba939a09d48a97ac30"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#aa8ad60308ed132ba939a09d48a97ac30">ValidatePaths</a></div><div class="ttdeci">bool ValidatePaths(const std::vector&lt; std::string &gt; &amp;fileVec, const bool expectFile)</div><div class="ttdoc">Verifies if a given vector of strings are valid paths. </div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00294">NetworkExecutionUtils.cpp:294</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a0b99050baebe1d169392461b3a9be08d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a0b99050baebe1d169392461b3a9be08d">ExecuteNetworkParams::m_EnableBf16TurboMode</a></div><div class="ttdeci">bool m_EnableBf16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00029">ExecuteNetworkParams.hpp:29</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ae3c3ae097395afea488cd3e0244269fa"><div class="ttname"><a href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">ExecuteNetworkParams::m_InputTensorDataFilePaths</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputTensorDataFilePaths</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00038">ExecuteNetworkParams.hpp:38</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml"><div class="ttname"><a href="_logging_8hpp.xhtml">Logging.hpp</a></div></div>
<div class="ttc" id="_execute_network_params_8cpp_xhtml_a59c1f5f5c5c9fc85c284e0518d32cfad"><div class="ttname"><a href="_execute_network_params_8cpp.xhtml#a59c1f5f5c5c9fc85c284e0518d32cfad">IsModelBinary</a></div><div class="ttdeci">bool IsModelBinary(const std::string &amp;modelFormat)</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8cpp_source.xhtml#l00014">ExecuteNetworkParams.cpp:14</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_a6506f23e2f4153a68c87ea03ae423b12"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#a6506f23e2f4153a68c87ea03ae423b12">ValidatePath</a></div><div class="ttdeci">bool ValidatePath(const std::string &amp;file, const bool expectFile)</div><div class="ttdoc">Verifies if the given string is a valid path. </div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00279">NetworkExecutionUtils.cpp:279</a></div></div>
<div class="ttc" id="_network_execution_utils_8hpp_xhtml"><div class="ttname"><a href="_network_execution_utils_8hpp.xhtml">NetworkExecutionUtils.hpp</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ad14d073dddd554025957ef73ac183649"><div class="ttname"><a href="struct_execute_network_params.xhtml#ad14d073dddd554025957ef73ac183649">ExecuteNetworkParams::m_TuningLevel</a></div><div class="ttdeci">int m_TuningLevel</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00057">ExecuteNetworkParams.hpp:57</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a86800ee44cdb3d1bfd169ec4200212d2"><div class="ttname"><a href="struct_execute_network_params.xhtml#a86800ee44cdb3d1bfd169ec4200212d2">ExecuteNetworkParams::m_ModelFormat</a></div><div class="ttdeci">std::string m_ModelFormat</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00043">ExecuteNetworkParams.hpp:43</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_3502d64799b714c597b8fa7662494b65.xhtml">ExecuteNetwork</a></li><li class="navelem"><a class="el" href="_execute_network_params_8cpp.xhtml">ExecuteNetworkParams.cpp</a></li>
    <li class="footer">Generated on Tue Aug 24 2021 16:18:45 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
