<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: NeonLayerSupport Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_neon_layer_support.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_neon_layer_support-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NeonLayerSupport Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_neon_layer_support_8hpp_source.xhtml">NeonLayerSupport.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for NeonLayerSupport:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_neon_layer_support.png" usemap="#NeonLayerSupport_map" alt=""/>
  <map id="NeonLayerSupport_map" name="NeonLayerSupport_map">
<area href="classarmnn_1_1_layer_support_base.xhtml" alt="LayerSupportBase" shape="rect" coords="0,56,119,80"/>
<area href="classarmnn_1_1_i_layer_support.xhtml" alt="ILayerSupport" shape="rect" coords="0,0,119,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a45ecbb863cc8ef62d09bd7749089e0f8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a45ecbb863cc8ef62d09bd7749089e0f8">NeonLayerSupport</a> (const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> &amp;modelContextPtr)</td></tr>
<tr class="separator:a45ecbb863cc8ef62d09bd7749089e0f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e8bdd2741997b0cdc329cbfcaeebf93"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0e8bdd2741997b0cdc329cbfcaeebf93">NeonLayerSupport</a> ()</td></tr>
<tr class="separator:a0e8bdd2741997b0cdc329cbfcaeebf93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19528981c1519ecc64cc4a70b12ce8d3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a19528981c1519ecc64cc4a70b12ce8d3">~NeonLayerSupport</a> ()</td></tr>
<tr class="separator:a19528981c1519ecc64cc4a70b12ce8d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd7fa8c2233f8a653e30ae2f3b839d92"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#abd7fa8c2233f8a653e30ae2f3b839d92">IsAbsSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abd7fa8c2233f8a653e30ae2f3b839d92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3adb3a28736529682e4ff0ea976dcd3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">IsActivationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab3adb3a28736529682e4ff0ea976dcd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48177e22e47448adb3d83e145dadf735"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">IsAdditionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a48177e22e47448adb3d83e145dadf735"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f4841f89f21fd794786b4c03c2425fd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">IsArgMinMaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0f4841f89f21fd794786b4c03c2425fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67c970dd054b991e14369de523ca3a5a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">IsBatchNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;mean, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;var, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;beta, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;gamma, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a67c970dd054b991e14369de523ca3a5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc5695cc25f4055c7ed54bdc8604a098"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">IsBatchToSpaceNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adc5695cc25f4055c7ed54bdc8604a098"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae18f598a589683c3094a7bb41dcd3a3e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ae18f598a589683c3094a7bb41dcd3a3e">IsCastSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae18f598a589683c3094a7bb41dcd3a3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c52726a684dd76258c61af124012537"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a7c52726a684dd76258c61af124012537">IsComparisonSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7c52726a684dd76258c61af124012537"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dca8ffbcb5f3afa1799aa7d354a3016"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a3dca8ffbcb5f3afa1799aa7d354a3016">IsConcatSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">ConcatDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3dca8ffbcb5f3afa1799aa7d354a3016"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf18c4fa8fc9e0cdae1967990aa90fe8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">IsConstantSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adf18c4fa8fc9e0cdae1967990aa90fe8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad330b6e7dcf25410ea878af0557f2197"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ad330b6e7dcf25410ea878af0557f2197">IsConvertBf16ToFp32Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad330b6e7dcf25410ea878af0557f2197"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1efcaf6f02892442fefca09f49ea3d7c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">IsConvertFp16ToFp32Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a1efcaf6f02892442fefca09f49ea3d7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0947498c6cc747db6219a22132a1b89a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0947498c6cc747db6219a22132a1b89a">IsConvertFp32ToBf16Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0947498c6cc747db6219a22132a1b89a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91fb5f44d8b9427dc45443aa9ebfe13e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">IsConvertFp32ToFp16Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a91fb5f44d8b9427dc45443aa9ebfe13e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7ff06bd8115a6a9cc6d41e5c762798e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">IsConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;biases, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af7ff06bd8115a6a9cc6d41e5c762798e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a128fb9890897e08251a3f621e570cd23"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">IsDepthToSpaceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a128fb9890897e08251a3f621e570cd23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc84390751f227fe03a115b5fa10b0fc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">IsDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;biases, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adc84390751f227fe03a115b5fa10b0fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e89c72cf60df7c2d2d7e5d98822b672"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">IsDequantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a2e89c72cf60df7c2d2d7e5d98822b672"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16c8cd49a7fa487b904b5c9cc83673e7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a16c8cd49a7fa487b904b5c9cc83673e7">IsDilatedDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;biases, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reason=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a16c8cd49a7fa487b904b5c9cc83673e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61c5b4e5dc224ef0c876e43353b34030"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a61c5b4e5dc224ef0c876e43353b34030">IsElementwiseUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a61c5b4e5dc224ef0c876e43353b34030"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc5d9a4c8f29984de3bbdca87684f317"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">IsFillSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:acc5d9a4c8f29984de3bbdca87684f317"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53c7593d1aa26207eac5d5814a9d56dc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">IsFloorSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a53c7593d1aa26207eac5d5814a9d56dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaf971dd9dffd6f6bc7e5a1ae6b6af5c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">IsFullyConnectedSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;biases, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aeaf971dd9dffd6f6bc7e5a1ae6b6af5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e8fbdda1125eb5e22f14eacbe9fb351"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a5e8fbdda1125eb5e22f14eacbe9fb351">IsGatherSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported) const override</td></tr>
<tr class="separator:a5e8fbdda1125eb5e22f14eacbe9fb351"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14e45f3699e823d7859d5d352d89265c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a14e45f3699e823d7859d5d352d89265c">IsGreaterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a14e45f3699e823d7859d5d352d89265c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad29d99ecd719c640ed22dcf5c688c6a5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">IsInputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad29d99ecd719c640ed22dcf5c688c6a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0813546a09bf2caba6794014d1960624"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0813546a09bf2caba6794014d1960624">IsInstanceNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0813546a09bf2caba6794014d1960624"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca4acda7ab553edfda828658d8f3882b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b">IsL2NormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aca4acda7ab553edfda828658d8f3882b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a772790c60d70814e30b5bec70fd98776"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a772790c60d70814e30b5bec70fd98776">IsLogicalBinarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported) const override</td></tr>
<tr class="separator:a772790c60d70814e30b5bec70fd98776"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0380b797cb9932fb03067dbe2cdecfb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">IsLogSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa0380b797cb9932fb03067dbe2cdecfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a862535721737220f62a49f14ff494dd5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a862535721737220f62a49f14ff494dd5">IsLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;outputStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;scratchBuffer, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;outputStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;paramsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a862535721737220f62a49f14ff494dd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afef9436c86b37b973471f2ae546ac00a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a">IsMaximumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:afef9436c86b37b973471f2ae546ac00a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab268618580d4f53bf5e9b5a47dee3f6a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">IsMeanSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab268618580d4f53bf5e9b5a47dee3f6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9309ea64f9f7447efe3567f77417d29"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aa9309ea64f9f7447efe3567f77417d29">IsMergerSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="namespacearmnn.xhtml#a003d213dd28b0b8c0f26fbf268ccb975">MergerDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa9309ea64f9f7447efe3567f77417d29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d0eafb3de560b3482f857b56b2b2116"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116">IsMinimumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3d0eafb3de560b3482f857b56b2b2116"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a421e1f3865d99d52613003048342c49a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a421e1f3865d99d52613003048342c49a">IsMultiplicationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a421e1f3865d99d52613003048342c49a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08f55136b1f0907e7083d70d719f697f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f">IsDivisionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a08f55136b1f0907e7083d70d719f697f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a994c2065561141bf37fcd2ff7bb4af4d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">IsNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a994c2065561141bf37fcd2ff7bb4af4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef3244c0ef64c8f2f352d21ce0c06985"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">IsOutputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aef3244c0ef64c8f2f352d21ce0c06985"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0534291adf9f3436ba331552eba29a43"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43">IsPadSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0534291adf9f3436ba331552eba29a43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d553495d9a94fa55588ae159d8bda30"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30">IsPermuteSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9d553495d9a94fa55588ae159d8bda30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa955675303d67b1d1fb51fb7f09d8c21"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">IsPooling2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa955675303d67b1d1fb51fb7f09d8c21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b36dcedd5edbd5142b3548967aadc2f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f">IsPreluSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;alpha, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a4b36dcedd5edbd5142b3548967aadc2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf54bcad228c0ac21f6735d31460cf31"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31">IsQLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;previousOutputIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;previousCellStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;outputStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;paramsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adf54bcad228c0ac21f6735d31460cf31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2c7be6b84b04444e514f52f593b3df7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7">IsQuantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad2c7be6b84b04444e514f52f593b3df7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a281eb6ce87b6ca147e681dd3f6483a87"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a281eb6ce87b6ca147e681dd3f6483a87">IsQuantizedLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;outputStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;outputStateOut, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;paramsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a281eb6ce87b6ca147e681dd3f6483a87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a917c126e64314263b8b5f7bca455ddfb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a917c126e64314263b8b5f7bca455ddfb">IsReduceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a917c126e64314263b8b5f7bca455ddfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa02f01bbcb48c67f5b2efc4132ec5e86"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">IsReshapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa02f01bbcb48c67f5b2efc4132ec5e86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d27a3fc6a7df0b68d80cb113aff8b6c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">IsResizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3d27a3fc6a7df0b68d80cb113aff8b6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f29f31e1ba46a52eedcdecd34f4cc24"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0f29f31e1ba46a52eedcdecd34f4cc24">IsResizeBilinearSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0f29f31e1ba46a52eedcdecd34f4cc24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10ae4d84b0d31580f6fcd5107322ebcf"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a10ae4d84b0d31580f6fcd5107322ebcf">IsRsqrtSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a10ae4d84b0d31580f6fcd5107322ebcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e14dafa85cfcd4a6b6b752284b51e63"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">IsSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0e14dafa85cfcd4a6b6b752284b51e63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8385cf8227907904a6a86fac318fc099"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099">IsSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a8385cf8227907904a6a86fac318fc099"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3adfc31e079a970e028e537ec05fabf5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5">IsSpaceToBatchNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3adfc31e079a970e028e537ec05fabf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2af1e7da9490d29e569d271e16b0d5c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">IsSpaceToDepthSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab2af1e7da9490d29e569d271e16b0d5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17dd12822d49a23d24198f425a6fb9c4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a17dd12822d49a23d24198f425a6fb9c4">IsSplitterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a17dd12822d49a23d24198f425a6fb9c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa746e752ce8874669ea549f8e50896da"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aa746e752ce8874669ea549f8e50896da">IsSplitterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;outputs, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa746e752ce8874669ea549f8e50896da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4609f1baf5fcd295951f3c8abdffd90"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">IsStackSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab4609f1baf5fcd295951f3c8abdffd90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac054cb25099005eac854afb1511340f0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ac054cb25099005eac854afb1511340f0">IsStridedSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac054cb25099005eac854afb1511340f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6c947e4d4b25bc49d92d18d4ff26736"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">IsSubtractionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af6c947e4d4b25bc49d92d18d4ff26736"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c69484f19ed650ad48b716719114e51"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">IsTransposeConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;biases, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0c69484f19ed650ad48b716719114e51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0189645f33641b280877a1b2f6ba9fee"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee">IsTransposeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0189645f33641b280877a1b2f6ba9fee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_layer_support_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_layer_support_base')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td></tr>
<tr class="memitem:a87a66c5e87a19534ce3e6c374c9b8f09 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a87a66c5e87a19534ce3e6c374c9b8f09">IsDebugSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a87a66c5e87a19534ce3e6c374c9b8f09 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50af275d7755a5bb1be69736d7e4b02f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a50af275d7755a5bb1be69736d7e4b02f">IsDetectionPostProcessSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;boxEncodings, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;scores, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;anchors, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;detectionBoxes, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;detectionClasses, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;detectionScores, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;numDetections, const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a50af275d7755a5bb1be69736d7e4b02f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb6ad04c6ff234b193f3dfc0cfabcbd5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#afb6ad04c6ff234b193f3dfc0cfabcbd5">IsEqualSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:afb6ad04c6ff234b193f3dfc0cfabcbd5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab7318aa8adc0a8a3b6a1780cfc1f90b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aab7318aa8adc0a8a3b6a1780cfc1f90b">IsFakeQuantizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aab7318aa8adc0a8a3b6a1780cfc1f90b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef77aa4bb0e68e88dcf5ab8b5882a2d3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aef77aa4bb0e68e88dcf5ab8b5882a2d3">IsGatherSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aef77aa4bb0e68e88dcf5ab8b5882a2d3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20134883695508a2192eecd403e7c44b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a20134883695508a2192eecd403e7c44b">IsLogicalUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a20134883695508a2192eecd403e7c44b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d25fabf725313fda40a41400155bafe inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9d25fabf725313fda40a41400155bafe">IsMemCopySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9d25fabf725313fda40a41400155bafe inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a334181d8098b943d03ccd820753ace75 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a334181d8098b943d03ccd820753ace75">IsMemImportSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a334181d8098b943d03ccd820753ace75 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9bbc383cac59d6f02d2ef7d2cc0076f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa9bbc383cac59d6f02d2ef7d2cc0076f">IsMergeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa9bbc383cac59d6f02d2ef7d2cc0076f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc1a598f2f572564818e3d343af93486 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc1a598f2f572564818e3d343af93486">IsPreCompiledSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adc1a598f2f572564818e3d343af93486 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a707638bc045d261dff4faaf4a2acc72b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a707638bc045d261dff4faaf4a2acc72b">IsRankSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported) const override</td></tr>
<tr class="separator:a707638bc045d261dff4faaf4a2acc72b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c6816950ad290155bde03b7fb31e160 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3c6816950ad290155bde03b7fb31e160">IsShapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3c6816950ad290155bde03b7fb31e160 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68a4c180fc48e266995db8596f6279d3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a68a4c180fc48e266995db8596f6279d3">IsStandInSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;inputs, const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;outputs, const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a68a4c180fc48e266995db8596f6279d3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c12a49b0d261836c11a57916e01805d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8c12a49b0d261836c11a57916e01805d">IsSwitchSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output1, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a8c12a49b0d261836c11a57916e01805d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aceff0e3aa5ba49b0fdcfc66f2bd31b5c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aceff0e3aa5ba49b0fdcfc66f2bd31b5c">IsUnidirectionalSequenceLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;outputStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;hiddenStateOutput, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;cellStateOutput, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;paramsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aceff0e3aa5ba49b0fdcfc66f2bd31b5c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_layer_support"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_layer_support')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td></tr>
<tr class="memitem:aab2a487bc88047443d8a0f87c3c40b8d inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aab2a487bc88047443d8a0f87c3c40b8d">ILayerSupport</a> ()</td></tr>
<tr class="separator:aab2a487bc88047443d8a0f87c3c40b8d inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e7f4f28576904804cd759e49173beeb inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9e7f4f28576904804cd759e49173beeb">~ILayerSupport</a> ()</td></tr>
<tr class="separator:a9e7f4f28576904804cd759e49173beeb inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00014">14</a> of file <a class="el" href="_neon_layer_support_8hpp_source.xhtml">NeonLayerSupport.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a45ecbb863cc8ef62d09bd7749089e0f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45ecbb863cc8ef62d09bd7749089e0f8">&#9670;&nbsp;</a></span>NeonLayerSupport() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml">NeonLayerSupport</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>modelContextPtr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00137">137</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    : m_ModelContextPtr(modelContextPtr)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0e8bdd2741997b0cdc329cbfcaeebf93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e8bdd2741997b0cdc329cbfcaeebf93">&#9670;&nbsp;</a></span>NeonLayerSupport() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml">NeonLayerSupport</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00142">142</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    : m_ModelContextPtr(<span class="keyword">nullptr</span>)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a19528981c1519ecc64cc4a70b12ce8d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19528981c1519ecc64cc4a70b12ce8d3">&#9670;&nbsp;</a></span>~NeonLayerSupport()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_neon_layer_support.xhtml">NeonLayerSupport</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">20</a> of file <a class="el" href="_neon_layer_support_8hpp_source.xhtml">NeonLayerSupport.hpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00043">ARMNN_DEPRECATED_MSG</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00147">NeonLayerSupport::IsAbsSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00155">NeonLayerSupport::IsActivationSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00168">NeonLayerSupport::IsAdditionSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00181">NeonLayerSupport::IsArgMinMaxSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00193">NeonLayerSupport::IsBatchNormalizationSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00214">NeonLayerSupport::IsBatchToSpaceNdSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00226">NeonLayerSupport::IsCastSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00236">NeonLayerSupport::IsComparisonSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00251">NeonLayerSupport::IsConcatSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00290">NeonLayerSupport::IsConstantSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00298">NeonLayerSupport::IsConvertBf16ToFp32Supported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00308">NeonLayerSupport::IsConvertFp16ToFp32Supported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00318">NeonLayerSupport::IsConvertFp32ToBf16Supported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00328">NeonLayerSupport::IsConvertFp32ToFp16Supported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00338">NeonLayerSupport::IsConvolution2dSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00371">NeonLayerSupport::IsDepthToSpaceSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00383">NeonLayerSupport::IsDepthwiseConvolutionSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00400">NeonLayerSupport::IsDequantizeSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00410">NeonLayerSupport::IsDilatedDepthwiseConvolutionSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00676">NeonLayerSupport::IsDivisionSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00427">NeonLayerSupport::IsElementwiseUnarySupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00469">NeonLayerSupport::IsFillSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00481">NeonLayerSupport::IsFloorSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00496">NeonLayerSupport::IsFullyConnectedSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00513">NeonLayerSupport::IsGatherSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00527">NeonLayerSupport::IsGreaterSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00536">NeonLayerSupport::IsInputSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00542">NeonLayerSupport::IsInstanceNormalizationSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00554">NeonLayerSupport::IsL2NormalizationSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00562">NeonLayerSupport::IsLogicalBinarySupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00587">NeonLayerSupport::IsLogSoftmaxSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00595">NeonLayerSupport::IsLstmSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00619">NeonLayerSupport::IsMaximumSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00631">NeonLayerSupport::IsMeanSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00643">NeonLayerSupport::IsMergerSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00651">NeonLayerSupport::IsMinimumSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00663">NeonLayerSupport::IsMultiplicationSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00689">NeonLayerSupport::IsNormalizationSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00701">NeonLayerSupport::IsOutputSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00707">NeonLayerSupport::IsPadSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00719">NeonLayerSupport::IsPermuteSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00727">NeonLayerSupport::IsPooling2dSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00735">NeonLayerSupport::IsPreluSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00743">NeonLayerSupport::IsQLstmSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00788">NeonLayerSupport::IsQuantizedLstmSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00778">NeonLayerSupport::IsQuantizeSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00806">NeonLayerSupport::IsReduceSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00818">NeonLayerSupport::IsReshapeSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00842">NeonLayerSupport::IsResizeBilinearSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00830">NeonLayerSupport::IsResizeSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00857">NeonLayerSupport::IsRsqrtSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00865">NeonLayerSupport::IsSliceSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00877">NeonLayerSupport::IsSoftmaxSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00885">NeonLayerSupport::IsSpaceToBatchNdSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00897">NeonLayerSupport::IsSpaceToDepthSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00909">NeonLayerSupport::IsSplitterSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00953">NeonLayerSupport::IsStackSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00965">NeonLayerSupport::IsStridedSliceSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00977">NeonLayerSupport::IsSubtractionSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00990">NeonLayerSupport::IsTransposeConvolution2dSupported()</a>, and <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01006">NeonLayerSupport::IsTransposeSupported()</a>.</p>
<div class="fragment"><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="abd7fa8c2233f8a653e30ae2f3b839d92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd7fa8c2233f8a653e30ae2f3b839d92">&#9670;&nbsp;</a></span>IsAbsSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAbsSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#abd7fa8c2233f8a653e30ae2f3b839d92">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00147">147</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::Abs</a>, and <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00427">NeonLayerSupport::IsElementwiseUnarySupported()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    ElementwiseUnaryDescriptor descriptor(<a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a61c5b4e5dc224ef0c876e43353b34030">IsElementwiseUnarySupported</a>(input, output, descriptor, reasonIfUnsupported);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a61c5b4e5dc224ef0c876e43353b34030"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a61c5b4e5dc224ef0c876e43353b34030">armnn::NeonLayerSupport::IsElementwiseUnarySupported</a></div><div class="ttdeci">bool IsElementwiseUnarySupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00427">NeonLayerSupport.cpp:427</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab3adb3a28736529682e4ff0ea976dcd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3adb3a28736529682e4ff0ea976dcd3">&#9670;&nbsp;</a></span>IsActivationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsActivationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00155">155</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_neon_activation_workload_8cpp_source.xhtml#l00017">armnn::NeonActivationWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a46495807633a01d826851e1cb498f071">NeonActivationWorkloadValidate</a>,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                   input,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                   output,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                   descriptor);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a46495807633a01d826851e1cb498f071"><div class="ttname"><a href="namespacearmnn.xhtml#a46495807633a01d826851e1cb498f071">armnn::NeonActivationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonActivationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_activation_workload_8cpp_source.xhtml#l00017">NeonActivationWorkload.cpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a48177e22e47448adb3d83e145dadf735"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48177e22e47448adb3d83e145dadf735">&#9670;&nbsp;</a></span>IsAdditionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAdditionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a48177e22e47448adb3d83e145dadf735">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00168">168</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_addition_workload_8cpp_source.xhtml#l00020">armnn::NeonAdditionWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;{</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a1b03e82a1a53b686aedea3734b2fb957">NeonAdditionWorkloadValidate</a>,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                   input0,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                   input1,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                   output,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a1b03e82a1a53b686aedea3734b2fb957"><div class="ttname"><a href="namespacearmnn.xhtml#a1b03e82a1a53b686aedea3734b2fb957">armnn::NeonAdditionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonAdditionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_addition_workload_8cpp_source.xhtml#l00020">NeonAdditionWorkload.cpp:20</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0f4841f89f21fd794786b4c03c2425fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f4841f89f21fd794786b4c03c2425fd">&#9670;&nbsp;</a></span>IsArgMinMaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsArgMinMaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0f4841f89f21fd794786b4c03c2425fd">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00181">181</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_arg_min_max_workload_8cpp_source.xhtml#l00031">armnn::NeonArgMinMaxWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a61d1f39297fec6e3062e4047dc5f236e">NeonArgMinMaxWorkloadValidate</a>,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                   input,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                   output,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                   descriptor);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a61d1f39297fec6e3062e4047dc5f236e"><div class="ttname"><a href="namespacearmnn.xhtml#a61d1f39297fec6e3062e4047dc5f236e">armnn::NeonArgMinMaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonArgMinMaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_arg_min_max_workload_8cpp_source.xhtml#l00031">NeonArgMinMaxWorkload.cpp:31</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a67c970dd054b991e14369de523ca3a5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67c970dd054b991e14369de523ca3a5a">&#9670;&nbsp;</a></span>IsBatchNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBatchNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a67c970dd054b991e14369de523ca3a5a">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00193">193</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_batch_normalization_workload_8cpp_source.xhtml#l00024">armnn::NeonBatchNormalizationValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;{</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ac1be1c9a317b23b5684c83af59fb2c96">NeonBatchNormalizationValidate</a>,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                   input,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                   output,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                   mean,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                   var,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                   beta,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                   gamma,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                   descriptor,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ac1be1c9a317b23b5684c83af59fb2c96"><div class="ttname"><a href="namespacearmnn.xhtml#ac1be1c9a317b23b5684c83af59fb2c96">armnn::NeonBatchNormalizationValidate</a></div><div class="ttdeci">arm_compute::Status NeonBatchNormalizationValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_batch_normalization_workload_8cpp_source.xhtml#l00024">NeonBatchNormalizationWorkload.cpp:24</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adc5695cc25f4055c7ed54bdc8604a098"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc5695cc25f4055c7ed54bdc8604a098">&#9670;&nbsp;</a></span>IsBatchToSpaceNdSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBatchToSpaceNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc5695cc25f4055c7ed54bdc8604a098">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00214">214</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_batch_to_space_nd_workload_8cpp_source.xhtml#l00020">armnn::NeonBatchToSpaceNdWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aad5f7f0fcd2dbb0aad7016ff984e7cc6">NeonBatchToSpaceNdWorkloadValidate</a>,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                   input,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                   output,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                   descriptor);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_aad5f7f0fcd2dbb0aad7016ff984e7cc6"><div class="ttname"><a href="namespacearmnn.xhtml#aad5f7f0fcd2dbb0aad7016ff984e7cc6">armnn::NeonBatchToSpaceNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonBatchToSpaceNdWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_batch_to_space_nd_workload_8cpp_source.xhtml#l00020">NeonBatchToSpaceNdWorkload.cpp:20</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae18f598a589683c3094a7bb41dcd3a3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae18f598a589683c3094a7bb41dcd3a3e">&#9670;&nbsp;</a></span>IsCastSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCastSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ae18f598a589683c3094a7bb41dcd3a3e">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00226">226</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_cast_workload_8cpp_source.xhtml#l00019">armnn::NeonCastValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;{</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a3ab69cec1cab301e096a2830f65a36ec">NeonCastValidate</a>,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                   input,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                   output);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a3ab69cec1cab301e096a2830f65a36ec"><div class="ttname"><a href="namespacearmnn.xhtml#a3ab69cec1cab301e096a2830f65a36ec">armnn::NeonCastValidate</a></div><div class="ttdeci">arm_compute::Status NeonCastValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_cast_workload_8cpp_source.xhtml#l00019">NeonCastWorkload.cpp:19</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7c52726a684dd76258c61af124012537"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c52726a684dd76258c61af124012537">&#9670;&nbsp;</a></span>IsComparisonSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsComparisonSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a7c52726a684dd76258c61af124012537">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00236">236</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_comparison_workload_8cpp_source.xhtml#l00016">armnn::NeonComparisonWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00527">NeonLayerSupport::IsGreaterSupported()</a>, and <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;{</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae412e8e64d6a6dde3ace908b59c29c06">NeonComparisonWorkloadValidate</a>,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                   input0,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                   input1,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                   output,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                   descriptor);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae412e8e64d6a6dde3ace908b59c29c06"><div class="ttname"><a href="namespacearmnn.xhtml#ae412e8e64d6a6dde3ace908b59c29c06">armnn::NeonComparisonWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonComparisonWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ComparisonDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_comparison_workload_8cpp_source.xhtml#l00016">NeonComparisonWorkload.cpp:16</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3dca8ffbcb5f3afa1799aa7d354a3016"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3dca8ffbcb5f3afa1799aa7d354a3016">&#9670;&nbsp;</a></span>IsConcatSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConcatSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">ConcatDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a1542179a03961e3635bb5bef993c8e0e">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00251">251</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00162">OriginsDescriptor::GetConcatAxis()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00192">OriginsDescriptor::GetNumDimensions()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00434">TensorInfo::IsTypeSpaceMatch()</a>, <a class="el" href="_neon_concat_workload_8cpp_source.xhtml#l00027">armnn::NeonConcatWorkloadValidate()</a>, and <a class="el" href="_layer_support_common_8hpp_source.xhtml#l00017">armnn::SetValueChecked()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00643">NeonLayerSupport::IsMergerSupported()</a>, and <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;{</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">if</span> (descriptor.GetNumDimensions() &lt;= descriptor.GetConcatAxis())</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(reasonIfUnsupported, <span class="stringliteral">&quot;Neon Concat: Concat axis &gt; Number of dimensions.&quot;</span>);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    }</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> concatInnerAxis = (descriptor.GetNumDimensions() - descriptor.GetConcatAxis()) - 1;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">if</span>(concatInnerAxis &lt; 3) <span class="comment">// Width, height, or channels</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8a219633e750d6daffcef3b641fa11f3">NeonConcatWorkloadValidate</a>,</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                                       reasonIfUnsupported,</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                       inputs,</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                       output,</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                       descriptor);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (concatInnerAxis == 3)</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; input : inputs)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">if</span> (input &amp;&amp; !output.IsTypeSpaceMatch(*input)) <span class="comment">// Cannot use sub-tensors if the types are not same space</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(reasonIfUnsupported, <span class="stringliteral">&quot;Neon Concat: Types and quantization parameters must match.&quot;</span>);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>; <span class="comment">// Sub-tensors support concat along batch</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    }</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">else</span> <span class="comment">// &gt; 4 dimensions not supported.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(reasonIfUnsupported, <span class="stringliteral">&quot;Neon Concat: Maximum of 4 dimensions supported.&quot;</span>);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    }</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a8a219633e750d6daffcef3b641fa11f3"><div class="ttname"><a href="namespacearmnn.xhtml#a8a219633e750d6daffcef3b641fa11f3">armnn::NeonConcatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConcatWorkloadValidate(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_concat_workload_8cpp_source.xhtml#l00027">NeonConcatWorkload.cpp:27</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a13c7d751e4d37f65a6d40c3c6e50d2b8"><div class="ttname"><a href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">armnn::SetValueChecked</a></div><div class="ttdeci">void SetValueChecked(Optional&lt; T &amp;&gt; optionalRef, V &amp;&amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_common_8hpp_source.xhtml#l00017">LayerSupportCommon.hpp:17</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adf18c4fa8fc9e0cdae1967990aa90fe8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf18c4fa8fc9e0cdae1967990aa90fe8">&#9670;&nbsp;</a></span>IsConstantSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConstantSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00290">290</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_constant_workload_8cpp_source.xhtml#l00020">armnn::NeonConstantWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#afb681fd9b8afe0b236d51b6c868ae660">NeonConstantWorkloadValidate</a>,</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                   output);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_afb681fd9b8afe0b236d51b6c868ae660"><div class="ttname"><a href="namespacearmnn.xhtml#afb681fd9b8afe0b236d51b6c868ae660">armnn::NeonConstantWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConstantWorkloadValidate(const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_constant_workload_8cpp_source.xhtml#l00020">NeonConstantWorkload.cpp:20</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad330b6e7dcf25410ea878af0557f2197"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad330b6e7dcf25410ea878af0557f2197">&#9670;&nbsp;</a></span>IsConvertBf16ToFp32Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvertBf16ToFp32Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad330b6e7dcf25410ea878af0557f2197">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00298">298</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;{</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(reasonIfUnsupported);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1efcaf6f02892442fefca09f49ea3d7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1efcaf6f02892442fefca09f49ea3d7c">&#9670;&nbsp;</a></span>IsConvertFp16ToFp32Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvertFp16ToFp32Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00308">308</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;{</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(reasonIfUnsupported);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0947498c6cc747db6219a22132a1b89a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0947498c6cc747db6219a22132a1b89a">&#9670;&nbsp;</a></span>IsConvertFp32ToBf16Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvertFp32ToBf16Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0947498c6cc747db6219a22132a1b89a">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00318">318</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;{</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(reasonIfUnsupported);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a91fb5f44d8b9427dc45443aa9ebfe13e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91fb5f44d8b9427dc45443aa9ebfe13e">&#9670;&nbsp;</a></span>IsConvertFp32ToFp16Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvertFp32ToFp16Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00328">328</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;{</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(reasonIfUnsupported);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af7ff06bd8115a6a9cc6d41e5c762798e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7ff06bd8115a6a9cc6d41e5c762798e">&#9670;&nbsp;</a></span>IsConvolution2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvolution2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00338">338</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_backend_model_context_8cpp_source.xhtml#l00053">NeonBackendModelContext::IsFastMathEnabled()</a>, and <a class="el" href="_neon_convolution2d_workload_8cpp_source.xhtml#l00024">armnn::NeonConvolution2dWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;{</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTENEON_ENABLED)</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    {</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        {</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span>NeonBackendModelContext*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="keywordflow">if</span> (modelOptions)</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            {</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                isFastMathEnabled = modelOptions-&gt;IsFastMathEnabled();</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            }</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        }</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a45691b0c4a46c239b4986cfed95de13b">NeonConvolution2dWorkloadValidate</a>,</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                                   input,</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                   output,</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                   descriptor,</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                                   weights,</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                   biases,</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                   isFastMathEnabled,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a45691b0c4a46c239b4986cfed95de13b"><div class="ttname"><a href="namespacearmnn.xhtml#a45691b0c4a46c239b4986cfed95de13b">armnn::NeonConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, bool isFastMathEnabled, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_convolution2d_workload_8cpp_source.xhtml#l00024">NeonConvolution2dWorkload.cpp:24</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a128fb9890897e08251a3f621e570cd23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a128fb9890897e08251a3f621e570cd23">&#9670;&nbsp;</a></span>IsDepthToSpaceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDepthToSpaceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a128fb9890897e08251a3f621e570cd23">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00371">371</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_depth_to_space_workload_8cpp_source.xhtml#l00019">armnn::NeonDepthToSpaceWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;{</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a116d88067bf98ce9858ab73e68f605f9">NeonDepthToSpaceWorkloadValidate</a>,</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                                   input,</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                   output,</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                   descriptor);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;}</div><div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a116d88067bf98ce9858ab73e68f605f9"><div class="ttname"><a href="namespacearmnn.xhtml#a116d88067bf98ce9858ab73e68f605f9">armnn::NeonDepthToSpaceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDepthToSpaceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_depth_to_space_workload_8cpp_source.xhtml#l00019">NeonDepthToSpaceWorkload.cpp:19</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adc84390751f227fe03a115b5fa10b0fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc84390751f227fe03a115b5fa10b0fc">&#9670;&nbsp;</a></span>IsDepthwiseConvolutionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDepthwiseConvolutionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc84390751f227fe03a115b5fa10b0fc">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00383">383</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00029">armnn::NeonDepthwiseConvolutionWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_tests_8cpp_source.xhtml#l00019">TEST_SUITE()</a>, and <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;{</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a63d684b26fb838b22123490d780bce08">NeonDepthwiseConvolutionWorkloadValidate</a>,</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                   input,</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                   output,</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                   descriptor,</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                   weights,</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                   biases,</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a63d684b26fb838b22123490d780bce08"><div class="ttname"><a href="namespacearmnn.xhtml#a63d684b26fb838b22123490d780bce08">armnn::NeonDepthwiseConvolutionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDepthwiseConvolutionWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00029">NeonDepthwiseConvolutionWorkload.cpp:29</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2e89c72cf60df7c2d2d7e5d98822b672"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e89c72cf60df7c2d2d7e5d98822b672">&#9670;&nbsp;</a></span>IsDequantizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDequantizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00400">400</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_dequantize_workload_8cpp_source.xhtml#l00022">armnn::NeonDequantizeWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;{</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#acefede7cc57c71ea4cfe1c888bb413e0">NeonDequantizeWorkloadValidate</a>,</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                   input,</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                   output);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_acefede7cc57c71ea4cfe1c888bb413e0"><div class="ttname"><a href="namespacearmnn.xhtml#acefede7cc57c71ea4cfe1c888bb413e0">armnn::NeonDequantizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDequantizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_dequantize_workload_8cpp_source.xhtml#l00022">NeonDequantizeWorkload.cpp:22</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a16c8cd49a7fa487b904b5c9cc83673e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16c8cd49a7fa487b904b5c9cc83673e7">&#9670;&nbsp;</a></span>IsDilatedDepthwiseConvolutionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDilatedDepthwiseConvolutionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reason</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a55d91a97ff664f42cd5cd62b60c15f80">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00410">410</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00029">armnn::NeonDepthwiseConvolutionWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;{</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a63d684b26fb838b22123490d780bce08">NeonDepthwiseConvolutionWorkloadValidate</a>,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                   input,</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                   output,</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                   descriptor,</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                   weights,</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                   biases,</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a63d684b26fb838b22123490d780bce08"><div class="ttname"><a href="namespacearmnn.xhtml#a63d684b26fb838b22123490d780bce08">armnn::NeonDepthwiseConvolutionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDepthwiseConvolutionWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00029">NeonDepthwiseConvolutionWorkload.cpp:29</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a08f55136b1f0907e7083d70d719f697f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08f55136b1f0907e7083d70d719f697f">&#9670;&nbsp;</a></span>IsDivisionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDivisionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a08f55136b1f0907e7083d70d719f697f">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00676">676</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_division_workload_8cpp_source.xhtml#l00018">armnn::NeonDivisionWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;{</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a65c912bfcf02b3096f36caf21fa175d0">NeonDivisionWorkloadValidate</a>,</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                                   input0,</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                                   input1,</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                                   output,</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a65c912bfcf02b3096f36caf21fa175d0"><div class="ttname"><a href="namespacearmnn.xhtml#a65c912bfcf02b3096f36caf21fa175d0">armnn::NeonDivisionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDivisionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_division_workload_8cpp_source.xhtml#l00018">NeonDivisionWorkload.cpp:18</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a61c5b4e5dc224ef0c876e43353b34030"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61c5b4e5dc224ef0c876e43353b34030">&#9670;&nbsp;</a></span>IsElementwiseUnarySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsElementwiseUnarySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a61c5b4e5dc224ef0c876e43353b34030">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00427">427</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::Abs</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">armnn::Exp</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">armnn::Log</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">armnn::LogicalNot</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00114">ElementwiseUnaryDescriptor::m_Operation</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">armnn::Neg</a>, <a class="el" href="_neon_abs_workload_8cpp_source.xhtml#l00017">armnn::NeonAbsWorkloadValidate()</a>, <a class="el" href="_neon_exp_workload_8cpp_source.xhtml#l00017">armnn::NeonExpWorkloadValidate()</a>, <a class="el" href="_neon_logical_not_workload_8cpp_source.xhtml#l00019">armnn::NeonLogicalNotWorkloadValidate()</a>, <a class="el" href="_neon_log_workload_8cpp_source.xhtml#l00017">armnn::NeonLogWorkloadValidate()</a>, <a class="el" href="_neon_neg_workload_8cpp_source.xhtml#l00017">armnn::NeonNegWorkloadValidate()</a>, <a class="el" href="_neon_rsqrt_workload_8cpp_source.xhtml#l00018">armnn::NeonRsqrtWorkloadValidate()</a>, and <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::Rsqrt</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00147">NeonLayerSupport::IsAbsSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00857">NeonLayerSupport::IsRsqrtSupported()</a>, and <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;{</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keywordflow">switch</span>(descriptor.m_Operation)</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    {</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>:</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#afc773aec6f845adc0cc547ce475dfe3f">NeonAbsWorkloadValidate</a>,</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                                           input,</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                                           output);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">UnaryOperation::Exp</a>:</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aec5669eb9285cbca1ee6c7e1dd7bcf6a">NeonExpWorkloadValidate</a>,</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                           input,</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                                           output);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">UnaryOperation::LogicalNot</a>:</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af4f8e11ae5715973420a82d841dfa676">NeonLogicalNotWorkloadValidate</a>,</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                                           input,</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                           output);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;       <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">UnaryOperation::Log</a>:</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ad1991a3499a991b1fdd71d918f793f13">NeonLogWorkloadValidate</a>,</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                                           input,</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                                           output);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">UnaryOperation::Neg</a>:</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7f955750d00cdcae6038f07cc73686ea">NeonNegWorkloadValidate</a>,</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                                           input,</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                                           output);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>:</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aa7d1b5e38aa8cb731519ff12e2a73350">NeonRsqrtWorkloadValidate</a>,</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                                           input,</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                           output);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    }</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a7f955750d00cdcae6038f07cc73686ea"><div class="ttname"><a href="namespacearmnn.xhtml#a7f955750d00cdcae6038f07cc73686ea">armnn::NeonNegWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonNegWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_neg_workload_8cpp_source.xhtml#l00017">NeonNegWorkload.cpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">armnn::UnaryOperation::Log</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">armnn::UnaryOperation::Neg</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1991a3499a991b1fdd71d918f793f13"><div class="ttname"><a href="namespacearmnn.xhtml#ad1991a3499a991b1fdd71d918f793f13">armnn::NeonLogWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_log_workload_8cpp_source.xhtml#l00017">NeonLogWorkload.cpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">armnn::UnaryOperation::LogicalNot</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_afc773aec6f845adc0cc547ce475dfe3f"><div class="ttname"><a href="namespacearmnn.xhtml#afc773aec6f845adc0cc547ce475dfe3f">armnn::NeonAbsWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonAbsWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_abs_workload_8cpp_source.xhtml#l00017">NeonAbsWorkload.cpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aec5669eb9285cbca1ee6c7e1dd7bcf6a"><div class="ttname"><a href="namespacearmnn.xhtml#aec5669eb9285cbca1ee6c7e1dd7bcf6a">armnn::NeonExpWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonExpWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_exp_workload_8cpp_source.xhtml#l00017">NeonExpWorkload.cpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af4f8e11ae5715973420a82d841dfa676"><div class="ttname"><a href="namespacearmnn.xhtml#af4f8e11ae5715973420a82d841dfa676">armnn::NeonLogicalNotWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogicalNotWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_logical_not_workload_8cpp_source.xhtml#l00019">NeonLogicalNotWorkload.cpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa7d1b5e38aa8cb731519ff12e2a73350"><div class="ttname"><a href="namespacearmnn.xhtml#aa7d1b5e38aa8cb731519ff12e2a73350">armnn::NeonRsqrtWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonRsqrtWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_rsqrt_workload_8cpp_source.xhtml#l00018">NeonRsqrtWorkload.cpp:18</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">armnn::UnaryOperation::Exp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acc5d9a4c8f29984de3bbdca87684f317"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc5d9a4c8f29984de3bbdca87684f317">&#9670;&nbsp;</a></span>IsFillSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFillSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#acc5d9a4c8f29984de3bbdca87684f317">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00469">469</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;{</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="keywordflow">return</span> IsNeonBackendSupported(reasonIfUnsupported);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a53c7593d1aa26207eac5d5814a9d56dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53c7593d1aa26207eac5d5814a9d56dc">&#9670;&nbsp;</a></span>IsFloorSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFloorSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00481">481</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_layer_support_common_8hpp_source.xhtml#l00027">armnn::IsSupportedForDataTypeGeneric()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;{</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordflow">return</span> IsNeonBackendSupported(reasonIfUnsupported) &amp;&amp;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;           <a class="code" href="namespacearmnn.xhtml#af6dbe371ec651a8e0063624fdf32afc0">IsSupportedForDataTypeGeneric</a>(reasonIfUnsupported,</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                                         input.GetDataType(),</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                                         &amp;FalseFuncF16&lt;&gt;,</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                                         &amp;TrueFunc&lt;&gt;,</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                                         &amp;FalseFuncU8&lt;&gt;,</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                                         &amp;FalseFuncI32&lt;&gt;,</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                                         &amp;FalseFuncU8&lt;&gt;);</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af6dbe371ec651a8e0063624fdf32afc0"><div class="ttname"><a href="namespacearmnn.xhtml#af6dbe371ec651a8e0063624fdf32afc0">armnn::IsSupportedForDataTypeGeneric</a></div><div class="ttdeci">bool IsSupportedForDataTypeGeneric(Optional&lt; std::string &amp;&gt; reasonIfUnsupported, DataType dataType, Float16Func float16FuncPtr, Float32Func float32FuncPtr, Uint8Func uint8FuncPtr, Int32Func int32FuncPtr, BooleanFunc booleanFuncPtr, Params &amp;&amp;... params)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_common_8hpp_source.xhtml#l00027">LayerSupportCommon.hpp:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aeaf971dd9dffd6f6bc7e5a1ae6b6af5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">&#9670;&nbsp;</a></span>IsFullyConnectedSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFullyConnectedSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00496">496</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_fully_connected_workload_8cpp_source.xhtml#l00024">armnn::NeonFullyConnectedWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;{</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#adb80d3b5ef7d19078089d229f90713ee">NeonFullyConnectedWorkloadValidate</a>,</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                                   input,</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                                   output,</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                                   weights,</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                                   biases,</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                                   descriptor,</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_adb80d3b5ef7d19078089d229f90713ee"><div class="ttname"><a href="namespacearmnn.xhtml#adb80d3b5ef7d19078089d229f90713ee">armnn::NeonFullyConnectedWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonFullyConnectedWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const TensorInfo &amp;biases, const FullyConnectedDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_fully_connected_workload_8cpp_source.xhtml#l00024">NeonFullyConnectedWorkload.cpp:24</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5e8fbdda1125eb5e22f14eacbe9fb351"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e8fbdda1125eb5e22f14eacbe9fb351">&#9670;&nbsp;</a></span>IsGatherSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsGatherSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a2f51fda38409c3768a7bd28cedf3f075">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00513">513</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_gather_workload_8cpp_source.xhtml#l00013">armnn::NeonGatherWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;{</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a6c354904637149b84767275e6f725741">NeonGatherWorkloadValidate</a>,</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                                   input0,</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                                   input1,</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                                   output,</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                                   descriptor);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a6c354904637149b84767275e6f725741"><div class="ttname"><a href="namespacearmnn.xhtml#a6c354904637149b84767275e6f725741">armnn::NeonGatherWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonGatherWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;indices, const TensorInfo &amp;output, const GatherDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_gather_workload_8cpp_source.xhtml#l00013">NeonGatherWorkload.cpp:13</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a14e45f3699e823d7859d5d352d89265c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14e45f3699e823d7859d5d352d89265c">&#9670;&nbsp;</a></span>IsGreaterSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsGreaterSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a14e45f3699e823d7859d5d352d89265c">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00527">527</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::Greater</a>, and <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00236">NeonLayerSupport::IsComparisonSupported()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;{</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    ComparisonDescriptor descriptor(<a class="code" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a7c52726a684dd76258c61af124012537">IsComparisonSupported</a>(input0, input1, output, descriptor, reasonIfUnsupported);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a"><div class="ttname"><a href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::ComparisonOperation::Greater</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a7c52726a684dd76258c61af124012537"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a7c52726a684dd76258c61af124012537">armnn::NeonLayerSupport::IsComparisonSupported</a></div><div class="ttdeci">bool IsComparisonSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ComparisonDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00236">NeonLayerSupport.cpp:236</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad29d99ecd719c640ed22dcf5c688c6a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad29d99ecd719c640ed22dcf5c688c6a5">&#9670;&nbsp;</a></span>IsInputSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInputSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00536">536</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;{</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keywordflow">return</span> IsNeonBackendSupported(reasonIfUnsupported, input);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0813546a09bf2caba6794014d1960624"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0813546a09bf2caba6794014d1960624">&#9670;&nbsp;</a></span>IsInstanceNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInstanceNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0813546a09bf2caba6794014d1960624">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00542">542</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_instance_normalization_workload_8cpp_source.xhtml#l00019">armnn::NeonInstanceNormalizationWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;{</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aea722abe239545030f4c6fe4e083816f">NeonInstanceNormalizationWorkloadValidate</a>,</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                                   input,</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                                   output,</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                                   descriptor);</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_aea722abe239545030f4c6fe4e083816f"><div class="ttname"><a href="namespacearmnn.xhtml#aea722abe239545030f4c6fe4e083816f">armnn::NeonInstanceNormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonInstanceNormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_instance_normalization_workload_8cpp_source.xhtml#l00019">NeonInstanceNormalizationWorkload.cpp:19</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aca4acda7ab553edfda828658d8f3882b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca4acda7ab553edfda828658d8f3882b">&#9670;&nbsp;</a></span>IsL2NormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsL2NormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aca4acda7ab553edfda828658d8f3882b">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00554">554</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_l2_normalization_float_workload_8cpp_source.xhtml#l00019">armnn::NeonL2NormalizationWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;{</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae838df3960d2b5d18d73ed2a07aee917">NeonL2NormalizationWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae838df3960d2b5d18d73ed2a07aee917"><div class="ttname"><a href="namespacearmnn.xhtml#ae838df3960d2b5d18d73ed2a07aee917">armnn::NeonL2NormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonL2NormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_l2_normalization_float_workload_8cpp_source.xhtml#l00019">NeonL2NormalizationFloatWorkload.cpp:19</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a772790c60d70814e30b5bec70fd98776"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a772790c60d70814e30b5bec70fd98776">&#9670;&nbsp;</a></span>IsLogicalBinarySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLogicalBinarySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8fab6937a1010b5ed674b930b4f143cb">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00562">562</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">armnn::LogicalAnd</a>, <a class="el" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">armnn::LogicalOr</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01318">LogicalBinaryDescriptor::m_Operation</a>, <a class="el" href="_neon_logical_and_workload_8cpp_source.xhtml#l00018">armnn::NeonLogicalAndWorkloadValidate()</a>, and <a class="el" href="_neon_logical_or_workload_8cpp_source.xhtml#l00018">armnn::NeonLogicalOrWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;{</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="keywordflow">switch</span>(descriptor.m_Operation)</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    {</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">LogicalBinaryOperation::LogicalAnd</a>:</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7832b675e7efeb1315b31067e46ce705">NeonLogicalAndWorkloadValidate</a>,</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                                           input0,</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                                           input1,</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                                           output);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">LogicalBinaryOperation::LogicalOr</a>:</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2de04fd10d0a2419e0a05f12741017dc">NeonLogicalOrWorkloadValidate</a>,</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                                           input0,</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                                           input1,</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                                           output);</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    }</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">armnn::LogicalBinaryOperation::LogicalAnd</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7832b675e7efeb1315b31067e46ce705"><div class="ttname"><a href="namespacearmnn.xhtml#a7832b675e7efeb1315b31067e46ce705">armnn::NeonLogicalAndWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogicalAndWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_logical_and_workload_8cpp_source.xhtml#l00018">NeonLogicalAndWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2de04fd10d0a2419e0a05f12741017dc"><div class="ttname"><a href="namespacearmnn.xhtml#a2de04fd10d0a2419e0a05f12741017dc">armnn::NeonLogicalOrWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogicalOrWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_logical_or_workload_8cpp_source.xhtml#l00018">NeonLogicalOrWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">armnn::LogicalBinaryOperation::LogicalOr</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa0380b797cb9932fb03067dbe2cdecfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0380b797cb9932fb03067dbe2cdecfb">&#9670;&nbsp;</a></span>IsLogSoftmaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLogSoftmaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00587">587</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_log_softmax_workload_8cpp_source.xhtml#l00019">armnn::NeonLogSoftmaxWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;{</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ac57d1e00cc24022c21aa7ff95eb618ba">NeonLogSoftmaxWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ac57d1e00cc24022c21aa7ff95eb618ba"><div class="ttname"><a href="namespacearmnn.xhtml#ac57d1e00cc24022c21aa7ff95eb618ba">armnn::NeonLogSoftmaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogSoftmaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_log_softmax_workload_8cpp_source.xhtml#l00019">NeonLogSoftmaxWorkload.cpp:19</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a862535721737220f62a49f14ff494dd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a862535721737220f62a49f14ff494dd5">&#9670;&nbsp;</a></span>IsLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>scratchBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a862535721737220f62a49f14ff494dd5">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00595">595</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_lstm_float_workload_8cpp_source.xhtml#l00280">armnn::NeonLstmFloatWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;{</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a9e06cc2a2ac8b88fc72972695a17910f">NeonLstmFloatWorkloadValidate</a>,</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                                   input,</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                                   outputStateIn,</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                                   cellStateIn,</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                                   scratchBuffer,</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                                   outputStateOut,</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                                   cellStateOut,</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                                   output,</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                                   descriptor,</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                                   paramsInfo);</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a9e06cc2a2ac8b88fc72972695a17910f"><div class="ttname"><a href="namespacearmnn.xhtml#a9e06cc2a2ac8b88fc72972695a17910f">armnn::NeonLstmFloatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLstmFloatWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_lstm_float_workload_8cpp_source.xhtml#l00280">NeonLstmFloatWorkload.cpp:280</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afef9436c86b37b973471f2ae546ac00a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afef9436c86b37b973471f2ae546ac00a">&#9670;&nbsp;</a></span>IsMaximumSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMaximumSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#afef9436c86b37b973471f2ae546ac00a">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00619">619</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_maximum_workload_8cpp_source.xhtml#l00014">armnn::NeonMaximumWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;{</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8d2ea79addd8ef64be2ca0dad3408f00">NeonMaximumWorkloadValidate</a>,</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                                   input0,</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                                   input1,</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                                   output);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a8d2ea79addd8ef64be2ca0dad3408f00"><div class="ttname"><a href="namespacearmnn.xhtml#a8d2ea79addd8ef64be2ca0dad3408f00">armnn::NeonMaximumWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonMaximumWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_maximum_workload_8cpp_source.xhtml#l00014">NeonMaximumWorkload.cpp:14</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab268618580d4f53bf5e9b5a47dee3f6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab268618580d4f53bf5e9b5a47dee3f6a">&#9670;&nbsp;</a></span>IsMeanSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMeanSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00631">631</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_mean_workload_8cpp_source.xhtml#l00018">armnn::NeonMeanWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;{</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae74e210a3f716c1f5f32663a8ec66345">NeonMeanWorkloadValidate</a>,</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                                   input,</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                                   output,</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                                   descriptor);</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae74e210a3f716c1f5f32663a8ec66345"><div class="ttname"><a href="namespacearmnn.xhtml#ae74e210a3f716c1f5f32663a8ec66345">armnn::NeonMeanWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonMeanWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_mean_workload_8cpp_source.xhtml#l00018">NeonMeanWorkload.cpp:18</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa9309ea64f9f7447efe3567f77417d29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9309ea64f9f7447efe3567f77417d29">&#9670;&nbsp;</a></span>IsMergerSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMergerSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a003d213dd28b0b8c0f26fbf268ccb975">MergerDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a77ae1b686e92a561de76388ac55cab06">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00643">643</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00251">NeonLayerSupport::IsConcatSupported()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;{</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;     <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a3dca8ffbcb5f3afa1799aa7d354a3016">IsConcatSupported</a>(inputs, output, descriptor, reasonIfUnsupported);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a3dca8ffbcb5f3afa1799aa7d354a3016"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a3dca8ffbcb5f3afa1799aa7d354a3016">armnn::NeonLayerSupport::IsConcatSupported</a></div><div class="ttdeci">bool IsConcatSupported(const std::vector&lt; const TensorInfo *&gt; inputs, const TensorInfo &amp;output, const ConcatDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00251">NeonLayerSupport.cpp:251</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3d0eafb3de560b3482f857b56b2b2116"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d0eafb3de560b3482f857b56b2b2116">&#9670;&nbsp;</a></span>IsMinimumSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMinimumSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3d0eafb3de560b3482f857b56b2b2116">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00651">651</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_minimum_workload_8cpp_source.xhtml#l00015">armnn::NeonMinimumWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;{</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ab81159ebfa638af1b91fe1e8c5de1955">NeonMinimumWorkloadValidate</a>,</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                                   input0,</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                                   input1,</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                                   output);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ab81159ebfa638af1b91fe1e8c5de1955"><div class="ttname"><a href="namespacearmnn.xhtml#ab81159ebfa638af1b91fe1e8c5de1955">armnn::NeonMinimumWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonMinimumWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdoc">Validate function for validating the inputs and output. </div><div class="ttdef"><b>Definition:</b> <a href="_neon_minimum_workload_8cpp_source.xhtml#l00015">NeonMinimumWorkload.cpp:15</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a421e1f3865d99d52613003048342c49a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a421e1f3865d99d52613003048342c49a">&#9670;&nbsp;</a></span>IsMultiplicationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMultiplicationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a421e1f3865d99d52613003048342c49a">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00663">663</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_multiplication_workload_8cpp_source.xhtml#l00019">armnn::NeonMultiplicationWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;{</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ad512520e809bfed4fbd3db9fbc241263">NeonMultiplicationWorkloadValidate</a>,</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                                   input0,</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                                   input1,</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                                   output,</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;}</div><div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad512520e809bfed4fbd3db9fbc241263"><div class="ttname"><a href="namespacearmnn.xhtml#ad512520e809bfed4fbd3db9fbc241263">armnn::NeonMultiplicationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonMultiplicationWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_multiplication_workload_8cpp_source.xhtml#l00019">NeonMultiplicationWorkload.cpp:19</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a994c2065561141bf37fcd2ff7bb4af4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a994c2065561141bf37fcd2ff7bb4af4d">&#9670;&nbsp;</a></span>IsNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00689">689</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_normalization_float_workload_8cpp_source.xhtml#l00049">armnn::NeonNormalizationWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;{</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2ec6297db90d1d4c258c13d2d72b13d9">NeonNormalizationWorkloadValidate</a>,</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                                   input,</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                                   output,</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                                   descriptor);</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a2ec6297db90d1d4c258c13d2d72b13d9"><div class="ttname"><a href="namespacearmnn.xhtml#a2ec6297db90d1d4c258c13d2d72b13d9">armnn::NeonNormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonNormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_normalization_float_workload_8cpp_source.xhtml#l00049">NeonNormalizationFloatWorkload.cpp:49</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aef3244c0ef64c8f2f352d21ce0c06985"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef3244c0ef64c8f2f352d21ce0c06985">&#9670;&nbsp;</a></span>IsOutputSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsOutputSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00701">701</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;{</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keywordflow">return</span> IsNeonBackendSupported(reasonIfUnsupported, output);</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0534291adf9f3436ba331552eba29a43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0534291adf9f3436ba331552eba29a43">&#9670;&nbsp;</a></span>IsPadSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPadSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0534291adf9f3436ba331552eba29a43">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00707">707</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_pad_workload_8cpp_source.xhtml#l00054">armnn::NeonPadWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;{</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a39209c0c078e83227222eb885317c2c5">NeonPadWorkloadValidate</a>,</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                                   input,</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                                   output,</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                                   descriptor);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a39209c0c078e83227222eb885317c2c5"><div class="ttname"><a href="namespacearmnn.xhtml#a39209c0c078e83227222eb885317c2c5">armnn::NeonPadWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPadWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_pad_workload_8cpp_source.xhtml#l00054">NeonPadWorkload.cpp:54</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9d553495d9a94fa55588ae159d8bda30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d553495d9a94fa55588ae159d8bda30">&#9670;&nbsp;</a></span>IsPermuteSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPermuteSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9d553495d9a94fa55588ae159d8bda30">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00719">719</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_permute_workload_8cpp_source.xhtml#l00015">armnn::NeonPermuteWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;{</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a70650f6b1d3b8511fcdb989ca769cdbb">NeonPermuteWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a70650f6b1d3b8511fcdb989ca769cdbb"><div class="ttname"><a href="namespacearmnn.xhtml#a70650f6b1d3b8511fcdb989ca769cdbb">armnn::NeonPermuteWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPermuteWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_permute_workload_8cpp_source.xhtml#l00015">NeonPermuteWorkload.cpp:15</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa955675303d67b1d1fb51fb7f09d8c21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa955675303d67b1d1fb51fb7f09d8c21">&#9670;&nbsp;</a></span>IsPooling2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPooling2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00727">727</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_pooling2d_workload_8cpp_source.xhtml#l00022">armnn::NeonPooling2dWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;{</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a1f07655db8ad7f2738bb0d3d9e2316cc">NeonPooling2dWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;}</div><div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1f07655db8ad7f2738bb0d3d9e2316cc"><div class="ttname"><a href="namespacearmnn.xhtml#a1f07655db8ad7f2738bb0d3d9e2316cc">armnn::NeonPooling2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPooling2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_pooling2d_workload_8cpp_source.xhtml#l00022">NeonPooling2dWorkload.cpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4b36dcedd5edbd5142b3548967aadc2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b36dcedd5edbd5142b3548967aadc2f">&#9670;&nbsp;</a></span>IsPreluSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPreluSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a93cf81b28c4275a338f41c536a451158">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00735">735</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_prelu_workload_8cpp_source.xhtml#l00017">armnn::NeonPreluWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;{</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a188adc104b16db3dc23ed2c5ff06cbb8">NeonPreluWorkloadValidate</a>, reasonIfUnsupported, input, alpha, output);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a188adc104b16db3dc23ed2c5ff06cbb8"><div class="ttname"><a href="namespacearmnn.xhtml#a188adc104b16db3dc23ed2c5ff06cbb8">armnn::NeonPreluWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPreluWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_prelu_workload_8cpp_source.xhtml#l00017">NeonPreluWorkload.cpp:17</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adf54bcad228c0ac21f6735d31460cf31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf54bcad228c0ac21f6735d31460cf31">&#9670;&nbsp;</a></span>IsQLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousOutputIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousCellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adf54bcad228c0ac21f6735d31460cf31">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00743">743</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_neon_q_lstm_workload_8cpp_source.xhtml#l00243">armnn::NeonQLstmWorkloadValidate()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, and <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;{</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <span class="comment">// Check required here in order to pass IsLayerSupported for datatypes tests</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <span class="keywordflow">if</span> (input.GetDataType()               == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        previousOutputIn.GetDataType()    == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        previousCellStateIn.GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;        outputStateOut.GetDataType()      == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        cellStateOut.GetDataType()        == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        output.GetDataType()              == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>)</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    {</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a6e6f731864d33c0acd4140c7dfe17b0a">NeonQLstmWorkloadValidate</a>,</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                                       reasonIfUnsupported,</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                                       input,</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                                       previousCellStateIn,</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;                                       previousOutputIn,</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;                                       cellStateOut,</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                                       outputStateOut,</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                                       output,</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                                       descriptor,</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                                       paramsInfo);</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    }</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    {</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    }</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a6e6f731864d33c0acd4140c7dfe17b0a"><div class="ttname"><a href="namespacearmnn.xhtml#a6e6f731864d33c0acd4140c7dfe17b0a">armnn::NeonQLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonQLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;output, const QLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_q_lstm_workload_8cpp_source.xhtml#l00243">NeonQLstmWorkload.cpp:243</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a281eb6ce87b6ca147e681dd3f6483a87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a281eb6ce87b6ca147e681dd3f6483a87">&#9670;&nbsp;</a></span>IsQuantizedLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQuantizedLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af1be52d9f968bfab069344756bf232c4">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00788">788</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_quantized_lstm_workload_8cpp_source.xhtml#l00131">armnn::NeonQuantizedLstmWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;{</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae83632e641892ad2de78f316376f6bd0">NeonQuantizedLstmWorkloadValidate</a>,</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                                   input,</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                                   cellStateIn,</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                                   outputStateIn,</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                                   cellStateOut,</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                                   outputStateOut,</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                                   paramsInfo);</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae83632e641892ad2de78f316376f6bd0"><div class="ttname"><a href="namespacearmnn.xhtml#ae83632e641892ad2de78f316376f6bd0">armnn::NeonQuantizedLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonQuantizedLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;outputStateOut, const QuantizedLstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_quantized_lstm_workload_8cpp_source.xhtml#l00131">NeonQuantizedLstmWorkload.cpp:131</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad2c7be6b84b04444e514f52f593b3df7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2c7be6b84b04444e514f52f593b3df7">&#9670;&nbsp;</a></span>IsQuantizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQuantizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad2c7be6b84b04444e514f52f593b3df7">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00778">778</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_quantize_workload_8cpp_source.xhtml#l00018">armnn::NeonQuantizeWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;{</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a4d1e35c8bbe48e99dd522ac0f75f77d7">NeonQuantizeWorkloadValidate</a>,</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                                   input,</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                                   output);</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4d1e35c8bbe48e99dd522ac0f75f77d7"><div class="ttname"><a href="namespacearmnn.xhtml#a4d1e35c8bbe48e99dd522ac0f75f77d7">armnn::NeonQuantizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonQuantizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_quantize_workload_8cpp_source.xhtml#l00018">NeonQuantizeWorkload.cpp:18</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a917c126e64314263b8b5f7bca455ddfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a917c126e64314263b8b5f7bca455ddfb">&#9670;&nbsp;</a></span>IsReduceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsReduceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a917c126e64314263b8b5f7bca455ddfb">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00806">806</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_reduce_workload_8cpp_source.xhtml#l00019">armnn::NeonReduceWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;{</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aceb6d218204c4e0e7b4c968d6266917c">NeonReduceWorkloadValidate</a>,</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                                   input,</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                                   output,</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                                   descriptor);</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_aceb6d218204c4e0e7b4c968d6266917c"><div class="ttname"><a href="namespacearmnn.xhtml#aceb6d218204c4e0e7b4c968d6266917c">armnn::NeonReduceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonReduceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReduceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_reduce_workload_8cpp_source.xhtml#l00019">NeonReduceWorkload.cpp:19</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa02f01bbcb48c67f5b2efc4132ec5e86"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa02f01bbcb48c67f5b2efc4132ec5e86">&#9670;&nbsp;</a></span>IsReshapeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsReshapeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00818">818</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_neon_reshape_workload_8cpp_source.xhtml#l00017">armnn::NeonReshapeWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;{</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a430021076042c8157a926a3bb3a37152">NeonReshapeWorkloadValidate</a>,</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                                   input,</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                                   output);</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a430021076042c8157a926a3bb3a37152"><div class="ttname"><a href="namespacearmnn.xhtml#a430021076042c8157a926a3bb3a37152">armnn::NeonReshapeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonReshapeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_reshape_workload_8cpp_source.xhtml#l00017">NeonReshapeWorkload.cpp:17</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0f29f31e1ba46a52eedcdecd34f4cc24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f29f31e1ba46a52eedcdecd34f4cc24">&#9670;&nbsp;</a></span>IsResizeBilinearSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsResizeBilinearSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0f29f31e1ba46a52eedcdecd34f4cc24">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00842">842</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::Bilinear</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00830">NeonLayerSupport::IsResizeSupported()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00835">ResizeDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00833">ResizeDescriptor::m_Method</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00830">ResizeDescriptor::m_TargetHeight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00828">ResizeDescriptor::m_TargetWidth</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;{</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    ResizeDescriptor descriptor;</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    descriptor.m_Method     = <a class="code" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">ResizeMethod::Bilinear</a>;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    descriptor.m_DataLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>;</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <span class="keyword">const</span> TensorShape&amp; outputShape = output.GetShape();</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    descriptor.m_TargetHeight = outputShape[2];</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    descriptor.m_TargetWidth  = outputShape[3];</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">IsResizeSupported</a>(input, output, descriptor, reasonIfUnsupported);</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a3d27a3fc6a7df0b68d80cb113aff8b6c"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">armnn::NeonLayerSupport::IsResizeSupported</a></div><div class="ttdeci">bool IsResizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00830">NeonLayerSupport.cpp:830</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f"><div class="ttname"><a href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::ResizeMethod::Bilinear</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3d27a3fc6a7df0b68d80cb113aff8b6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d27a3fc6a7df0b68d80cb113aff8b6c">&#9670;&nbsp;</a></span>IsResizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsResizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00830">830</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_resize_workload_8cpp_source.xhtml#l00022">armnn::NeonResizeWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00842">NeonLayerSupport::IsResizeBilinearSupported()</a>, and <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;{</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a552d65f4e0a6c9e7c7796e77590063e9">NeonResizeWorkloadValidate</a>,</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                                   input,</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                                   output,</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                                   descriptor);</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;}</div><div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a552d65f4e0a6c9e7c7796e77590063e9"><div class="ttname"><a href="namespacearmnn.xhtml#a552d65f4e0a6c9e7c7796e77590063e9">armnn::NeonResizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonResizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_resize_workload_8cpp_source.xhtml#l00022">NeonResizeWorkload.cpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a10ae4d84b0d31580f6fcd5107322ebcf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10ae4d84b0d31580f6fcd5107322ebcf">&#9670;&nbsp;</a></span>IsRsqrtSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsRsqrtSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a10ae4d84b0d31580f6fcd5107322ebcf">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00857">857</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00427">NeonLayerSupport::IsElementwiseUnarySupported()</a>, and <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::Rsqrt</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;{</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    ElementwiseUnaryDescriptor descriptor(<a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>);</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a61c5b4e5dc224ef0c876e43353b34030">IsElementwiseUnarySupported</a>(input, output, descriptor, reasonIfUnsupported);</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a61c5b4e5dc224ef0c876e43353b34030"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a61c5b4e5dc224ef0c876e43353b34030">armnn::NeonLayerSupport::IsElementwiseUnarySupported</a></div><div class="ttdeci">bool IsElementwiseUnarySupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00427">NeonLayerSupport.cpp:427</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0e14dafa85cfcd4a6b6b752284b51e63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e14dafa85cfcd4a6b6b752284b51e63">&#9670;&nbsp;</a></span>IsSliceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSliceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00865">865</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_slice_workload_8cpp_source.xhtml#l00021">armnn::NeonSliceWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;{</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a0a223c0997e3f7faa373ed55f954252b">NeonSliceWorkloadValidate</a>,</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                                   input,</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;                                   output,</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                                   descriptor);</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a0a223c0997e3f7faa373ed55f954252b"><div class="ttname"><a href="namespacearmnn.xhtml#a0a223c0997e3f7faa373ed55f954252b">armnn::NeonSliceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSliceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_slice_workload_8cpp_source.xhtml#l00021">NeonSliceWorkload.cpp:21</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8385cf8227907904a6a86fac318fc099"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8385cf8227907904a6a86fac318fc099">&#9670;&nbsp;</a></span>IsSoftmaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSoftmaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8385cf8227907904a6a86fac318fc099">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00877">877</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_softmax_workload_8cpp_source.xhtml#l00019">armnn::NeonSoftmaxWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;{</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a4077a9771ba9c551f4ce61863f65e798">NeonSoftmaxWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4077a9771ba9c551f4ce61863f65e798"><div class="ttname"><a href="namespacearmnn.xhtml#a4077a9771ba9c551f4ce61863f65e798">armnn::NeonSoftmaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSoftmaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_softmax_workload_8cpp_source.xhtml#l00019">NeonSoftmaxWorkload.cpp:19</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3adfc31e079a970e028e537ec05fabf5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3adfc31e079a970e028e537ec05fabf5">&#9670;&nbsp;</a></span>IsSpaceToBatchNdSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSpaceToBatchNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3adfc31e079a970e028e537ec05fabf5">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00885">885</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_space_to_batch_nd_workload_8cpp_source.xhtml#l00020">armnn::NeonSpaceToBatchNdWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;{</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ab29257da888af2c4971db1344d8a526c">NeonSpaceToBatchNdWorkloadValidate</a>,</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;                                   input,</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                                   output,</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                                   descriptor);</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ab29257da888af2c4971db1344d8a526c"><div class="ttname"><a href="namespacearmnn.xhtml#ab29257da888af2c4971db1344d8a526c">armnn::NeonSpaceToBatchNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSpaceToBatchNdWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_space_to_batch_nd_workload_8cpp_source.xhtml#l00020">NeonSpaceToBatchNdWorkload.cpp:20</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab2af1e7da9490d29e569d271e16b0d5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2af1e7da9490d29e569d271e16b0d5c">&#9670;&nbsp;</a></span>IsSpaceToDepthSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSpaceToDepthSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00897">897</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_space_to_depth_workload_8cpp_source.xhtml#l00019">armnn::NeonSpaceToDepthWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;{</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af6d2d40482240def4614deb694933d1e">NeonSpaceToDepthWorkloadValidate</a>,</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                                   input,</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                                   output,</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                                   descriptor);</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_af6d2d40482240def4614deb694933d1e"><div class="ttname"><a href="namespacearmnn.xhtml#af6d2d40482240def4614deb694933d1e">armnn::NeonSpaceToDepthWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSpaceToDepthWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_space_to_depth_workload_8cpp_source.xhtml#l00019">NeonSpaceToDepthWorkload.cpp:19</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a17dd12822d49a23d24198f425a6fb9c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17dd12822d49a23d24198f425a6fb9c4">&#9670;&nbsp;</a></span>IsSplitterSupported() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSplitterSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a17dd12822d49a23d24198f425a6fb9c4">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00909">909</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, and <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;{</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <span class="keywordflow">return</span> IsSupportedForDataTypeNeon(reasonIfUnsupported,</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;                                      input.GetDataType(),</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;                                      &amp;TrueFunc&lt;&gt;,</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;                                      &amp;TrueFunc&lt;&gt;);</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa746e752ce8874669ea549f8e50896da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa746e752ce8874669ea549f8e50896da">&#9670;&nbsp;</a></span>IsSplitterSupported() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSplitterSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>outputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa746e752ce8874669ea549f8e50896da">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00920">920</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00219">armnn::ComputeSplitAxis()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00300">ViewsDescriptor::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00434">TensorInfo::IsTypeSpaceMatch()</a>, <a class="el" href="_neon_splitter_workload_8cpp_source.xhtml#l00032">armnn::NeonSplitterWorkloadValidate()</a>, and <a class="el" href="_layer_support_common_8hpp_source.xhtml#l00017">armnn::SetValueChecked()</a>.</p>
<div class="fragment"><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;{</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTENEON_ENABLED)</span></div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    <span class="comment">// Split along the last dimension, cannot use sub-tensors</span></div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <span class="comment">// as width and height of the sub-tensors do not match</span></div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    <span class="comment">// the width and height of the parent tensor</span></div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    <span class="comment">// in case of input with more than 2D.</span></div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    std::set&lt;unsigned int&gt; splitAxis = <a class="code" href="namespacearmnn.xhtml#a8cbabc875597b3bed0ccdc0adb289fde">ComputeSplitAxis</a>(descriptor, input.GetShape());</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <span class="keywordflow">if</span> (descriptor.GetNumDimensions() &gt; 2 &amp;&amp; splitAxis.size() == 1 &amp;&amp;</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        *splitAxis.begin() == descriptor.GetNumDimensions() - 1 )</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    {</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;        <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aab5ea316b3decb05430323d847e3a773">NeonSplitterWorkloadValidate</a>,</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                                       reasonIfUnsupported,</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                                       input,</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                                       outputs,</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                                       *splitAxis.begin());</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    }</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> output : outputs)</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    {</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;        <span class="keywordflow">if</span> (!input.IsTypeSpaceMatch(output)) <span class="comment">// Cannot use sub-tensors if the types are not same space</span></div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;        {</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(reasonIfUnsupported, <span class="stringliteral">&quot;Neon Splitter: Types and quantization parameters must match.&quot;</span>);</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;        }</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    }</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_aab5ea316b3decb05430323d847e3a773"><div class="ttname"><a href="namespacearmnn.xhtml#aab5ea316b3decb05430323d847e3a773">armnn::NeonSplitterWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSplitterWorkloadValidate(const TensorInfo &amp;input, const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt;&gt; &amp;outputs, unsigned int splitAxis)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_splitter_workload_8cpp_source.xhtml#l00032">NeonSplitterWorkload.cpp:32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8cbabc875597b3bed0ccdc0adb289fde"><div class="ttname"><a href="namespacearmnn.xhtml#a8cbabc875597b3bed0ccdc0adb289fde">armnn::ComputeSplitAxis</a></div><div class="ttdeci">std::set&lt; unsigned int &gt; ComputeSplitAxis(const armnn::SplitterDescriptor &amp;desc, const TensorShape &amp;input)</div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_utils_8hpp_source.xhtml#l00219">ArmComputeUtils.hpp:219</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a13c7d751e4d37f65a6d40c3c6e50d2b8"><div class="ttname"><a href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">armnn::SetValueChecked</a></div><div class="ttdeci">void SetValueChecked(Optional&lt; T &amp;&gt; optionalRef, V &amp;&amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_common_8hpp_source.xhtml#l00017">LayerSupportCommon.hpp:17</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab4609f1baf5fcd295951f3c8abdffd90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4609f1baf5fcd295951f3c8abdffd90">&#9670;&nbsp;</a></span>IsStackSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsStackSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00953">953</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_stack_workload_8cpp_source.xhtml#l00027">armnn::NeonStackWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;{</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a65c83c74bdbd66cdd547d331998952eb">NeonStackWorkloadValidate</a>,</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                                   inputs,</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                                   output,</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                                   descriptor);</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a65c83c74bdbd66cdd547d331998952eb"><div class="ttname"><a href="namespacearmnn.xhtml#a65c83c74bdbd66cdd547d331998952eb">armnn::NeonStackWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonStackWorkloadValidate(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_stack_workload_8cpp_source.xhtml#l00027">NeonStackWorkload.cpp:27</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac054cb25099005eac854afb1511340f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac054cb25099005eac854afb1511340f0">&#9670;&nbsp;</a></span>IsStridedSliceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsStridedSliceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ac054cb25099005eac854afb1511340f0">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00965">965</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_strided_slice_workload_8cpp_source.xhtml#l00019">armnn::NeonStridedSliceWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;{</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ac71d08bf1257807c112b4d019802acc3">NeonStridedSliceWorkloadValidate</a>,</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                                   input,</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                                   output,</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                                   descriptor);</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ac71d08bf1257807c112b4d019802acc3"><div class="ttname"><a href="namespacearmnn.xhtml#ac71d08bf1257807c112b4d019802acc3">armnn::NeonStridedSliceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonStridedSliceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_strided_slice_workload_8cpp_source.xhtml#l00019">NeonStridedSliceWorkload.cpp:19</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af6c947e4d4b25bc49d92d18d4ff26736"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6c947e4d4b25bc49d92d18d4ff26736">&#9670;&nbsp;</a></span>IsSubtractionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSubtractionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00977">977</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_subtraction_workload_8cpp_source.xhtml#l00022">armnn::NeonSubtractionWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;{</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#abc968e1323027f9e42cbc7642800d5ce">NeonSubtractionWorkloadValidate</a>,</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                                   input0,</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                                   input1,</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                                   output,</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_abc968e1323027f9e42cbc7642800d5ce"><div class="ttname"><a href="namespacearmnn.xhtml#abc968e1323027f9e42cbc7642800d5ce">armnn::NeonSubtractionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSubtractionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_subtraction_workload_8cpp_source.xhtml#l00022">NeonSubtractionWorkload.cpp:22</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0c69484f19ed650ad48b716719114e51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c69484f19ed650ad48b716719114e51">&#9670;&nbsp;</a></span>IsTransposeConvolution2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTransposeConvolution2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0c69484f19ed650ad48b716719114e51">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00990">990</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_transpose_convolution2d_workload_8cpp_source.xhtml#l00025">armnn::NeonTransposeConvolution2dWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;{</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#abc73c3c9a09f91c22c64d7c166e9be4d">NeonTransposeConvolution2dWorkloadValidate</a>,</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                                   input,</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;                                   output,</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;                                   descriptor,</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;                                   weights,</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;                                   biases);</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_abc73c3c9a09f91c22c64d7c166e9be4d"><div class="ttname"><a href="namespacearmnn.xhtml#abc73c3c9a09f91c22c64d7c166e9be4d">armnn::NeonTransposeConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonTransposeConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_transpose_convolution2d_workload_8cpp_source.xhtml#l00025">NeonTransposeConvolution2dWorkload.cpp:25</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0189645f33641b280877a1b2f6ba9fee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0189645f33641b280877a1b2f6ba9fee">&#9670;&nbsp;</a></span>IsTransposeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTransposeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0189645f33641b280877a1b2f6ba9fee">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01006">1006</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00129">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_neon_transpose_workload_8cpp_source.xhtml#l00015">armnn::NeonTransposeWorkloadValidate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">NeonLayerSupport::~NeonLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;{</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2b8555526752015115fa7fa00d88542b">NeonTransposeWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a2b8555526752015115fa7fa00d88542b"><div class="ttname"><a href="namespacearmnn.xhtml#a2b8555526752015115fa7fa00d88542b">armnn::NeonTransposeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonTransposeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_transpose_workload_8cpp_source.xhtml#l00015">NeonTransposeWorkload.cpp:15</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00129">NeonLayerSupport.cpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/neon/<a class="el" href="_neon_layer_support_8hpp_source.xhtml">NeonLayerSupport.hpp</a></li>
<li>src/backends/neon/<a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml">NeonLayerSupport</a></li>
    <li class="footer">Generated on Tue Aug 24 2021 16:18:50 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
