<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/WorkingMemHandle.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_working_mem_handle_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">WorkingMemHandle.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_working_mem_handle_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2021 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_layer_8hpp.xhtml">Layer.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_network_8hpp.xhtml">Network.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_working_mem_descriptor_8hpp.xhtml">WorkingMemDescriptor.hpp</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_working_mem_handle_8hpp.xhtml">armnn/IWorkingMemHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_8hpp.xhtml">armnn/Tensor.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;mutex&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">namespace </span>experimental</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml">   24</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml">WorkingMemHandle</a> final : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <a class="code" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a2861ce689f84a9bc8cdbbc43d7109f36">WorkingMemHandle</a>(<a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkId,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                     std::vector&lt;WorkingMemDescriptor&gt; workingMemDescriptors,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                     std::unordered_map&lt;LayerGuid, WorkingMemDescriptor&gt; workingMemDescriptorMap,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                     std::vector&lt;std::shared_ptr&lt;IMemoryManager&gt;&gt; memoryManagers,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                     std::unordered_map&lt;<a class="code" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a>, std::vector&lt;std::unique_ptr&lt;ITensorHandle&gt; &gt; &gt; ownedTensorHandles);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a37c7b7f79e6b8dc05aaf5926fd975622">   34</a></span>&#160;    <a class="code" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a37c7b7f79e6b8dc05aaf5926fd975622">~WorkingMemHandle</a>()</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    { <a class="code" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a2688c89e6bdec61e0f483d9be6fd688c">Free</a>(); }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a6d485a38c5d662a4aa9471587b4688bb">   37</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> <a class="code" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a6d485a38c5d662a4aa9471587b4688bb">GetNetworkId</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">return</span> m_NetworkId;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    /// Allocate the backing memory required for execution. If this is not called, then allocation will be</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">    /// deferred to execution time. The mutex must be locked.</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a8518772c5d692e334a76617582b10b92">Allocate</a>() <span class="keyword">override</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">    /// Free the backing memory required for execution. The mutex must be locked.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a2688c89e6bdec61e0f483d9be6fd688c">Free</a>() <span class="keyword">override</span>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">    /// IsAllocated returns true if the backing memory is currently allocated. The mutex must be locked.</span></div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a1a573373f4505385578f830caebf6adb">   52</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a1a573373f4505385578f830caebf6adb">IsAllocated</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">return</span> m_IsAllocated;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    /// Get a mutex which can be used for synchronizing access to the WorkingMemHandle object.</span></div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#aa1985d354ac4640b403702a4e882f852">   58</a></span>&#160;<span class="comment"></span>    std::mutex&amp; <a class="code" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#aa1985d354ac4640b403702a4e882f852">GetMutex</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">return</span> m_Mutex;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">    /// Get the WorkingMemDescriptor for a Layer. The mutex must be locked.</span></div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a70e0e7889988786ac840bf2785f3db95">   64</a></span>&#160;<span class="comment"></span>    <a class="code" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a>&amp; <a class="code" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a70e0e7889988786ac840bf2785f3db95">GetWorkingMemDescriptor</a>(<a class="code" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a> <span class="keywordtype">id</span>)<span class="keyword"> override</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">auto</span> result = m_WorkingMemDescriptorMap.find(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(result != m_WorkingMemDescriptorMap.end());</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">return</span> result-&gt;second;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">    /// Get the WorkingMemDescriptor at an index. The WorkingMemDescriptors are stored in the same order as</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">    /// the Workloads in a topologically sorted graph. The mutex must be locked.</span></div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a1915a1eb2ba2554103a09de391a9f6bd">   73</a></span>&#160;<span class="comment"></span>    <a class="code" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a>&amp; <a class="code" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a1915a1eb2ba2554103a09de391a9f6bd">GetWorkingMemDescriptorAt</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keywordtype">id</span>)<span class="keyword"> override</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">return</span> m_WorkingMemDescriptors[id];</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> m_NetworkId;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    std::shared_ptr&lt;ProfilerImpl&gt; m_Profiler;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    std::vector&lt;WorkingMemDescriptor&gt; m_WorkingMemDescriptors;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    std::unordered_map&lt;LayerGuid, WorkingMemDescriptor&gt; m_WorkingMemDescriptorMap;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// Vector of IMemoryManagers that manage the WorkingMemHandle&#39;s memory</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    std::vector&lt;std::shared_ptr&lt;IMemoryManager&gt;&gt; m_MemoryManagers;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment">// TensorHandles owned by this WorkingMemHandle</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">// constant tensor&#39;s can be shared by multiple WorkingMemHandles and so will not be stored here</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    std::unordered_map&lt;LayerGuid, std::vector&lt;std::unique_ptr&lt;ITensorHandle&gt; &gt; &gt;  m_OwnedTensorHandles;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordtype">bool</span> m_IsAllocated;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    std::mutex m_Mutex;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;};</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;} <span class="comment">// end experimental namespace</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;} <span class="comment">// end armnn namespace</span></div><div class="ttc" id="_tensor_8hpp_xhtml"><div class="ttname"><a href="_tensor_8hpp.xhtml">Tensor.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_working_mem_handle_xhtml_a1915a1eb2ba2554103a09de391a9f6bd"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a1915a1eb2ba2554103a09de391a9f6bd">armnn::experimental::WorkingMemHandle::GetWorkingMemDescriptorAt</a></div><div class="ttdeci">WorkingMemDescriptor &amp; GetWorkingMemDescriptorAt(unsigned int id) override</div><div class="ttdoc">Get the WorkingMemDescriptor at an index. </div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_handle_8hpp_source.xhtml#l00073">WorkingMemHandle.hpp:73</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__software__tools_8dox_source.xhtml#l00006">01_00_software_tools.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_working_mem_handle_xhtml_a6d485a38c5d662a4aa9471587b4688bb"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a6d485a38c5d662a4aa9471587b4688bb">armnn::experimental::WorkingMemHandle::GetNetworkId</a></div><div class="ttdeci">NetworkId GetNetworkId() override</div><div class="ttdoc">Returns the NetworkId of the Network that this IWorkingMemHandle works with. </div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_handle_8hpp_source.xhtml#l00037">WorkingMemHandle.hpp:37</a></div></div>
<div class="ttc" id="structarmnn_1_1experimental_1_1_working_mem_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">armnn::experimental::WorkingMemDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_descriptor_8hpp_source.xhtml#l00018">WorkingMemDescriptor.hpp:18</a></div></div>
<div class="ttc" id="_i_working_mem_handle_8hpp_xhtml"><div class="ttname"><a href="_i_working_mem_handle_8hpp.xhtml">IWorkingMemHandle.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_working_mem_handle_xhtml_a70e0e7889988786ac840bf2785f3db95"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a70e0e7889988786ac840bf2785f3db95">armnn::experimental::WorkingMemHandle::GetWorkingMemDescriptor</a></div><div class="ttdeci">WorkingMemDescriptor &amp; GetWorkingMemDescriptor(LayerGuid id) override</div><div class="ttdoc">Get the WorkingMemDescriptor for a Layer. The mutex must be locked. </div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_handle_8hpp_source.xhtml#l00064">WorkingMemHandle.hpp:64</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00024">IRuntime.hpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_i_working_mem_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">armnn::experimental::IWorkingMemHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_working_mem_handle_8hpp_source.xhtml#l00020">IWorkingMemHandle.hpp:20</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_working_mem_handle_xhtml_a8518772c5d692e334a76617582b10b92"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a8518772c5d692e334a76617582b10b92">armnn::experimental::WorkingMemHandle::Allocate</a></div><div class="ttdeci">void Allocate() override</div><div class="ttdoc">Allocate the backing memory required for execution. </div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_handle_8cpp_source.xhtml#l00033">WorkingMemHandle.cpp:33</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_working_mem_handle_xhtml_a37c7b7f79e6b8dc05aaf5926fd975622"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a37c7b7f79e6b8dc05aaf5926fd975622">armnn::experimental::WorkingMemHandle::~WorkingMemHandle</a></div><div class="ttdeci">~WorkingMemHandle()</div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_handle_8hpp_source.xhtml#l00034">WorkingMemHandle.hpp:34</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_working_mem_handle_xhtml_aa1985d354ac4640b403702a4e882f852"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#aa1985d354ac4640b403702a4e882f852">armnn::experimental::WorkingMemHandle::GetMutex</a></div><div class="ttdeci">std::mutex &amp; GetMutex() override</div><div class="ttdoc">Get a mutex which can be used for synchronizing access to the WorkingMemHandle object. </div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_handle_8hpp_source.xhtml#l00058">WorkingMemHandle.hpp:58</a></div></div>
<div class="ttc" id="_layer_8hpp_xhtml"><div class="ttname"><a href="_layer_8hpp.xhtml">Layer.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_working_mem_handle_xhtml_a1a573373f4505385578f830caebf6adb"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a1a573373f4505385578f830caebf6adb">armnn::experimental::WorkingMemHandle::IsAllocated</a></div><div class="ttdeci">bool IsAllocated() override</div><div class="ttdoc">IsAllocated returns true if the backing memory is currently allocated. The mutex must be locked...</div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_handle_8hpp_source.xhtml#l00052">WorkingMemHandle.hpp:52</a></div></div>
<div class="ttc" id="_network_8hpp_xhtml"><div class="ttname"><a href="_network_8hpp.xhtml">Network.hpp</a></div></div>
<div class="ttc" id="_working_mem_descriptor_8hpp_xhtml"><div class="ttname"><a href="_working_mem_descriptor_8hpp.xhtml">WorkingMemDescriptor.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_afad4088a9a058114ee5f87246f87bf49"><div class="ttname"><a href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">armnn::LayerGuid</a></div><div class="ttdeci">profiling::ProfilingGuid LayerGuid</div><div class="ttdoc">Define LayerGuid type. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00313">Types.hpp:313</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_working_mem_handle_xhtml_a2861ce689f84a9bc8cdbbc43d7109f36"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a2861ce689f84a9bc8cdbbc43d7109f36">armnn::experimental::WorkingMemHandle::WorkingMemHandle</a></div><div class="ttdeci">WorkingMemHandle(NetworkId networkId, std::vector&lt; WorkingMemDescriptor &gt; workingMemDescriptors, std::unordered_map&lt; LayerGuid, WorkingMemDescriptor &gt; workingMemDescriptorMap, std::vector&lt; std::shared_ptr&lt; IMemoryManager &gt;&gt; memoryManagers, std::unordered_map&lt; LayerGuid, std::vector&lt; std::unique_ptr&lt; ITensorHandle &gt; &gt; &gt; ownedTensorHandles)</div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_handle_8cpp_source.xhtml#l00017">WorkingMemHandle.cpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_working_mem_handle_xhtml_a2688c89e6bdec61e0f483d9be6fd688c"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a2688c89e6bdec61e0f483d9be6fd688c">armnn::experimental::WorkingMemHandle::Free</a></div><div class="ttdeci">void Free() override</div><div class="ttdoc">Free the backing memory required for execution. The mutex must be locked. </div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_handle_8cpp_source.xhtml#l00047">WorkingMemHandle.cpp:47</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_working_mem_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml">armnn::experimental::WorkingMemHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_handle_8hpp_source.xhtml#l00024">WorkingMemHandle.hpp:24</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_working_mem_handle_8hpp.xhtml">WorkingMemHandle.hpp</a></li>
    <li class="footer">Generated on Tue Aug 24 2021 16:18:20 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
