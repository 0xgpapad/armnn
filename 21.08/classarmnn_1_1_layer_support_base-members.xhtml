<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: Member List</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_layer_support_base.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">LayerSupportBase Member List</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is the complete list of members for <a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a>, including all inherited members.</p>
<table class="directory">
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aab2a487bc88047443d8a0f87c3c40b8d">ILayerSupport</a>()</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#abd7fa8c2233f8a653e30ae2f3b839d92">IsAbsSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">IsActivationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a48177e22e47448adb3d83e145dadf735">IsAdditionSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0f4841f89f21fd794786b4c03c2425fd">IsArgMinMaxSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a67c970dd054b991e14369de523ca3a5a">IsBatchNormalizationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc5695cc25f4055c7ed54bdc8604a098">IsBatchToSpaceNdSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ae18f598a589683c3094a7bb41dcd3a3e">IsCastSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a7c52726a684dd76258c61af124012537">IsComparisonSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ComparisonDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a1542179a03961e3635bb5bef993c8e0e">IsConcatSupported</a>(const std::vector&lt; const TensorInfo *&gt; inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">IsConstantSupported</a>(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad330b6e7dcf25410ea878af0557f2197">IsConvertBf16ToFp32Supported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">IsConvertFp16ToFp32Supported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0947498c6cc747db6219a22132a1b89a">IsConvertFp32ToBf16Supported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">IsConvertFp32ToFp16Supported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">IsConvolution2dSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a87a66c5e87a19534ce3e6c374c9b8f09">IsDebugSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a128fb9890897e08251a3f621e570cd23">IsDepthToSpaceSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc84390751f227fe03a115b5fa10b0fc">IsDepthwiseConvolutionSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">IsDequantizeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a50af275d7755a5bb1be69736d7e4b02f">IsDetectionPostProcessSupported</a>(const TensorInfo &amp;boxEncodings, const TensorInfo &amp;scores, const TensorInfo &amp;anchors, const TensorInfo &amp;detectionBoxes, const TensorInfo &amp;detectionClasses, const TensorInfo &amp;detectionScores, const TensorInfo &amp;numDetections, const DetectionPostProcessDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a55d91a97ff664f42cd5cd62b60c15f80">IsDilatedDepthwiseConvolutionSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a08f55136b1f0907e7083d70d719f697f">IsDivisionSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a61c5b4e5dc224ef0c876e43353b34030">IsElementwiseUnarySupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#afb6ad04c6ff234b193f3dfc0cfabcbd5">IsEqualSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aab7318aa8adc0a8a3b6a1780cfc1f90b">IsFakeQuantizationSupported</a>(const TensorInfo &amp;input, const FakeQuantizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#acc5d9a4c8f29984de3bbdca87684f317">IsFillSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const FillDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">IsFloorSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">IsFullyConnectedSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const TensorInfo &amp;biases, const FullyConnectedDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aef77aa4bb0e68e88dcf5ab8b5882a2d3">IsGatherSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a2f51fda38409c3768a7bd28cedf3f075">IsGatherSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const GatherDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a14e45f3699e823d7859d5d352d89265c">IsGreaterSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">IsInputSupported</a>(const TensorInfo &amp;input, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0813546a09bf2caba6794014d1960624">IsInstanceNormalizationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aca4acda7ab553edfda828658d8f3882b">IsL2NormalizationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8fab6937a1010b5ed674b930b4f143cb">IsLogicalBinarySupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const LogicalBinaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a20134883695508a2192eecd403e7c44b">IsLogicalUnarySupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">IsLogSoftmaxSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a862535721737220f62a49f14ff494dd5">IsLstmSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#afef9436c86b37b973471f2ae546ac00a">IsMaximumSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">IsMeanSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9d25fabf725313fda40a41400155bafe">IsMemCopySupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a334181d8098b943d03ccd820753ace75">IsMemImportSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a77ae1b686e92a561de76388ac55cab06">IsMergerSupported</a>(const std::vector&lt; const TensorInfo *&gt; inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa9bbc383cac59d6f02d2ef7d2cc0076f">IsMergeSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3d0eafb3de560b3482f857b56b2b2116">IsMinimumSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a421e1f3865d99d52613003048342c49a">IsMultiplicationSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">IsNormalizationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">IsOutputSupported</a>(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0534291adf9f3436ba331552eba29a43">IsPadSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9d553495d9a94fa55588ae159d8bda30">IsPermuteSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">IsPooling2dSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc1a598f2f572564818e3d343af93486">IsPreCompiledSupported</a>(const TensorInfo &amp;input, const PreCompiledDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a93cf81b28c4275a338f41c536a451158">IsPreluSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adf54bcad228c0ac21f6735d31460cf31">IsQLstmSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af1be52d9f968bfab069344756bf232c4">IsQuantizedLstmSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QuantizedLstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad2c7be6b84b04444e514f52f593b3df7">IsQuantizeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a707638bc045d261dff4faaf4a2acc72b">IsRankSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a917c126e64314263b8b5f7bca455ddfb">IsReduceSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReduceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">IsReshapeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReshapeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0f29f31e1ba46a52eedcdecd34f4cc24">IsResizeBilinearSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">IsResizeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a10ae4d84b0d31580f6fcd5107322ebcf">IsRsqrtSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3c6816950ad290155bde03b7fb31e160">IsShapeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">IsSliceSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8385cf8227907904a6a86fac318fc099">IsSoftmaxSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3adfc31e079a970e028e537ec05fabf5">IsSpaceToBatchNdSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">IsSpaceToDepthSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a17dd12822d49a23d24198f425a6fb9c4">IsSplitterSupported</a>(const TensorInfo &amp;input, const ViewsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa746e752ce8874669ea549f8e50896da">IsSplitterSupported</a>(const TensorInfo &amp;input, const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt;&gt; &amp;outputs, const ViewsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">IsStackSupported</a>(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a68a4c180fc48e266995db8596f6279d3">IsStandInSupported</a>(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const std::vector&lt; const TensorInfo *&gt; &amp;outputs, const StandInDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ac054cb25099005eac854afb1511340f0">IsStridedSliceSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">IsSubtractionSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8c12a49b0d261836c11a57916e01805d">IsSwitchSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output0, const TensorInfo &amp;output1, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0c69484f19ed650ad48b716719114e51">IsTransposeConvolution2dSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0189645f33641b280877a1b2f6ba9fee">IsTransposeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aceff0e3aa5ba49b0fdcfc66f2bd31b5c">IsUnidirectionalSequenceLstmSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;output, const Optional&lt; TensorInfo &gt; &amp;hiddenStateOutput, const Optional&lt; TensorInfo &gt; &amp;cellStateOutput, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9e7f4f28576904804cd759e49173beeb">~ILayerSupport</a>()</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></td></tr>
</table></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Tue Aug 24 2021 16:18:49 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
