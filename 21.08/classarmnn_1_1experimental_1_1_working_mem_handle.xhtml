<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: WorkingMemHandle Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1experimental_1_1_working_mem_handle.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1experimental_1_1_working_mem_handle-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">WorkingMemHandle Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for WorkingMemHandle:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1experimental_1_1_working_mem_handle.png" usemap="#WorkingMemHandle_map" alt=""/>
  <map id="WorkingMemHandle_map" name="WorkingMemHandle_map">
<area href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml" alt="IWorkingMemHandle" shape="rect" coords="0,0,128,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a2861ce689f84a9bc8cdbbc43d7109f36"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a2861ce689f84a9bc8cdbbc43d7109f36">WorkingMemHandle</a> (<a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkId, std::vector&lt; <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &gt; workingMemDescriptors, std::unordered_map&lt; <a class="el" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a>, <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &gt; workingMemDescriptorMap, std::vector&lt; std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;&gt; memoryManagers, std::unordered_map&lt; <a class="el" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a>, std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt; &gt; &gt; ownedTensorHandles)</td></tr>
<tr class="separator:a2861ce689f84a9bc8cdbbc43d7109f36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37c7b7f79e6b8dc05aaf5926fd975622"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a37c7b7f79e6b8dc05aaf5926fd975622">~WorkingMemHandle</a> ()</td></tr>
<tr class="separator:a37c7b7f79e6b8dc05aaf5926fd975622"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d485a38c5d662a4aa9471587b4688bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a6d485a38c5d662a4aa9471587b4688bb">GetNetworkId</a> () override</td></tr>
<tr class="memdesc:a6d485a38c5d662a4aa9471587b4688bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the NetworkId of the Network that this <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a> works with.  <a href="#a6d485a38c5d662a4aa9471587b4688bb">More...</a><br /></td></tr>
<tr class="separator:a6d485a38c5d662a4aa9471587b4688bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8518772c5d692e334a76617582b10b92"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a8518772c5d692e334a76617582b10b92">Allocate</a> () override</td></tr>
<tr class="memdesc:a8518772c5d692e334a76617582b10b92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate the backing memory required for execution.  <a href="#a8518772c5d692e334a76617582b10b92">More...</a><br /></td></tr>
<tr class="separator:a8518772c5d692e334a76617582b10b92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2688c89e6bdec61e0f483d9be6fd688c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a2688c89e6bdec61e0f483d9be6fd688c">Free</a> () override</td></tr>
<tr class="memdesc:a2688c89e6bdec61e0f483d9be6fd688c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free the backing memory required for execution. The mutex must be locked.  <a href="#a2688c89e6bdec61e0f483d9be6fd688c">More...</a><br /></td></tr>
<tr class="separator:a2688c89e6bdec61e0f483d9be6fd688c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a573373f4505385578f830caebf6adb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a1a573373f4505385578f830caebf6adb">IsAllocated</a> () override</td></tr>
<tr class="memdesc:a1a573373f4505385578f830caebf6adb"><td class="mdescLeft">&#160;</td><td class="mdescRight">IsAllocated returns true if the backing memory is currently allocated. The mutex must be locked.  <a href="#a1a573373f4505385578f830caebf6adb">More...</a><br /></td></tr>
<tr class="separator:a1a573373f4505385578f830caebf6adb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1985d354ac4640b403702a4e882f852"><td class="memItemLeft" align="right" valign="top">std::mutex &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#aa1985d354ac4640b403702a4e882f852">GetMutex</a> () override</td></tr>
<tr class="memdesc:aa1985d354ac4640b403702a4e882f852"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a mutex which can be used for synchronizing access to the <a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml">WorkingMemHandle</a> object.  <a href="#aa1985d354ac4640b403702a4e882f852">More...</a><br /></td></tr>
<tr class="separator:aa1985d354ac4640b403702a4e882f852"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70e0e7889988786ac840bf2785f3db95"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a70e0e7889988786ac840bf2785f3db95">GetWorkingMemDescriptor</a> (<a class="el" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a> id) override</td></tr>
<tr class="memdesc:a70e0e7889988786ac840bf2785f3db95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> for a <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a>. The mutex must be locked.  <a href="#a70e0e7889988786ac840bf2785f3db95">More...</a><br /></td></tr>
<tr class="separator:a70e0e7889988786ac840bf2785f3db95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1915a1eb2ba2554103a09de391a9f6bd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a1915a1eb2ba2554103a09de391a9f6bd">GetWorkingMemDescriptorAt</a> (unsigned int id) override</td></tr>
<tr class="memdesc:a1915a1eb2ba2554103a09de391a9f6bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> at an index.  <a href="#a1915a1eb2ba2554103a09de391a9f6bd">More...</a><br /></td></tr>
<tr class="separator:a1915a1eb2ba2554103a09de391a9f6bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1experimental_1_1_i_working_mem_handle"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1experimental_1_1_i_working_mem_handle')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a></td></tr>
<tr class="memitem:aee41760526014b30f5daa1177357eb0d inherit pub_methods_classarmnn_1_1experimental_1_1_i_working_mem_handle"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#aee41760526014b30f5daa1177357eb0d">~IWorkingMemHandle</a> ()</td></tr>
<tr class="separator:aee41760526014b30f5daa1177357eb0d inherit pub_methods_classarmnn_1_1experimental_1_1_i_working_mem_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00024">24</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a2861ce689f84a9bc8cdbbc43d7109f36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2861ce689f84a9bc8cdbbc43d7109f36">&#9670;&nbsp;</a></span>WorkingMemHandle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml">WorkingMemHandle</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &gt;&#160;</td>
          <td class="paramname"><em>workingMemDescriptors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::unordered_map&lt; <a class="el" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a>, <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &gt;&#160;</td>
          <td class="paramname"><em>workingMemDescriptorMap</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;&gt;&#160;</td>
          <td class="paramname"><em>memoryManagers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::unordered_map&lt; <a class="el" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a>, std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt; &gt; &gt;&#160;</td>
          <td class="paramname"><em>ownedTensorHandles</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00017">17</a> of file <a class="el" href="_working_mem_handle_8cpp_source.xhtml">WorkingMemHandle.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;                                                                                                   :</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    m_NetworkId(networkId),</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    m_WorkingMemDescriptors(workingMemDescriptors),</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    m_WorkingMemDescriptorMap(workingMemDescriptorMap),</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    m_MemoryManagers(memoryManagers),</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    m_OwnedTensorHandles(std::move(ownedTensorHandles)),</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    m_IsAllocated(<span class="keyword">false</span>),</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    m_Mutex()</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a37c7b7f79e6b8dc05aaf5926fd975622"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37c7b7f79e6b8dc05aaf5926fd975622">&#9670;&nbsp;</a></span>~WorkingMemHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml">WorkingMemHandle</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00034">34</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">References <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00047">WorkingMemHandle::Free()</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    { <a class="code" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a2688c89e6bdec61e0f483d9be6fd688c">Free</a>(); }</div><div class="ttc" id="classarmnn_1_1experimental_1_1_working_mem_handle_xhtml_a2688c89e6bdec61e0f483d9be6fd688c"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a2688c89e6bdec61e0f483d9be6fd688c">armnn::experimental::WorkingMemHandle::Free</a></div><div class="ttdeci">void Free() override</div><div class="ttdoc">Free the backing memory required for execution. The mutex must be locked. </div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_handle_8cpp_source.xhtml#l00047">WorkingMemHandle.cpp:47</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a8518772c5d692e334a76617582b10b92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8518772c5d692e334a76617582b10b92">&#9670;&nbsp;</a></span>Allocate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Allocate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocate the backing memory required for execution. </p>
<p>If this is not called, then allocation will be deferred to execution time. The mutex must be locked. </p>

<p>Implements <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#a5cceed8b707a09bf27eb61f17acf8a88">IWorkingMemHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="_working_mem_handle_8cpp_source.xhtml">WorkingMemHandle.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01003">LoadedNetwork::Execute()</a>, and <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00037">WorkingMemHandle::GetNetworkId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">if</span> (m_IsAllocated)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    }</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    m_IsAllocated = <span class="keyword">true</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; mgr : m_MemoryManagers)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        mgr-&gt;Acquire();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2688c89e6bdec61e0f483d9be6fd688c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2688c89e6bdec61e0f483d9be6fd688c">&#9670;&nbsp;</a></span>Free()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Free </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Free the backing memory required for execution. The mutex must be locked. </p>

<p>Implements <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#a49db2bfde3ca4fac7d1042a3aa5778aa">IWorkingMemHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00047">47</a> of file <a class="el" href="_working_mem_handle_8cpp_source.xhtml">WorkingMemHandle.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00037">WorkingMemHandle::GetNetworkId()</a>, and <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00034">WorkingMemHandle::~WorkingMemHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span> (!m_IsAllocated)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    m_IsAllocated = <span class="keyword">false</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; mgr : m_MemoryManagers)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        mgr-&gt;Release();</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa1985d354ac4640b403702a4e882f852"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1985d354ac4640b403702a4e882f852">&#9670;&nbsp;</a></span>GetMutex()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::mutex&amp; GetMutex </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a mutex which can be used for synchronizing access to the <a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml">WorkingMemHandle</a> object. </p>

<p>Implements <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#a8d41fbba884e7545d790228f59e36cee">IWorkingMemHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00058">58</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01003">LoadedNetwork::Execute()</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">return</span> m_Mutex;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a6d485a38c5d662a4aa9471587b4688bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d485a38c5d662a4aa9471587b4688bb">&#9670;&nbsp;</a></span>GetNetworkId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> GetNetworkId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the NetworkId of the Network that this <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a> works with. </p>

<p>Implements <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#abd6c4b9a4ef8432f47d0df514cd4a014">IWorkingMemHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00037">37</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">References <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00033">WorkingMemHandle::Allocate()</a>, and <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00047">WorkingMemHandle::Free()</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">return</span> m_NetworkId;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a70e0e7889988786ac840bf2785f3db95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70e0e7889988786ac840bf2785f3db95">&#9670;&nbsp;</a></span>GetWorkingMemDescriptor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a>&amp; GetWorkingMemDescriptor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> for a <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a>. The mutex must be locked. </p>

<p>Implements <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#a7dff4a1178f4339890153f2314056e50">IWorkingMemHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00064">64</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l00781">LoadedNetwork::FreeWorkingMemory()</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">auto</span> result = m_WorkingMemDescriptorMap.find(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(result != m_WorkingMemDescriptorMap.end());</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">return</span> result-&gt;second;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1915a1eb2ba2554103a09de391a9f6bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1915a1eb2ba2554103a09de391a9f6bd">&#9670;&nbsp;</a></span>GetWorkingMemDescriptorAt()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a>&amp; GetWorkingMemDescriptorAt </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> at an index. </p>
<p>The WorkingMemDescriptors are stored in the same order as the Workloads in a topologically sorted graph. The mutex must be locked. </p>

<p>Implements <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#a43a1da35a1d1d6f78f656717736ad99c">IWorkingMemHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00073">73</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01003">LoadedNetwork::Execute()</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">return</span> m_WorkingMemDescriptors[id];</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a1a573373f4505385578f830caebf6adb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a573373f4505385578f830caebf6adb">&#9670;&nbsp;</a></span>IsAllocated()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAllocated </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>IsAllocated returns true if the backing memory is currently allocated. The mutex must be locked. </p>

<p>Implements <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#a7dc65e81254ebe49a20d5d420fb4f47f">IWorkingMemHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00052">52</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01003">LoadedNetwork::Execute()</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">return</span> m_IsAllocated;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/<a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a></li>
<li>src/armnn/<a class="el" href="_working_mem_handle_8cpp_source.xhtml">WorkingMemHandle.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml">WorkingMemHandle</a></li>
    <li class="footer">Generated on Tue Aug 24 2021 16:18:51 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
