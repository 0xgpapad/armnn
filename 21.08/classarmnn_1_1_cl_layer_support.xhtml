<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: ClLayerSupport Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_cl_layer_support.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_cl_layer_support-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ClLayerSupport Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_cl_layer_support_8hpp_source.xhtml">ClLayerSupport.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ClLayerSupport:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_cl_layer_support.png" usemap="#ClLayerSupport_map" alt=""/>
  <map id="ClLayerSupport_map" name="ClLayerSupport_map">
<area href="classarmnn_1_1_layer_support_base.xhtml" alt="LayerSupportBase" shape="rect" coords="0,56,117,80"/>
<area href="classarmnn_1_1_i_layer_support.xhtml" alt="ILayerSupport" shape="rect" coords="0,0,117,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:adcaa3eb3d4e1bf48a235b97170dccd15"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adcaa3eb3d4e1bf48a235b97170dccd15">ClLayerSupport</a> (const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> &amp;modelContextPtr)</td></tr>
<tr class="separator:adcaa3eb3d4e1bf48a235b97170dccd15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1dc1384ae65a68453cd3f5fd4a6adbd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ac1dc1384ae65a68453cd3f5fd4a6adbd">ClLayerSupport</a> ()</td></tr>
<tr class="separator:ac1dc1384ae65a68453cd3f5fd4a6adbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35c41b0cdf5faf11fb39554c269e7f9b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a35c41b0cdf5faf11fb39554c269e7f9b">~ClLayerSupport</a> ()</td></tr>
<tr class="separator:a35c41b0cdf5faf11fb39554c269e7f9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd7fa8c2233f8a653e30ae2f3b839d92"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#abd7fa8c2233f8a653e30ae2f3b839d92">IsAbsSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abd7fa8c2233f8a653e30ae2f3b839d92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3adb3a28736529682e4ff0ea976dcd3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">IsActivationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab3adb3a28736529682e4ff0ea976dcd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48177e22e47448adb3d83e145dadf735"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">IsAdditionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a48177e22e47448adb3d83e145dadf735"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f4841f89f21fd794786b4c03c2425fd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">IsArgMinMaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0f4841f89f21fd794786b4c03c2425fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67c970dd054b991e14369de523ca3a5a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">IsBatchNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;mean, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;var, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;beta, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;gamma, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a67c970dd054b991e14369de523ca3a5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc5695cc25f4055c7ed54bdc8604a098"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">IsBatchToSpaceNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adc5695cc25f4055c7ed54bdc8604a098"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae18f598a589683c3094a7bb41dcd3a3e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ae18f598a589683c3094a7bb41dcd3a3e">IsCastSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae18f598a589683c3094a7bb41dcd3a3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad16b29b7f1c73187775e7b1d044d7bc0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad16b29b7f1c73187775e7b1d044d7bc0">IsComparisonSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;ouput, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad16b29b7f1c73187775e7b1d044d7bc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dca8ffbcb5f3afa1799aa7d354a3016"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a3dca8ffbcb5f3afa1799aa7d354a3016">IsConcatSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">ConcatDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3dca8ffbcb5f3afa1799aa7d354a3016"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf18c4fa8fc9e0cdae1967990aa90fe8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">IsConstantSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adf18c4fa8fc9e0cdae1967990aa90fe8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1efcaf6f02892442fefca09f49ea3d7c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">IsConvertFp16ToFp32Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a1efcaf6f02892442fefca09f49ea3d7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91fb5f44d8b9427dc45443aa9ebfe13e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">IsConvertFp32ToFp16Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a91fb5f44d8b9427dc45443aa9ebfe13e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7ff06bd8115a6a9cc6d41e5c762798e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">IsConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;biases, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af7ff06bd8115a6a9cc6d41e5c762798e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e89c72cf60df7c2d2d7e5d98822b672"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">IsDequantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a2e89c72cf60df7c2d2d7e5d98822b672"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a128fb9890897e08251a3f621e570cd23"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">IsDepthToSpaceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a128fb9890897e08251a3f621e570cd23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc84390751f227fe03a115b5fa10b0fc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">IsDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;biases, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adc84390751f227fe03a115b5fa10b0fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16c8cd49a7fa487b904b5c9cc83673e7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a16c8cd49a7fa487b904b5c9cc83673e7">IsDilatedDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;biases, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reason=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a16c8cd49a7fa487b904b5c9cc83673e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08f55136b1f0907e7083d70d719f697f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f">IsDivisionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a08f55136b1f0907e7083d70d719f697f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d99bdae7b6b2d5d1243f21cd59befb8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a5d99bdae7b6b2d5d1243f21cd59befb8">IsElementwiseUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;ouput, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5d99bdae7b6b2d5d1243f21cd59befb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc5d9a4c8f29984de3bbdca87684f317"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">IsFillSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:acc5d9a4c8f29984de3bbdca87684f317"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53c7593d1aa26207eac5d5814a9d56dc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">IsFloorSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a53c7593d1aa26207eac5d5814a9d56dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaf971dd9dffd6f6bc7e5a1ae6b6af5c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">IsFullyConnectedSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;biases, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aeaf971dd9dffd6f6bc7e5a1ae6b6af5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e8fbdda1125eb5e22f14eacbe9fb351"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a5e8fbdda1125eb5e22f14eacbe9fb351">IsGatherSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported) const override</td></tr>
<tr class="separator:a5e8fbdda1125eb5e22f14eacbe9fb351"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7303c2656e267e10252a171e8bbc1d94"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a7303c2656e267e10252a171e8bbc1d94">IsGreaterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;ouput, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported) const override</td></tr>
<tr class="separator:a7303c2656e267e10252a171e8bbc1d94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad29d99ecd719c640ed22dcf5c688c6a5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">IsInputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad29d99ecd719c640ed22dcf5c688c6a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0813546a09bf2caba6794014d1960624"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0813546a09bf2caba6794014d1960624">IsInstanceNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0813546a09bf2caba6794014d1960624"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca4acda7ab553edfda828658d8f3882b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b">IsL2NormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aca4acda7ab553edfda828658d8f3882b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a772790c60d70814e30b5bec70fd98776"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a772790c60d70814e30b5bec70fd98776">IsLogicalBinarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported) const override</td></tr>
<tr class="separator:a772790c60d70814e30b5bec70fd98776"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0380b797cb9932fb03067dbe2cdecfb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">IsLogSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa0380b797cb9932fb03067dbe2cdecfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a862535721737220f62a49f14ff494dd5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a862535721737220f62a49f14ff494dd5">IsLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;outputStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;scratchBuffer, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;outputStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;paramsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a862535721737220f62a49f14ff494dd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afef9436c86b37b973471f2ae546ac00a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a">IsMaximumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:afef9436c86b37b973471f2ae546ac00a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab268618580d4f53bf5e9b5a47dee3f6a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">IsMeanSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab268618580d4f53bf5e9b5a47dee3f6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9309ea64f9f7447efe3567f77417d29"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa9309ea64f9f7447efe3567f77417d29">IsMergerSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="namespacearmnn.xhtml#a003d213dd28b0b8c0f26fbf268ccb975">MergerDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa9309ea64f9f7447efe3567f77417d29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d0eafb3de560b3482f857b56b2b2116"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116">IsMinimumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3d0eafb3de560b3482f857b56b2b2116"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a421e1f3865d99d52613003048342c49a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a421e1f3865d99d52613003048342c49a">IsMultiplicationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a421e1f3865d99d52613003048342c49a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a994c2065561141bf37fcd2ff7bb4af4d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">IsNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a994c2065561141bf37fcd2ff7bb4af4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef3244c0ef64c8f2f352d21ce0c06985"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">IsOutputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aef3244c0ef64c8f2f352d21ce0c06985"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0534291adf9f3436ba331552eba29a43"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43">IsPadSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0534291adf9f3436ba331552eba29a43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d553495d9a94fa55588ae159d8bda30"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30">IsPermuteSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9d553495d9a94fa55588ae159d8bda30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa955675303d67b1d1fb51fb7f09d8c21"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">IsPooling2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa955675303d67b1d1fb51fb7f09d8c21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b36dcedd5edbd5142b3548967aadc2f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f">IsPreluSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;alpha, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a4b36dcedd5edbd5142b3548967aadc2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf54bcad228c0ac21f6735d31460cf31"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31">IsQLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;previousOutputIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;previousCellStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;outputStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;paramsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adf54bcad228c0ac21f6735d31460cf31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1be52d9f968bfab069344756bf232c4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#af1be52d9f968bfab069344756bf232c4">IsQuantizedLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;previousCellStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;previousOutputIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateOut, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;paramsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af1be52d9f968bfab069344756bf232c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2c7be6b84b04444e514f52f593b3df7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7">IsQuantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad2c7be6b84b04444e514f52f593b3df7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a917c126e64314263b8b5f7bca455ddfb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a917c126e64314263b8b5f7bca455ddfb">IsReduceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a917c126e64314263b8b5f7bca455ddfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa02f01bbcb48c67f5b2efc4132ec5e86"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">IsReshapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa02f01bbcb48c67f5b2efc4132ec5e86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d27a3fc6a7df0b68d80cb113aff8b6c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">IsResizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3d27a3fc6a7df0b68d80cb113aff8b6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f29f31e1ba46a52eedcdecd34f4cc24"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0f29f31e1ba46a52eedcdecd34f4cc24">IsResizeBilinearSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0f29f31e1ba46a52eedcdecd34f4cc24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10ae4d84b0d31580f6fcd5107322ebcf"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a10ae4d84b0d31580f6fcd5107322ebcf">IsRsqrtSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a10ae4d84b0d31580f6fcd5107322ebcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e14dafa85cfcd4a6b6b752284b51e63"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">IsSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0e14dafa85cfcd4a6b6b752284b51e63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8385cf8227907904a6a86fac318fc099"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099">IsSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a8385cf8227907904a6a86fac318fc099"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3adfc31e079a970e028e537ec05fabf5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5">IsSpaceToBatchNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3adfc31e079a970e028e537ec05fabf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2af1e7da9490d29e569d271e16b0d5c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">IsSpaceToDepthSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab2af1e7da9490d29e569d271e16b0d5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17dd12822d49a23d24198f425a6fb9c4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a17dd12822d49a23d24198f425a6fb9c4">IsSplitterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a17dd12822d49a23d24198f425a6fb9c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa746e752ce8874669ea549f8e50896da"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa746e752ce8874669ea549f8e50896da">IsSplitterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;outputs, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa746e752ce8874669ea549f8e50896da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4609f1baf5fcd295951f3c8abdffd90"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">IsStackSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab4609f1baf5fcd295951f3c8abdffd90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac054cb25099005eac854afb1511340f0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ac054cb25099005eac854afb1511340f0">IsStridedSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac054cb25099005eac854afb1511340f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6c947e4d4b25bc49d92d18d4ff26736"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">IsSubtractionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af6c947e4d4b25bc49d92d18d4ff26736"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c69484f19ed650ad48b716719114e51"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">IsTransposeConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;biases, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0c69484f19ed650ad48b716719114e51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0189645f33641b280877a1b2f6ba9fee"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee">IsTransposeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0189645f33641b280877a1b2f6ba9fee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_layer_support_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_layer_support_base')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td></tr>
<tr class="memitem:ad330b6e7dcf25410ea878af0557f2197 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad330b6e7dcf25410ea878af0557f2197">IsConvertBf16ToFp32Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad330b6e7dcf25410ea878af0557f2197 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0947498c6cc747db6219a22132a1b89a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0947498c6cc747db6219a22132a1b89a">IsConvertFp32ToBf16Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0947498c6cc747db6219a22132a1b89a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87a66c5e87a19534ce3e6c374c9b8f09 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a87a66c5e87a19534ce3e6c374c9b8f09">IsDebugSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a87a66c5e87a19534ce3e6c374c9b8f09 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50af275d7755a5bb1be69736d7e4b02f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a50af275d7755a5bb1be69736d7e4b02f">IsDetectionPostProcessSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;boxEncodings, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;scores, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;anchors, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;detectionBoxes, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;detectionClasses, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;detectionScores, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;numDetections, const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a50af275d7755a5bb1be69736d7e4b02f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb6ad04c6ff234b193f3dfc0cfabcbd5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#afb6ad04c6ff234b193f3dfc0cfabcbd5">IsEqualSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:afb6ad04c6ff234b193f3dfc0cfabcbd5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab7318aa8adc0a8a3b6a1780cfc1f90b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aab7318aa8adc0a8a3b6a1780cfc1f90b">IsFakeQuantizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aab7318aa8adc0a8a3b6a1780cfc1f90b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef77aa4bb0e68e88dcf5ab8b5882a2d3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aef77aa4bb0e68e88dcf5ab8b5882a2d3">IsGatherSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aef77aa4bb0e68e88dcf5ab8b5882a2d3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20134883695508a2192eecd403e7c44b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a20134883695508a2192eecd403e7c44b">IsLogicalUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a20134883695508a2192eecd403e7c44b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d25fabf725313fda40a41400155bafe inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9d25fabf725313fda40a41400155bafe">IsMemCopySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9d25fabf725313fda40a41400155bafe inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a334181d8098b943d03ccd820753ace75 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a334181d8098b943d03ccd820753ace75">IsMemImportSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a334181d8098b943d03ccd820753ace75 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9bbc383cac59d6f02d2ef7d2cc0076f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa9bbc383cac59d6f02d2ef7d2cc0076f">IsMergeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa9bbc383cac59d6f02d2ef7d2cc0076f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc1a598f2f572564818e3d343af93486 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc1a598f2f572564818e3d343af93486">IsPreCompiledSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adc1a598f2f572564818e3d343af93486 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a707638bc045d261dff4faaf4a2acc72b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a707638bc045d261dff4faaf4a2acc72b">IsRankSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported) const override</td></tr>
<tr class="separator:a707638bc045d261dff4faaf4a2acc72b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c6816950ad290155bde03b7fb31e160 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3c6816950ad290155bde03b7fb31e160">IsShapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3c6816950ad290155bde03b7fb31e160 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68a4c180fc48e266995db8596f6279d3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a68a4c180fc48e266995db8596f6279d3">IsStandInSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;inputs, const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;outputs, const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;descriptor, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a68a4c180fc48e266995db8596f6279d3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c12a49b0d261836c11a57916e01805d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8c12a49b0d261836c11a57916e01805d">IsSwitchSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input1, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output1, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a8c12a49b0d261836c11a57916e01805d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aceff0e3aa5ba49b0fdcfc66f2bd31b5c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aceff0e3aa5ba49b0fdcfc66f2bd31b5c">IsUnidirectionalSequenceLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;outputStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;cellStateIn, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;output, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;hiddenStateOutput, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;cellStateOutput, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;paramsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reasonIfUnsupported=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aceff0e3aa5ba49b0fdcfc66f2bd31b5c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_layer_support"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_layer_support')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td></tr>
<tr class="memitem:aab2a487bc88047443d8a0f87c3c40b8d inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aab2a487bc88047443d8a0f87c3c40b8d">ILayerSupport</a> ()</td></tr>
<tr class="separator:aab2a487bc88047443d8a0f87c3c40b8d inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e7f4f28576904804cd759e49173beeb inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9e7f4f28576904804cd759e49173beeb">~ILayerSupport</a> ()</td></tr>
<tr class="separator:a9e7f4f28576904804cd759e49173beeb inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00014">14</a> of file <a class="el" href="_cl_layer_support_8hpp_source.xhtml">ClLayerSupport.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="adcaa3eb3d4e1bf48a235b97170dccd15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcaa3eb3d4e1bf48a235b97170dccd15">&#9670;&nbsp;</a></span>ClLayerSupport() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml">ClLayerSupport</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>modelContextPtr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00168">168</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    : m_ModelContextPtr(modelContextPtr)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac1dc1384ae65a68453cd3f5fd4a6adbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1dc1384ae65a68453cd3f5fd4a6adbd">&#9670;&nbsp;</a></span>ClLayerSupport() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml">ClLayerSupport</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00173">173</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    : m_ModelContextPtr(<span class="keyword">nullptr</span>)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;{</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a35c41b0cdf5faf11fb39554c269e7f9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35c41b0cdf5faf11fb39554c269e7f9b">&#9670;&nbsp;</a></span>~ClLayerSupport()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_cl_layer_support.xhtml">ClLayerSupport</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">19</a> of file <a class="el" href="_cl_layer_support_8hpp_source.xhtml">ClLayerSupport.hpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00043">ARMNN_DEPRECATED_MSG</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00178">ClLayerSupport::IsAbsSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00186">ClLayerSupport::IsActivationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00198">ClLayerSupport::IsAdditionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00211">ClLayerSupport::IsArgMinMaxSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00224">ClLayerSupport::IsBatchNormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00255">ClLayerSupport::IsBatchToSpaceNdSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00245">ClLayerSupport::IsCastSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00267">ClLayerSupport::IsComparisonSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00281">ClLayerSupport::IsConcatSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00322">ClLayerSupport::IsConstantSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00330">ClLayerSupport::IsConvertFp16ToFp32Supported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00340">ClLayerSupport::IsConvertFp32ToFp16Supported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00350">ClLayerSupport::IsConvolution2dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00393">ClLayerSupport::IsDepthToSpaceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00405">ClLayerSupport::IsDepthwiseConvolutionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00383">ClLayerSupport::IsDequantizeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00422">ClLayerSupport::IsDilatedDepthwiseConvolutionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00440">ClLayerSupport::IsDivisionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00453">ClLayerSupport::IsElementwiseUnarySupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00500">ClLayerSupport::IsFillSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00512">ClLayerSupport::IsFloorSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00522">ClLayerSupport::IsFullyConnectedSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00539">ClLayerSupport::IsGatherSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00553">ClLayerSupport::IsGreaterSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00562">ClLayerSupport::IsInputSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00568">ClLayerSupport::IsInstanceNormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00580">ClLayerSupport::IsL2NormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00592">ClLayerSupport::IsLogicalBinarySupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00620">ClLayerSupport::IsLogSoftmaxSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00632">ClLayerSupport::IsLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00656">ClLayerSupport::IsMaximumSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00668">ClLayerSupport::IsMeanSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00680">ClLayerSupport::IsMergerSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00688">ClLayerSupport::IsMinimumSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00700">ClLayerSupport::IsMultiplicationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00713">ClLayerSupport::IsNormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00721">ClLayerSupport::IsOutputSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00727">ClLayerSupport::IsPadSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00739">ClLayerSupport::IsPermuteSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00747">ClLayerSupport::IsPooling2dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00755">ClLayerSupport::IsPreluSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00763">ClLayerSupport::IsQLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00797">ClLayerSupport::IsQuantizedLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00815">ClLayerSupport::IsQuantizeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00825">ClLayerSupport::IsReduceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00837">ClLayerSupport::IsReshapeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00854">ClLayerSupport::IsResizeBilinearSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00846">ClLayerSupport::IsResizeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00869">ClLayerSupport::IsRsqrtSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00877">ClLayerSupport::IsSliceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00885">ClLayerSupport::IsSoftmaxSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00893">ClLayerSupport::IsSpaceToBatchNdSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00905">ClLayerSupport::IsSpaceToDepthSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00917">ClLayerSupport::IsSplitterSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00961">ClLayerSupport::IsStackSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00973">ClLayerSupport::IsStridedSliceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00985">ClLayerSupport::IsSubtractionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00998">ClLayerSupport::IsTransposeConvolution2dSupported()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01014">ClLayerSupport::IsTransposeSupported()</a>.</p>
<div class="fragment"><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="abd7fa8c2233f8a653e30ae2f3b839d92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd7fa8c2233f8a653e30ae2f3b839d92">&#9670;&nbsp;</a></span>IsAbsSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAbsSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#abd7fa8c2233f8a653e30ae2f3b839d92">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00178">178</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::Abs</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00453">ClLayerSupport::IsElementwiseUnarySupported()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    ElementwiseUnaryDescriptor descriptor(<a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a5d99bdae7b6b2d5d1243f21cd59befb8">IsElementwiseUnarySupported</a>(input, output, descriptor, reasonIfUnsupported);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a5d99bdae7b6b2d5d1243f21cd59befb8"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a5d99bdae7b6b2d5d1243f21cd59befb8">armnn::ClLayerSupport::IsElementwiseUnarySupported</a></div><div class="ttdeci">bool IsElementwiseUnarySupported(const TensorInfo &amp;input, const TensorInfo &amp;ouput, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00453">ClLayerSupport.cpp:453</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab3adb3a28736529682e4ff0ea976dcd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3adb3a28736529682e4ff0ea976dcd3">&#9670;&nbsp;</a></span>IsActivationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsActivationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00186">186</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_activation_workload_8cpp_source.xhtml#l00017">armnn::ClActivationWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;{</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a42ef3cee193102dc7755193579209cca">ClActivationWorkloadValidate</a>,</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                   input,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                   output,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                   descriptor);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a42ef3cee193102dc7755193579209cca"><div class="ttname"><a href="namespacearmnn.xhtml#a42ef3cee193102dc7755193579209cca">armnn::ClActivationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClActivationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_activation_workload_8cpp_source.xhtml#l00017">ClActivationWorkload.cpp:17</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a48177e22e47448adb3d83e145dadf735"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48177e22e47448adb3d83e145dadf735">&#9670;&nbsp;</a></span>IsAdditionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAdditionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a48177e22e47448adb3d83e145dadf735">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00198">198</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_addition_workload_8cpp_source.xhtml#l00043">armnn::ClAdditionValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a24fc3e8e29d3fa56cc6b2d81e48625d1">ClAdditionValidate</a>,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                   input0,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                   input1,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                   output,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a24fc3e8e29d3fa56cc6b2d81e48625d1"><div class="ttname"><a href="namespacearmnn.xhtml#a24fc3e8e29d3fa56cc6b2d81e48625d1">armnn::ClAdditionValidate</a></div><div class="ttdeci">arm_compute::Status ClAdditionValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_addition_workload_8cpp_source.xhtml#l00043">ClAdditionWorkload.cpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0f4841f89f21fd794786b4c03c2425fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f4841f89f21fd794786b4c03c2425fd">&#9670;&nbsp;</a></span>IsArgMinMaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsArgMinMaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0f4841f89f21fd794786b4c03c2425fd">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00211">211</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_arg_min_max_workload_8cpp_source.xhtml#l00031">armnn::ClArgMinMaxWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ab80423b306d8e0436b9a316922911d4d">ClArgMinMaxWorkloadValidate</a>,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                   input,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                   output,</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                   descriptor);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab80423b306d8e0436b9a316922911d4d"><div class="ttname"><a href="namespacearmnn.xhtml#ab80423b306d8e0436b9a316922911d4d">armnn::ClArgMinMaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClArgMinMaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_arg_min_max_workload_8cpp_source.xhtml#l00031">ClArgMinMaxWorkload.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a67c970dd054b991e14369de523ca3a5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67c970dd054b991e14369de523ca3a5a">&#9670;&nbsp;</a></span>IsBatchNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBatchNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a67c970dd054b991e14369de523ca3a5a">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00224">224</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_batch_normalization_float_workload_8cpp_source.xhtml#l00019">armnn::ClBatchNormalizationValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a29bd65c1ec4ff9f75b636ec8e7b038be">ClBatchNormalizationValidate</a>,</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                   input,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                   output,</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                   mean,</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                   var,</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                   beta,</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                   gamma,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                   descriptor,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a29bd65c1ec4ff9f75b636ec8e7b038be"><div class="ttname"><a href="namespacearmnn.xhtml#a29bd65c1ec4ff9f75b636ec8e7b038be">armnn::ClBatchNormalizationValidate</a></div><div class="ttdeci">arm_compute::Status ClBatchNormalizationValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_batch_normalization_float_workload_8cpp_source.xhtml#l00019">ClBatchNormalizationFloatWorkload.cpp:19</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adc5695cc25f4055c7ed54bdc8604a098"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc5695cc25f4055c7ed54bdc8604a098">&#9670;&nbsp;</a></span>IsBatchToSpaceNdSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBatchToSpaceNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc5695cc25f4055c7ed54bdc8604a098">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00255">255</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_batch_to_space_nd_workload_8cpp_source.xhtml#l00054">armnn::ClBatchToSpaceNdWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;{</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae87476befb36d9cc4fb926337ba65b5d">ClBatchToSpaceNdWorkloadValidate</a>,</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                   input,</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                                   output,</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                   descriptor);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae87476befb36d9cc4fb926337ba65b5d"><div class="ttname"><a href="namespacearmnn.xhtml#ae87476befb36d9cc4fb926337ba65b5d">armnn::ClBatchToSpaceNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClBatchToSpaceNdWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_batch_to_space_nd_workload_8cpp_source.xhtml#l00054">ClBatchToSpaceNdWorkload.cpp:54</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae18f598a589683c3094a7bb41dcd3a3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae18f598a589683c3094a7bb41dcd3a3e">&#9670;&nbsp;</a></span>IsCastSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCastSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ae18f598a589683c3094a7bb41dcd3a3e">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00245">245</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_cast_workload_8cpp_source.xhtml#l00020">armnn::ClCastValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7f82264f26183ae3c66390e33be14ec6">ClCastValidate</a>,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                   input,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                   output);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7f82264f26183ae3c66390e33be14ec6"><div class="ttname"><a href="namespacearmnn.xhtml#a7f82264f26183ae3c66390e33be14ec6">armnn::ClCastValidate</a></div><div class="ttdeci">arm_compute::Status ClCastValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_cast_workload_8cpp_source.xhtml#l00020">ClCastWorkload.cpp:20</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad16b29b7f1c73187775e7b1d044d7bc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad16b29b7f1c73187775e7b1d044d7bc0">&#9670;&nbsp;</a></span>IsComparisonSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsComparisonSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>ouput</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a7c52726a684dd76258c61af124012537">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00267">267</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_comparison_workload_8cpp_source.xhtml#l00024">armnn::ClComparisonWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00553">ClLayerSupport::IsGreaterSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;{</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af6f6476c5d1c4c85153020f5229ebd14">ClComparisonWorkloadValidate</a>,</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                   input0,</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                   input1,</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                   output,</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                                   descriptor);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_af6f6476c5d1c4c85153020f5229ebd14"><div class="ttname"><a href="namespacearmnn.xhtml#af6f6476c5d1c4c85153020f5229ebd14">armnn::ClComparisonWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClComparisonWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ComparisonDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_comparison_workload_8cpp_source.xhtml#l00024">ClComparisonWorkload.cpp:24</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3dca8ffbcb5f3afa1799aa7d354a3016"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3dca8ffbcb5f3afa1799aa7d354a3016">&#9670;&nbsp;</a></span>IsConcatSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConcatSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">ConcatDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a1542179a03961e3635bb5bef993c8e0e">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00281">281</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_concat_workload_8cpp_source.xhtml#l00027">armnn::ClConcatWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00162">OriginsDescriptor::GetConcatAxis()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00192">OriginsDescriptor::GetNumDimensions()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00434">TensorInfo::IsTypeSpaceMatch()</a>, and <a class="el" href="_layer_support_common_8hpp_source.xhtml#l00017">armnn::SetValueChecked()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00680">ClLayerSupport::IsMergerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordflow">if</span> (descriptor.GetNumDimensions() &lt;= descriptor.GetConcatAxis())</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(reasonIfUnsupported, <span class="stringliteral">&quot;Cl Concat: Concat axis &gt; Number of dimensions.&quot;</span>);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> concatInnerAxis = (descriptor.GetNumDimensions() - descriptor.GetConcatAxis()) - 1;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">if</span>(concatInnerAxis &lt; 3) <span class="comment">// Width, height, or channels</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    {</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7782f0809076f14363eacb4a38964b9f">ClConcatWorkloadValidate</a>,</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                       reasonIfUnsupported,</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                       inputs,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                       output,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                       descriptor);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (concatInnerAxis == 3)</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="comment">// We rely on the sub-tensor optimization to handle the batch dimension for 4D tensors. If we can&#39;t use</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="comment">// sub-tensors for this then we can&#39;t support it. Here is where we check that the sub-tensors will work.</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; input : inputs)</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            <span class="keywordflow">if</span> (input &amp;&amp; !output.IsTypeSpaceMatch(*input)) <span class="comment">// Cannot use sub-tensors if the types are not same space</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(reasonIfUnsupported, <span class="stringliteral">&quot;Cl Concat: Types and quantization parameters must match.&quot;</span>);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        }</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>; <span class="comment">// Sub-tensors support concat along batch</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    }</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">else</span> <span class="comment">// &gt; 4 dimensions not supported.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(reasonIfUnsupported, <span class="stringliteral">&quot;Cl Concat: Maximum of 4 dimensions supported.&quot;</span>);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a13c7d751e4d37f65a6d40c3c6e50d2b8"><div class="ttname"><a href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">armnn::SetValueChecked</a></div><div class="ttdeci">void SetValueChecked(Optional&lt; T &amp;&gt; optionalRef, V &amp;&amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_common_8hpp_source.xhtml#l00017">LayerSupportCommon.hpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7782f0809076f14363eacb4a38964b9f"><div class="ttname"><a href="namespacearmnn.xhtml#a7782f0809076f14363eacb4a38964b9f">armnn::ClConcatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConcatWorkloadValidate(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_concat_workload_8cpp_source.xhtml#l00027">ClConcatWorkload.cpp:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adf18c4fa8fc9e0cdae1967990aa90fe8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf18c4fa8fc9e0cdae1967990aa90fe8">&#9670;&nbsp;</a></span>IsConstantSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConstantSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00322">322</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_constant_workload_8cpp_source.xhtml#l00018">armnn::ClConstantWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;{</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2f5c2e8794174361f2308f4a0d3f9c73">ClConstantWorkloadValidate</a>,</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                   output);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2f5c2e8794174361f2308f4a0d3f9c73"><div class="ttname"><a href="namespacearmnn.xhtml#a2f5c2e8794174361f2308f4a0d3f9c73">armnn::ClConstantWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConstantWorkloadValidate(const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_constant_workload_8cpp_source.xhtml#l00018">ClConstantWorkload.cpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1efcaf6f02892442fefca09f49ea3d7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1efcaf6f02892442fefca09f49ea3d7c">&#9670;&nbsp;</a></span>IsConvertFp16ToFp32Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvertFp16ToFp32Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00330">330</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00037">armnn::ClConvertFp16ToFp32WorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;{</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a46efae0191388fd33db4e95c5d79e2be">ClConvertFp16ToFp32WorkloadValidate</a>,</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                   input,</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                   output);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a46efae0191388fd33db4e95c5d79e2be"><div class="ttname"><a href="namespacearmnn.xhtml#a46efae0191388fd33db4e95c5d79e2be">armnn::ClConvertFp16ToFp32WorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConvertFp16ToFp32WorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00037">ClConvertFp16ToFp32Workload.cpp:37</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a91fb5f44d8b9427dc45443aa9ebfe13e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91fb5f44d8b9427dc45443aa9ebfe13e">&#9670;&nbsp;</a></span>IsConvertFp32ToFp16Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvertFp32ToFp16Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00340">340</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00037">armnn::ClConvertFp32ToFp16WorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a37f6946bfb7a9c7d64881b7a2e13945f">ClConvertFp32ToFp16WorkloadValidate</a>,</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                                   input,</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                   output);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a37f6946bfb7a9c7d64881b7a2e13945f"><div class="ttname"><a href="namespacearmnn.xhtml#a37f6946bfb7a9c7d64881b7a2e13945f">armnn::ClConvertFp32ToFp16WorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConvertFp32ToFp16WorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00037">ClConvertFp32ToFp16Workload.cpp:37</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af7ff06bd8115a6a9cc6d41e5c762798e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7ff06bd8115a6a9cc6d41e5c762798e">&#9670;&nbsp;</a></span>IsConvolution2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvolution2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00350">350</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_convolution2d_workload_8cpp_source.xhtml#l00023">armnn::ClConvolution2dWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_cl_backend_model_context_8cpp_source.xhtml#l00062">ClBackendModelContext::IsFastMathEnabled()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;{</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTECL_ENABLED)</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        {</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span>ClBackendModelContext*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="keywordflow">if</span> (modelOptions)</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            {</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                isFastMathEnabled = modelOptions-&gt;IsFastMathEnabled();</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            }</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        }</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    }</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a61cf0886d4c1a6e24c101a57ccb2ec31">ClConvolution2dWorkloadValidate</a>,</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                   input,</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                   output,</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                   descriptor,</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                                   weights,</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                                   biases,</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                   isFastMathEnabled,</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a61cf0886d4c1a6e24c101a57ccb2ec31"><div class="ttname"><a href="namespacearmnn.xhtml#a61cf0886d4c1a6e24c101a57ccb2ec31">armnn::ClConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, bool isFastMathEnabled, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_convolution2d_workload_8cpp_source.xhtml#l00023">ClConvolution2dWorkload.cpp:23</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a128fb9890897e08251a3f621e570cd23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a128fb9890897e08251a3f621e570cd23">&#9670;&nbsp;</a></span>IsDepthToSpaceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDepthToSpaceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a128fb9890897e08251a3f621e570cd23">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00393">393</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_depth_to_space_workload_8cpp_source.xhtml#l00022">armnn::ClDepthToSpaceWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;{</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ab3624c723d9a0ec93722b19060b76115">ClDepthToSpaceWorkloadValidate</a>,</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                   input,</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                   output,</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                                   descriptor);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab3624c723d9a0ec93722b19060b76115"><div class="ttname"><a href="namespacearmnn.xhtml#ab3624c723d9a0ec93722b19060b76115">armnn::ClDepthToSpaceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDepthToSpaceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_depth_to_space_workload_8cpp_source.xhtml#l00022">ClDepthToSpaceWorkload.cpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adc84390751f227fe03a115b5fa10b0fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc84390751f227fe03a115b5fa10b0fc">&#9670;&nbsp;</a></span>IsDepthwiseConvolutionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDepthwiseConvolutionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc84390751f227fe03a115b5fa10b0fc">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00405">405</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00026">armnn::ClDepthwiseConvolutionWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;{</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aa6670a2fcf9f365da69f3f3092dfa64b">ClDepthwiseConvolutionWorkloadValidate</a>,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                   input,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                   output,</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                                   descriptor,</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                   weights,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                   biases,</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa6670a2fcf9f365da69f3f3092dfa64b"><div class="ttname"><a href="namespacearmnn.xhtml#aa6670a2fcf9f365da69f3f3092dfa64b">armnn::ClDepthwiseConvolutionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDepthwiseConvolutionWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00026">ClDepthwiseConvolutionWorkload.cpp:26</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2e89c72cf60df7c2d2d7e5d98822b672"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e89c72cf60df7c2d2d7e5d98822b672">&#9670;&nbsp;</a></span>IsDequantizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDequantizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00383">383</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_dequantize_workload_8cpp_source.xhtml#l00022">armnn::ClDequantizeWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;{</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a75045734c29d7d6635342c05adbc151b">ClDequantizeWorkloadValidate</a>,</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                   input,</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                   output);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a75045734c29d7d6635342c05adbc151b"><div class="ttname"><a href="namespacearmnn.xhtml#a75045734c29d7d6635342c05adbc151b">armnn::ClDequantizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDequantizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_dequantize_workload_8cpp_source.xhtml#l00022">ClDequantizeWorkload.cpp:22</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a16c8cd49a7fa487b904b5c9cc83673e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16c8cd49a7fa487b904b5c9cc83673e7">&#9670;&nbsp;</a></span>IsDilatedDepthwiseConvolutionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDilatedDepthwiseConvolutionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reason</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a55d91a97ff664f42cd5cd62b60c15f80">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00422">422</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00026">armnn::ClDepthwiseConvolutionWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;{</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aa6670a2fcf9f365da69f3f3092dfa64b">ClDepthwiseConvolutionWorkloadValidate</a>,</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                   input,</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                   output,</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                   descriptor,</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                                   weights,</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                                   biases,</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa6670a2fcf9f365da69f3f3092dfa64b"><div class="ttname"><a href="namespacearmnn.xhtml#aa6670a2fcf9f365da69f3f3092dfa64b">armnn::ClDepthwiseConvolutionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDepthwiseConvolutionWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00026">ClDepthwiseConvolutionWorkload.cpp:26</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a08f55136b1f0907e7083d70d719f697f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08f55136b1f0907e7083d70d719f697f">&#9670;&nbsp;</a></span>IsDivisionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDivisionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a08f55136b1f0907e7083d70d719f697f">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00440">440</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_division_workload_8cpp_source.xhtml#l00018">armnn::ClDivisionWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;{</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a0591ff61ac269187164ea23713d33852">ClDivisionWorkloadValidate</a>,</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                                   input0,</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                   input1,</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                   output,</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a0591ff61ac269187164ea23713d33852"><div class="ttname"><a href="namespacearmnn.xhtml#a0591ff61ac269187164ea23713d33852">armnn::ClDivisionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDivisionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_division_workload_8cpp_source.xhtml#l00018">ClDivisionWorkload.cpp:18</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5d99bdae7b6b2d5d1243f21cd59befb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d99bdae7b6b2d5d1243f21cd59befb8">&#9670;&nbsp;</a></span>IsElementwiseUnarySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsElementwiseUnarySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>ouput</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a61c5b4e5dc224ef0c876e43353b34030">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00453">453</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::Abs</a>, <a class="el" href="_cl_abs_workload_8cpp_source.xhtml#l00019">armnn::ClAbsWorkloadValidate()</a>, <a class="el" href="_cl_exp_workload_8cpp_source.xhtml#l00018">armnn::ClExpWorkloadValidate()</a>, <a class="el" href="_cl_logical_not_workload_8cpp_source.xhtml#l00020">armnn::ClLogicalNotWorkloadValidate()</a>, <a class="el" href="_cl_log_workload_8cpp_source.xhtml#l00018">armnn::ClLogWorkloadValidate()</a>, <a class="el" href="_cl_neg_workload_8cpp_source.xhtml#l00018">armnn::ClNegWorkloadValidate()</a>, <a class="el" href="_cl_rsqrt_workload_8cpp_source.xhtml#l00018">armnn::ClRsqrtWorkloadValidate()</a>, <a class="el" href="_cl_sin_workload_8cpp_source.xhtml#l00018">armnn::ClSinWorkloadValidate()</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">armnn::Exp</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">armnn::Log</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">armnn::LogicalNot</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00114">ElementwiseUnaryDescriptor::m_Operation</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">armnn::Neg</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::Rsqrt</a>, and <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">armnn::Sin</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00178">ClLayerSupport::IsAbsSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00869">ClLayerSupport::IsRsqrtSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;{</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keywordflow">switch</span>(descriptor.m_Operation)</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    {</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>:</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a1391582cd6e145b67c98f3410667968e">ClAbsWorkloadValidate</a>,</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                           input,</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                                           output);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">UnaryOperation::Exp</a>:</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a9831849c09391e90e50de46e2ee16403">ClExpWorkloadValidate</a>,</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                                           input,</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                                           output);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">UnaryOperation::Log</a>:</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a64806be3c31d35b75546da7c6b6b46d0">ClLogWorkloadValidate</a>,</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                                           input,</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                                           output);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">UnaryOperation::LogicalNot</a>:</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ace776a194a715c709136a9966ada1a48">ClLogicalNotWorkloadValidate</a>,</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                                           input,</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                                           output);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">UnaryOperation::Neg</a>:</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a66a3a6c05b38e48508bbbb3f32023ab7">ClNegWorkloadValidate</a>,</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                                           input,</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                                           output);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>:</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a3f6f9f0d3567ae04b49ea88727845900">ClRsqrtWorkloadValidate</a>,</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                                           input,</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                                           output);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">UnaryOperation::Sin</a>:</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ac5cd8464c73415025cb8c8f6ada74e15">ClSinWorkloadValidate</a>,</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                                           input,</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                                           output);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    }</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">armnn::UnaryOperation::Log</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">armnn::UnaryOperation::Neg</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">armnn::UnaryOperation::LogicalNot</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac5cd8464c73415025cb8c8f6ada74e15"><div class="ttname"><a href="namespacearmnn.xhtml#ac5cd8464c73415025cb8c8f6ada74e15">armnn::ClSinWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSinWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_sin_workload_8cpp_source.xhtml#l00018">ClSinWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">armnn::UnaryOperation::Sin</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace776a194a715c709136a9966ada1a48"><div class="ttname"><a href="namespacearmnn.xhtml#ace776a194a715c709136a9966ada1a48">armnn::ClLogicalNotWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogicalNotWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_logical_not_workload_8cpp_source.xhtml#l00020">ClLogicalNotWorkload.cpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1391582cd6e145b67c98f3410667968e"><div class="ttname"><a href="namespacearmnn.xhtml#a1391582cd6e145b67c98f3410667968e">armnn::ClAbsWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClAbsWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_abs_workload_8cpp_source.xhtml#l00019">ClAbsWorkload.cpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a66a3a6c05b38e48508bbbb3f32023ab7"><div class="ttname"><a href="namespacearmnn.xhtml#a66a3a6c05b38e48508bbbb3f32023ab7">armnn::ClNegWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClNegWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_neg_workload_8cpp_source.xhtml#l00018">ClNegWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9831849c09391e90e50de46e2ee16403"><div class="ttname"><a href="namespacearmnn.xhtml#a9831849c09391e90e50de46e2ee16403">armnn::ClExpWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClExpWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_exp_workload_8cpp_source.xhtml#l00018">ClExpWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">armnn::UnaryOperation::Exp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a64806be3c31d35b75546da7c6b6b46d0"><div class="ttname"><a href="namespacearmnn.xhtml#a64806be3c31d35b75546da7c6b6b46d0">armnn::ClLogWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_log_workload_8cpp_source.xhtml#l00018">ClLogWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a3f6f9f0d3567ae04b49ea88727845900"><div class="ttname"><a href="namespacearmnn.xhtml#a3f6f9f0d3567ae04b49ea88727845900">armnn::ClRsqrtWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClRsqrtWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_rsqrt_workload_8cpp_source.xhtml#l00018">ClRsqrtWorkload.cpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acc5d9a4c8f29984de3bbdca87684f317"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc5d9a4c8f29984de3bbdca87684f317">&#9670;&nbsp;</a></span>IsFillSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFillSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#acc5d9a4c8f29984de3bbdca87684f317">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00500">500</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;{</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keywordflow">return</span> IsClBackendSupported(reasonIfUnsupported);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a53c7593d1aa26207eac5d5814a9d56dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53c7593d1aa26207eac5d5814a9d56dc">&#9670;&nbsp;</a></span>IsFloorSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFloorSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00512">512</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_floor_float_workload_8cpp_source.xhtml#l00014">armnn::ClFloorWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;{</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8874961260f35da85229554f92e16ca9">ClFloorWorkloadValidate</a>,</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                                   input,</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                                   output);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8874961260f35da85229554f92e16ca9"><div class="ttname"><a href="namespacearmnn.xhtml#a8874961260f35da85229554f92e16ca9">armnn::ClFloorWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClFloorWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_floor_float_workload_8cpp_source.xhtml#l00014">ClFloorFloatWorkload.cpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aeaf971dd9dffd6f6bc7e5a1ae6b6af5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">&#9670;&nbsp;</a></span>IsFullyConnectedSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFullyConnectedSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00522">522</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_fully_connected_workload_8cpp_source.xhtml#l00019">armnn::ClFullyConnectedWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;{</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a6bf77ce2aa656491e2a0c77e0a8a5849">ClFullyConnectedWorkloadValidate</a>,</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                   input,</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                                   output,</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                   weights,</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                   biases,</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                                   descriptor,</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a6bf77ce2aa656491e2a0c77e0a8a5849"><div class="ttname"><a href="namespacearmnn.xhtml#a6bf77ce2aa656491e2a0c77e0a8a5849">armnn::ClFullyConnectedWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClFullyConnectedWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const TensorInfo &amp;biases, const FullyConnectedDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fully_connected_workload_8cpp_source.xhtml#l00019">ClFullyConnectedWorkload.cpp:19</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5e8fbdda1125eb5e22f14eacbe9fb351"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e8fbdda1125eb5e22f14eacbe9fb351">&#9670;&nbsp;</a></span>IsGatherSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsGatherSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a2f51fda38409c3768a7bd28cedf3f075">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00539">539</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_gather_workload_8cpp_source.xhtml#l00015">armnn::ClGatherWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;{</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aff9e3b78a938c14a4420ce6365b997fb">ClGatherWorkloadValidate</a>,</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                                   input0,</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                                   input1,</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                                   output,</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                                   descriptor);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aff9e3b78a938c14a4420ce6365b997fb"><div class="ttname"><a href="namespacearmnn.xhtml#aff9e3b78a938c14a4420ce6365b997fb">armnn::ClGatherWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClGatherWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;indices, const TensorInfo &amp;output, const GatherDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_gather_workload_8cpp_source.xhtml#l00015">ClGatherWorkload.cpp:15</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7303c2656e267e10252a171e8bbc1d94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7303c2656e267e10252a171e8bbc1d94">&#9670;&nbsp;</a></span>IsGreaterSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsGreaterSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>ouput</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a14e45f3699e823d7859d5d352d89265c">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00553">553</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::Greater</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00267">ClLayerSupport::IsComparisonSupported()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;{</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    ComparisonDescriptor descriptor(<a class="code" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ad16b29b7f1c73187775e7b1d044d7bc0">IsComparisonSupported</a>(input0, input1, output, descriptor, reasonIfUnsupported);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a"><div class="ttname"><a href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::ComparisonOperation::Greater</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_ad16b29b7f1c73187775e7b1d044d7bc0"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ad16b29b7f1c73187775e7b1d044d7bc0">armnn::ClLayerSupport::IsComparisonSupported</a></div><div class="ttdeci">bool IsComparisonSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;ouput, const ComparisonDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00267">ClLayerSupport.cpp:267</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad29d99ecd719c640ed22dcf5c688c6a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad29d99ecd719c640ed22dcf5c688c6a5">&#9670;&nbsp;</a></span>IsInputSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInputSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00562">562</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;{</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">return</span> IsClBackendSupported(reasonIfUnsupported, input);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0813546a09bf2caba6794014d1960624"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0813546a09bf2caba6794014d1960624">&#9670;&nbsp;</a></span>IsInstanceNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInstanceNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0813546a09bf2caba6794014d1960624">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00568">568</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_instance_normalization_workload_8cpp_source.xhtml#l00018">armnn::ClInstanceNormalizationWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;{</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a79d362f0c6e04d51807e0d81b5b05f3a">ClInstanceNormalizationWorkloadValidate</a>,</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                                   input,</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                                   output,</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                                   descriptor);</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a79d362f0c6e04d51807e0d81b5b05f3a"><div class="ttname"><a href="namespacearmnn.xhtml#a79d362f0c6e04d51807e0d81b5b05f3a">armnn::ClInstanceNormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClInstanceNormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_instance_normalization_workload_8cpp_source.xhtml#l00018">ClInstanceNormalizationWorkload.cpp:18</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aca4acda7ab553edfda828658d8f3882b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca4acda7ab553edfda828658d8f3882b">&#9670;&nbsp;</a></span>IsL2NormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsL2NormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aca4acda7ab553edfda828658d8f3882b">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00580">580</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_l2_normalization_float_workload_8cpp_source.xhtml#l00017">armnn::ClL2NormalizationWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;{</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aef334cdb24000c330f4d2e5f1b384784">ClL2NormalizationWorkloadValidate</a>,</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                                   input,</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                                   output,</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                                   descriptor);</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_aef334cdb24000c330f4d2e5f1b384784"><div class="ttname"><a href="namespacearmnn.xhtml#aef334cdb24000c330f4d2e5f1b384784">armnn::ClL2NormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClL2NormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_l2_normalization_float_workload_8cpp_source.xhtml#l00017">ClL2NormalizationFloatWorkload.cpp:17</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a772790c60d70814e30b5bec70fd98776"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a772790c60d70814e30b5bec70fd98776">&#9670;&nbsp;</a></span>IsLogicalBinarySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLogicalBinarySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8fab6937a1010b5ed674b930b4f143cb">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00592">592</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_logical_and_workload_8cpp_source.xhtml#l00020">armnn::ClLogicalAndWorkloadValidate()</a>, <a class="el" href="_cl_logical_or_workload_8cpp_source.xhtml#l00020">armnn::ClLogicalOrWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">armnn::LogicalAnd</a>, <a class="el" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">armnn::LogicalOr</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l01318">LogicalBinaryDescriptor::m_Operation</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;{</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(output);</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keywordflow">switch</span>(descriptor.m_Operation)</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    {</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">LogicalBinaryOperation::LogicalAnd</a>:</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7900acef495ac8033a08d3ed74f06970">ClLogicalAndWorkloadValidate</a>,</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                                           input0,</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                                           input1,</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                                           output);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">LogicalBinaryOperation::LogicalOr</a>:</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a89391e63f7a679b023e6bd1798186db6">ClLogicalOrWorkloadValidate</a>,</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                                           input0,</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                                           input1,</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                                           output);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    }</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a89391e63f7a679b023e6bd1798186db6"><div class="ttname"><a href="namespacearmnn.xhtml#a89391e63f7a679b023e6bd1798186db6">armnn::ClLogicalOrWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogicalOrWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_logical_or_workload_8cpp_source.xhtml#l00020">ClLogicalOrWorkload.cpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">armnn::LogicalBinaryOperation::LogicalAnd</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">armnn::LogicalBinaryOperation::LogicalOr</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7900acef495ac8033a08d3ed74f06970"><div class="ttname"><a href="namespacearmnn.xhtml#a7900acef495ac8033a08d3ed74f06970">armnn::ClLogicalAndWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogicalAndWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_logical_and_workload_8cpp_source.xhtml#l00020">ClLogicalAndWorkload.cpp:20</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa0380b797cb9932fb03067dbe2cdecfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0380b797cb9932fb03067dbe2cdecfb">&#9670;&nbsp;</a></span>IsLogSoftmaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLogSoftmaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00620">620</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_log_softmax_workload_8cpp_source.xhtml#l00017">armnn::ClLogSoftmaxWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;{</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7071f5d6693d3014ddcb34c886ffc734">ClLogSoftmaxWorkloadValidate</a>,</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                                   input,</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                                   output,</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                                   descriptor);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a7071f5d6693d3014ddcb34c886ffc734"><div class="ttname"><a href="namespacearmnn.xhtml#a7071f5d6693d3014ddcb34c886ffc734">armnn::ClLogSoftmaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogSoftmaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_log_softmax_workload_8cpp_source.xhtml#l00017">ClLogSoftmaxWorkload.cpp:17</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a862535721737220f62a49f14ff494dd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a862535721737220f62a49f14ff494dd5">&#9670;&nbsp;</a></span>IsLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>scratchBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a862535721737220f62a49f14ff494dd5">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00632">632</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_lstm_float_workload_8cpp_source.xhtml#l00267">armnn::ClLstmFloatWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;{</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a90ab88fe4c7aa9466c4653404a6b2213">ClLstmFloatWorkloadValidate</a>,</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                                   input,</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                                   outputStateIn,</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                                   cellStateIn,</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                                   scratchBuffer,</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                                   outputStateOut,</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                                   cellStateOut,</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                                   output,</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                                   descriptor,</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                                   paramsInfo);</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a90ab88fe4c7aa9466c4653404a6b2213"><div class="ttname"><a href="namespacearmnn.xhtml#a90ab88fe4c7aa9466c4653404a6b2213">armnn::ClLstmFloatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLstmFloatWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_lstm_float_workload_8cpp_source.xhtml#l00267">ClLstmFloatWorkload.cpp:267</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afef9436c86b37b973471f2ae546ac00a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afef9436c86b37b973471f2ae546ac00a">&#9670;&nbsp;</a></span>IsMaximumSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMaximumSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#afef9436c86b37b973471f2ae546ac00a">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00656">656</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_maximum_workload_8cpp_source.xhtml#l00024">armnn::ClMaximumWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;{</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a553706c6338ffc52b0d916859f642587">ClMaximumWorkloadValidate</a>,</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                                   input0,</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                                   input1,</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                                   output);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a553706c6338ffc52b0d916859f642587"><div class="ttname"><a href="namespacearmnn.xhtml#a553706c6338ffc52b0d916859f642587">armnn::ClMaximumWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClMaximumWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_maximum_workload_8cpp_source.xhtml#l00024">ClMaximumWorkload.cpp:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab268618580d4f53bf5e9b5a47dee3f6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab268618580d4f53bf5e9b5a47dee3f6a">&#9670;&nbsp;</a></span>IsMeanSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMeanSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00668">668</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_mean_workload_8cpp_source.xhtml#l00017">armnn::ClMeanValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;{</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a048a8ea8b1b39343a73ca7458024ea54">ClMeanValidate</a>,</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                                   input,</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                                   output,</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                                   descriptor);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a048a8ea8b1b39343a73ca7458024ea54"><div class="ttname"><a href="namespacearmnn.xhtml#a048a8ea8b1b39343a73ca7458024ea54">armnn::ClMeanValidate</a></div><div class="ttdeci">arm_compute::Status ClMeanValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_mean_workload_8cpp_source.xhtml#l00017">ClMeanWorkload.cpp:17</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa9309ea64f9f7447efe3567f77417d29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9309ea64f9f7447efe3567f77417d29">&#9670;&nbsp;</a></span>IsMergerSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMergerSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a003d213dd28b0b8c0f26fbf268ccb975">MergerDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a77ae1b686e92a561de76388ac55cab06">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00680">680</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00281">ClLayerSupport::IsConcatSupported()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;{</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a3dca8ffbcb5f3afa1799aa7d354a3016">IsConcatSupported</a>(inputs, output, descriptor, reasonIfUnsupported);</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a3dca8ffbcb5f3afa1799aa7d354a3016"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a3dca8ffbcb5f3afa1799aa7d354a3016">armnn::ClLayerSupport::IsConcatSupported</a></div><div class="ttdeci">bool IsConcatSupported(const std::vector&lt; const TensorInfo *&gt; inputs, const TensorInfo &amp;output, const ConcatDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00281">ClLayerSupport.cpp:281</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3d0eafb3de560b3482f857b56b2b2116"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d0eafb3de560b3482f857b56b2b2116">&#9670;&nbsp;</a></span>IsMinimumSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMinimumSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3d0eafb3de560b3482f857b56b2b2116">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00688">688</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_minimum_workload_8cpp_source.xhtml#l00024">armnn::ClMinimumWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;{</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8c04c8e796a4fbec706df42ed9c27e4e">ClMinimumWorkloadValidate</a>,</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                                   input0,</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                                   input1,</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                                   output);</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8c04c8e796a4fbec706df42ed9c27e4e"><div class="ttname"><a href="namespacearmnn.xhtml#a8c04c8e796a4fbec706df42ed9c27e4e">armnn::ClMinimumWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClMinimumWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_minimum_workload_8cpp_source.xhtml#l00024">ClMinimumWorkload.cpp:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a421e1f3865d99d52613003048342c49a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a421e1f3865d99d52613003048342c49a">&#9670;&nbsp;</a></span>IsMultiplicationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMultiplicationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a421e1f3865d99d52613003048342c49a">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00700">700</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_multiplication_workload_8cpp_source.xhtml#l00018">armnn::ClMultiplicationWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;{</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a9638165cb6c1baae3b2b5fd9f0f75201">ClMultiplicationWorkloadValidate</a>,</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                                   input0,</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                                   input1,</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                                   output,</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9638165cb6c1baae3b2b5fd9f0f75201"><div class="ttname"><a href="namespacearmnn.xhtml#a9638165cb6c1baae3b2b5fd9f0f75201">armnn::ClMultiplicationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClMultiplicationWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_multiplication_workload_8cpp_source.xhtml#l00018">ClMultiplicationWorkload.cpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a994c2065561141bf37fcd2ff7bb4af4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a994c2065561141bf37fcd2ff7bb4af4d">&#9670;&nbsp;</a></span>IsNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00713">713</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_normalization_float_workload_8cpp_source.xhtml#l00019">armnn::ClNormalizationWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;{</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a144c2e243a255715f309999077ed1792">ClNormalizationWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a144c2e243a255715f309999077ed1792"><div class="ttname"><a href="namespacearmnn.xhtml#a144c2e243a255715f309999077ed1792">armnn::ClNormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClNormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_normalization_float_workload_8cpp_source.xhtml#l00019">ClNormalizationFloatWorkload.cpp:19</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aef3244c0ef64c8f2f352d21ce0c06985"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef3244c0ef64c8f2f352d21ce0c06985">&#9670;&nbsp;</a></span>IsOutputSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsOutputSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00721">721</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;{</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="keywordflow">return</span> IsClBackendSupported(reasonIfUnsupported, output);</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0534291adf9f3436ba331552eba29a43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0534291adf9f3436ba331552eba29a43">&#9670;&nbsp;</a></span>IsPadSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPadSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0534291adf9f3436ba331552eba29a43">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00727">727</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_pad_workload_8cpp_source.xhtml#l00053">armnn::ClPadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;{</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#adcf7b7d939bac1cfaeb333c7b3175bb8">ClPadValidate</a>,</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                                   input,</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                                   output,</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                                   descriptor);</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adcf7b7d939bac1cfaeb333c7b3175bb8"><div class="ttname"><a href="namespacearmnn.xhtml#adcf7b7d939bac1cfaeb333c7b3175bb8">armnn::ClPadValidate</a></div><div class="ttdeci">arm_compute::Status ClPadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_pad_workload_8cpp_source.xhtml#l00053">ClPadWorkload.cpp:53</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9d553495d9a94fa55588ae159d8bda30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d553495d9a94fa55588ae159d8bda30">&#9670;&nbsp;</a></span>IsPermuteSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPermuteSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9d553495d9a94fa55588ae159d8bda30">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00739">739</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_permute_workload_8cpp_source.xhtml#l00017">armnn::ClPermuteWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;{</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a26c25df9e2271333ab4d4ef71db41dca">ClPermuteWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a26c25df9e2271333ab4d4ef71db41dca"><div class="ttname"><a href="namespacearmnn.xhtml#a26c25df9e2271333ab4d4ef71db41dca">armnn::ClPermuteWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClPermuteWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_permute_workload_8cpp_source.xhtml#l00017">ClPermuteWorkload.cpp:17</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa955675303d67b1d1fb51fb7f09d8c21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa955675303d67b1d1fb51fb7f09d8c21">&#9670;&nbsp;</a></span>IsPooling2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPooling2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00747">747</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_pooling2d_workload_8cpp_source.xhtml#l00018">armnn::ClPooling2dWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;{</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8a21bb33f7f054ce7b48a8c7df9e6d4a">ClPooling2dWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8a21bb33f7f054ce7b48a8c7df9e6d4a"><div class="ttname"><a href="namespacearmnn.xhtml#a8a21bb33f7f054ce7b48a8c7df9e6d4a">armnn::ClPooling2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClPooling2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_pooling2d_workload_8cpp_source.xhtml#l00018">ClPooling2dWorkload.cpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4b36dcedd5edbd5142b3548967aadc2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b36dcedd5edbd5142b3548967aadc2f">&#9670;&nbsp;</a></span>IsPreluSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPreluSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a93cf81b28c4275a338f41c536a451158">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00755">755</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_prelu_workload_8cpp_source.xhtml#l00016">armnn::ClPreluWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;{</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae58d1f4437a779274037bc86efac9e26">ClPreluWorkloadValidate</a>, reasonIfUnsupported, input, alpha, output);</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae58d1f4437a779274037bc86efac9e26"><div class="ttname"><a href="namespacearmnn.xhtml#ae58d1f4437a779274037bc86efac9e26">armnn::ClPreluWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClPreluWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_prelu_workload_8cpp_source.xhtml#l00016">ClPreluWorkload.cpp:16</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adf54bcad228c0ac21f6735d31460cf31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf54bcad228c0ac21f6735d31460cf31">&#9670;&nbsp;</a></span>IsQLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousOutputIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousCellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adf54bcad228c0ac21f6735d31460cf31">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00763">763</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_q_lstm_workload_8cpp_source.xhtml#l00244">armnn::ClQLstmWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, and <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;{</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <span class="keywordflow">if</span> (input.GetDataType()               == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        previousOutputIn.GetDataType()    == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        previousCellStateIn.GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        outputStateOut.GetDataType()      == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        cellStateOut.GetDataType()        == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        output.GetDataType()              == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>)</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    {</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8cdb508cb0ebc06e39dc1661815d73b0">ClQLstmWorkloadValidate</a>,</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                                       reasonIfUnsupported,</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                                       input,</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                                       previousCellStateIn,</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                                       previousOutputIn,</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                                       cellStateOut,</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;                                       outputStateOut,</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;                                       output,</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                                       descriptor,</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                                       paramsInfo);</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    }</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    {</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    }</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8cdb508cb0ebc06e39dc1661815d73b0"><div class="ttname"><a href="namespacearmnn.xhtml#a8cdb508cb0ebc06e39dc1661815d73b0">armnn::ClQLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClQLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;output, const QLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_q_lstm_workload_8cpp_source.xhtml#l00244">ClQLstmWorkload.cpp:244</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af1be52d9f968bfab069344756bf232c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1be52d9f968bfab069344756bf232c4">&#9670;&nbsp;</a></span>IsQuantizedLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQuantizedLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousCellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousOutputIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af1be52d9f968bfab069344756bf232c4">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00797">797</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_quantized_lstm_workload_8cpp_source.xhtml#l00018">armnn::ClQuantizedLstmWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;{</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a5fb7fe07abfb2373103d842b47a24726">ClQuantizedLstmWorkloadValidate</a>,</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;                                   input,</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                                   previousCellStateIn,</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                                   previousOutputIn,</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                                   cellStateOut,</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                                   output,</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                                   paramsInfo);</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5fb7fe07abfb2373103d842b47a24726"><div class="ttname"><a href="namespacearmnn.xhtml#a5fb7fe07abfb2373103d842b47a24726">armnn::ClQuantizedLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClQuantizedLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QuantizedLstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_quantized_lstm_workload_8cpp_source.xhtml#l00018">ClQuantizedLstmWorkload.cpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad2c7be6b84b04444e514f52f593b3df7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2c7be6b84b04444e514f52f593b3df7">&#9670;&nbsp;</a></span>IsQuantizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQuantizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad2c7be6b84b04444e514f52f593b3df7">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00815">815</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_quantize_workload_8cpp_source.xhtml#l00022">armnn::ClQuantizeWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;{</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a9c1b478e30a1e8a4ecac874cf15f13d4">ClQuantizeWorkloadValidate</a>,</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                                   input,</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                                   output);</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9c1b478e30a1e8a4ecac874cf15f13d4"><div class="ttname"><a href="namespacearmnn.xhtml#a9c1b478e30a1e8a4ecac874cf15f13d4">armnn::ClQuantizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClQuantizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_quantize_workload_8cpp_source.xhtml#l00022">ClQuantizeWorkload.cpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a917c126e64314263b8b5f7bca455ddfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a917c126e64314263b8b5f7bca455ddfb">&#9670;&nbsp;</a></span>IsReduceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsReduceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a917c126e64314263b8b5f7bca455ddfb">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00825">825</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_reduce_workload_8cpp_source.xhtml#l00018">armnn::ClReduceWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;{</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a4c42dfd9db4a47e470b5800bb11a8374">ClReduceWorkloadValidate</a>,</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                                   input,</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;                                   output,</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                                   descriptor);</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4c42dfd9db4a47e470b5800bb11a8374"><div class="ttname"><a href="namespacearmnn.xhtml#a4c42dfd9db4a47e470b5800bb11a8374">armnn::ClReduceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClReduceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReduceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_reduce_workload_8cpp_source.xhtml#l00018">ClReduceWorkload.cpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa02f01bbcb48c67f5b2efc4132ec5e86"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa02f01bbcb48c67f5b2efc4132ec5e86">&#9670;&nbsp;</a></span>IsReshapeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsReshapeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00837">837</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_reshape_workload_8cpp_source.xhtml#l00015">armnn::ClReshapeWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;{</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af5bb7a834a74983cbbc249785d0c392b">ClReshapeWorkloadValidate</a>, reasonIfUnsupported, input, output);</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_af5bb7a834a74983cbbc249785d0c392b"><div class="ttname"><a href="namespacearmnn.xhtml#af5bb7a834a74983cbbc249785d0c392b">armnn::ClReshapeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClReshapeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_reshape_workload_8cpp_source.xhtml#l00015">ClReshapeWorkload.cpp:15</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0f29f31e1ba46a52eedcdecd34f4cc24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f29f31e1ba46a52eedcdecd34f4cc24">&#9670;&nbsp;</a></span>IsResizeBilinearSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsResizeBilinearSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0f29f31e1ba46a52eedcdecd34f4cc24">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00854">854</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::Bilinear</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00846">ClLayerSupport::IsResizeSupported()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00835">ResizeDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00833">ResizeDescriptor::m_Method</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00830">ResizeDescriptor::m_TargetHeight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00828">ResizeDescriptor::m_TargetWidth</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;{</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    ResizeDescriptor descriptor;</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    descriptor.m_Method     = <a class="code" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">ResizeMethod::Bilinear</a>;</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    descriptor.m_DataLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>;</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="keyword">const</span> TensorShape&amp; outputShape = output.GetShape();</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    descriptor.m_TargetHeight = outputShape[2];</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    descriptor.m_TargetWidth  = outputShape[3];</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">IsResizeSupported</a>(input, output, descriptor, reasonIfUnsupported);</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a3d27a3fc6a7df0b68d80cb113aff8b6c"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">armnn::ClLayerSupport::IsResizeSupported</a></div><div class="ttdeci">bool IsResizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00846">ClLayerSupport.cpp:846</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f"><div class="ttname"><a href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::ResizeMethod::Bilinear</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3d27a3fc6a7df0b68d80cb113aff8b6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d27a3fc6a7df0b68d80cb113aff8b6c">&#9670;&nbsp;</a></span>IsResizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsResizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00846">846</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_resize_workload_8cpp_source.xhtml#l00022">armnn::ClResizeWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00854">ClLayerSupport::IsResizeBilinearSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;{</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a95b187d3c6b7b46f4fbdc60be69fc02c">ClResizeWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a95b187d3c6b7b46f4fbdc60be69fc02c"><div class="ttname"><a href="namespacearmnn.xhtml#a95b187d3c6b7b46f4fbdc60be69fc02c">armnn::ClResizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClResizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_resize_workload_8cpp_source.xhtml#l00022">ClResizeWorkload.cpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a10ae4d84b0d31580f6fcd5107322ebcf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10ae4d84b0d31580f6fcd5107322ebcf">&#9670;&nbsp;</a></span>IsRsqrtSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsRsqrtSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a10ae4d84b0d31580f6fcd5107322ebcf">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00869">869</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00453">ClLayerSupport::IsElementwiseUnarySupported()</a>, and <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::Rsqrt</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;{</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    ElementwiseUnaryDescriptor descriptor(<a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>);</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a5d99bdae7b6b2d5d1243f21cd59befb8">IsElementwiseUnarySupported</a>(input, output, descriptor, reasonIfUnsupported);</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a5d99bdae7b6b2d5d1243f21cd59befb8"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a5d99bdae7b6b2d5d1243f21cd59befb8">armnn::ClLayerSupport::IsElementwiseUnarySupported</a></div><div class="ttdeci">bool IsElementwiseUnarySupported(const TensorInfo &amp;input, const TensorInfo &amp;ouput, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00453">ClLayerSupport.cpp:453</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0e14dafa85cfcd4a6b6b752284b51e63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e14dafa85cfcd4a6b6b752284b51e63">&#9670;&nbsp;</a></span>IsSliceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSliceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00877">877</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_slice_workload_8cpp_source.xhtml#l00018">armnn::ClSliceWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;{</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a6d85d2806d0a90140832ad8113c1d350">ClSliceWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a6d85d2806d0a90140832ad8113c1d350"><div class="ttname"><a href="namespacearmnn.xhtml#a6d85d2806d0a90140832ad8113c1d350">armnn::ClSliceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSliceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_slice_workload_8cpp_source.xhtml#l00018">ClSliceWorkload.cpp:18</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8385cf8227907904a6a86fac318fc099"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8385cf8227907904a6a86fac318fc099">&#9670;&nbsp;</a></span>IsSoftmaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSoftmaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8385cf8227907904a6a86fac318fc099">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00885">885</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_softmax_workload_8cpp_source.xhtml#l00017">armnn::ClSoftmaxWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;{</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#abc6f7e5fe77e5aed3f7842755dd34073">ClSoftmaxWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abc6f7e5fe77e5aed3f7842755dd34073"><div class="ttname"><a href="namespacearmnn.xhtml#abc6f7e5fe77e5aed3f7842755dd34073">armnn::ClSoftmaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSoftmaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_softmax_workload_8cpp_source.xhtml#l00017">ClSoftmaxWorkload.cpp:17</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3adfc31e079a970e028e537ec05fabf5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3adfc31e079a970e028e537ec05fabf5">&#9670;&nbsp;</a></span>IsSpaceToBatchNdSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSpaceToBatchNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3adfc31e079a970e028e537ec05fabf5">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00893">893</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_space_to_batch_nd_workload_8cpp_source.xhtml#l00023">armnn::ClSpaceToBatchNdWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;{</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a534b28fd4b345bbc938d055ff5b8970f">ClSpaceToBatchNdWorkloadValidate</a>,</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                                   input,</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;                                   output,</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;                                   descriptor);</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a534b28fd4b345bbc938d055ff5b8970f"><div class="ttname"><a href="namespacearmnn.xhtml#a534b28fd4b345bbc938d055ff5b8970f">armnn::ClSpaceToBatchNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSpaceToBatchNdWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_space_to_batch_nd_workload_8cpp_source.xhtml#l00023">ClSpaceToBatchNdWorkload.cpp:23</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab2af1e7da9490d29e569d271e16b0d5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2af1e7da9490d29e569d271e16b0d5c">&#9670;&nbsp;</a></span>IsSpaceToDepthSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSpaceToDepthSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00905">905</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_space_to_depth_workload_8cpp_source.xhtml#l00051">armnn::ClSpaceToDepthWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;{</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a4fa3292a277dde3b46be6a44b2de9713">ClSpaceToDepthWorkloadValidate</a>,</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;                                   input,</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;                                   output,</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;                                   descriptor);</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4fa3292a277dde3b46be6a44b2de9713"><div class="ttname"><a href="namespacearmnn.xhtml#a4fa3292a277dde3b46be6a44b2de9713">armnn::ClSpaceToDepthWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSpaceToDepthWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_space_to_depth_workload_8cpp_source.xhtml#l00051">ClSpaceToDepthWorkload.cpp:51</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a17dd12822d49a23d24198f425a6fb9c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17dd12822d49a23d24198f425a6fb9c4">&#9670;&nbsp;</a></span>IsSplitterSupported() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSplitterSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a17dd12822d49a23d24198f425a6fb9c4">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00917">917</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, and <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;{</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <span class="keywordflow">return</span> IsSupportedForDataTypeCl(reasonIfUnsupported,</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;                                    input.GetDataType(),</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;                                    &amp;TrueFunc&lt;&gt;,</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;                                    &amp;TrueFunc&lt;&gt;);</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa746e752ce8874669ea549f8e50896da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa746e752ce8874669ea549f8e50896da">&#9670;&nbsp;</a></span>IsSplitterSupported() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSplitterSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>outputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa746e752ce8874669ea549f8e50896da">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00928">928</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_splitter_workload_8cpp_source.xhtml#l00031">armnn::ClSplitterWorkloadValidate()</a>, <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00219">armnn::ComputeSplitAxis()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00300">ViewsDescriptor::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00434">TensorInfo::IsTypeSpaceMatch()</a>, and <a class="el" href="_layer_support_common_8hpp_source.xhtml#l00017">armnn::SetValueChecked()</a>.</p>
<div class="fragment"><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;{</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTECL_ENABLED)</span></div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <span class="comment">// Split along the last dimension, cannot use sub-tensors</span></div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <span class="comment">// as width and height of the sub-tensors do not match</span></div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="comment">// the width and height of the parent tensor</span></div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    <span class="comment">// in case of input with more than 2D.</span></div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;    std::set&lt;unsigned int&gt; splitAxis = <a class="code" href="namespacearmnn.xhtml#a8cbabc875597b3bed0ccdc0adb289fde">ComputeSplitAxis</a>(descriptor, input.GetShape());</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    <span class="keywordflow">if</span> (descriptor.GetNumDimensions() &gt; 2 &amp;&amp; splitAxis.size() == 1 &amp;&amp;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        *splitAxis.begin() == descriptor.GetNumDimensions() - 1 )</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    {</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;        <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a3ac8a60f837b19b20987e4fd238ce0cd">ClSplitterWorkloadValidate</a>,</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                                       reasonIfUnsupported,</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                                       input,</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                                       outputs,</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                                       *splitAxis.begin());</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    }</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> output : outputs)</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    {</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;        <span class="keywordflow">if</span> (!input.IsTypeSpaceMatch(output)) <span class="comment">// Cannot use sub-tensors if the types are not same space</span></div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;        {</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(reasonIfUnsupported, <span class="stringliteral">&quot;Cl Splitter: Types and quantization parameters must match.&quot;</span>);</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;        }</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    }</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a3ac8a60f837b19b20987e4fd238ce0cd"><div class="ttname"><a href="namespacearmnn.xhtml#a3ac8a60f837b19b20987e4fd238ce0cd">armnn::ClSplitterWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSplitterWorkloadValidate(const TensorInfo &amp;input, const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt;&gt; &amp;outputs, unsigned int splitAxis)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_splitter_workload_8cpp_source.xhtml#l00031">ClSplitterWorkload.cpp:31</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8cbabc875597b3bed0ccdc0adb289fde"><div class="ttname"><a href="namespacearmnn.xhtml#a8cbabc875597b3bed0ccdc0adb289fde">armnn::ComputeSplitAxis</a></div><div class="ttdeci">std::set&lt; unsigned int &gt; ComputeSplitAxis(const armnn::SplitterDescriptor &amp;desc, const TensorShape &amp;input)</div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_utils_8hpp_source.xhtml#l00219">ArmComputeUtils.hpp:219</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a13c7d751e4d37f65a6d40c3c6e50d2b8"><div class="ttname"><a href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">armnn::SetValueChecked</a></div><div class="ttdeci">void SetValueChecked(Optional&lt; T &amp;&gt; optionalRef, V &amp;&amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_common_8hpp_source.xhtml#l00017">LayerSupportCommon.hpp:17</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab4609f1baf5fcd295951f3c8abdffd90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4609f1baf5fcd295951f3c8abdffd90">&#9670;&nbsp;</a></span>IsStackSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsStackSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00961">961</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_stack_workload_8cpp_source.xhtml#l00029">armnn::ClStackWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;{</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8c9fec997dbb5db4cdb433c36d075782">ClStackWorkloadValidate</a>,</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;                                   inputs,</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                                   output,</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;                                   descriptor);</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8c9fec997dbb5db4cdb433c36d075782"><div class="ttname"><a href="namespacearmnn.xhtml#a8c9fec997dbb5db4cdb433c36d075782">armnn::ClStackWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClStackWorkloadValidate(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_stack_workload_8cpp_source.xhtml#l00029">ClStackWorkload.cpp:29</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac054cb25099005eac854afb1511340f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac054cb25099005eac854afb1511340f0">&#9670;&nbsp;</a></span>IsStridedSliceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsStridedSliceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ac054cb25099005eac854afb1511340f0">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00973">973</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_strided_slice_workload_8cpp_source.xhtml#l00027">armnn::ClStridedSliceWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;{</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a157e0508f6d6d08e3ca4cf6c661242e6">ClStridedSliceWorkloadValidate</a>,</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;                                   input,</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                                   output,</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                                   descriptor);</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a157e0508f6d6d08e3ca4cf6c661242e6"><div class="ttname"><a href="namespacearmnn.xhtml#a157e0508f6d6d08e3ca4cf6c661242e6">armnn::ClStridedSliceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClStridedSliceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_strided_slice_workload_8cpp_source.xhtml#l00027">ClStridedSliceWorkload.cpp:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af6c947e4d4b25bc49d92d18d4ff26736"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6c947e4d4b25bc49d92d18d4ff26736">&#9670;&nbsp;</a></span>IsSubtractionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSubtractionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00985">985</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_subtraction_workload_8cpp_source.xhtml#l00043">armnn::ClSubtractionValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;{</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#afa9933f1d9de469ffba5ba0fcee769f8">ClSubtractionValidate</a>,</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                                   input0,</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;                                   input1,</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                                   output,</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_afa9933f1d9de469ffba5ba0fcee769f8"><div class="ttname"><a href="namespacearmnn.xhtml#afa9933f1d9de469ffba5ba0fcee769f8">armnn::ClSubtractionValidate</a></div><div class="ttdeci">arm_compute::Status ClSubtractionValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_subtraction_workload_8cpp_source.xhtml#l00043">ClSubtractionWorkload.cpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0c69484f19ed650ad48b716719114e51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c69484f19ed650ad48b716719114e51">&#9670;&nbsp;</a></span>IsTransposeConvolution2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTransposeConvolution2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0c69484f19ed650ad48b716719114e51">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00998">998</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_transpose_convolution2d_workload_8cpp_source.xhtml#l00026">armnn::ClTransposeConvolution2dWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;{</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a719ea81939d6a25f8636b52c59165d66">ClTransposeConvolution2dWorkloadValidate</a>,</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;                                   input,</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;                                   output,</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;                                   descriptor,</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                                   weights,</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;                                   biases);</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;}</div><div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a719ea81939d6a25f8636b52c59165d66"><div class="ttname"><a href="namespacearmnn.xhtml#a719ea81939d6a25f8636b52c59165d66">armnn::ClTransposeConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClTransposeConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_transpose_convolution2d_workload_8cpp_source.xhtml#l00026">ClTransposeConvolution2dWorkload.cpp:26</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0189645f33641b280877a1b2f6ba9fee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0189645f33641b280877a1b2f6ba9fee">&#9670;&nbsp;</a></span>IsTransposeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTransposeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0189645f33641b280877a1b2f6ba9fee">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01014">1014</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_transpose_workload_8cpp_source.xhtml#l00017">armnn::ClTransposeWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00142">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;{</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a1c3a39fbecb45be0bb15dd665c9be61d">ClTransposeWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a1c3a39fbecb45be0bb15dd665c9be61d"><div class="ttname"><a href="namespacearmnn.xhtml#a1c3a39fbecb45be0bb15dd665c9be61d">armnn::ClTransposeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClTransposeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_transpose_workload_8cpp_source.xhtml#l00017">ClTransposeWorkload.cpp:17</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00142">ClLayerSupport.cpp:142</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/cl/<a class="el" href="_cl_layer_support_8hpp_source.xhtml">ClLayerSupport.hpp</a></li>
<li>src/backends/cl/<a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml">ClLayerSupport</a></li>
    <li class="footer">Generated on Tue Aug 24 2021 16:18:48 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
