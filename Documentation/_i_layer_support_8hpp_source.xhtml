<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: include/armnn/ILayerSupport.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_i_layer_support_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ILayerSupport.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_i_layer_support_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_deprecated_8hpp.xhtml">armnn/Deprecated.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_descriptors_fwd_8hpp.xhtml">armnn/DescriptorsFwd.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_lstm_params_8hpp.xhtml">armnn/LstmParams.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_optional_8hpp.xhtml">armnn/Optional.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_quantized_lstm_params_8hpp.xhtml">armnn/QuantizedLstmParams.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;cctype&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">class </span>TensorInfo;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_layer_support.xhtml">   23</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_layer_support.xhtml#aab2a487bc88047443d8a0f87c3c40b8d">   26</a></span>&#160;    <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aab2a487bc88047443d8a0f87c3c40b8d">ILayerSupport</a>() {}</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_layer_support.xhtml#a9e7f4f28576904804cd759e49173beeb">   27</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a9e7f4f28576904804cd759e49173beeb">~ILayerSupport</a>() {}</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use IsElementwiseUnarySupported instead&quot;</span>)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5588d9c90ee688f83eb1df4f9110ceee">IsAbsSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                                <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a787fcb2a22d45abc7b75644fd1c45743">IsActivationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                                       <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a09e005510eccbbfa14bed9205c27523a">IsAdditionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                     <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#afb1f9c150c3705ccdff06d3bda0f705d">IsArgMinMaxSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                      <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a3ebfb6e31ffd51c948ebf4e668ee6a13">IsBatchNormalizationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; mean,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; var,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; beta,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; gamma,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                                               <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a3a2d1bd9f4db345c6e8cbebe507e1220">IsBatchToSpaceNdSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aa9e12845869a571af314feb775bfcf8d">IsComparisonSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                       <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a48bb43166dd8d7a27428a19738c73e54">IsConcatSupported</a>(<span class="keyword">const</span> std::vector&lt;const TensorInfo*&gt; inputs,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a7e62e57c8c2b25d2b8b657d6c1bedfce">IsConstantSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                     <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a585d0743307644154123b0081c9fddbb">IsConvertFp16ToFp32Supported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                                              <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aeacc3d08bdf5c5190a2b6d219e28620f">IsConvertFp32ToFp16Supported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                              <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a0e8af0ce614d9a30c7398e1aa786d468">IsConvolution2dSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; weights,</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; biases,</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a0ec5e547fe4b097ad19b6992e23e267d">IsDebugSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                  <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ada2ab8d017b73994f8cdc38c29e0fb60">IsDepthToSpaceSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">DepthToSpaceDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a38078f04a0521624c71262291252dedd">IsDepthwiseConvolutionSupported</a>(</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; weights,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; biases,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                     <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aeff699f129c41cdd7b4a49569aa4fffb">IsDequantizeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                       <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a1aecac7de9b71cfaaadecda47edc56c0">IsDetectionPostProcessSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; detectionBoxes,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; detectionClasses,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; detectionScores,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; numDetections,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> =0;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4bee87b6d7a78ee4a3d6cecc7ad8a77a">IsDilatedDepthwiseConvolutionSupported</a>(</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; weights,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; biases,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca2cc0ccc6a468bc5374fa2839258802">IsDivisionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                     <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4a6603d415b4e963cacd9ede220b8119">IsElementwiseUnarySupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use IsComparisonSupported instead&quot;</span>)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a26dde72aa68a605bd5cf89b85cde8650">IsEqualSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                  <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aa467d4de09eb4bd51e02122fb3d6e7c0">IsFakeQuantizationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a0683efc6cc81f888eccab0c637674f7a">IsFloorSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                  <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#af5f8d5b50e69b8003357895450ee57bd">IsFullyConnectedSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; weights,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; biases,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a95a7b2d7b19575a98f3548f37bff2540">IsGatherSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use IsComparisonSupported instead&quot;</span>)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#af623e15fff281da8bb4bad997151c9ab">IsGreaterSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; ouput,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a302869e220458e13c7e82c2671e5280c">IsInputSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                  <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a7e16e155e7f7445789e68424a9a870c5">IsInstanceNormalizationSupported</a>(</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#af189848668211807688a56aac54978bf">IsL2NormalizationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                            <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab5d791a3bc50549b3805a982bf4959d8">IsLogSoftmaxSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">LogSoftmaxDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                       <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5942cec16b5719b59c4e80bc8be90342">IsLstmSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputStateIn,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; cellStateIn,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; scratchBuffer,</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputStateOut,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; cellStateOut,</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a>&amp; paramsInfo,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aeeb17ef5763db43063b6e98d0a692e1f">IsMaximumSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4fc33395e8e392ba59eedcb721dc6d3d">IsMeanSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aef4d9a4b703b1a15558633b5802c663b">IsMemCopySupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#af0cb232661c1e1bf9d253f396b6b4f4c">IsMemImportSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                      <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ad30162aa20f5484d48982537fdd42a04">IsMergeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                  <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use IsConcatSupported instead&quot;</span>)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a429c2f3a583e59b1215d2902cd55edff">IsMergerSupported</a>(<span class="keyword">const</span> std::vector&lt;const TensorInfo*&gt; inputs,</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a76e472f67b857c5619c1751e0cd20a5c">IsMinimumSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; ouput,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aacb0b7d0aa3b7c495981f3e7ae6108e5">IsMultiplicationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a09beb238888a3795a11e28b2f439a2c7">IsNormalizationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a3852eb9f8af92ee3dc7ddcbb3590d9e2">IsOutputSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a521e7f59a1ca7699c5182245fb52fb68">IsPadSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aaa4433e57a90fc106e9ca227cbf21acc">IsPermuteSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a7d355424568d0383d53da623d88e4002">IsPooling2dSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                      <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a645dc9fbc6b5da2c9b3124eea544044e">IsPreCompiledSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a8356620b4723ae24b897940a44cca12e">IsPreluSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; alpha,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                  <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a2e700405a95007bf3cdcfee4edd5faf6">IsQuantizeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                     <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#acbd0bc4ae2c7dafaa43a1f4558dec9e9">IsQuantizedLstmSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; previousCellStateIn,</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; previousOutputIn,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; cellStateOut,</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a>&amp; paramsInfo,</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5b4e5775549210130fda73dbf9ff5805">IsReshapeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use IsResizeSupported instead&quot;</span>)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a0ea3f88552957d51ecf39aa084493dad">IsResizeBilinearSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a139c7fa3f4d25a1f8e63c4db26ed882a">IsResizeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use IsElementwiseUnarySupported instead&quot;</span>)</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a1f421ed5bcee87cd4bb2fcccd8d79400">IsRsqrtSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                  <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5176e7f87f418561082d8c6310215cf7">IsSliceSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                  <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a0653b070e13f6003314ff70c83dfdf82">IsSoftmaxSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a72900e5d5a48a3f5bab04b9bc53ad4cb">IsSpaceToBatchNdSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aad5b9a346998e69ce24668f474e8a41f">IsSpaceToDepthSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use IsSplitterSupported with outputs instead&quot;</span>)</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a3475373a82a2dcea43f49157e72c2d1e">IsSplitterSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                                     <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a3475373a82a2dcea43f49157e72c2d1e">IsSplitterSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                                     <span class="keyword">const</span> std::vector&lt;std::reference_wrapper&lt;TensorInfo&gt;&gt;&amp; outputs,</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                                     <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a3c875cde7fb98d33b415361653fe170e">IsStackSupported</a>(<span class="keyword">const</span> std::vector&lt;const TensorInfo*&gt;&amp; inputs,</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                  <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab44a343d43671032ae1395b06508ac36">IsStandInSupported</a>(<span class="keyword">const</span> std::vector&lt;const TensorInfo*&gt;&amp; inputs,</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                    <span class="keyword">const</span> std::vector&lt;const TensorInfo*&gt;&amp; outputs,</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aec35c53952d13100216d2a2b9f63b98c">IsStridedSliceSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#af76dce64a3338e037bb8eb41e5a219aa">IsSubtractionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                                        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#af05157bd75bb2a7a3a942be85945321a">IsSwitchSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output0,</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output1,</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a0cd42985d5a85895204331e19d2e4c75">IsTransposeConvolution2dSupported</a>(</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; weights,</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; biases,</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4d18c121fd6e27cceda23776e3418be5">IsTransposeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                      <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;}; <span class="comment">// class ILayerSupport</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a11fa919c11fe46aad613b2e960fcfe90">  379</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a11fa919c11fe46aad613b2e960fcfe90">ILayerSupportSharedPtr</a> = std::shared_ptr&lt;ILayerSupport&gt;;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a4d18c121fd6e27cceda23776e3418be5"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4d18c121fd6e27cceda23776e3418be5">armnn::ILayerSupport::IsTransposeSupported</a></div><div class="ttdeci">virtual bool IsTransposeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a0e8af0ce614d9a30c7398e1aa786d468"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a0e8af0ce614d9a30c7398e1aa786d468">armnn::ILayerSupport::IsConvolution2dSupported</a></div><div class="ttdeci">virtual bool IsConvolution2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a7e16e155e7f7445789e68424a9a870c5"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a7e16e155e7f7445789e68424a9a870c5">armnn::ILayerSupport::IsInstanceNormalizationSupported</a></div><div class="ttdeci">virtual bool IsInstanceNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml">armnn::ViewsDescriptor</a></div><div class="ttdoc">A ViewsDescriptor for the SplitterLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00190">Descriptors.hpp:190</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">armnn::TransposeConvolution2dDescriptor</a></div><div class="ttdoc">A TransposeConvolution2dDescriptor for the TransposeConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01079">Descriptors.hpp:1079</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a></div><div class="ttdoc">A ReshapeDescriptor for the ReshapeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00758">Descriptors.hpp:758</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ada2ab8d017b73994f8cdc38c29e0fb60"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ada2ab8d017b73994f8cdc38c29e0fb60">armnn::ILayerSupport::IsDepthToSpaceSupported</a></div><div class="ttdeci">virtual bool IsDepthToSpaceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a0ea3f88552957d51ecf39aa084493dad"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a0ea3f88552957d51ecf39aa084493dad">armnn::ILayerSupport::IsResizeBilinearSupported</a></div><div class="ttdeci">virtual bool IsResizeBilinearSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_af0cb232661c1e1bf9d253f396b6b4f4c"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#af0cb232661c1e1bf9d253f396b6b4f4c">armnn::ILayerSupport::IsMemImportSupported</a></div><div class="ttdeci">virtual bool IsMemImportSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="structarmnn_1_1_comparison_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_comparison_descriptor.xhtml">armnn::ComparisonDescriptor</a></div><div class="ttdoc">A ComparisonDescriptor for the ComparisonLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00062">Descriptors.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a0683efc6cc81f888eccab0c637674f7a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a0683efc6cc81f888eccab0c637674f7a">armnn::ILayerSupport::IsFloorSupported</a></div><div class="ttdeci">virtual bool IsFloorSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00392">Descriptors.hpp:392</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a585d0743307644154123b0081c9fddbb"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a585d0743307644154123b0081c9fddbb">armnn::ILayerSupport::IsConvertFp16ToFp32Supported</a></div><div class="ttdeci">virtual bool IsConvertFp16ToFp32Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a11fa919c11fe46aad613b2e960fcfe90"><div class="ttname"><a href="namespacearmnn.xhtml#a11fa919c11fe46aad613b2e960fcfe90">armnn::ILayerSupportSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; ILayerSupport &gt; ILayerSupportSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00379">ILayerSupport.hpp:379</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ad30162aa20f5484d48982537fdd42a04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ad30162aa20f5484d48982537fdd42a04">armnn::ILayerSupport::IsMergeSupported</a></div><div class="ttdeci">virtual bool IsMergeSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="_quantized_lstm_params_8hpp_xhtml"><div class="ttname"><a href="_quantized_lstm_params_8hpp.xhtml">QuantizedLstmParams.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a0cd42985d5a85895204331e19d2e4c75"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a0cd42985d5a85895204331e19d2e4c75">armnn::ILayerSupport::IsTransposeConvolution2dSupported</a></div><div class="ttdeci">virtual bool IsTransposeConvolution2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_af623e15fff281da8bb4bad997151c9ab"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#af623e15fff281da8bb4bad997151c9ab">armnn::ILayerSupport::IsGreaterSupported</a></div><div class="ttdeci">virtual bool IsGreaterSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;ouput, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a429c2f3a583e59b1215d2902cd55edff"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a429c2f3a583e59b1215d2902cd55edff">armnn::ILayerSupport::IsMergerSupported</a></div><div class="ttdeci">virtual bool IsMergerSupported(const std::vector&lt; const TensorInfo *&gt; inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aeeb17ef5763db43063b6e98d0a692e1f"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aeeb17ef5763db43063b6e98d0a692e1f">armnn::ILayerSupport::IsMaximumSupported</a></div><div class="ttdeci">virtual bool IsMaximumSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml">armnn::ILayerSupport</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00023">ILayerSupport.hpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a0ec5e547fe4b097ad19b6992e23e267d"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a0ec5e547fe4b097ad19b6992e23e267d">armnn::ILayerSupport::IsDebugSupported</a></div><div class="ttdeci">virtual bool IsDebugSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a48bb43166dd8d7a27428a19738c73e54"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a48bb43166dd8d7a27428a19738c73e54">armnn::ILayerSupport::IsConcatSupported</a></div><div class="ttdeci">virtual bool IsConcatSupported(const std::vector&lt; const TensorInfo *&gt; inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ada422a73ac4e68bcb1b1b1f0b44028d9"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a></div><div class="ttdeci">std::vector&lt; float &gt; boxEncodings({ 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f })</div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="_lstm_params_8hpp_xhtml"><div class="ttname"><a href="_lstm_params_8hpp.xhtml">LstmParams.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a9e7f4f28576904804cd759e49173beeb"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a9e7f4f28576904804cd759e49173beeb">armnn::ILayerSupport::~ILayerSupport</a></div><div class="ttdeci">virtual ~ILayerSupport()</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00027">ILayerSupport.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a3475373a82a2dcea43f49157e72c2d1e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a3475373a82a2dcea43f49157e72c2d1e">armnn::ILayerSupport::IsSplitterSupported</a></div><div class="ttdeci">virtual bool IsSplitterSupported(const TensorInfo &amp;input, const ViewsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::SpaceToDepthDescriptor</a></div><div class="ttdoc">A SpaceToDepthDescriptor for the SpaceToDepthLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00810">Descriptors.hpp:810</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a95a7b2d7b19575a98f3548f37bff2540"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a95a7b2d7b19575a98f3548f37bff2540">armnn::ILayerSupport::IsGatherSupported</a></div><div class="ttdeci">virtual bool IsGatherSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aacb0b7d0aa3b7c495981f3e7ae6108e5"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aacb0b7d0aa3b7c495981f3e7ae6108e5">armnn::ILayerSupport::IsMultiplicationSupported</a></div><div class="ttdeci">virtual bool IsMultiplicationSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a></div><div class="ttdoc">A BatchToSpaceNdDescriptor for the BatchToSpaceNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00657">Descriptors.hpp:657</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a3a2d1bd9f4db345c6e8cbebe507e1220"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a3a2d1bd9f4db345c6e8cbebe507e1220">armnn::ILayerSupport::IsBatchToSpaceNdSupported</a></div><div class="ttdeci">virtual bool IsBatchToSpaceNdSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a></div><div class="ttdoc">A ResizeDescriptor for the ResizeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00724">Descriptors.hpp:724</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml">armnn::StackDescriptor</a></div><div class="ttdoc">A StackDescriptor for the StackLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00950">Descriptors.hpp:950</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a></div><div class="ttdoc">A PadDescriptor for the PadLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00901">Descriptors.hpp:901</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a5942cec16b5719b59c4e80bc8be90342"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a5942cec16b5719b59c4e80bc8be90342">armnn::ILayerSupport::IsLstmSupported</a></div><div class="ttdeci">virtual bool IsLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a4a6603d415b4e963cacd9ede220b8119"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4a6603d415b4e963cacd9ede220b8119">armnn::ILayerSupport::IsElementwiseUnarySupported</a></div><div class="ttdeci">virtual bool IsElementwiseUnarySupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a0653b070e13f6003314ff70c83dfdf82"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a0653b070e13f6003314ff70c83dfdf82">armnn::ILayerSupport::IsSoftmaxSupported</a></div><div class="ttdeci">virtual bool IsSoftmaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml">armnn::LstmInputParamsInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00063">LstmParams.hpp:63</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a5176e7f87f418561082d8c6310215cf7"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a5176e7f87f418561082d8c6310215cf7">armnn::ILayerSupport::IsSliceSupported</a></div><div class="ttdeci">virtual bool IsSliceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab44a343d43671032ae1395b06508ac36"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab44a343d43671032ae1395b06508ac36">armnn::ILayerSupport::IsStandInSupported</a></div><div class="ttdeci">virtual bool IsStandInSupported(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const std::vector&lt; const TensorInfo *&gt; &amp;outputs, const StandInDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a></div><div class="ttdoc">An LstmDescriptor for the LstmLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00837">Descriptors.hpp:837</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a645dc9fbc6b5da2c9b3124eea544044e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a645dc9fbc6b5da2c9b3124eea544044e">armnn::ILayerSupport::IsPreCompiledSupported</a></div><div class="ttdeci">virtual bool IsPreCompiledSupported(const TensorInfo &amp;input, const PreCompiledDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a3ebfb6e31ffd51c948ebf4e668ee6a13"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a3ebfb6e31ffd51c948ebf4e668ee6a13">armnn::ILayerSupport::IsBatchNormalizationSupported</a></div><div class="ttdeci">virtual bool IsBatchNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="_optional_8hpp_xhtml"><div class="ttname"><a href="_optional_8hpp.xhtml">Optional.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a521e7f59a1ca7699c5182245fb52fb68"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a521e7f59a1ca7699c5182245fb52fb68">armnn::ILayerSupport::IsPadSupported</a></div><div class="ttdeci">virtual bool IsPadSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">armnn::QuantizedLstmInputParamsInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00119">QuantizedLstmParams.hpp:119</a></div></div>
<div class="ttc" id="structarmnn_1_1_l2_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_descriptor.xhtml">armnn::L2NormalizationDescriptor</a></div><div class="ttdoc">A L2NormalizationDescriptor for the L2NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00591">Descriptors.hpp:591</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a></div><div class="ttdoc">An ArgMinMaxDescriptor for ArgMinMaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00043">Descriptors.hpp:43</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml">armnn::OriginsDescriptor</a></div><div class="ttdoc">An OriginsDescriptor for the ConcatLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00147">Descriptors.hpp:147</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a></div><div class="ttdoc">A FullyConnectedDescriptor for the FullyConnectedLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00373">Descriptors.hpp:373</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aaa4433e57a90fc106e9ca227cbf21acc"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aaa4433e57a90fc106e9ca227cbf21acc">armnn::ILayerSupport::IsPermuteSupported</a></div><div class="ttdeci">virtual bool IsPermuteSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab5d791a3bc50549b3805a982bf4959d8"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab5d791a3bc50549b3805a982bf4959d8">armnn::ILayerSupport::IsLogSoftmaxSupported</a></div><div class="ttdeci">virtual bool IsLogSoftmaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aef4d9a4b703b1a15558633b5802c663b"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aef4d9a4b703b1a15558633b5802c663b">armnn::ILayerSupport::IsMemCopySupported</a></div><div class="ttdeci">virtual bool IsMemCopySupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a4fc33395e8e392ba59eedcb721dc6d3d"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4fc33395e8e392ba59eedcb721dc6d3d">armnn::ILayerSupport::IsMeanSupported</a></div><div class="ttdeci">virtual bool IsMeanSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a302869e220458e13c7e82c2671e5280c"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a302869e220458e13c7e82c2671e5280c">armnn::ILayerSupport::IsInputSupported</a></div><div class="ttdeci">virtual bool IsInputSupported(const TensorInfo &amp;input, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a5b4e5775549210130fda73dbf9ff5805"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a5b4e5775549210130fda73dbf9ff5805">armnn::ILayerSupport::IsReshapeSupported</a></div><div class="ttdeci">virtual bool IsReshapeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReshapeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_fake_quantization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fake_quantization_descriptor.xhtml">armnn::FakeQuantizationDescriptor</a></div><div class="ttdoc">A FakeQuantizationDescriptor for the FakeQuantizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00688">Descriptors.hpp:688</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a787fcb2a22d45abc7b75644fd1c45743"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a787fcb2a22d45abc7b75644fd1c45743">armnn::ILayerSupport::IsActivationSupported</a></div><div class="ttdeci">virtual bool IsActivationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a38078f04a0521624c71262291252dedd"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a38078f04a0521624c71262291252dedd">armnn::ILayerSupport::IsDepthwiseConvolutionSupported</a></div><div class="ttdeci">virtual bool IsDepthwiseConvolutionSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_stand_in_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stand_in_descriptor.xhtml">armnn::StandInDescriptor</a></div><div class="ttdoc">A StandInDescriptor for the StandIn layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00980">Descriptors.hpp:980</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aca2cc0ccc6a468bc5374fa2839258802"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aca2cc0ccc6a468bc5374fa2839258802">armnn::ILayerSupport::IsDivisionSupported</a></div><div class="ttdeci">virtual bool IsDivisionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_af189848668211807688a56aac54978bf"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#af189848668211807688a56aac54978bf">armnn::ILayerSupport::IsL2NormalizationSupported</a></div><div class="ttdeci">virtual bool IsL2NormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00020">Descriptors.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a2e700405a95007bf3cdcfee4edd5faf6"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a2e700405a95007bf3cdcfee4edd5faf6">armnn::ILayerSupport::IsQuantizeSupported</a></div><div class="ttdeci">virtual bool IsQuantizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_slice_descriptor.xhtml">armnn::SliceDescriptor</a></div><div class="ttdoc">A SliceDescriptor for the SliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00927">Descriptors.hpp:927</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a1f421ed5bcee87cd4bb2fcccd8d79400"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a1f421ed5bcee87cd4bb2fcccd8d79400">armnn::ILayerSupport::IsRsqrtSupported</a></div><div class="ttdeci">virtual bool IsRsqrtSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a7d355424568d0383d53da623d88e4002"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a7d355424568d0383d53da623d88e4002">armnn::ILayerSupport::IsPooling2dSupported</a></div><div class="ttdeci">virtual bool IsPooling2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_afb1f9c150c3705ccdff06d3bda0f705d"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#afb1f9c150c3705ccdff06d3bda0f705d">armnn::ILayerSupport::IsArgMinMaxSupported</a></div><div class="ttdeci">virtual bool IsArgMinMaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a8356620b4723ae24b897940a44cca12e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a8356620b4723ae24b897940a44cca12e">armnn::ILayerSupport::IsPreluSupported</a></div><div class="ttdeci">virtual bool IsPreluSupported(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a></div><div class="ttdoc">A SpaceToBatchNdDescriptor for the SpaceToBatchNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00778">Descriptors.hpp:778</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml"><div class="ttname"><a href="_deprecated_8hpp.xhtml">Deprecated.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a3c875cde7fb98d33b415361653fe170e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a3c875cde7fb98d33b415361653fe170e">armnn::ILayerSupport::IsStackSupported</a></div><div class="ttdeci">virtual bool IsStackSupported(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">armnn::ElementwiseUnaryDescriptor</a></div><div class="ttdoc">A ElementwiseUnaryDescriptor for the ElementwiseUnaryLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00082">Descriptors.hpp:82</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aab2a487bc88047443d8a0f87c3c40b8d"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aab2a487bc88047443d8a0f87c3c40b8d">armnn::ILayerSupport::ILayerSupport</a></div><div class="ttdeci">ILayerSupport()</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00026">ILayerSupport.hpp:26</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a0348e6bb67ace72535bd105219bb6237"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a></div><div class="ttdeci">std::vector&lt; float &gt; scores({ 0.0f, 0.9f, 0.8f, 0.0f, 0.75f, 0.72f, 0.0f, 0.6f, 0.5f, 0.0f, 0.93f, 0.95f, 0.0f, 0.5f, 0.4f, 0.0f, 0.3f, 0.2f })</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aa467d4de09eb4bd51e02122fb3d6e7c0"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aa467d4de09eb4bd51e02122fb3d6e7c0">armnn::ILayerSupport::IsFakeQuantizationSupported</a></div><div class="ttdeci">virtual bool IsFakeQuantizationSupported(const TensorInfo &amp;input, const FakeQuantizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a5588d9c90ee688f83eb1df4f9110ceee"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a5588d9c90ee688f83eb1df4f9110ceee">armnn::ILayerSupport::IsAbsSupported</a></div><div class="ttdeci">virtual bool IsAbsSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aec35c53952d13100216d2a2b9f63b98c"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aec35c53952d13100216d2a2b9f63b98c">armnn::ILayerSupport::IsStridedSliceSupported</a></div><div class="ttdeci">virtual bool IsStridedSliceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_acbd0bc4ae2c7dafaa43a1f4558dec9e9"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#acbd0bc4ae2c7dafaa43a1f4558dec9e9">armnn::ILayerSupport::IsQuantizedLstmSupported</a></div><div class="ttdeci">virtual bool IsQuantizedLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QuantizedLstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a09e005510eccbbfa14bed9205c27523a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a09e005510eccbbfa14bed9205c27523a">armnn::ILayerSupport::IsAdditionSupported</a></div><div class="ttdeci">virtual bool IsAdditionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_mean_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a></div><div class="ttdoc">A MeanDescriptor for the MeanLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00877">Descriptors.hpp:877</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a09beb238888a3795a11e28b2f439a2c7"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a09beb238888a3795a11e28b2f439a2c7">armnn::ILayerSupport::IsNormalizationSupported</a></div><div class="ttdeci">virtual bool IsNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a26dde72aa68a605bd5cf89b85cde8650"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a26dde72aa68a605bd5cf89b85cde8650">armnn::ILayerSupport::IsEqualSupported</a></div><div class="ttdeci">virtual bool IsEqualSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_transpose_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a></div><div class="ttdoc">A TransposeDescriptor for the TransposeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01123">Descriptors.hpp:1123</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a></div><div class="ttdoc">A StridedSliceDescriptor for the StridedSliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01002">Descriptors.hpp:1002</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_af05157bd75bb2a7a3a942be85945321a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#af05157bd75bb2a7a3a942be85945321a">armnn::ILayerSupport::IsSwitchSupported</a></div><div class="ttdeci">virtual bool IsSwitchSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output0, const TensorInfo &amp;output1, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aeacc3d08bdf5c5190a2b6d219e28620f"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aeacc3d08bdf5c5190a2b6d219e28620f">armnn::ILayerSupport::IsConvertFp32ToFp16Supported</a></div><div class="ttdeci">virtual bool IsConvertFp32ToFp16Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_a76fb13a018f8e01087a7ae0eb23509e1"><div class="ttname"><a href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a></div><div class="ttdeci">#define ARMNN_DEPRECATED_MSG(message)</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00043">Deprecated.hpp:43</a></div></div>
<div class="ttc" id="structarmnn_1_1_pre_compiled_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pre_compiled_descriptor.xhtml">armnn::PreCompiledDescriptor</a></div><div class="ttdoc">A PreCompiledDescriptor for the PreCompiledLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01066">Descriptors.hpp:1066</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a72900e5d5a48a3f5bab04b9bc53ad4cb"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a72900e5d5a48a3f5bab04b9bc53ad4cb">armnn::ILayerSupport::IsSpaceToBatchNdSupported</a></div><div class="ttdeci">virtual bool IsSpaceToBatchNdSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="_descriptors_fwd_8hpp_xhtml"><div class="ttname"><a href="_descriptors_fwd_8hpp.xhtml">DescriptorsFwd.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00313">Descriptors.hpp:313</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a></div><div class="ttdoc">A NormalizationDescriptor for the NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00551">Descriptors.hpp:551</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_af76dce64a3338e037bb8eb41e5a219aa"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#af76dce64a3338e037bb8eb41e5a219aa">armnn::ILayerSupport::IsSubtractionSupported</a></div><div class="ttdeci">virtual bool IsSubtractionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00495">Descriptors.hpp:495</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml">armnn::InstanceNormalizationDescriptor</a></div><div class="ttdoc">An InstanceNormalizationDescriptor for InstanceNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00629">Descriptors.hpp:629</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_af5f8d5b50e69b8003357895450ee57bd"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#af5f8d5b50e69b8003357895450ee57bd">armnn::ILayerSupport::IsFullyConnectedSupported</a></div><div class="ttdeci">virtual bool IsFullyConnectedSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const TensorInfo &amp;biases, const FullyConnectedDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aeff699f129c41cdd7b4a49569aa4fffb"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aeff699f129c41cdd7b4a49569aa4fffb">armnn::ILayerSupport::IsDequantizeSupported</a></div><div class="ttdeci">virtual bool IsDequantizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a3852eb9f8af92ee3dc7ddcbb3590d9e2"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a3852eb9f8af92ee3dc7ddcbb3590d9e2">armnn::ILayerSupport::IsOutputSupported</a></div><div class="ttdeci">virtual bool IsOutputSupported(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a139c7fa3f4d25a1f8e63c4db26ed882a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a139c7fa3f4d25a1f8e63c4db26ed882a">armnn::ILayerSupport::IsResizeSupported</a></div><div class="ttdeci">virtual bool IsResizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a></div><div class="ttdoc">A SoftmaxDescriptor for the SoftmaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00123">Descriptors.hpp:123</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a7e62e57c8c2b25d2b8b657d6c1bedfce"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a7e62e57c8c2b25d2b8b657d6c1bedfce">armnn::ILayerSupport::IsConstantSupported</a></div><div class="ttdeci">virtual bool IsConstantSupported(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aa9e12845869a571af314feb775bfcf8d"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aa9e12845869a571af314feb775bfcf8d">armnn::ILayerSupport::IsComparisonSupported</a></div><div class="ttdeci">virtual bool IsComparisonSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ComparisonDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a4bee87b6d7a78ee4a3d6cecc7ad8a77a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4bee87b6d7a78ee4a3d6cecc7ad8a77a">armnn::ILayerSupport::IsDilatedDepthwiseConvolutionSupported</a></div><div class="ttdeci">virtual bool IsDilatedDepthwiseConvolutionSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a></div><div class="ttdoc">A DepthwiseConvolution2dDescriptor for the DepthwiseConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00444">Descriptors.hpp:444</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a></div><div class="ttdoc">A BatchNormalizationDescriptor for the BatchNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00610">Descriptors.hpp:610</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a76e472f67b857c5619c1751e0cd20a5c"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a76e472f67b857c5619c1751e0cd20a5c">armnn::ILayerSupport::IsMinimumSupported</a></div><div class="ttdeci">virtual bool IsMinimumSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;ouput, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a1aecac7de9b71cfaaadecda47edc56c0"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a1aecac7de9b71cfaaadecda47edc56c0">armnn::ILayerSupport::IsDetectionPostProcessSupported</a></div><div class="ttdeci">virtual bool IsDetectionPostProcessSupported(const TensorInfo &amp;boxEncodings, const TensorInfo &amp;scores, const TensorInfo &amp;anchors, const TensorInfo &amp;detectionBoxes, const TensorInfo &amp;detectionClasses, const TensorInfo &amp;detectionScores, const TensorInfo &amp;numDetections, const DetectionPostProcessDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_permute_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a></div><div class="ttdoc">A PermuteDescriptor for the PermuteLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00102">Descriptors.hpp:102</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ac0981848e4ae57729f14f72bd4caa9f8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a></div><div class="ttdeci">std::vector&lt; float &gt; anchors({ 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 100.5f, 1.0f, 1.0f })</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aad5b9a346998e69ce24668f474e8a41f"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aad5b9a346998e69ce24668f474e8a41f">armnn::ILayerSupport::IsSpaceToDepthSupported</a></div><div class="ttdeci">virtual bool IsSpaceToDepthSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_2b72cc348e06937955e62ebdd8a13436.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_i_layer_support_8hpp.xhtml">ILayerSupport.hpp</a></li>
    <li class="footer">Generated on Fri Mar 13 2020 16:09:08 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
