<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/layerTests/ElementwiseTestImpl.hpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_elementwise_test_impl_8hpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ElementwiseTestImpl.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_layer_test_result_8hpp_source.xhtml">LayerTestResult.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_resolve_type_8hpp_source.xhtml">ResolveType.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_2backends_2_i_backend_internal_8hpp_source.xhtml">armnn/backends/IBackendInternal.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_workload_8hpp_source.xhtml">backendsCommon/Workload.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_workload_data_8hpp_source.xhtml">backendsCommon/WorkloadData.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_workload_factory_8hpp_source.xhtml">backendsCommon/WorkloadFactory.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_data_type_utils_8hpp_source.xhtml">backendsCommon/test/DataTypeUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_tensor_copy_utils_8hpp_source.xhtml">backendsCommon/test/TensorCopyUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_workload_test_utils_8hpp_source.xhtml">backendsCommon/test/WorkloadTestUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_tensor_helpers_8hpp_source.xhtml">test/TensorHelpers.hpp</a>&gt;</code><br />
<code>#include &lt;memory&gt;</code><br />
</div>
<p><a href="_elementwise_test_impl_8hpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab6921db5d86507f5b126af1cc516adb9"><td class="memTemplParams" colspan="2">template&lt;typename DescriptorType &gt; </td></tr>
<tr class="memitem:ab6921db5d86507f5b126af1cc516adb9"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">armnn::IWorkload</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_elementwise_test_impl_8hpp.xhtml#ab6921db5d86507f5b126af1cc516adb9">CreateWorkload</a> (const <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> &amp;info, const DescriptorType &amp;descriptor)</td></tr>
<tr class="separator:ab6921db5d86507f5b126af1cc516adb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2a138d3236f0fa3382d2380203c7422"><td class="memTemplParams" colspan="2">template&lt;std::size_t NumDims, typename Descriptor , armnn::DataType ArmnnTypeInput, armnn::DataType ArmnnTypeOutput, typename TInput  = armnn::ResolveType&lt;ArmnnTypeInput&gt;, typename TOutput  = armnn::ResolveType&lt;ArmnnTypeOutput&gt;&gt; </td></tr>
<tr class="memitem:af2a138d3236f0fa3382d2380203c7422"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; TOutput, NumDims &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_elementwise_test_impl_8hpp.xhtml#af2a138d3236f0fa3382d2380203c7422">ElementwiseTestHelper</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const unsigned int shape0[NumDims], std::vector&lt; TInput &gt; values0, float quantScale0, int quantOffset0, const unsigned int shape1[NumDims], std::vector&lt; TInput &gt; values1, float quantScale1, int quantOffset1, const unsigned int outShape[NumDims], std::vector&lt; TOutput &gt; outValues, float outQuantScale, int outQuantOffset)</td></tr>
<tr class="separator:af2a138d3236f0fa3382d2380203c7422"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65833679c4ddda377d1f2c95389808a4"><td class="memTemplParams" colspan="2">template&lt;std::size_t NumDims, typename Descriptor , armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a65833679c4ddda377d1f2c95389808a4"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, NumDims &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_elementwise_test_impl_8hpp.xhtml#a65833679c4ddda377d1f2c95389808a4">ElementwiseTestHelper</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const unsigned int shape0[NumDims], std::vector&lt; T &gt; values0, float quantScale0, int quantOffset0, const unsigned int shape1[NumDims], std::vector&lt; T &gt; values1, float quantScale1, int quantOffset1, const unsigned int outShape[NumDims], std::vector&lt; T &gt; outValues, float outQuantScale, int outQuantOffset)</td></tr>
<tr class="separator:a65833679c4ddda377d1f2c95389808a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc683a96d637d00c3a28119fcc7ed3f0"><td class="memTemplParams" colspan="2">template&lt;std::size_t NumDims, typename Descriptor , armnn::DataType ArmnnTypeInput, armnn::DataType ArmnnTypeOutput, typename TInput  = armnn::ResolveType&lt;ArmnnTypeInput&gt;, typename TOutput  = armnn::ResolveType&lt;ArmnnTypeOutput&gt;&gt; </td></tr>
<tr class="memitem:acc683a96d637d00c3a28119fcc7ed3f0"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; TOutput, NumDims &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_elementwise_test_impl_8hpp.xhtml#acc683a96d637d00c3a28119fcc7ed3f0">ElementwiseTestHelper</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const unsigned int shape0[NumDims], std::vector&lt; TInput &gt; values0, const unsigned int shape1[NumDims], std::vector&lt; TInput &gt; values1, const unsigned int outShape[NumDims], std::vector&lt; TOutput &gt; outValues, float quantScale=1.0f, int quantOffset=0)</td></tr>
<tr class="separator:acc683a96d637d00c3a28119fcc7ed3f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3e9f3ec2911d5199086c488b6627578"><td class="memTemplParams" colspan="2">template&lt;std::size_t NumDims, typename Descriptor , armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:ae3e9f3ec2911d5199086c488b6627578"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, NumDims &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_elementwise_test_impl_8hpp.xhtml#ae3e9f3ec2911d5199086c488b6627578">ElementwiseTestHelper</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const unsigned int shape0[NumDims], std::vector&lt; T &gt; values0, const unsigned int shape1[NumDims], std::vector&lt; T &gt; values1, const unsigned int outShape[NumDims], std::vector&lt; T &gt; outValues, float quantScale=1.0f, int quantOffset=0)</td></tr>
<tr class="separator:ae3e9f3ec2911d5199086c488b6627578"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ab6921db5d86507f5b126af1cc516adb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6921db5d86507f5b126af1cc516adb9">&#9670;&nbsp;</a></span>CreateWorkload()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_workload.xhtml">armnn::IWorkload</a>&gt; CreateWorkload </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const DescriptorType &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml#l00027">27</a> of file <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml">ElementwiseTestImpl.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_8hpp_source.xhtml#l00264">Layer::SetBackendId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_elementwise_test_impl_8hpp.xhtml#ab6921db5d86507f5b126af1cc516adb9">CreateWorkload</a>(workloadFactory, info, descriptor);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div><div class="ttc" id="_elementwise_test_impl_8hpp_xhtml_ab6921db5d86507f5b126af1cc516adb9"><div class="ttname"><a href="_elementwise_test_impl_8hpp.xhtml#ab6921db5d86507f5b126af1cc516adb9">CreateWorkload</a></div><div class="ttdeci">std::unique_ptr&lt; armnn::IWorkload &gt; CreateWorkload(const armnn::IWorkloadFactory &amp;workloadFactory, const armnn::WorkloadInfo &amp;info, const DescriptorType &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_elementwise_test_impl_8hpp_source.xhtml#l00027">ElementwiseTestImpl.hpp:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af2a138d3236f0fa3382d2380203c7422"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2a138d3236f0fa3382d2380203c7422">&#9670;&nbsp;</a></span>ElementwiseTestHelper() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;TOutput, NumDims&gt; ElementwiseTestHelper </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>shape0</em>[NumDims], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; TInput &gt;&#160;</td>
          <td class="paramname"><em>values0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>quantScale0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>quantOffset0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>shape1</em>[NumDims], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; TInput &gt;&#160;</td>
          <td class="paramname"><em>values1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>quantScale1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>quantOffset1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>outShape</em>[NumDims], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; TOutput &gt;&#160;</td>
          <td class="paramname"><em>outValues</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>outQuantScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>outQuantOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml#l00041">41</a> of file <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml">ElementwiseTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::Boolean</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00043">LayerTestResult&lt; T, n &gt;::compareBoolean</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00014">CopyDataFromITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00009">CopyDataToITensorHandle()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00040">LayerTestResult&lt; T, n &gt;::output</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult&lt; T, n &gt;::outputExpected</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00259">TensorInfo::SetQuantizationScale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo0{NumDims, shape0, ArmnnTypeInput};</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo1{NumDims, shape1, ArmnnTypeInput};</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo{NumDims, outShape, ArmnnTypeOutput};</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">auto</span> input0 = MakeTensor&lt;TInput, NumDims&gt;(inputTensorInfo0, values0);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">auto</span> input1 = MakeTensor&lt;TInput, NumDims&gt;(inputTensorInfo1, values1);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    inputTensorInfo0.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(quantScale0);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    inputTensorInfo0.SetQuantizationOffset(quantOffset0);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    inputTensorInfo1.SetQuantizationScale(quantScale1);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    inputTensorInfo1.SetQuantizationOffset(quantOffset1);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    outputTensorInfo.SetQuantizationScale(outQuantScale);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    outputTensorInfo.SetQuantizationOffset(outQuantOffset);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;TOutput, NumDims&gt;</a> ret(outputTensorInfo);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">if</span>(ArmnnTypeOutput == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a>)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        ret.compareBoolean = <span class="keyword">true</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle0 = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo0);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle1 = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo1);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    Descriptor data;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo0, inputHandle0.get());</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo1, inputHandle1.get());</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">auto</span> workload = CreateWorkload&lt;Descriptor&gt;(workloadFactory, info, data);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    inputHandle0-&gt;Allocate();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    inputHandle1-&gt;Allocate();</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle0.get(), input0.origin());</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle1.get(), input1.origin());</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    workload-&gt;PostAllocationConfigure();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    ExecuteWorkload(*workload, memoryManager);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(ret.output.origin(), outputHandle.get());</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    ret.outputExpected = MakeTensor&lt;TOutput, NumDims&gt;(outputTensorInfo, outValues);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00259">Tensor.cpp:259</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_a99b626c58a926dc7d6df78d22ec186c8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *memory, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15c140be4ddceffee16436f009d3ed94"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">armnn::IWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00029">LayerTestResult.hpp:29</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a65833679c4ddda377d1f2c95389808a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65833679c4ddda377d1f2c95389808a4">&#9670;&nbsp;</a></span>ElementwiseTestHelper() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, NumDims&gt; ElementwiseTestHelper </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>shape0</em>[NumDims], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; T &gt;&#160;</td>
          <td class="paramname"><em>values0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>quantScale0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>quantOffset0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>shape1</em>[NumDims], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; T &gt;&#160;</td>
          <td class="paramname"><em>values1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>quantScale1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>quantOffset1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>outShape</em>[NumDims], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; T &gt;&#160;</td>
          <td class="paramname"><em>outValues</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>outQuantScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>outQuantOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml#l00111">111</a> of file <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml">ElementwiseTestImpl.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;NumDims, Descriptor, ArmnnType, ArmnnType&gt;(</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        workloadFactory,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        memoryManager,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        shape0,</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        values0,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        quantScale0,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        quantOffset0,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        shape1,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        values1,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        quantScale1,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        quantOffset1,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        outShape,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        outValues,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        outQuantScale,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        outQuantOffset);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="acc683a96d637d00c3a28119fcc7ed3f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc683a96d637d00c3a28119fcc7ed3f0">&#9670;&nbsp;</a></span>ElementwiseTestHelper() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;TOutput, NumDims&gt; ElementwiseTestHelper </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>shape0</em>[NumDims], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; TInput &gt;&#160;</td>
          <td class="paramname"><em>values0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>shape1</em>[NumDims], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; TInput &gt;&#160;</td>
          <td class="paramname"><em>values1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>outShape</em>[NumDims], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; TOutput &gt;&#160;</td>
          <td class="paramname"><em>outValues</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>quantScale</em> = <code>1.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>quantOffset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml#l00150">150</a> of file <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml">ElementwiseTestImpl.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;NumDims, Descriptor, ArmnnTypeInput, ArmnnTypeOutput&gt;(</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        workloadFactory,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        memoryManager,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        shape0,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        values0,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        quantScale,</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        quantOffset,</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        shape1,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        values1,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        quantScale,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        quantOffset,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        outShape,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        outValues,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        quantScale,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        quantOffset);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae3e9f3ec2911d5199086c488b6627578"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3e9f3ec2911d5199086c488b6627578">&#9670;&nbsp;</a></span>ElementwiseTestHelper() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, NumDims&gt; ElementwiseTestHelper </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>shape0</em>[NumDims], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; T &gt;&#160;</td>
          <td class="paramname"><em>values0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>shape1</em>[NumDims], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; T &gt;&#160;</td>
          <td class="paramname"><em>values1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>outShape</em>[NumDims], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; T &gt;&#160;</td>
          <td class="paramname"><em>outValues</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>quantScale</em> = <code>1.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>quantOffset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml#l00183">183</a> of file <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml">ElementwiseTestImpl.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;NumDims, Descriptor, ArmnnType, ArmnnType&gt;(</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        workloadFactory,</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        memoryManager,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        shape0,</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        values0,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        shape1,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        values1,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        outShape,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        outValues,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        quantScale,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        quantOffset);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_99a30439342d160875b21dac3498ad7f.xhtml">layerTests</a></li><li class="navelem"><a class="el" href="_elementwise_test_impl_8hpp.xhtml">ElementwiseTestImpl.hpp</a></li>
    <li class="footer">Generated on Fri Mar 13 2020 16:09:14 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
