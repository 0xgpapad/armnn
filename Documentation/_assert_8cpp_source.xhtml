<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnTfParser/test/Assert.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_assert_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Assert.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_assert_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tf_parser_8hpp.xhtml">armnnTfParser/ITfParser.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_parser_prototxt_fixture_8hpp.xhtml">ParserPrototxtFixture.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_utils_8hpp.xhtml">test/GraphUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;boost/test/unit_test.hpp&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<a class="code" href="_output_shape_of_squeeze_8cpp.xhtml#ae3a6cb217a792718f2bd0e8f45e3ca9e">BOOST_AUTO_TEST_SUITE</a>(TensorflowParser)</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">struct </span>AssertSimpleFixture : <span class="keyword">public</span> <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml">armnnUtils::ParserPrototxtFixture</a>&lt;armnnTfParser::ITfParser&gt;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    AssertSimpleFixture()</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    {</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        <span class="comment">//     Placeholder   AssertInput</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        <span class="comment">//      |       \     /</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        <span class="comment">//     Add ------ Assert</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a5ca0f757171382fbf7fa5b05b447b024">m_Prototext</a> = R<span class="stringliteral">&quot;(</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="stringliteral">            node {</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="stringliteral">              name: &quot;Placeholder&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="stringliteral">              op: &quot;Placeholder&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="stringliteral">                key: &quot;dtype&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="stringliteral">                  type: DT_FLOAT</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="stringliteral">                key: &quot;shape&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="stringliteral">                  shape {</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="stringliteral">                    unknown_rank: true</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="stringliteral">                  }</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="stringliteral">            node {</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="stringliteral">              name: &quot;AssertInput&quot;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="stringliteral">              op: &quot;Const&quot;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="stringliteral">                key: &quot;dtype&quot;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="stringliteral">                  type: DT_FLOAT</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="stringliteral">                key: &quot;value&quot;</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="stringliteral">                  tensor {</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="stringliteral">                    dtype: DT_FLOAT</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="stringliteral">                    tensor_shape {</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="stringliteral">                      dim {</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="stringliteral">                        size: 1</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="stringliteral">                      }</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="stringliteral">                    }</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="stringliteral">                    float_val: 17.0</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="stringliteral">                  }</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="stringliteral">            node {</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="stringliteral">              name: &quot;Assert&quot;</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="stringliteral">              op: &quot;Assert&quot;</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="stringliteral">              input: &quot;Placeholder&quot;</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="stringliteral">              input: &quot;AssertInput&quot;</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="stringliteral">                key: &quot;T&quot;</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="stringliteral">                  type: DT_FLOAT</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="stringliteral">            node {</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="stringliteral">              name: &quot;Add&quot;</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="stringliteral">              op: &quot;Add&quot;</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="stringliteral">              input: &quot;Placeholder&quot;</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="stringliteral">              input: &quot;Placeholder&quot;</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="stringliteral">              input: &quot;^Assert&quot;</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="stringliteral">                key: &quot;T&quot;</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="stringliteral">                  type: DT_FLOAT</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="stringliteral">            })&quot;;</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="stringliteral">    }</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="stringliteral">};</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="_assert_8cpp.xhtml#aca9c806a9c2cf6fa453c4110ecb79af9">   93</a></span>&#160;<span class="stringliteral"><a class="code" href="_assert_8cpp.xhtml#aca9c806a9c2cf6fa453c4110ecb79af9">BOOST_FIXTURE_TEST_CASE</a>(AssertSimpleTest, AssertSimpleFixture)</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="stringliteral">{</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="stringliteral">    <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2bb4ea256fbbf6d53068ca93bb4bc95c">SetupSingleInputSingleOutput</a>({ 1, 1, 1, 4 }, </span><span class="stringliteral">&quot;Placeholder&quot;</span>, <span class="stringliteral">&quot;Add&quot;</span>);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    RunTest&lt;4&gt;({ 1.0f, 2.0f, 3.0f, 4.0f }, { 2.0f, 4.0f, 6.0f, 8.0f });</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="_assert_8cpp.xhtml#ac27dc1cabf754208dae88e0879dd6515">   99</a></span>&#160;<a class="code" href="_assert_8cpp.xhtml#aca9c806a9c2cf6fa453c4110ecb79af9">BOOST_FIXTURE_TEST_CASE</a>(AssertSimpleGraphStructureTest, AssertSimpleFixture)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">auto</span> optimized = <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a831d13496f4d19677209c61edfa9eca5">SetupOptimizedNetwork</a>({ { <span class="stringliteral">&quot;Placeholder&quot;</span>, { 1, 1, 1, 4 } } }, { <span class="stringliteral">&quot;Add&quot;</span> });</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">auto</span> optimizedNetwork = boost::polymorphic_downcast&lt;armnn::OptimizedNetwork*&gt;(optimized.get());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">auto</span> graph = optimizedNetwork-&gt;GetGraph();</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    BOOST_TEST((graph.GetNumInputs() == 1));</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    BOOST_TEST((graph.GetNumOutputs() == 1));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    BOOST_TEST((graph.GetNumLayers() == 3));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* inputLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;Placeholder&quot;</span>);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    BOOST_TEST((inputLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a>));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(inputLayer, 0));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(inputLayer, 1));</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* addLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;Add&quot;</span>);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    BOOST_TEST((addLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a>));</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(addLayer, 2));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(addLayer, 1));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({1, 1, 1, 4}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(inputLayer, addLayer, 0, 0, tensorInfo));</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(inputLayer, addLayer, 0, 1, tensorInfo));</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; outputLayer : graph.GetOutputLayers())</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(addLayer, const_cast&lt;armnn::OutputLayer*&gt;(outputLayer), 0, 0, tensorInfo));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">struct </span>AssertFixture : <span class="keyword">public</span> <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml">armnnUtils::ParserPrototxtFixture</a>&lt;armnnTfParser::ITfParser&gt;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    AssertFixture()</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="comment">// Input0    Input1  Input2</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="comment">//  |    \    /        |</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="comment">//  |     Sub ------ Assert</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="comment">//   \     /         /</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="comment">//    Output -------</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        m_Prototext = R<span class="stringliteral">&quot;(</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="stringliteral">            node {</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="stringliteral">              name: &quot;Input0&quot;</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="stringliteral">              op: &quot;Placeholder&quot;</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="stringliteral">                key: &quot;dtype&quot;</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="stringliteral">                  type: DT_FLOAT</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="stringliteral">                key: &quot;shape&quot;</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="stringliteral">                  shape {</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="stringliteral">                    unknown_rank: true</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="stringliteral">                  }</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="stringliteral">            node {</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="stringliteral">              name: &quot;Input1&quot;</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="stringliteral">              op: &quot;Placeholder&quot;</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="stringliteral">                key: &quot;dtype&quot;</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="stringliteral">                  type: DT_FLOAT</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="stringliteral">                key: &quot;shape&quot;</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="stringliteral">                  shape {</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="stringliteral">                    unknown_rank: true</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="stringliteral">                  }</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="stringliteral">            node {</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="stringliteral">              name: &quot;Sub&quot;</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="stringliteral">              op: &quot;Sub&quot;</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="stringliteral">              input: &quot;Input0&quot;</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="stringliteral">              input: &quot;Input1&quot;</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="stringliteral">                key: &quot;T&quot;</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="stringliteral">                  type: DT_FLOAT</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="stringliteral">            node {</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="stringliteral">              name: &quot;Input2&quot;</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="stringliteral">              op: &quot;Placeholder&quot;</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="stringliteral">                key: &quot;dtype&quot;</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="stringliteral">                  type: DT_FLOAT</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="stringliteral">                key: &quot;shape&quot;</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="stringliteral">                  shape {</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="stringliteral">                    unknown_rank: true</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="stringliteral">                  }</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="stringliteral">            node {</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="stringliteral">              name: &quot;Assert&quot;</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="stringliteral">              op: &quot;Assert&quot;</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="stringliteral">              input: &quot;Input2&quot;</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="stringliteral">              input: &quot;Sub&quot;</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="stringliteral">                key: &quot;T&quot;</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="stringliteral">                  type: DT_FLOAT</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="stringliteral">            node {</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="stringliteral">              name: &quot;Output&quot;</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="stringliteral">              op: &quot;Add&quot;</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="stringliteral">              input: &quot;Input0&quot;</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="stringliteral">              input: &quot;Sub&quot;</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="stringliteral">              input: &quot;^Assert&quot;</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="stringliteral">              attr {</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="stringliteral">                key: &quot;T&quot;</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="stringliteral">                value {</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="stringliteral">                  type: DT_FLOAT</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="stringliteral">              }</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="stringliteral">            })&quot;;</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="stringliteral">    }</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="stringliteral">};</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="_assert_8cpp.xhtml#a79cb077a071f8d5232e2e902d562becd">  237</a></span>&#160;<span class="stringliteral"><a class="code" href="_assert_8cpp.xhtml#aca9c806a9c2cf6fa453c4110ecb79af9">BOOST_FIXTURE_TEST_CASE</a>(AssertTest, AssertFixture)</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="stringliteral">{</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="stringliteral">    Setup({ { </span><span class="stringliteral">&quot;Input0&quot;</span>, { 1, 1, 2, 2 } },</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            { <span class="stringliteral">&quot;Input1&quot;</span>, { 1, 1, 2, 2 } } },</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;          { <span class="stringliteral">&quot;Output&quot;</span> });</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    RunTest&lt;4&gt;({ { <span class="stringliteral">&quot;Input0&quot;</span>, { 4.0f,   3.0f,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                               2.0f,   1.0f } },</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                 { <span class="stringliteral">&quot;Input1&quot;</span>, { 1.0f,   2.0f,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                               3.0f,   4.0f } } },</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;               { { <span class="stringliteral">&quot;Output&quot;</span>, { 7.0f,   4.0f,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                               1.0f,  -2.0f } } });</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="_assert_8cpp.xhtml#a1645128a338ac44257fe852d11ea968b">  253</a></span>&#160;<a class="code" href="_assert_8cpp.xhtml#aca9c806a9c2cf6fa453c4110ecb79af9">BOOST_FIXTURE_TEST_CASE</a>(AssertGraphStructureTest, AssertFixture)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">auto</span> optimized = SetupOptimizedNetwork({ { <span class="stringliteral">&quot;Input0&quot;</span>, { 1, 1, 2, 2 } },</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                             { <span class="stringliteral">&quot;Input1&quot;</span>, { 1, 1, 2, 2 } } },</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                           { <span class="stringliteral">&quot;Output&quot;</span> });</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">auto</span> optimizedNetwork = boost::polymorphic_downcast&lt;armnn::OptimizedNetwork*&gt;(optimized.get());</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">auto</span> graph = optimizedNetwork-&gt;GetGraph();</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    BOOST_TEST((graph.GetNumInputs() == 2));</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    BOOST_TEST((graph.GetNumOutputs() == 1));</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    BOOST_TEST((graph.GetNumLayers() == 5));</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* inputLayer0 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;Input0&quot;</span>);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    BOOST_TEST((inputLayer0-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a>));</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(inputLayer0, 0));</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(inputLayer0, 1));</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* inputLayer1 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;Input1&quot;</span>);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    BOOST_TEST((inputLayer1-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a>));</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(inputLayer1, 0));</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(inputLayer1, 1));</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* subLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;Sub&quot;</span>);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    BOOST_TEST((subLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a>));</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(subLayer, 2));</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(subLayer, 1));</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* addLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;Output&quot;</span>);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    BOOST_TEST((addLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a>));</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(addLayer, 2));</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(addLayer, 1));</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({1, 1, 2, 2}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(inputLayer0, subLayer, 0, 0, tensorInfo));</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(inputLayer1, subLayer, 0, 1, tensorInfo));</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(inputLayer0, addLayer, 0, 0, tensorInfo));</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(subLayer, addLayer, 0, 1, tensorInfo));</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; outputLayer : graph.GetOutputLayers())</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(addLayer, const_cast&lt;armnn::OutputLayer*&gt;(outputLayer), 0, 0, tensorInfo));</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<a class="code" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END</a>()</div><div class="ttc" id="_output_shape_of_squeeze_8cpp_xhtml_ae3a6cb217a792718f2bd0e8f45e3ca9e"><div class="ttname"><a href="_output_shape_of_squeeze_8cpp.xhtml#ae3a6cb217a792718f2bd0e8f45e3ca9e">BOOST_AUTO_TEST_SUITE</a></div><div class="ttdeci">BOOST_AUTO_TEST_SUITE(TensorflowLiteParser)</div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a5f17e02e0054dac0a691685a0464ed36"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a></div><div class="ttdeci">armnn::Layer * GetFirstLayerWithName(armnn::Graph &amp;graph, const std::string &amp;name)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00020">GraphUtils.cpp:20</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a5ca0f757171382fbf7fa5b05b447b024"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a5ca0f757171382fbf7fa5b05b447b024">armnnUtils::ParserPrototxtFixture&lt; armnnTfParser::ITfParser &gt;::m_Prototext</a></div><div class="ttdeci">std::string m_Prototext</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00068">ParserPrototxtFixture.hpp:68</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="_i_tf_parser_8hpp_xhtml"><div class="ttname"><a href="_i_tf_parser_8hpp.xhtml">ITfParser.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="_assert_8cpp_xhtml_aca9c806a9c2cf6fa453c4110ecb79af9"><div class="ttname"><a href="_assert_8cpp.xhtml#aca9c806a9c2cf6fa453c4110ecb79af9">BOOST_FIXTURE_TEST_CASE</a></div><div class="ttdeci">BOOST_FIXTURE_TEST_CASE(AssertSimpleTest, AssertSimpleFixture)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8cpp_source.xhtml#l00093">Assert.cpp:93</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a831d13496f4d19677209c61edfa9eca5"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a831d13496f4d19677209c61edfa9eca5">armnnUtils::ParserPrototxtFixture::SetupOptimizedNetwork</a></div><div class="ttdeci">armnn::IOptimizedNetworkPtr SetupOptimizedNetwork(const std::map&lt; std::string, armnn::TensorShape &gt; &amp;inputShapes, const std::vector&lt; std::string &gt; &amp;requestedOutputs)</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00158">ParserPrototxtFixture.hpp:158</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a></div></div>
<div class="ttc" id="_parser_prototxt_fixture_8hpp_xhtml"><div class="ttname"><a href="_parser_prototxt_fixture_8hpp.xhtml">ParserPrototxtFixture.hpp</a></div></div>
<div class="ttc" id="_graph_utils_8hpp_xhtml"><div class="ttname"><a href="_graph_utils_8hpp.xhtml">GraphUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_afd518dba3d52728670459e4ad3bed5e1"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a></div><div class="ttdeci">bool IsConnected(armnn::Layer *srcLayer, armnn::Layer *destLayer, unsigned int srcSlot, unsigned int destSlot, const armnn::TensorInfo &amp;expectedTensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00042">GraphUtils.cpp:42</a></div></div>
<div class="ttc" id="_profiler_tests_8cpp_xhtml_af7f71af5c6c124222dd1c42c5df892f4"><div class="ttname"><a href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END</a></div><div class="ttdeci">BOOST_AUTO_TEST_SUITE_END()</div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a2bb4ea256fbbf6d53068ca93bb4bc95c"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2bb4ea256fbbf6d53068ca93bb4bc95c">armnnUtils::ParserPrototxtFixture::SetupSingleInputSingleOutput</a></div><div class="ttdeci">void SetupSingleInputSingleOutput(const std::string &amp;inputName, const std::string &amp;outputName)</div><div class="ttdoc">Parses and loads the network defined by the m_Prototext string. </div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00086">ParserPrototxtFixture.hpp:86</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_aaef29472862381822654ab6cbf7cba2a"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">armnn::Layer::GetType</a></div><div class="ttdeci">LayerType GetType() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00259">Layer.hpp:259</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a4c04337db4d5f380219a005657a8223b"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a></div><div class="ttdeci">bool CheckNumberOfInputSlot(armnn::Layer *layer, unsigned int num)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00032">GraphUtils.cpp:32</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_aada2e27f100807f5786eecb03390ba58"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a></div><div class="ttdeci">bool CheckNumberOfOutputSlot(armnn::Layer *layer, unsigned int num)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00037">GraphUtils.cpp:37</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml">armnnUtils::ParserPrototxtFixture</a></div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00024">ParserPrototxtFixture.hpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00209">Layer.hpp:209</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_50aba35e23cba3c8856f8642cc06d5dc.xhtml">armnnTfParser</a></li><li class="navelem"><a class="el" href="dir_4ccaefd65a1feacebd3c00536508ef51.xhtml">test</a></li><li class="navelem"><a class="el" href="_assert_8cpp.xhtml">Assert.cpp</a></li>
    <li class="footer">Generated on Fri Mar 13 2020 16:09:10 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
