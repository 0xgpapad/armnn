<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: ClWorkloadFactory Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_cl_workload_factory.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_1_1_cl_workload_factory-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ClWorkloadFactory Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_cl_workload_factory_8hpp_source.xhtml">ClWorkloadFactory.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ClWorkloadFactory:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_cl_workload_factory.png" usemap="#ClWorkloadFactory_map" alt=""/>
  <map id="ClWorkloadFactory_map" name="ClWorkloadFactory_map">
<area href="classarmnn_1_1_workload_factory_base.xhtml" alt="WorkloadFactoryBase" shape="rect" coords="0,56,137,80"/>
<area href="classarmnn_1_1_i_workload_factory.xhtml" alt="IWorkloadFactory" shape="rect" coords="0,0,137,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af0771a8e672812c03f064847a2072f7e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#af0771a8e672812c03f064847a2072f7e">ClWorkloadFactory</a> (const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_cl_memory_manager.xhtml">ClMemoryManager</a> &gt; &amp;memoryManager)</td></tr>
<tr class="separator:af0771a8e672812c03f064847a2072f7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2cd7e29596b68884bfaade25f8f0dc0"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">GetBackendId</a> () const override</td></tr>
<tr class="separator:ae2cd7e29596b68884bfaade25f8f0dc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed0a782f32856bde72bc10d9381dc11e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">SupportsSubTensors</a> () const override</td></tr>
<tr class="separator:aed0a782f32856bde72bc10d9381dc11e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abefb9df9d7a54cf2f82047ea350d0388"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#abefb9df9d7a54cf2f82047ea350d0388">CreateSubTensorHandle</a> (<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &amp;parent, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> const &amp;subTensorShape, unsigned int const *subTensorOrigin) const override</td></tr>
<tr class="separator:abefb9df9d7a54cf2f82047ea350d0388"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7239477811c44d4398f0c2d291d9ea76"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, const bool IsMemoryManaged=<a class="el" href="_ref_layer_tests_8cpp.xhtml#a37f1c3ccc9fc906be85185350dd83d48">true</a>) const override</td></tr>
<tr class="separator:a7239477811c44d4398f0c2d291d9ea76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaed323bbcbaded57334783e4732ee3ed"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout, const bool IsMemoryManaged=<a class="el" href="_ref_layer_tests_8cpp.xhtml#a37f1c3ccc9fc906be85185350dd83d48">true</a>) const override</td></tr>
<tr class="separator:aaed323bbcbaded57334783e4732ee3ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a902422ffa1b0076458972c3be051e44d"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a902422ffa1b0076458972c3be051e44d">CreateAbs</a> (const <a class="el" href="structarmnn_1_1_abs_queue_descriptor.xhtml">AbsQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a902422ffa1b0076458972c3be051e44d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5f7b0f6273c838b6b7d7de8447524f9"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#af5f7b0f6273c838b6b7d7de8447524f9">CreateActivation</a> (const <a class="el" href="structarmnn_1_1_activation_queue_descriptor.xhtml">ActivationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:af5f7b0f6273c838b6b7d7de8447524f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9da9a34fb99114f9d1fb705171a9a6ee"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a9da9a34fb99114f9d1fb705171a9a6ee">CreateAddition</a> (const <a class="el" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a9da9a34fb99114f9d1fb705171a9a6ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fffcec3624e83671b4623e22ca623e5"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a3fffcec3624e83671b4623e22ca623e5">CreateArgMinMax</a> (const <a class="el" href="structarmnn_1_1_arg_min_max_queue_descriptor.xhtml">ArgMinMaxQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a3fffcec3624e83671b4623e22ca623e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cce78b879d26312fd515270afc1e66a"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a9cce78b879d26312fd515270afc1e66a">CreateBatchNormalization</a> (const <a class="el" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">BatchNormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a9cce78b879d26312fd515270afc1e66a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a455fcb54444e8286dbb3714310e4998b"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a455fcb54444e8286dbb3714310e4998b">CreateBatchToSpaceNd</a> (const <a class="el" href="structarmnn_1_1_batch_to_space_nd_queue_descriptor.xhtml">BatchToSpaceNdQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a455fcb54444e8286dbb3714310e4998b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d8ef97ae45e9a37d096f14b0a40136c"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">CreateComparison</a> (const <a class="el" href="structarmnn_1_1_comparison_queue_descriptor.xhtml">ComparisonQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a2d8ef97ae45e9a37d096f14b0a40136c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f89ceb71ffc990170fe834cddb697fa"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1f89ceb71ffc990170fe834cddb697fa">CreateConcat</a> (const <a class="el" href="structarmnn_1_1_concat_queue_descriptor.xhtml">ConcatQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a1f89ceb71ffc990170fe834cddb697fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6ef3324f715ccf62d235aa54118d174"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aa6ef3324f715ccf62d235aa54118d174">CreateConstant</a> (const <a class="el" href="structarmnn_1_1_constant_queue_descriptor.xhtml">ConstantQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:aa6ef3324f715ccf62d235aa54118d174"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefe6a68cb6d7ba517d7988195680c831"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aefe6a68cb6d7ba517d7988195680c831">CreateConvertFp16ToFp32</a> (const <a class="el" href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">ConvertFp16ToFp32QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:aefe6a68cb6d7ba517d7988195680c831"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33b291201b6716e295afb17c1eb0864e"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a33b291201b6716e295afb17c1eb0864e">CreateConvertFp32ToFp16</a> (const <a class="el" href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">ConvertFp32ToFp16QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a33b291201b6716e295afb17c1eb0864e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a661b8b943d4a28ef6c8fd19bf223c61e"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a661b8b943d4a28ef6c8fd19bf223c61e">CreateConvolution2d</a> (const <a class="el" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a661b8b943d4a28ef6c8fd19bf223c61e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca1333805c6665111154f10cc72c8234"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aca1333805c6665111154f10cc72c8234">CreateDebug</a> (const <a class="el" href="structarmnn_1_1_debug_queue_descriptor.xhtml">DebugQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:aca1333805c6665111154f10cc72c8234"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af77fb45622aedb3f2ee36b412fea8735"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#af77fb45622aedb3f2ee36b412fea8735">CreateDepthToSpace</a> (const <a class="el" href="structarmnn_1_1_depth_to_space_queue_descriptor.xhtml">DepthToSpaceQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:af77fb45622aedb3f2ee36b412fea8735"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48ebe514c1ca3e41edccdd7682bf38ca"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a48ebe514c1ca3e41edccdd7682bf38ca">CreateDepthwiseConvolution2d</a> (const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">DepthwiseConvolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a48ebe514c1ca3e41edccdd7682bf38ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab345edf481dd64a3ced4c0808d4ee844"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ab345edf481dd64a3ced4c0808d4ee844">CreateDequantize</a> (const <a class="el" href="structarmnn_1_1_dequantize_queue_descriptor.xhtml">DequantizeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:ab345edf481dd64a3ced4c0808d4ee844"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a2d9b8e1156605172ada1472e9460cd"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a3a2d9b8e1156605172ada1472e9460cd">CreateDetectionPostProcess</a> (const <a class="el" href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">DetectionPostProcessQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a3a2d9b8e1156605172ada1472e9460cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11cb76f59b65109b8557d43b3cb1bc06"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a11cb76f59b65109b8557d43b3cb1bc06">CreateDivision</a> (const <a class="el" href="structarmnn_1_1_division_queue_descriptor.xhtml">DivisionQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a11cb76f59b65109b8557d43b3cb1bc06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9de0dcd1cd7bc40deb74c6926361401"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">CreateElementwiseUnary</a> (const <a class="el" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:ae9de0dcd1cd7bc40deb74c6926361401"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa31f52c6b8c2092a41acb4890b910d2b"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aa31f52c6b8c2092a41acb4890b910d2b">CreateEqual</a> (const <a class="el" href="structarmnn_1_1_equal_queue_descriptor.xhtml">EqualQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:aa31f52c6b8c2092a41acb4890b910d2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac4c7cd17cf3dc3a23fd4a21933c60cb"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aac4c7cd17cf3dc3a23fd4a21933c60cb">CreateFloor</a> (const <a class="el" href="structarmnn_1_1_floor_queue_descriptor.xhtml">FloorQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:aac4c7cd17cf3dc3a23fd4a21933c60cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fdd5dfd04433d84de96c71664cce5a9"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1fdd5dfd04433d84de96c71664cce5a9">CreateFullyConnected</a> (const <a class="el" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">FullyConnectedQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a1fdd5dfd04433d84de96c71664cce5a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a674b6d6de1db47959ad36831976ca3aa"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a674b6d6de1db47959ad36831976ca3aa">CreateGather</a> (const <a class="el" href="structarmnn_1_1_gather_queue_descriptor.xhtml">GatherQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a674b6d6de1db47959ad36831976ca3aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b7d11f98c9c17dd23a94666fe35f226"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a0b7d11f98c9c17dd23a94666fe35f226">CreateGreater</a> (const <a class="el" href="structarmnn_1_1_greater_queue_descriptor.xhtml">GreaterQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a0b7d11f98c9c17dd23a94666fe35f226"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b06edab4eef1822445e4201a1262635"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">CreateInput</a> (const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">InputQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a7b06edab4eef1822445e4201a1262635"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c2f4f703e07407e70c30cc770d02d6b"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a5c2f4f703e07407e70c30cc770d02d6b">CreateInstanceNormalization</a> (const <a class="el" href="structarmnn_1_1_instance_normalization_queue_descriptor.xhtml">InstanceNormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a5c2f4f703e07407e70c30cc770d02d6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c511b4b70bc0b6cccbef2285ba292bc"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1c511b4b70bc0b6cccbef2285ba292bc">CreateL2Normalization</a> (const <a class="el" href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">L2NormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a1c511b4b70bc0b6cccbef2285ba292bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0dce100ea0fc5c44798736a4d879bd4d"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a0dce100ea0fc5c44798736a4d879bd4d">CreateLstm</a> (const <a class="el" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a0dce100ea0fc5c44798736a4d879bd4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2c6c12059f9cde37ff6bb8f682e9ceb"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae2c6c12059f9cde37ff6bb8f682e9ceb">CreateMaximum</a> (const <a class="el" href="structarmnn_1_1_maximum_queue_descriptor.xhtml">MaximumQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:ae2c6c12059f9cde37ff6bb8f682e9ceb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba5032787777bf0074ce70e2c2423d49"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aba5032787777bf0074ce70e2c2423d49">CreateMean</a> (const <a class="el" href="structarmnn_1_1_mean_queue_descriptor.xhtml">MeanQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const override</td></tr>
<tr class="separator:aba5032787777bf0074ce70e2c2423d49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cbe2f3dee6fad6a92a384455676fa63"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a7cbe2f3dee6fad6a92a384455676fa63">CreateMemCopy</a> (const <a class="el" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">MemCopyQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a7cbe2f3dee6fad6a92a384455676fa63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44d5ee8d1c0bd414bf1dfb60d94a62d8"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a44d5ee8d1c0bd414bf1dfb60d94a62d8">CreateMemImport</a> (const <a class="el" href="structarmnn_1_1_mem_import_queue_descriptor.xhtml">MemImportQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a44d5ee8d1c0bd414bf1dfb60d94a62d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4b8b34cc736f9d7778c6a2ab4fba25e"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ad4b8b34cc736f9d7778c6a2ab4fba25e">CreateMerger</a> (const <a class="el" href="namespacearmnn.xhtml#a308ba160745ba35e1de8d698d0139eb4">MergerQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:ad4b8b34cc736f9d7778c6a2ab4fba25e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39927b6e1faae50d9f804b435430bbf2"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a39927b6e1faae50d9f804b435430bbf2">CreateMinimum</a> (const <a class="el" href="structarmnn_1_1_minimum_queue_descriptor.xhtml">MinimumQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a39927b6e1faae50d9f804b435430bbf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a247e81465a607359f63756d13c417e70"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a247e81465a607359f63756d13c417e70">CreateMultiplication</a> (const <a class="el" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a247e81465a607359f63756d13c417e70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca46fe4cdc107d912d822a7618d4d2db"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aca46fe4cdc107d912d822a7618d4d2db">CreateNormalization</a> (const <a class="el" href="structarmnn_1_1_normalization_queue_descriptor.xhtml">NormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:aca46fe4cdc107d912d822a7618d4d2db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d463f116733f47ce2bab08e430d1ba2"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">CreateOutput</a> (const <a class="el" href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">OutputQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a5d463f116733f47ce2bab08e430d1ba2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fb2b01fe17e49e997fe59d86e4d5c9a"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a8fb2b01fe17e49e997fe59d86e4d5c9a">CreatePad</a> (const <a class="el" href="structarmnn_1_1_pad_queue_descriptor.xhtml">PadQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a8fb2b01fe17e49e997fe59d86e4d5c9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b6ac4b2de1550174ad661fa76ec3d2d"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a7b6ac4b2de1550174ad661fa76ec3d2d">CreatePermute</a> (const <a class="el" href="structarmnn_1_1_permute_queue_descriptor.xhtml">PermuteQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a7b6ac4b2de1550174ad661fa76ec3d2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae22c3b8013c1ee7a5459016c0595d444"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae22c3b8013c1ee7a5459016c0595d444">CreatePooling2d</a> (const <a class="el" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">Pooling2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:ae22c3b8013c1ee7a5459016c0595d444"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f21c47a41cbbcfe7d74becd76766c80"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a3f21c47a41cbbcfe7d74becd76766c80">CreatePreCompiled</a> (const <a class="el" href="structarmnn_1_1_pre_compiled_queue_descriptor.xhtml">PreCompiledQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a3f21c47a41cbbcfe7d74becd76766c80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4739f640f68405d2e5a4e4b716c3c59"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ac4739f640f68405d2e5a4e4b716c3c59">CreatePrelu</a> (const <a class="el" href="structarmnn_1_1_prelu_queue_descriptor.xhtml">PreluQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:ac4739f640f68405d2e5a4e4b716c3c59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1782959d8ba043acbc72d6a06c00a7f4"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1782959d8ba043acbc72d6a06c00a7f4">CreateQuantize</a> (const <a class="el" href="structarmnn_1_1_quantize_queue_descriptor.xhtml">QuantizeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a1782959d8ba043acbc72d6a06c00a7f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a166569e6ac31c22484612c77690c3eff"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a166569e6ac31c22484612c77690c3eff">CreateQuantizedLstm</a> (const <a class="el" href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml">QuantizedLstmQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a166569e6ac31c22484612c77690c3eff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85d2e898648c795f462a15f5c03a67ac"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a85d2e898648c795f462a15f5c03a67ac">CreateReshape</a> (const <a class="el" href="structarmnn_1_1_reshape_queue_descriptor.xhtml">ReshapeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a85d2e898648c795f462a15f5c03a67ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f15b1b391dd86de376ce541eadca3fa"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">CreateResize</a> (const <a class="el" href="structarmnn_1_1_resize_queue_descriptor.xhtml">ResizeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a3f15b1b391dd86de376ce541eadca3fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0895b3c5782c6094ce839e07cc17d58"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae0895b3c5782c6094ce839e07cc17d58">CreateResizeBilinear</a> (const <a class="el" href="structarmnn_1_1_resize_bilinear_queue_descriptor.xhtml">ResizeBilinearQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:ae0895b3c5782c6094ce839e07cc17d58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afddaf1bce21f092a34d877cffac411a3"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#afddaf1bce21f092a34d877cffac411a3">CreateRsqrt</a> (const <a class="el" href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml">RsqrtQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:afddaf1bce21f092a34d877cffac411a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abda2c9b7c5fe4ca092d2224ba9679a06"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#abda2c9b7c5fe4ca092d2224ba9679a06">CreateSlice</a> (const <a class="el" href="structarmnn_1_1_slice_queue_descriptor.xhtml">SliceQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:abda2c9b7c5fe4ca092d2224ba9679a06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a457c416483289cc7c8a8511a67d95816"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a457c416483289cc7c8a8511a67d95816">CreateSoftmax</a> (const <a class="el" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">SoftmaxQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a457c416483289cc7c8a8511a67d95816"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d1feb2b5c6a4c6701a3dee01e65bee4"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1d1feb2b5c6a4c6701a3dee01e65bee4">CreateSpaceToBatchNd</a> (const <a class="el" href="structarmnn_1_1_space_to_batch_nd_queue_descriptor.xhtml">SpaceToBatchNdQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a1d1feb2b5c6a4c6701a3dee01e65bee4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2318d942f9615dff92fe75688bdd8c48"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a2318d942f9615dff92fe75688bdd8c48">CreateSpaceToDepth</a> (const <a class="el" href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">SpaceToDepthQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a2318d942f9615dff92fe75688bdd8c48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa98def0f9b9ff714a013f8083bbadf82"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aa98def0f9b9ff714a013f8083bbadf82">CreateSplitter</a> (const <a class="el" href="structarmnn_1_1_splitter_queue_descriptor.xhtml">SplitterQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:aa98def0f9b9ff714a013f8083bbadf82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d5371f67eabb04a38c69e97e67f1d35"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a4d5371f67eabb04a38c69e97e67f1d35">CreateStack</a> (const <a class="el" href="structarmnn_1_1_stack_queue_descriptor.xhtml">StackQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a4d5371f67eabb04a38c69e97e67f1d35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c46866e2a0d83e350ff70c12d9613bf"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a5c46866e2a0d83e350ff70c12d9613bf">CreateStridedSlice</a> (const <a class="el" href="structarmnn_1_1_strided_slice_queue_descriptor.xhtml">StridedSliceQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a5c46866e2a0d83e350ff70c12d9613bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26563dd3de8f08475d30c8c8389f1ddc"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a26563dd3de8f08475d30c8c8389f1ddc">CreateSubtraction</a> (const <a class="el" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a26563dd3de8f08475d30c8c8389f1ddc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac302ae63e103b22d6ce4fef0f5513899"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ac302ae63e103b22d6ce4fef0f5513899">CreateTranspose</a> (const <a class="el" href="structarmnn_1_1_transpose_queue_descriptor.xhtml">TransposeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:ac302ae63e103b22d6ce4fef0f5513899"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29e02d375261a32c39635d6833a49333"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a29e02d375261a32c39635d6833a49333">CreateTransposeConvolution2d</a> (const <a class="el" href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">TransposeConvolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a29e02d375261a32c39635d6833a49333"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_workload_factory_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_workload_factory_base')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td></tr>
<tr class="memitem:a5ebad711e7e91ca3fd60eed73686a482 inherit pub_methods_classarmnn_1_1_workload_factory_base"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a5ebad711e7e91ca3fd60eed73686a482">CreateFakeQuantization</a> (const <a class="el" href="structarmnn_1_1_fake_quantization_queue_descriptor.xhtml">FakeQuantizationQueueDescriptor</a> &amp;, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;) const override</td></tr>
<tr class="separator:a5ebad711e7e91ca3fd60eed73686a482 inherit pub_methods_classarmnn_1_1_workload_factory_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04a3ae3944eb63e7e94c6e9676815864 inherit pub_methods_classarmnn_1_1_workload_factory_base"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a04a3ae3944eb63e7e94c6e9676815864">CreateLogSoftmax</a> (const <a class="el" href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">LogSoftmaxQueueDescriptor</a> &amp;, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;) const override</td></tr>
<tr class="separator:a04a3ae3944eb63e7e94c6e9676815864 inherit pub_methods_classarmnn_1_1_workload_factory_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac05fd4710da8c304db555fb5f597d614 inherit pub_methods_classarmnn_1_1_workload_factory_base"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ac05fd4710da8c304db555fb5f597d614">CreateMerge</a> (const <a class="el" href="structarmnn_1_1_merge_queue_descriptor.xhtml">MergeQueueDescriptor</a> &amp;, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;) const override</td></tr>
<tr class="separator:ac05fd4710da8c304db555fb5f597d614 inherit pub_methods_classarmnn_1_1_workload_factory_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a032cba0444de559937381f17bcbe48f5 inherit pub_methods_classarmnn_1_1_workload_factory_base"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a032cba0444de559937381f17bcbe48f5">CreateSwitch</a> (const <a class="el" href="structarmnn_1_1_switch_queue_descriptor.xhtml">SwitchQueueDescriptor</a> &amp;, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;) const override</td></tr>
<tr class="separator:a032cba0444de559937381f17bcbe48f5 inherit pub_methods_classarmnn_1_1_workload_factory_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_workload_factory"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_workload_factory')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td></tr>
<tr class="memitem:aab62208f96483015c29ad58549efedd8 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aab62208f96483015c29ad58549efedd8">~IWorkloadFactory</a> ()</td></tr>
<tr class="separator:aab62208f96483015c29ad58549efedd8 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a9992ea7c353e8597fbd8ae426f4612ae"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a9992ea7c353e8597fbd8ae426f4612ae">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a9992ea7c353e8597fbd8ae426f4612ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classarmnn_1_1_i_workload_factory"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarmnn_1_1_i_workload_factory')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td></tr>
<tr class="memitem:a74dc9ec1a223eab8b072368b2dacee87 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;backendId, const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a74dc9ec1a223eab8b072368b2dacee87 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d94ea841143b76fe08ccb308839bfd7 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a7d94ea841143b76fe08ccb308839bfd7">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a7d94ea841143b76fe08ccb308839bfd7 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00017">17</a> of file <a class="el" href="_cl_workload_factory_8hpp_source.xhtml">ClWorkloadFactory.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="af0771a8e672812c03f064847a2072f7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0771a8e672812c03f064847a2072f7e">&#9670;&nbsp;</a></span>ClWorkloadFactory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_cl_memory_manager.xhtml">ClMemoryManager</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00080">80</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    : m_MemoryManager(memoryManager)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a902422ffa1b0076458972c3be051e44d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a902422ffa1b0076458972c3be051e44d">&#9670;&nbsp;</a></span>CreateAbs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateAbs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_abs_queue_descriptor.xhtml">AbsQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4784c591a49826474956353ab0581708">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00131">131</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::Abs</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00257">ClWorkloadFactory::CreateElementwiseUnary()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    ElementwiseUnaryQueueDescriptor elementwiseUnaryDescriptor;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    elementwiseUnaryDescriptor.m_Parameters = ElementwiseUnaryDescriptor(<a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">CreateElementwiseUnary</a>(elementwiseUnaryDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_workload_factory_xhtml_ae9de0dcd1cd7bc40deb74c6926361401"><div class="ttname"><a href="classarmnn_1_1_cl_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">armnn::ClWorkloadFactory::CreateElementwiseUnary</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateElementwiseUnary(const ElementwiseUnaryQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_factory_8cpp_source.xhtml#l00257">ClWorkloadFactory.cpp:257</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af5f7b0f6273c838b6b7d7de8447524f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5f7b0f6273c838b6b7d7de8447524f9">&#9670;&nbsp;</a></span>CreateActivation()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateActivation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_queue_descriptor.xhtml">ActivationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a789a347180c49b2403e435857501f623">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00142">142</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClActivationWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9da9a34fb99114f9d1fb705171a9a6ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9da9a34fb99114f9d1fb705171a9a6ee">&#9670;&nbsp;</a></span>CreateAddition()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateAddition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ac1f4d42be05893f74b1237c3356c3c0c">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00148">148</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClAdditionWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3fffcec3624e83671b4623e22ca623e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fffcec3624e83671b4623e22ca623e5">&#9670;&nbsp;</a></span>CreateArgMinMax()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateArgMinMax </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_queue_descriptor.xhtml">ArgMinMaxQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4269d65bcf8068290752d75164934a25">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00154">154</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ClArgMinMaxWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9cce78b879d26312fd515270afc1e66a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9cce78b879d26312fd515270afc1e66a">&#9670;&nbsp;</a></span>CreateBatchNormalization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateBatchNormalization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">BatchNormalizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a666c75e9db051b9b07f137a74af8d8b4">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00160">160</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;{</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClBatchNormalizationFloatWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a455fcb54444e8286dbb3714310e4998b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a455fcb54444e8286dbb3714310e4998b">&#9670;&nbsp;</a></span>CreateBatchToSpaceNd()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateBatchToSpaceNd </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_queue_descriptor.xhtml">BatchToSpaceNdQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a52094433136e6cae57398d861cd483f9">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00167">167</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClBatchToSpaceNdWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2d8ef97ae45e9a37d096f14b0a40136c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d8ef97ae45e9a37d096f14b0a40136c">&#9670;&nbsp;</a></span>CreateComparison()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateComparison </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_queue_descriptor.xhtml">ComparisonQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a3d5de4e35ccddc5cfe79e530558d5184">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00173">173</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::Greater</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00030">QueueDescriptor::m_Inputs</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00078">ComparisonDescriptor::m_Operation</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00031">QueueDescriptor::m_Outputs</a>, and <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00279">ClWorkloadFactory::CreateEqual()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00308">ClWorkloadFactory::CreateGreater()</a>, and <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;{</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">if</span> (descriptor.m_Parameters.m_Operation == <a class="code" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        GreaterQueueDescriptor greaterQueueDescriptor;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        greaterQueueDescriptor.m_Inputs  = descriptor.m_Inputs;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        greaterQueueDescriptor.m_Outputs = descriptor.m_Outputs;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">return</span> MakeWorkload&lt;ClGreaterFloat32Workload, ClGreaterUint8Workload&gt;(greaterQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;NullWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a"><div class="ttname"><a href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::ComparisonOperation::Greater</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1f89ceb71ffc990170fe834cddb697fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f89ceb71ffc990170fe834cddb697fa">&#9670;&nbsp;</a></span>CreateConcat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConcat </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_concat_queue_descriptor.xhtml">ConcatQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a713c3685138355b145f4d17e473bf543">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00187">187</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00378">ClWorkloadFactory::CreateMerger()</a>, and <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;{</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClConcatWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa6ef3324f715ccf62d235aa54118d174"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6ef3324f715ccf62d235aa54118d174">&#9670;&nbsp;</a></span>CreateConstant()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConstant </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_constant_queue_descriptor.xhtml">ConstantQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a0da6f270ae7ce126b29a8918d858e814">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00193">193</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;{</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClConstantWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aefe6a68cb6d7ba517d7988195680c831"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefe6a68cb6d7ba517d7988195680c831">&#9670;&nbsp;</a></span>CreateConvertFp16ToFp32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvertFp16ToFp32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">ConvertFp16ToFp32QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4e3b8d5650cb78c97a2eceb034209187">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00199">199</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClConvertFp16ToFp32Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a33b291201b6716e295afb17c1eb0864e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33b291201b6716e295afb17c1eb0864e">&#9670;&nbsp;</a></span>CreateConvertFp32ToFp16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvertFp32ToFp16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">ConvertFp32ToFp16QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a17042914356fe13b708c3702cb82ab7f">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00206">206</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;{</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClConvertFp32ToFp16Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a661b8b943d4a28ef6c8fd19bf223c61e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a661b8b943d4a28ef6c8fd19bf223c61e">&#9670;&nbsp;</a></span>CreateConvolution2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvolution2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4a781a9541d2c44c5fec0ffc8434447c">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00213">213</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClConvolution2dWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>, m_MemoryManager-&gt;GetIntraLayerManager());</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aca1333805c6665111154f10cc72c8234"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca1333805c6665111154f10cc72c8234">&#9670;&nbsp;</a></span>CreateDebug()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDebug </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_debug_queue_descriptor.xhtml">DebugQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ad99e6a9f4e78ba4690429850de69fadd">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00219">219</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;{</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;NullWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af77fb45622aedb3f2ee36b412fea8735"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af77fb45622aedb3f2ee36b412fea8735">&#9670;&nbsp;</a></span>CreateDepthToSpace()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDepthToSpace </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depth_to_space_queue_descriptor.xhtml">DepthToSpaceQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1b2165c83d6501e8ede91324c31a95f4">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00225">225</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;{</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClDepthToSpaceWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a48ebe514c1ca3e41edccdd7682bf38ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48ebe514c1ca3e41edccdd7682bf38ca">&#9670;&nbsp;</a></span>CreateDepthwiseConvolution2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDepthwiseConvolution2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">DepthwiseConvolution2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a2314defaf9c8b1ffcf59e7e509a959d6">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00231">231</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClDepthwiseConvolutionWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab345edf481dd64a3ced4c0808d4ee844"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab345edf481dd64a3ced4c0808d4ee844">&#9670;&nbsp;</a></span>CreateDequantize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDequantize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_dequantize_queue_descriptor.xhtml">DequantizeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1f17745331f928011cc1ea162866b8e7">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00238">238</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;{</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClDequantizeWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3a2d9b8e1156605172ada1472e9460cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a2d9b8e1156605172ada1472e9460cd">&#9670;&nbsp;</a></span>CreateDetectionPostProcess()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDetectionPostProcess </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">DetectionPostProcessQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ac8ff2a4e63a9954fd6b3e9fc6dfa9bf0">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00244">244</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;{</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;NullWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a11cb76f59b65109b8557d43b3cb1bc06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11cb76f59b65109b8557d43b3cb1bc06">&#9670;&nbsp;</a></span>CreateDivision()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDivision </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_division_queue_descriptor.xhtml">DivisionQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1c7e383368cb078a1faac0a4e4f763a1">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00251">251</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;{</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClDivisionFloatWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae9de0dcd1cd7bc40deb74c6926361401"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9de0dcd1cd7bc40deb74c6926361401">&#9670;&nbsp;</a></span>CreateElementwiseUnary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateElementwiseUnary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a09f09645c2289d5d47dbea7c011d5f0e">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00257">257</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::Abs</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00030">QueueDescriptor::m_Inputs</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00098">ElementwiseUnaryDescriptor::m_Operation</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00031">QueueDescriptor::m_Outputs</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>, and <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::Rsqrt</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00131">ClWorkloadFactory::CreateAbs()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00477">ClWorkloadFactory::CreateRsqrt()</a>, and <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;{</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">if</span> (descriptor.m_Parameters.m_Operation == <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        AbsQueueDescriptor absQueueDescriptor;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        absQueueDescriptor.m_Inputs  = descriptor.m_Inputs;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        absQueueDescriptor.m_Outputs = descriptor.m_Outputs;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">return</span> MakeWorkload&lt;ClAbsWorkload&gt;(absQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (descriptor.m_Parameters.m_Operation == <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>)</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        RsqrtQueueDescriptor rsqrtQueueDescriptor;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        rsqrtQueueDescriptor.m_Inputs  = descriptor.m_Inputs;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        rsqrtQueueDescriptor.m_Outputs = descriptor.m_Outputs;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keywordflow">return</span> MakeWorkload&lt;ClRsqrtWorkload&gt;(rsqrtQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;NullWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa31f52c6b8c2092a41acb4890b910d2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa31f52c6b8c2092a41acb4890b910d2b">&#9670;&nbsp;</a></span>CreateEqual()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateEqual </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_equal_queue_descriptor.xhtml">EqualQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a096bb62d44fadf079ea4463379d4e6aa">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00279">279</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00173">ClWorkloadFactory::CreateComparison()</a>, <a class="el" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">armnn::Equal</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;{</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    ComparisonQueueDescriptor comparisonDescriptor;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    comparisonDescriptor.m_Parameters = ComparisonDescriptor(<a class="code" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a>);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">CreateComparison</a>(comparisonDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_workload_factory_xhtml_a2d8ef97ae45e9a37d096f14b0a40136c"><div class="ttname"><a href="classarmnn_1_1_cl_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">armnn::ClWorkloadFactory::CreateComparison</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateComparison(const ComparisonQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_factory_8cpp_source.xhtml#l00173">ClWorkloadFactory.cpp:173</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5"><div class="ttname"><a href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">armnn::ComparisonOperation::Equal</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aac4c7cd17cf3dc3a23fd4a21933c60cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac4c7cd17cf3dc3a23fd4a21933c60cb">&#9670;&nbsp;</a></span>CreateFloor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateFloor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_floor_queue_descriptor.xhtml">FloorQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4101fcf76e3bbc979b2276631617aabe">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00290">290</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClFloorFloatWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1fdd5dfd04433d84de96c71664cce5a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fdd5dfd04433d84de96c71664cce5a9">&#9670;&nbsp;</a></span>CreateFullyConnected()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateFullyConnected </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">FullyConnectedQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af5ace6034148c3fe048db884058f04cf">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00296">296</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;{</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClFullyConnectedWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>, m_MemoryManager-&gt;GetIntraLayerManager());</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a674b6d6de1db47959ad36831976ca3aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a674b6d6de1db47959ad36831976ca3aa">&#9670;&nbsp;</a></span>CreateGather()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateGather </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_queue_descriptor.xhtml">GatherQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ada3f450379ba7b4989344de72a16f1d2">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00302">302</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;{</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;NullWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0b7d11f98c9c17dd23a94666fe35f226"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b7d11f98c9c17dd23a94666fe35f226">&#9670;&nbsp;</a></span>CreateGreater()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateGreater </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_greater_queue_descriptor.xhtml">GreaterQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a4e779d1b00a9e885497364ebd0dc24ef">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00308">308</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00173">ClWorkloadFactory::CreateComparison()</a>, <a class="el" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::Greater</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;{</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    ComparisonQueueDescriptor comparisonDescriptor;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    comparisonDescriptor.m_Parameters = ComparisonDescriptor(<a class="code" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">CreateComparison</a>(comparisonDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a"><div class="ttname"><a href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::ComparisonOperation::Greater</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_workload_factory_xhtml_a2d8ef97ae45e9a37d096f14b0a40136c"><div class="ttname"><a href="classarmnn_1_1_cl_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">armnn::ClWorkloadFactory::CreateComparison</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateComparison(const ComparisonQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_factory_8cpp_source.xhtml#l00173">ClWorkloadFactory.cpp:173</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7b06edab4eef1822445e4201a1262635"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b06edab4eef1822445e4201a1262635">&#9670;&nbsp;</a></span>CreateInput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateInput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">InputQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a3dcc96078130874f1be15a7148868539">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00319">319</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;{</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;CopyMemGenericWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5c2f4f703e07407e70c30cc770d02d6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c2f4f703e07407e70c30cc770d02d6b">&#9670;&nbsp;</a></span>CreateInstanceNormalization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateInstanceNormalization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_queue_descriptor.xhtml">InstanceNormalizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a77110c4dd8fe747ba0d441265f781076">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00325">325</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;{</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClInstanceNormalizationWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1c511b4b70bc0b6cccbef2285ba292bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c511b4b70bc0b6cccbef2285ba292bc">&#9670;&nbsp;</a></span>CreateL2Normalization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateL2Normalization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">L2NormalizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af12076c82b1b7f0c48c1ed71df206b4d">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00332">332</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;{</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClL2NormalizationFloatWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0dce100ea0fc5c44798736a4d879bd4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0dce100ea0fc5c44798736a4d879bd4d">&#9670;&nbsp;</a></span>CreateLstm()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateLstm </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af6cc3669898b498592dc28600aa6f0cd">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00338">338</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;{</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClLstmFloatWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae2c6c12059f9cde37ff6bb8f682e9ceb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2c6c12059f9cde37ff6bb8f682e9ceb">&#9670;&nbsp;</a></span>CreateMaximum()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMaximum </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_maximum_queue_descriptor.xhtml">MaximumQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a9e67be0a653c173ba94e38137dc4bbde">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00344">344</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;{</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClMaximumWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aba5032787777bf0074ce70e2c2423d49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba5032787777bf0074ce70e2c2423d49">&#9670;&nbsp;</a></span>CreateMean()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMean </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_queue_descriptor.xhtml">MeanQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aabe4842ade5647ac5bbee5e446e49a5c">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00350">350</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClMeanWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7cbe2f3dee6fad6a92a384455676fa63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cbe2f3dee6fad6a92a384455676fa63">&#9670;&nbsp;</a></span>CreateMemCopy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMemCopy </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">MemCopyQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a73e9a5c2c3eff38766f03adb98abdd26">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00356">356</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="_workload_data_8hpp_source.xhtml#l00030">QueueDescriptor::m_Inputs</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;{</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">if</span> (descriptor.m_Inputs.empty() || !descriptor.m_Inputs[0])</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;ClWorkloadFactory: Invalid null input for MemCopy workload&quot;</span>);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;CopyMemGenericWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a44d5ee8d1c0bd414bf1dfb60d94a62d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44d5ee8d1c0bd414bf1dfb60d94a62d8">&#9670;&nbsp;</a></span>CreateMemImport()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMemImport </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mem_import_queue_descriptor.xhtml">MemImportQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ad16ff72d909eb48f3dc8e1015c4a5078">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00367">367</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="_workload_data_8hpp_source.xhtml#l00030">QueueDescriptor::m_Inputs</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;{</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordflow">if</span> (descriptor.m_Inputs.empty() || !descriptor.m_Inputs[0])</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    {</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;ClWorkloadFactory: Invalid null input for MemImport workload&quot;</span>);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    }</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ImportMemGenericWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad4b8b34cc736f9d7778c6a2ab4fba25e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4b8b34cc736f9d7778c6a2ab4fba25e">&#9670;&nbsp;</a></span>CreateMerger()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMerger </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a308ba160745ba35e1de8d698d0139eb4">MergerQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#addb710d76098d55ad2f56117b73a9f48">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00378">378</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00187">ClWorkloadFactory::CreateConcat()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;{</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml#a1f89ceb71ffc990170fe834cddb697fa">CreateConcat</a>(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_workload_factory_xhtml_a1f89ceb71ffc990170fe834cddb697fa"><div class="ttname"><a href="classarmnn_1_1_cl_workload_factory.xhtml#a1f89ceb71ffc990170fe834cddb697fa">armnn::ClWorkloadFactory::CreateConcat</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConcat(const ConcatQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_factory_8cpp_source.xhtml#l00187">ClWorkloadFactory.cpp:187</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a39927b6e1faae50d9f804b435430bbf2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39927b6e1faae50d9f804b435430bbf2">&#9670;&nbsp;</a></span>CreateMinimum()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMinimum </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_minimum_queue_descriptor.xhtml">MinimumQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1ba2b05e3c2028d4bc3db29fc0edf122">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00384">384</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;{</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClMinimumWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a247e81465a607359f63756d13c417e70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a247e81465a607359f63756d13c417e70">&#9670;&nbsp;</a></span>CreateMultiplication()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMultiplication </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a848fc4ff47d5e9c68d2e26f6523b4e58">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00390">390</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;{</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClMultiplicationWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aca46fe4cdc107d912d822a7618d4d2db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca46fe4cdc107d912d822a7618d4d2db">&#9670;&nbsp;</a></span>CreateNormalization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateNormalization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_queue_descriptor.xhtml">NormalizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a6df587611b4c46b591527f3d594f4a11">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00396">396</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;{</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClNormalizationFloatWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5d463f116733f47ce2bab08e430d1ba2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d463f116733f47ce2bab08e430d1ba2">&#9670;&nbsp;</a></span>CreateOutput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateOutput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">OutputQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#afd952ccd68a1b2231b77db1f9131a61b">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00402">402</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;{</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;CopyMemGenericWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8fb2b01fe17e49e997fe59d86e4d5c9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8fb2b01fe17e49e997fe59d86e4d5c9a">&#9670;&nbsp;</a></span>CreatePad()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_queue_descriptor.xhtml">PadQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a06a69eab86af31e0daa17c99b9038bf1">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00408">408</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;{</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClPadWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7b6ac4b2de1550174ad661fa76ec3d2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b6ac4b2de1550174ad661fa76ec3d2d">&#9670;&nbsp;</a></span>CreatePermute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePermute </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_queue_descriptor.xhtml">PermuteQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a32983845590ec2dc9e644491793fd557">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00414">414</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;{</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClPermuteWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae22c3b8013c1ee7a5459016c0595d444"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae22c3b8013c1ee7a5459016c0595d444">&#9670;&nbsp;</a></span>CreatePooling2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePooling2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">Pooling2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#abf1f324933ada657d13faf8d1d32a907">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00420">420</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;{</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClPooling2dWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3f21c47a41cbbcfe7d74becd76766c80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f21c47a41cbbcfe7d74becd76766c80">&#9670;&nbsp;</a></span>CreatePreCompiled()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePreCompiled </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pre_compiled_queue_descriptor.xhtml">PreCompiledQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a21a5aef5f1850d8b5f797d97632409b8">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00426">426</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;{</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;NullWorkload, NullWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac4739f640f68405d2e5a4e4b716c3c59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4739f640f68405d2e5a4e4b716c3c59">&#9670;&nbsp;</a></span>CreatePrelu()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePrelu </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_prelu_queue_descriptor.xhtml">PreluQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a8040319bef721ad05a9fdf75060aaafe">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00432">432</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;{</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClPreluWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1782959d8ba043acbc72d6a06c00a7f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1782959d8ba043acbc72d6a06c00a7f4">&#9670;&nbsp;</a></span>CreateQuantize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateQuantize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantize_queue_descriptor.xhtml">QuantizeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ae51a441630e32e5a850d3d639f0e7847">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00438">438</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;{</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClQuantizeWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a166569e6ac31c22484612c77690c3eff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a166569e6ac31c22484612c77690c3eff">&#9670;&nbsp;</a></span>CreateQuantizedLstm()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateQuantizedLstm </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml">QuantizedLstmQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#abd228c95f2ec95cbb2abcaa0dbacc018">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00444">444</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;{</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClQuantizedLstmWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a85d2e898648c795f462a15f5c03a67ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85d2e898648c795f462a15f5c03a67ac">&#9670;&nbsp;</a></span>CreateReshape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateReshape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_queue_descriptor.xhtml">ReshapeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a655697a3bf827352acadc5f1dd3a8a34">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00450">450</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;{</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClReshapeWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3f15b1b391dd86de376ce541eadca3fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f15b1b391dd86de376ce541eadca3fa">&#9670;&nbsp;</a></span>CreateResize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateResize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_queue_descriptor.xhtml">ResizeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aa9390326e8445e71c5dee9858084a1b8">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00456">456</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00462">ClWorkloadFactory::CreateResizeBilinear()</a>, and <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;{</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClResizeWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae0895b3c5782c6094ce839e07cc17d58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0895b3c5782c6094ce839e07cc17d58">&#9670;&nbsp;</a></span>CreateResizeBilinear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateResizeBilinear </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_bilinear_queue_descriptor.xhtml">ResizeBilinearQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a7eb321c47cd90d2cc3823e74596f1239">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00462">462</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::Bilinear</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00456">ClWorkloadFactory::CreateResize()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00720">ResizeBilinearDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00751">ResizeDescriptor::m_DataLayout</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00030">QueueDescriptor::m_Inputs</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00749">ResizeDescriptor::m_Method</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00031">QueueDescriptor::m_Outputs</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00718">ResizeBilinearDescriptor::m_TargetHeight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00746">ResizeDescriptor::m_TargetHeight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00716">ResizeBilinearDescriptor::m_TargetWidth</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00744">ResizeDescriptor::m_TargetWidth</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;{</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    ResizeQueueDescriptor resizeDescriptor;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    resizeDescriptor.m_Inputs  = descriptor.m_Inputs;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    resizeDescriptor.m_Outputs = descriptor.m_Outputs;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    resizeDescriptor.m_Parameters.m_Method       = <a class="code" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">ResizeMethod::Bilinear</a>;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    resizeDescriptor.m_Parameters.m_DataLayout   = descriptor.m_Parameters.m_DataLayout;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    resizeDescriptor.m_Parameters.m_TargetHeight = descriptor.m_Parameters.m_TargetHeight;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    resizeDescriptor.m_Parameters.m_TargetWidth  = descriptor.m_Parameters.m_TargetWidth;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">CreateResize</a>(resizeDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_workload_factory_xhtml_a3f15b1b391dd86de376ce541eadca3fa"><div class="ttname"><a href="classarmnn_1_1_cl_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">armnn::ClWorkloadFactory::CreateResize</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateResize(const ResizeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_factory_8cpp_source.xhtml#l00456">ClWorkloadFactory.cpp:456</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f"><div class="ttname"><a href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::ResizeMethod::Bilinear</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afddaf1bce21f092a34d877cffac411a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afddaf1bce21f092a34d877cffac411a3">&#9670;&nbsp;</a></span>CreateRsqrt()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateRsqrt </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml">RsqrtQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a5d0b48104607726b76e2968da5a4feec">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00477">477</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00257">ClWorkloadFactory::CreateElementwiseUnary()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>, and <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::Rsqrt</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;{</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    ElementwiseUnaryQueueDescriptor elementwiseUnaryDescriptor;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    elementwiseUnaryDescriptor.m_Parameters = ElementwiseUnaryDescriptor(<a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">CreateElementwiseUnary</a>(elementwiseUnaryDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_workload_factory_xhtml_ae9de0dcd1cd7bc40deb74c6926361401"><div class="ttname"><a href="classarmnn_1_1_cl_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">armnn::ClWorkloadFactory::CreateElementwiseUnary</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateElementwiseUnary(const ElementwiseUnaryQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_factory_8cpp_source.xhtml#l00257">ClWorkloadFactory.cpp:257</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abda2c9b7c5fe4ca092d2224ba9679a06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abda2c9b7c5fe4ca092d2224ba9679a06">&#9670;&nbsp;</a></span>CreateSlice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSlice </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_queue_descriptor.xhtml">SliceQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a67ee4f8373684cb67f033976fc563081">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00488">488</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;{</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClSliceWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a457c416483289cc7c8a8511a67d95816"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a457c416483289cc7c8a8511a67d95816">&#9670;&nbsp;</a></span>CreateSoftmax()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSoftmax </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">SoftmaxQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a6d49c282026484eb1c6e56f56f35348e">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00494">494</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;{</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClSoftmaxFloatWorkload, ClSoftmaxUint8Workload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>,</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                                                                        m_MemoryManager-&gt;GetIntraLayerManager());</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1d1feb2b5c6a4c6701a3dee01e65bee4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d1feb2b5c6a4c6701a3dee01e65bee4">&#9670;&nbsp;</a></span>CreateSpaceToBatchNd()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSpaceToBatchNd </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_queue_descriptor.xhtml">SpaceToBatchNdQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1c9cd3cd798df38358e9047ac4621fe2">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00501">501</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;{</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClSpaceToBatchNdWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2318d942f9615dff92fe75688bdd8c48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2318d942f9615dff92fe75688bdd8c48">&#9670;&nbsp;</a></span>CreateSpaceToDepth()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSpaceToDepth </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">SpaceToDepthQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4069efcce4abfd80a88827ea1509b2f8">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00507">507</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;{</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClSpaceToDepthWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa98def0f9b9ff714a013f8083bbadf82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa98def0f9b9ff714a013f8083bbadf82">&#9670;&nbsp;</a></span>CreateSplitter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSplitter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_splitter_queue_descriptor.xhtml">SplitterQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a49428ff12e031e5af8bcc66161fa09fd">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00513">513</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;{</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClSplitterWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4d5371f67eabb04a38c69e97e67f1d35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d5371f67eabb04a38c69e97e67f1d35">&#9670;&nbsp;</a></span>CreateStack()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateStack </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_queue_descriptor.xhtml">StackQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a90c2655fd294c445ca2727491c8a8c79">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00519">519</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;{</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClStackWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5c46866e2a0d83e350ff70c12d9613bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c46866e2a0d83e350ff70c12d9613bf">&#9670;&nbsp;</a></span>CreateStridedSlice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateStridedSlice </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_queue_descriptor.xhtml">StridedSliceQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a757d3084d3e11a1840bd2170eb990235">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00525">525</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;{</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClStridedSliceWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abefb9df9d7a54cf2f82047ea350d0388"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abefb9df9d7a54cf2f82047ea350d0388">&#9670;&nbsp;</a></span>CreateSubTensorHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt; CreateSubTensorHandle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> const &amp;&#160;</td>
          <td class="paramname"><em>subTensorShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int const *&#160;</td>
          <td class="paramname"><em>subTensorOrigin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a99251f9711c087d7c1b5a08236ef0201">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00106">106</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ac6e86c1def7f674d3c4cb7f577874aa6">arm_compute::Coordinates</a> coords;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    arm_compute::TensorShape shape = armcomputetensorutils::BuildArmComputeTensorShape(subTensorShape);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    coords.set_num_dimensions(subTensorShape.GetNumDimensions());</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; subTensorShape.GetNumDimensions(); i++)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="comment">// Arm compute indexes tensor coords in reverse order.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> revertedIndex = subTensorShape.GetNumDimensions() - i - 1;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        coords.set(i, boost::numeric_cast&lt;int&gt;(subTensorOrigin[revertedIndex]));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">const</span> arm_compute::TensorShape parentShape = armcomputetensorutils::BuildArmComputeTensorShape(parent.GetShape());</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">if</span> (!::arm_compute::error_on_invalid_subtensor(__func__, __FILE__, __LINE__, parentShape, coords, shape))</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ClSubTensorHandle&gt;(</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        boost::polymorphic_downcast&lt;IClTensorHandle*&gt;(&amp;parent), shape, coords);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ac6e86c1def7f674d3c4cb7f577874aa6"><div class="ttname"><a href="namespacearmnn.xhtml#ac6e86c1def7f674d3c4cb7f577874aa6">armnn::Coordinates</a></div><div class="ttdeci">std::array&lt; unsigned int, MaxNumOfTensorDimensions &gt; Coordinates</div><div class="ttdef"><b>Definition:</b> <a href="_internal_types_8hpp_source.xhtml#l00080">InternalTypes.hpp:80</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a26563dd3de8f08475d30c8c8389f1ddc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26563dd3de8f08475d30c8c8389f1ddc">&#9670;&nbsp;</a></span>CreateSubtraction()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSubtraction </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a088ed247c7ec3bc1603c60f1145014e8">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00531">531</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;{</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClSubtractionWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7239477811c44d4398f0c2d291d9ea76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7239477811c44d4398f0c2d291d9ea76">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code><a class="el" href="_ref_layer_tests_8cpp.xhtml#a37f1c3ccc9fc906be85185350dd83d48">true</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a526eaec84398bc8067f407769b31f4a9">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00085">85</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(IsMemoryManaged);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    std::unique_ptr&lt;ClTensorHandle&gt; tensorHandle = std::make_unique&lt;ClTensorHandle&gt;(tensorInfo);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    tensorHandle-&gt;SetMemoryGroup(m_MemoryManager-&gt;GetInterLayerMemoryGroup());</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">return</span> tensorHandle;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaed323bbcbaded57334783e4732ee3ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaed323bbcbaded57334783e4732ee3ed">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>dataLayout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code><a class="el" href="_ref_layer_tests_8cpp.xhtml#a37f1c3ccc9fc906be85185350dd83d48">true</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a68f34fb8ec9a7921a1f6c17b4f5312e6">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00095">95</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>
<div class="fragment"><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(IsMemoryManaged);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    std::unique_ptr&lt;ClTensorHandle&gt; tensorHandle = std::make_unique&lt;ClTensorHandle&gt;(tensorInfo, dataLayout);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    tensorHandle-&gt;SetMemoryGroup(m_MemoryManager-&gt;GetInterLayerMemoryGroup());</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> tensorHandle;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac302ae63e103b22d6ce4fef0f5513899"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac302ae63e103b22d6ce4fef0f5513899">&#9670;&nbsp;</a></span>CreateTranspose()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateTranspose </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_queue_descriptor.xhtml">TransposeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a07446244299bc12305593358695ea1b4">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00537">537</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;{</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClTransposeWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a29e02d375261a32c39635d6833a49333"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29e02d375261a32c39635d6833a49333">&#9670;&nbsp;</a></span>CreateTransposeConvolution2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateTransposeConvolution2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">TransposeConvolution2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#acb80cd4ff2c145b80554376643fc54db">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00543">543</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">ClWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;{</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keywordflow">return</span> MakeWorkload&lt;ClTransposeConvolution2dWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>, m_MemoryManager-&gt;GetIntraLayerManager());</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae2cd7e29596b68884bfaade25f8f0dc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2cd7e29596b68884bfaade25f8f0dc0">&#9670;&nbsp;</a></span>GetBackendId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp; GetBackendId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9f7e4296485d2812e7996089149c96d1">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00192">CHECK_LOCATION</a>, <a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da902b0d55fddef6f8d651fe1035b7d4bd">armnn::Error</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="_cl_workload_utils_8hpp_source.xhtml#l00123">armnn::WrapClError()</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> s_Id;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a9992ea7c353e8597fbd8ae426f4612ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9992ea7c353e8597fbd8ae426f4612ae">&#9670;&nbsp;</a></span>IsLayerSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_workload_factory_8cpp_source.xhtml#l00045">IWorkloadFactory::IsLayerSupported()</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IWorkloadFactory::IsLayerSupported</a>(s_Id, layer, dataType, outReasonIfUnsupported);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a74dc9ec1a223eab8b072368b2dacee87"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">armnn::IWorkloadFactory::IsLayerSupported</a></div><div class="ttdeci">static bool IsLayerSupported(const BackendId &amp;backendId, const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l00045">WorkloadFactory.cpp:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aed0a782f32856bde72bc10d9381dc11e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed0a782f32856bde72bc10d9381dc11e">&#9670;&nbsp;</a></span>SupportsSubTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SupportsSubTensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aed0a782f32856bde72bc10d9381dc11e">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_factory_8hpp_source.xhtml#l00028">28</a> of file <a class="el" href="_cl_workload_factory_8hpp_source.xhtml">ClWorkloadFactory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00043">ARMNN_DEPRECATED_MSG</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00131">ClWorkloadFactory::CreateAbs()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00142">ClWorkloadFactory::CreateActivation()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00148">ClWorkloadFactory::CreateAddition()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00154">ClWorkloadFactory::CreateArgMinMax()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00160">ClWorkloadFactory::CreateBatchNormalization()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00167">ClWorkloadFactory::CreateBatchToSpaceNd()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00173">ClWorkloadFactory::CreateComparison()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00187">ClWorkloadFactory::CreateConcat()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00193">ClWorkloadFactory::CreateConstant()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00199">ClWorkloadFactory::CreateConvertFp16ToFp32()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00206">ClWorkloadFactory::CreateConvertFp32ToFp16()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00213">ClWorkloadFactory::CreateConvolution2d()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00219">ClWorkloadFactory::CreateDebug()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00225">ClWorkloadFactory::CreateDepthToSpace()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00231">ClWorkloadFactory::CreateDepthwiseConvolution2d()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00238">ClWorkloadFactory::CreateDequantize()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00244">ClWorkloadFactory::CreateDetectionPostProcess()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00251">ClWorkloadFactory::CreateDivision()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00257">ClWorkloadFactory::CreateElementwiseUnary()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00279">ClWorkloadFactory::CreateEqual()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00290">ClWorkloadFactory::CreateFloor()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00296">ClWorkloadFactory::CreateFullyConnected()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00302">ClWorkloadFactory::CreateGather()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00308">ClWorkloadFactory::CreateGreater()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00319">ClWorkloadFactory::CreateInput()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00325">ClWorkloadFactory::CreateInstanceNormalization()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00332">ClWorkloadFactory::CreateL2Normalization()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00338">ClWorkloadFactory::CreateLstm()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00344">ClWorkloadFactory::CreateMaximum()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00350">ClWorkloadFactory::CreateMean()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00356">ClWorkloadFactory::CreateMemCopy()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00367">ClWorkloadFactory::CreateMemImport()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00378">ClWorkloadFactory::CreateMerger()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00384">ClWorkloadFactory::CreateMinimum()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00390">ClWorkloadFactory::CreateMultiplication()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00396">ClWorkloadFactory::CreateNormalization()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00402">ClWorkloadFactory::CreateOutput()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00408">ClWorkloadFactory::CreatePad()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00414">ClWorkloadFactory::CreatePermute()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00420">ClWorkloadFactory::CreatePooling2d()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00426">ClWorkloadFactory::CreatePreCompiled()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00432">ClWorkloadFactory::CreatePrelu()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00438">ClWorkloadFactory::CreateQuantize()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00444">ClWorkloadFactory::CreateQuantizedLstm()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00450">ClWorkloadFactory::CreateReshape()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00456">ClWorkloadFactory::CreateResize()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00462">ClWorkloadFactory::CreateResizeBilinear()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00477">ClWorkloadFactory::CreateRsqrt()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00488">ClWorkloadFactory::CreateSlice()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00494">ClWorkloadFactory::CreateSoftmax()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00501">ClWorkloadFactory::CreateSpaceToBatchNd()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00507">ClWorkloadFactory::CreateSpaceToDepth()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00513">ClWorkloadFactory::CreateSplitter()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00519">ClWorkloadFactory::CreateStack()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00525">ClWorkloadFactory::CreateStridedSlice()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00106">ClWorkloadFactory::CreateSubTensorHandle()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00531">ClWorkloadFactory::CreateSubtraction()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00085">ClWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00537">ClWorkloadFactory::CreateTranspose()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00543">ClWorkloadFactory::CreateTransposeConvolution2d()</a>, <a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::Info</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{ <span class="keywordflow">return</span> <span class="keyword">true</span>; }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/cl/<a class="el" href="_cl_workload_factory_8hpp_source.xhtml">ClWorkloadFactory.hpp</a></li>
<li>src/backends/cl/<a class="el" href="_cl_workload_factory_8cpp_source.xhtml">ClWorkloadFactory.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a></li>
    <li class="footer">Generated on Fri Mar 13 2020 16:09:17 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
