<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/layerTests/BatchToSpaceNdTestImpl.hpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_batch_to_space_nd_test_impl_8hpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">BatchToSpaceNdTestImpl.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_layer_test_result_8hpp_source.xhtml">LayerTestResult.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_resolve_type_8hpp_source.xhtml">ResolveType.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_2backends_2_i_backend_internal_8hpp_source.xhtml">armnn/backends/IBackendInternal.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_workload_factory_8hpp_source.xhtml">backendsCommon/WorkloadFactory.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_data_type_utils_8hpp_source.xhtml">backendsCommon/test/DataTypeUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_tensor_copy_utils_8hpp_source.xhtml">backendsCommon/test/TensorCopyUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_workload_test_utils_8hpp_source.xhtml">backendsCommon/test/WorkloadTestUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_tensor_helpers_8hpp_source.xhtml">test/TensorHelpers.hpp</a>&gt;</code><br />
</div>
<p><a href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a5766a02d2acc065eaa6adf4bd515dcbd"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a5766a02d2acc065eaa6adf4bd515dcbd"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#a5766a02d2acc065eaa6adf4bd515dcbd">BatchToSpaceNdNhwcTest1</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a5766a02d2acc065eaa6adf4bd515dcbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca8aaef715d0d4b18c08641becf3a7e8"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:aca8aaef715d0d4b18c08641becf3a7e8"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#aca8aaef715d0d4b18c08641becf3a7e8">BatchToSpaceNdNhwcTest2</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:aca8aaef715d0d4b18c08641becf3a7e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac222455cb8669deb8c93f28ea7ef109a"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:ac222455cb8669deb8c93f28ea7ef109a"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#ac222455cb8669deb8c93f28ea7ef109a">BatchToSpaceNdNhwcTest3</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:ac222455cb8669deb8c93f28ea7ef109a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9945fb5c48fecb7d0609e98c87ec6ad5"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a9945fb5c48fecb7d0609e98c87ec6ad5"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#a9945fb5c48fecb7d0609e98c87ec6ad5">BatchToSpaceNdNhwcTest4</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a9945fb5c48fecb7d0609e98c87ec6ad5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45f8dc539e9331ca47dd2d6ec44c92e6"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a45f8dc539e9331ca47dd2d6ec44c92e6"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#a45f8dc539e9331ca47dd2d6ec44c92e6">BatchToSpaceNdNhwcTest5</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a45f8dc539e9331ca47dd2d6ec44c92e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6342b2004b217eb0d2ec2a9306cd743c"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a6342b2004b217eb0d2ec2a9306cd743c"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#a6342b2004b217eb0d2ec2a9306cd743c">BatchToSpaceNdNhwcTest6</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a6342b2004b217eb0d2ec2a9306cd743c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af94eb1e55356e998b63f331356802d93"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:af94eb1e55356e998b63f331356802d93"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#af94eb1e55356e998b63f331356802d93">BatchToSpaceNdNhwcTest7</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:af94eb1e55356e998b63f331356802d93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a165271263b4942e200709945e3bb33be"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a165271263b4942e200709945e3bb33be"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#a165271263b4942e200709945e3bb33be">BatchToSpaceNdNchwTest1</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a165271263b4942e200709945e3bb33be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acca2cfa16ec45fd21784087c38a64348"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:acca2cfa16ec45fd21784087c38a64348"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#acca2cfa16ec45fd21784087c38a64348">BatchToSpaceNdNchwTest2</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:acca2cfa16ec45fd21784087c38a64348"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a991e5ed989f6b8171e9d0c30dd493271"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a991e5ed989f6b8171e9d0c30dd493271"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#a991e5ed989f6b8171e9d0c30dd493271">BatchToSpaceNdNchwTest3</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a991e5ed989f6b8171e9d0c30dd493271"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae75d415c280469d41e76370ae8af874b"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:ae75d415c280469d41e76370ae8af874b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#ae75d415c280469d41e76370ae8af874b">BatchToSpaceNdNchwTest4</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:ae75d415c280469d41e76370ae8af874b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a457cfa0045885dcecb6cfe8c14be777f"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a457cfa0045885dcecb6cfe8c14be777f"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#a457cfa0045885dcecb6cfe8c14be777f">BatchToSpaceNdNchwTest5</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a457cfa0045885dcecb6cfe8c14be777f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cf96226764fc0bef5d2a59a99758cd6"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a9cf96226764fc0bef5d2a59a99758cd6"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#a9cf96226764fc0bef5d2a59a99758cd6">BatchToSpaceNdNchwTest6</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a9cf96226764fc0bef5d2a59a99758cd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3827710219ac619b26223505d33182e3"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a3827710219ac619b26223505d33182e3"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml#a3827710219ac619b26223505d33182e3">BatchToSpaceNdNchwTest7</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a3827710219ac619b26223505d33182e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a165271263b4942e200709945e3bb33be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a165271263b4942e200709945e3bb33be">&#9670;&nbsp;</a></span>BatchToSpaceNdNchwTest1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNchwTest1 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00273">273</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {4, 3, 1, 1};</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {1, 3, 2, 2};</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    std::vector&lt;float&gt; input({1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f, 11.0f, 12.0f});</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    std::vector&lt;float&gt; expectedOutput({</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                              <span class="comment">// Batch 0, Channel 0, Height (2) x Width (2)</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                                              1.0f,  4.0f,</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                                              7.0f, 10.0f,</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                                              <span class="comment">// Batch 0, Channel 1, Height (2) x Width (2)</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                              2.0f,  5.0f,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                              8.0f, 11.0f,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                              <span class="comment">// Batch 0, Channel 2, Height (2) x Width (2)</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                              3.0f,  6.0f,</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                                              9.0f, 12.0f,</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                      });</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    std::vector&lt;unsigned int&gt; blockShape({2, 2});</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                                                <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>, inputShape, input, blockShape,</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                                                crops, outputShape, expectedOutput);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acca2cfa16ec45fd21784087c38a64348"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acca2cfa16ec45fd21784087c38a64348">&#9670;&nbsp;</a></span>BatchToSpaceNdNchwTest2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNchwTest2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00305">305</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;{</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {4, 1, 1, 1};</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {1, 1, 2, 2};</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    std::vector&lt;float&gt; input({</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                     <span class="comment">// Batch 0, Height 0, Width (2) x Channel (1)</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                     1.0f, 2.0f, 3.0f, 4.0f</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                             });</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    std::vector&lt;float&gt; expectedOutput({1.0f, 2.0f, 3.0f, 4.0f});</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    std::vector&lt;unsigned int&gt; blockShape({2, 2});</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                                                                <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>, inputShape, input, blockShape,</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                                                crops, outputShape, expectedOutput);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a991e5ed989f6b8171e9d0c30dd493271"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a991e5ed989f6b8171e9d0c30dd493271">&#9670;&nbsp;</a></span>BatchToSpaceNdNchwTest3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNchwTest3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00328">328</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;{</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {4, 3, 1, 1};</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {1, 3, 2, 2};</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    std::vector&lt;float&gt; input({1.0f, 3.0f, 5.0f, 7.0f, 9.0f, 11.0f, 2.0f, 4.0f, 6.0f, 8.0f, 10.0f, 12.0f});</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    std::vector&lt;float&gt; expectedOutput({</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                                              <span class="comment">// Batch 0, Channel 0, Height (2) x Width (2)</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                                              1.0f,  7.0f,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                              2.0f,  8.0f,</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                                              <span class="comment">// Batch 0, Channel 1, Height (2) x Width (2)</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                              3.0f,  9.0f,</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                              4.0f, 10.0f,</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                                              <span class="comment">// Batch 0, Channel 2, Height (2) x Width (2)</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                              5.0f, 11.0f,</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                              6.0f, 12.0f,</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                      });</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    std::vector&lt;unsigned int&gt; blockShape({2, 2});</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                                                <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>, inputShape, input, blockShape,</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                                                                crops, outputShape, expectedOutput);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae75d415c280469d41e76370ae8af874b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae75d415c280469d41e76370ae8af874b">&#9670;&nbsp;</a></span>BatchToSpaceNdNchwTest4()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNchwTest4 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00360">360</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;{</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {4, 3, 1, 1};</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {1, 3, 2, 2};</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    std::vector&lt;float&gt; input({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    std::vector&lt;float&gt; expectedOutput({</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                              <span class="comment">// Batch 0, Channel 0, Height (2) x Width (2)</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                              1,  4,</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                              7, 10,</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                              <span class="comment">// Batch 0, Channel 1, Height (2) x Width (2)</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                              2,  5,</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                              8, 11,</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                                              <span class="comment">// Batch 0, Channel 2, Height (2) x Width (2)</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                              3,  6,</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                              9, 12,</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                      });</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    std::vector&lt;unsigned int&gt; blockShape({2, 2});</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                                                 <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>, inputShape, input, blockShape,</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                                 crops, outputShape, expectedOutput);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a457cfa0045885dcecb6cfe8c14be777f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a457cfa0045885dcecb6cfe8c14be777f">&#9670;&nbsp;</a></span>BatchToSpaceNdNchwTest5()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNchwTest5 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00392">392</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;{</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {4, 1, 1, 1};</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {1, 1, 2, 2};</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    std::vector&lt;float&gt; input({</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                     <span class="comment">// Batch 0, Height 0, Width (2) x Channel (1)</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                     1, 2, 3, 4</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                             });</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    std::vector&lt;float&gt; expectedOutput({1, 2, 3, 4});</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    std::vector&lt;unsigned int&gt; blockShape({2, 2});</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                                                 <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>, inputShape, input, blockShape,</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                                                 crops, outputShape, expectedOutput);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9cf96226764fc0bef5d2a59a99758cd6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9cf96226764fc0bef5d2a59a99758cd6">&#9670;&nbsp;</a></span>BatchToSpaceNdNchwTest6()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNchwTest6 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00415">415</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;{</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {4, 3, 1, 1};</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {1, 3, 2, 2};</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    std::vector&lt;float&gt; input({1, 3, 5, 7, 9, 11, 2, 4, 6, 8, 10, 12});</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    std::vector&lt;float&gt; expectedOutput({</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                                              <span class="comment">// Batch 0, Channel 0, Height (2) x Width (2)</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                                              1,  7,</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                              2,  8,</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                              <span class="comment">// Batch 0, Channel 1, Height (2) x Width (2)</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                              3,  9,</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                              4, 10,</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                              <span class="comment">// Batch 0, Channel 2, Height (2) x Width (2)</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                                              5, 11,</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                                              6, 12,</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                                      });</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    std::vector&lt;unsigned int&gt; blockShape({2, 2});</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                                 <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>, inputShape, input, blockShape,</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                                                 crops, outputShape, expectedOutput);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3827710219ac619b26223505d33182e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3827710219ac619b26223505d33182e3">&#9670;&nbsp;</a></span>BatchToSpaceNdNchwTest7()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNchwTest7 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00447">447</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;{</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {8, 1, 1, 3};</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {2, 1, 2, 4};</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    std::vector&lt;float&gt; input({</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                                     0, 1, 3, 0,  9, 11,</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                                     0, 2, 4, 0, 10, 12,</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                                     0, 5, 7, 0, 13, 15,</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                                     0, 6, 8, 0, 14, 16</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                             });</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    std::vector&lt;float&gt; expectedOutput({</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                                              1,  2,  3,  4,</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                              5,  6,  7,  8,</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                                              9, 10, 11, 12,</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                                              13, 14, 15, 16</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                                      });</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    std::vector&lt;unsigned int&gt; blockShape({2, 2});</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {2, 0}};</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                                                 <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>, inputShape, input, blockShape,</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                                                 crops, outputShape, expectedOutput);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5766a02d2acc065eaa6adf4bd515dcbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5766a02d2acc065eaa6adf4bd515dcbd">&#9670;&nbsp;</a></span>BatchToSpaceNdNhwcTest1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNhwcTest1 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00088">88</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {4, 2, 2, 1};</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {1, 4, 4, 1};</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    std::vector&lt;float&gt; input({</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                     <span class="comment">// Batch 0, Height 0, Width (2) x Channel (1)</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                     1.0f, 3.0f,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                     <span class="comment">// Batch 0, Height 1, Width (2) x Channel (1)</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                     9.0f, 11.0f,</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                                     <span class="comment">// Batch 1, Height 0, Width (2) x Channel (1)</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                     2.0f, 4.0f,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                     <span class="comment">// Batch 1, Height 1, Width (2) x Channel (1)</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                     10.0f, 12.0f,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                     <span class="comment">// Batch 2, Height 0, Width (2) x Channel (1)</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                     5.0f, 7.0f,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                     <span class="comment">// Batch 2, Height 1, Width (2) x Channel (1)</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                     13.0f, 15.0f,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                     <span class="comment">// Batch 3, Height 0, Width (2) x Channel (3)</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                     6.0f, 8.0f,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                     <span class="comment">// Batch 3, Height 1, Width (2) x Channel (1)</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                     14.0f, 16.0f</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                             });</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    std::vector&lt;float&gt; expectedOutput({</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                              1.0f,   2.0f,  3.0f,  4.0f,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                              5.0f,   6.0f,  7.0f,  8.0f,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                              9.0f,  10.0f, 11.0f,  12.0f,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                              13.0f, 14.0f, 15.0f,  16.0f</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                      });</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    std::vector&lt;unsigned int&gt; blockShape {2, 2};</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                                                <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>, inputShape, input, blockShape,</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                                                                crops, outputShape, expectedOutput);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aca8aaef715d0d4b18c08641becf3a7e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca8aaef715d0d4b18c08641becf3a7e8">&#9670;&nbsp;</a></span>BatchToSpaceNdNhwcTest2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNhwcTest2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00135">135</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {4, 1, 1, 1};</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {1, 2, 2, 1};</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::vector&lt;float&gt; input({</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                     <span class="comment">// Batch 0, Height 0, Width (2) x Channel (1)</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                     1.0f, 2.0f, 3.0f, 4.0f</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                             });</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    std::vector&lt;float&gt; expectedOutput({1.0f, 2.0f, 3.0f, 4.0f});</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    std::vector&lt;unsigned int&gt; blockShape({2, 2});</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                                                <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>, inputShape, input, blockShape,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                                                crops, outputShape, expectedOutput);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac222455cb8669deb8c93f28ea7ef109a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac222455cb8669deb8c93f28ea7ef109a">&#9670;&nbsp;</a></span>BatchToSpaceNdNhwcTest3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNhwcTest3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00158">158</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {4, 1, 1, 3};</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {1, 2, 2, 3};</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    std::vector&lt;float&gt; input({1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f, 11.0f, 12.0f});</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    std::vector&lt;float&gt; expectedOutput({1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f, 11.0f, 12.0f});</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    std::vector&lt;unsigned int&gt; blockShape({2, 2});</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                                                <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>, inputShape, input, blockShape,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                                                crops, outputShape, expectedOutput);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9945fb5c48fecb7d0609e98c87ec6ad5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9945fb5c48fecb7d0609e98c87ec6ad5">&#9670;&nbsp;</a></span>BatchToSpaceNdNhwcTest4()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNhwcTest4 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00178">178</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {8, 1, 3, 1};</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {2, 2, 4, 1};</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    std::vector&lt;float&gt; input({</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                     0.0f, 1.0f, 3.0f,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                                     0.0f, 9.0f, 11.0f,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                     0.0f, 2.0f, 4.0f,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                     0.0f, 10.0f, 12.0f,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                     0.0f, 5.0f, 7.0f,</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                     0.0f, 13.0f, 15.0f,</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                     0.0f, 6.0f, 8.0f,</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                     0.0f, 14.0f, 16.0f</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                             });</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    std::vector&lt;float&gt; expectedOutput({</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                              1.0f, 2.0f, 3.0f, 4.0f,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                              5.0f, 6.0f, 7.0f, 8.0f,</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                              9.0f, 10.0f, 11.0f, 12.0f,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                              13.0f, 14.0f, 15.0f, 16.0f</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                      });</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    std::vector&lt;unsigned int&gt; blockShape({2, 2});</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {2, 0}};</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                                                <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>, inputShape, input, blockShape,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                                                crops, outputShape, expectedOutput);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a45f8dc539e9331ca47dd2d6ec44c92e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45f8dc539e9331ca47dd2d6ec44c92e6">&#9670;&nbsp;</a></span>BatchToSpaceNdNhwcTest5()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNhwcTest5 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00212">212</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {4, 2, 2, 1};</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {1, 4, 4, 1};</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    std::vector&lt;float&gt; input({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16});</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    std::vector&lt;float&gt; expectedOutput({1, 5, 2, 6, 9, 13, 10, 14, 3, 7, 4, 8, 11, 15, 12, 16});</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    std::vector&lt;unsigned int&gt; blockShape({2, 2});</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>, inputShape,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                                 input, blockShape, crops, outputShape, expectedOutput);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6342b2004b217eb0d2ec2a9306cd743c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6342b2004b217eb0d2ec2a9306cd743c">&#9670;&nbsp;</a></span>BatchToSpaceNdNhwcTest6()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNhwcTest6 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00230">230</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {4, 1, 1, 1};</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {1, 2, 2, 1};</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    std::vector&lt;float&gt; input({</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                     <span class="comment">// Batch 0, Height 0, Width (2) x Channel (1)</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                     1, 2, 3, 4</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                             });</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    std::vector&lt;float&gt; expectedOutput({1, 2, 3, 4});</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    std::vector&lt;unsigned int&gt; blockShape({2, 2});</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                                 <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>, inputShape, input, blockShape,</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                                 crops, outputShape, expectedOutput);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af94eb1e55356e998b63f331356802d93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af94eb1e55356e998b63f331356802d93">&#9670;&nbsp;</a></span>BatchToSpaceNdNhwcTest7()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BatchToSpaceNdNhwcTest7 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml#l00253">253</a> of file <a class="el" href="_batch_to_space_nd_test_impl_8hpp_source.xhtml">BatchToSpaceNdTestImpl.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;{</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = {4, 1, 1, 3};</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = {1, 2, 2, 3};</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    std::vector&lt;float&gt; input({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    std::vector&lt;float&gt; expectedOutput({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    std::vector&lt;unsigned int&gt; blockShape({2, 2});</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">return</span> BatchToSpaceNdHelper&lt;ArmnnType, 4, 4&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                                 <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>, inputShape, input, blockShape,</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                                 crops, outputShape, expectedOutput);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_99a30439342d160875b21dac3498ad7f.xhtml">layerTests</a></li><li class="navelem"><a class="el" href="_batch_to_space_nd_test_impl_8hpp.xhtml">BatchToSpaceNdTestImpl.hpp</a></li>
    <li class="footer">Generated on Fri Mar 13 2020 16:09:14 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
