<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/layerTests/ActivationTestImpl.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_activation_test_impl_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ActivationTestImpl.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_activation_test_impl_8hpp_source.xhtml">ActivationTestImpl.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_quantize_helper_8hpp_source.xhtml">QuantizeHelper.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_resolve_type_8hpp_source.xhtml">ResolveType.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_activation_fixture_8hpp_source.xhtml">backendsCommon/test/ActivationFixture.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_tensor_copy_utils_8hpp_source.xhtml">backendsCommon/test/TensorCopyUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_workload_test_utils_8hpp_source.xhtml">backendsCommon/test/WorkloadTestUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_tensor_helpers_8hpp_source.xhtml">test/TensorHelpers.hpp</a>&gt;</code><br />
<code>#include &lt;boost/multi_array.hpp&gt;</code><br />
<code>#include &lt;algorithm&gt;</code><br />
</div>
<p><a href="_activation_test_impl_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aaa4e43f7b9a9b14145accdc347bc0e18"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:aaa4e43f7b9a9b14145accdc347bc0e18"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#aaa4e43f7b9a9b14145accdc347bc0e18">BoundedReLuTestCommon</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float upperBound, float lowerBound, float inputScale, int32_t inputOffset, float outputScale, int32_t outputOffset, const std::vector&lt; T &gt; &amp;inputData, const std::vector&lt; T &gt; &amp;outputExpectedData, unsigned int inputWidth, unsigned int inputHeight, unsigned int inputChannels, unsigned int inputBatchSize)</td></tr>
<tr class="separator:aaa4e43f7b9a9b14145accdc347bc0e18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a418191b7e7caba8173206c0870bc3684"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a418191b7e7caba8173206c0870bc3684">BoundedReLuUpperAndLowerBoundTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a418191b7e7caba8173206c0870bc3684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a359c1f734f9da1d6459e9d878e5612ba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a359c1f734f9da1d6459e9d878e5612ba">BoundedReLuUpperBoundOnlyTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a359c1f734f9da1d6459e9d878e5612ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7aa10bded0d26089e0bc4333ada10064"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a7aa10bded0d26089e0bc4333ada10064">BoundedReLuUint8UpperBoundOnlyTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a7aa10bded0d26089e0bc4333ada10064"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e868e8fa03ce4c4674b007eae5dc1a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a0e868e8fa03ce4c4674b007eae5dc1a2">BoundedReLuUint8UpperAndLowerBoundTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a0e868e8fa03ce4c4674b007eae5dc1a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7aaeeaa0a8683fae56caa66849228a87"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a7aaeeaa0a8683fae56caa66849228a87">CompareBoundedReLuTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;refWorkloadFactory, float upperBound, float lowerBound)</td></tr>
<tr class="separator:a7aaeeaa0a8683fae56caa66849228a87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22562086e72d244fd7cf4156b958c134"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a22562086e72d244fd7cf4156b958c134"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a22562086e72d244fd7cf4156b958c134">ConstantLinearActivationTestCommon</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale=0.0f, int32_t qOffset=0)</td></tr>
<tr class="separator:a22562086e72d244fd7cf4156b958c134"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52af2639a8f96fbbc86343ea8914033a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a52af2639a8f96fbbc86343ea8914033a">ConstantLinearActivationTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a52af2639a8f96fbbc86343ea8914033a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34b322827b0d8ff9f8b3b8fb9410f7d3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a34b322827b0d8ff9f8b3b8fb9410f7d3">ConstantLinearActivationUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a34b322827b0d8ff9f8b3b8fb9410f7d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32a6595835f4cb5e93fec4182ada51bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a32a6595835f4cb5e93fec4182ada51bc">ConstantLinearActivationInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a32a6595835f4cb5e93fec4182ada51bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaeea20fa5e5934ea49b8f764526a2d98"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:aaeea20fa5e5934ea49b8f764526a2d98"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#aaeea20fa5e5934ea49b8f764526a2d98">SimpleActivationTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a> activationFunction, float activationParameterA, float activationParameterB, float scale, int32_t offset, const std::vector&lt; float &gt; &amp;inputData, float outScale, int32_t outOffset, const std::vector&lt; float &gt; &amp;outputExpectedData)</td></tr>
<tr class="separator:aaeea20fa5e5934ea49b8f764526a2d98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1020322feb8c6fe89ced59fcca8277c4"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a1020322feb8c6fe89ced59fcca8277c4"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a1020322feb8c6fe89ced59fcca8277c4">SimpleSigmoidTestCommon</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:a1020322feb8c6fe89ced59fcca8277c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa87c451f7a773fd4ec9cdf11c20d7a58"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#aa87c451f7a773fd4ec9cdf11c20d7a58">SimpleSigmoidTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:aa87c451f7a773fd4ec9cdf11c20d7a58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0889979f9ffb67b036c3928c6e94af50"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a0889979f9ffb67b036c3928c6e94af50">SimpleSigmoidUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a0889979f9ffb67b036c3928c6e94af50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6558a4306d758625ab7804e9cb70b058"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a6558a4306d758625ab7804e9cb70b058">SimpleSigmoidInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a6558a4306d758625ab7804e9cb70b058"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf22306b81aa054c64c48730b2786f96"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:acf22306b81aa054c64c48730b2786f96"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#acf22306b81aa054c64c48730b2786f96">ReLuTestCommon</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:acf22306b81aa054c64c48730b2786f96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20b01cc1552ab2c3abd70166fdd35faf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a20b01cc1552ab2c3abd70166fdd35faf">ReLuInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a20b01cc1552ab2c3abd70166fdd35faf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa986502e638eba65543c1cbb01467d26"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#aa986502e638eba65543c1cbb01467d26">ReLuUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:aa986502e638eba65543c1cbb01467d26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58872a37a87790e3a3f91ee254ce304a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a58872a37a87790e3a3f91ee254ce304a">ReLuTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a58872a37a87790e3a3f91ee254ce304a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2634923ff28734237c27fcc7c009ce9d"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a2634923ff28734237c27fcc7c009ce9d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a2634923ff28734237c27fcc7c009ce9d">BoundedReLuTestCommon</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:a2634923ff28734237c27fcc7c009ce9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae42bb4023d8578a27159c95dd4b33b28"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#ae42bb4023d8578a27159c95dd4b33b28">BoundedReLuInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:ae42bb4023d8578a27159c95dd4b33b28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b43ab0b58fc8d4ad51b1b71c0e35622"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a4b43ab0b58fc8d4ad51b1b71c0e35622"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a4b43ab0b58fc8d4ad51b1b71c0e35622">SoftReLuTestCommon</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:a4b43ab0b58fc8d4ad51b1b71c0e35622"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bfdab68fed1467b8720cceb47881236"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a8bfdab68fed1467b8720cceb47881236">SoftReLuTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a8bfdab68fed1467b8720cceb47881236"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a732229b22cff2a8f96798c38832cab92"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a732229b22cff2a8f96798c38832cab92">SoftReLuUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a732229b22cff2a8f96798c38832cab92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a641db2befcd47ac97af966e20b1c4c2c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a641db2befcd47ac97af966e20b1c4c2c">SoftReLuInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a641db2befcd47ac97af966e20b1c4c2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e45714708a6daf8688ef6ca58e54827"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a6e45714708a6daf8688ef6ca58e54827"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a6e45714708a6daf8688ef6ca58e54827">LeakyReLuTestCommon</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:a6e45714708a6daf8688ef6ca58e54827"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0120909fa6b3032270399355f14654de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a0120909fa6b3032270399355f14654de">LeakyReLuTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a0120909fa6b3032270399355f14654de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9293a4d81453abbe8cbdc788c290943"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#af9293a4d81453abbe8cbdc788c290943">LeakyReLuUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:af9293a4d81453abbe8cbdc788c290943"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac01b6901c3f2921c998aff77a8362f87"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#ac01b6901c3f2921c998aff77a8362f87">LeakyReLuInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:ac01b6901c3f2921c998aff77a8362f87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8c2d170a4b51447f575183cee9579ab"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:aa8c2d170a4b51447f575183cee9579ab"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#aa8c2d170a4b51447f575183cee9579ab">AbsTestCommon</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:aa8c2d170a4b51447f575183cee9579ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31872d5729b4d7734c1eb0d189a0eece"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a31872d5729b4d7734c1eb0d189a0eece">AbsTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a31872d5729b4d7734c1eb0d189a0eece"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11baf4886951944fcf149e2a92197e58"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a11baf4886951944fcf149e2a92197e58">AbsUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a11baf4886951944fcf149e2a92197e58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dd4b2ac72e85dcfeb8540b7d5649b47"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a8dd4b2ac72e85dcfeb8540b7d5649b47">AbsInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a8dd4b2ac72e85dcfeb8540b7d5649b47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86f53855f5ab422f4e035b1aa11676f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 5 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a86f53855f5ab422f4e035b1aa11676f8">SqrtNNTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a86f53855f5ab422f4e035b1aa11676f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab2458914aa40f83ba027de7a8c07d06"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:aab2458914aa40f83ba027de7a8c07d06"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#aab2458914aa40f83ba027de7a8c07d06">SqrtTestCommon</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:aab2458914aa40f83ba027de7a8c07d06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3928f2c56ed15642ff6306cc6823ebd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#ad3928f2c56ed15642ff6306cc6823ebd">SqrtTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:ad3928f2c56ed15642ff6306cc6823ebd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6403e38cfee03672c164e3cba9863147"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a6403e38cfee03672c164e3cba9863147">SqrtUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a6403e38cfee03672c164e3cba9863147"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b855f5d3e8aab93decfa2bed46fc4cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a8b855f5d3e8aab93decfa2bed46fc4cf">SqrtInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a8b855f5d3e8aab93decfa2bed46fc4cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26032da34ce1e283ae30d05ea3bbb103"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a26032da34ce1e283ae30d05ea3bbb103"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a26032da34ce1e283ae30d05ea3bbb103">SquareTestCommon</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:a26032da34ce1e283ae30d05ea3bbb103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6584d436388485a5bd9252430a0af5b6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a6584d436388485a5bd9252430a0af5b6">SquareTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a6584d436388485a5bd9252430a0af5b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61fffaf40ad721073b70c350174d0ff3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a61fffaf40ad721073b70c350174d0ff3">SquareUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a61fffaf40ad721073b70c350174d0ff3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26219b66822d57b9fcce7a2504d1fca6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a26219b66822d57b9fcce7a2504d1fca6">SquareInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a26219b66822d57b9fcce7a2504d1fca6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65aa329dc6abc6cf9dfb6177f42595de"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a65aa329dc6abc6cf9dfb6177f42595de"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a65aa329dc6abc6cf9dfb6177f42595de">TanhTestCommon</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:a65aa329dc6abc6cf9dfb6177f42595de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a923aa3e41cd11f5eeb7cc973fd8d3c76"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a923aa3e41cd11f5eeb7cc973fd8d3c76">TanhTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a923aa3e41cd11f5eeb7cc973fd8d3c76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe9073d08e150e3dd5e156af7ea8faa5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#abe9073d08e150e3dd5e156af7ea8faa5">TanhUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:abe9073d08e150e3dd5e156af7ea8faa5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacd820bdf2307a2aa667db2899283035"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#aacd820bdf2307a2aa667db2899283035">TanhInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:aacd820bdf2307a2aa667db2899283035"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab653abd1ebff85e413b3647d2408f3b1"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:ab653abd1ebff85e413b3647d2408f3b1"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#ab653abd1ebff85e413b3647d2408f3b1">EluTestCommon</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:ab653abd1ebff85e413b3647d2408f3b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96ba4985a8fff8c04e6585e866256868"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a96ba4985a8fff8c04e6585e866256868">EluTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a96ba4985a8fff8c04e6585e866256868"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f95ca2d87f1d36d0a41d6a0cf56151b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a4f95ca2d87f1d36d0a41d6a0cf56151b">EluUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a4f95ca2d87f1d36d0a41d6a0cf56151b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a205500c03971e6ed3aae6e07afdaf145"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a205500c03971e6ed3aae6e07afdaf145">EluInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a205500c03971e6ed3aae6e07afdaf145"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fcf6512fb0db8090ce19979a9ac6472"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a1fcf6512fb0db8090ce19979a9ac6472"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a1fcf6512fb0db8090ce19979a9ac6472">HardSwishTestCommon</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:a1fcf6512fb0db8090ce19979a9ac6472"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a630fd31472c64fa147a70b9be2d4911f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a630fd31472c64fa147a70b9be2d4911f">HardSwishTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a630fd31472c64fa147a70b9be2d4911f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cf5b253aee4ecf81d75797802c09604"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a4cf5b253aee4ecf81d75797802c09604">HardSwishUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a4cf5b253aee4ecf81d75797802c09604"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0ea8320eb816bc3b78ea9a18627d65a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#ad0ea8320eb816bc3b78ea9a18627d65a">HardSwishInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:ad0ea8320eb816bc3b78ea9a18627d65a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0758d9003f13b30d5e29eae6cd89c32b"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a0758d9003f13b30d5e29eae6cd89c32b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a0758d9003f13b30d5e29eae6cd89c32b">CompareActivationTestImpl</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;refWorkloadFactory, <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a> f, unsigned int batchSize=5, float qScale=0.0f, int32_t qOffset=0)</td></tr>
<tr class="separator:a0758d9003f13b30d5e29eae6cd89c32b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af226f71b992ee8076a3880def72b1f3f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#af226f71b992ee8076a3880def72b1f3f">CompareActivationTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;refWorkloadFactory, <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a> f, unsigned int batchSize)</td></tr>
<tr class="separator:af226f71b992ee8076a3880def72b1f3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addef260aaa3c7f7f1d08f821b823af33"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#addef260aaa3c7f7f1d08f821b823af33">CompareActivationUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;refWorkloadFactory, <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a> f)</td></tr>
<tr class="separator:addef260aaa3c7f7f1d08f821b823af33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55dddf072af585903973b8e3398835dc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_activation_test_impl_8cpp.xhtml#a55dddf072af585903973b8e3398835dc">CompareActivationInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;refWorkloadFactory, <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a> f)</td></tr>
<tr class="separator:a55dddf072af585903973b8e3398835dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a8dd4b2ac72e85dcfeb8540b7d5649b47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8dd4b2ac72e85dcfeb8540b7d5649b47">&#9670;&nbsp;</a></span>AbsInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; AbsInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00785">785</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;{</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    <span class="keywordflow">return</span> AbsTestCommon&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a31872d5729b4d7734c1eb0d189a0eece"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31872d5729b4d7734c1eb0d189a0eece">&#9670;&nbsp;</a></span>AbsTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; AbsTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00771">771</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;{</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="keywordflow">return</span> AbsTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa8c2d170a4b51447f575183cee9579ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8c2d170a4b51447f575183cee9579ab">&#9670;&nbsp;</a></span>AbsTestCommon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; AbsTestCommon </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00737">737</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::Abs</a>.</p>
<div class="fragment"><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;{</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    std::vector&lt;float&gt; inputData = {</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            -0.1f, -0.2f, -0.3f, -0.4f,</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            0.1f,  0.2f,  0.3f,  0.4f,</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;            -1.0f, -2.0f, -3.0f, -4.0f,</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            1.0f,  2.0f,  3.0f,  4.0f</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    };</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    <span class="comment">// Calculate output values for input.</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <span class="keyword">auto</span> f = [](<span class="keywordtype">float</span> value)</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    {</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;        <span class="keywordflow">return</span> std::abs(value);</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    };</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    std::vector&lt;float&gt; outputExpectedData(inputData.size());</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    std::transform(inputData.begin(), inputData.end(), outputExpectedData.begin(), f);</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    <span class="keywordflow">return</span> SimpleActivationTest&lt;ArmnnType&gt;(workloadFactory,</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                                           memoryManager,</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a>,</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                                           0.f,</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                                           0.f,</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                                           qScale,</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                                           qOffset,</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;                                           inputData,</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;                                           qScale,</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                                           qOffset,</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                                           outputExpectedData);</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a11baf4886951944fcf149e2a92197e58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11baf4886951944fcf149e2a92197e58">&#9670;&nbsp;</a></span>AbsUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; AbsUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00778">778</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;{</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <span class="keywordflow">return</span> AbsTestCommon&lt;armnn::DataType::QAsymmU8&gt;(workloadFactory, memoryManager, 0.0625f, 64);</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae42bb4023d8578a27159c95dd4b33b28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae42bb4023d8578a27159c95dd4b33b28">&#9670;&nbsp;</a></span>BoundedReLuInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; BoundedReLuInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00614">614</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;{</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keywordflow">return</span> ReLuTestCommon&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaa4e43f7b9a9b14145accdc347bc0e18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa4e43f7b9a9b14145accdc347bc0e18">&#9670;&nbsp;</a></span>BoundedReLuTestCommon() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BoundedReLuTestCommon </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>upperBound</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>lowerBound</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>inputScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>inputOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>outputScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>outputOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputExpectedData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>inputWidth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>inputHeight</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>inputChannels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>inputBatchSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00023">23</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::BoundedReLu</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00014">CopyDataFromITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00009">CopyDataToITensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01099">IWorkloadFactory::CreateActivation()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00037">ActivationDescriptor::m_A</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00039">ActivationDescriptor::m_B</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00035">ActivationDescriptor::m_Function</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00040">LayerTestResult&lt; T, n &gt;::output</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult&lt; T, n &gt;::outputExpected</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00259">TensorInfo::SetQuantizationScale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputWidth = inputWidth;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputHeight = inputHeight;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannels = inputChannels;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputBatchSize = inputBatchSize;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({ inputBatchSize, inputChannels, inputHeight, inputWidth }, ArmnnType);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({ outputBatchSize, outputChannels, outputHeight, outputWidth }, ArmnnType);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span>(armnn::IsQuantizedType&lt;T&gt;())</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(inputScale);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        inputTensorInfo.SetQuantizationOffset(inputOffset);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        outputTensorInfo.SetQuantizationScale(outputScale);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        outputTensorInfo.SetQuantizationOffset(outputOffset);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 4&gt;</a> result(inputTensorInfo);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">auto</span> input = MakeTensor&lt;T, 4&gt;(inputTensorInfo, inputData);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// Setup bounded ReLu.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a> descriptor;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> workloadInfo;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    AddInputToWorkload(descriptor, workloadInfo, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    AddOutputToWorkload(descriptor, workloadInfo, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a> = upperBound;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">m_B</a> = lowerBound;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">CreateActivation</a>(descriptor, workloadInfo);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), &amp;input[0][0][0][0]);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;result.output[0][0][0][0], outputHandle.get());</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    result.outputExpected = MakeTensor&lt;T, 4&gt;(outputTensorInfo, outputExpectedData);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a4458d75c0db21c6abc941cd93a6a24c5"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">armnn::IWorkloadFactory::CreateActivation</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateActivation(const ActivationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01099">WorkloadFactory.cpp:1099</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00049">WorkloadData.hpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00259">Tensor.cpp:259</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_a99b626c58a926dc7d6df78d22ec186c8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *memory, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a></div><div class="ttdoc">min(a, max(b, input)) ReLu1 &amp; ReLu6. </div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15c140be4ddceffee16436f009d3ed94"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">armnn::IWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a017b2990003a014234f13e999dc7c689"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">armnn::ActivationDescriptor::m_A</a></div><div class="ttdeci">float m_A</div><div class="ttdoc">Alpha upper bound value used by the activation functions. (BoundedReLu, Linear, TanH). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00037">Descriptors.hpp:37</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00029">LayerTestResult.hpp:29</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a28c4c9cb15f6be3499abbc46b356060b"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">armnn::ActivationDescriptor::m_B</a></div><div class="ttdeci">float m_B</div><div class="ttdoc">Beta lower bound value used by the activation functions. (BoundedReLu, Linear, TanH). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00039">Descriptors.hpp:39</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu, LeakyReLu, Abs, Sqrt, Square). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00035">Descriptors.hpp:35</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00130">WorkloadData.hpp:130</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2634923ff28734237c27fcc7c009ce9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2634923ff28734237c27fcc7c009ce9d">&#9670;&nbsp;</a></span>BoundedReLuTestCommon() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; BoundedReLuTestCommon </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00579">579</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::BoundedReLu</a>.</p>
<div class="fragment"><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;{</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    std::vector&lt;float&gt; inputData = {</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            -0.1f, -0.2f, -0.3f, -0.4f,</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            0.1f,  0.2f,  0.3f,  0.4f,</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            -1.0f, -2.0f, -3.0f, -4.0f,</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            1.0f,  2.0f,  3.0f,  4.0f</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    };</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a = 1.0f;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> b = -1.0f;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="comment">// Calculate output values for input.</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <span class="keyword">auto</span> f = [a, b](<span class="keywordtype">float</span> value)</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    {</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        <span class="keywordflow">return</span> std::min(a, std::max(b, value));</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    };</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    std::vector&lt;float&gt; outputExpectedData(inputData.size());</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    std::transform(inputData.begin(), inputData.end(), outputExpectedData.begin(), f);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keywordflow">return</span> SimpleActivationTest&lt;ArmnnType&gt;(workloadFactory,</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                                           memoryManager,</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a>,</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                                           a,</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                                           b,</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                                           qScale,</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                                           qOffset,</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                                           inputData,</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                                           qScale,</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                                           qOffset,</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                                           outputExpectedData);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a></div><div class="ttdoc">min(a, max(b, input)) ReLu1 &amp; ReLu6. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0e868e8fa03ce4c4674b007eae5dc1a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e868e8fa03ce4c4674b007eae5dc1a2">&#9670;&nbsp;</a></span>BoundedReLuUint8UpperAndLowerBoundTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; BoundedReLuUint8UpperAndLowerBoundTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00184">184</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00014">CopyDataFromITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00009">CopyDataToITensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01099">IWorkloadFactory::CreateActivation()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_quantizer_test_8cpp_source.xhtml#l00335">armnn::GetInputTensorInfo()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>.</p>
<div class="fragment"><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth     = 3u;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight    = 2u;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels  = 1u;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputBatchSize = 1;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    std::vector&lt;uint8_t&gt; input = std::vector&lt;uint8_t&gt;{</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;         51, 230, 28,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        251,   8, 92</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    };</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// Calculated manually.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    std::vector&lt;uint8_t&gt; output = std::vector&lt;uint8_t&gt;{</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;         51, 192, 32,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        192,  32, 92</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    };</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    int32_t inputOffset = 112;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordtype">float</span> inputScale    = 0.0125f;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> BoundedReLuTestCommon&lt;armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        workloadFactory, memoryManager, 1.0f, -1.0f,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        inputScale, inputOffset, inputScale, inputOffset, <span class="comment">// Input/output scale &amp; offset same.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        input, output, inputWidth, inputHeight, inputChannels, inputBatchSize);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7aa10bded0d26089e0bc4333ada10064"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7aa10bded0d26089e0bc4333ada10064">&#9670;&nbsp;</a></span>BoundedReLuUint8UpperBoundOnlyTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; BoundedReLuUint8UpperBoundOnlyTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00153">153</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth     = 3u;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight    = 2u;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels  = 1u;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputBatchSize = 1;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    std::vector&lt;uint8_t&gt; input = std::vector&lt;uint8_t&gt;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;         51, 124, 28,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        251,   8, 92</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    };</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// Calculated manually.</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    std::vector&lt;uint8_t&gt; output = std::vector&lt;uint8_t&gt;{</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;          0, 122,  0,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        255,   0, 58</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    };</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordtype">float</span> inputScale     = 12.0f / 255.0f;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    int32_t inputOffset  = 63;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordtype">float</span> outputScale    = 6.0f / 255.0f;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    int32_t outputOffset = 0;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> BoundedReLuTestCommon&lt;armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        workloadFactory, memoryManager, 6.0f, 0.0f,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        inputScale, inputOffset, outputScale, outputOffset,</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        input, output, inputWidth, inputHeight, inputChannels, inputBatchSize);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a418191b7e7caba8173206c0870bc3684"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a418191b7e7caba8173206c0870bc3684">&#9670;&nbsp;</a></span>BoundedReLuUpperAndLowerBoundTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; BoundedReLuUpperAndLowerBoundTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00091">91</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth = 4u;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = 5u;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels = 1u;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputBatchSize = 1;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    std::vector&lt;float&gt; input = std::vector&lt;float&gt;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      -2.0f,       0.1f,     0.5f,     1.25f,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;     0.786f,    0.9875f,    -1.5f,    0.384f,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    1.0001f,       3.5f,     7.5f,    0.896f,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;     2.126f,       2.0f,     0.3f,     0.15f,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;     0.999f,       1.2f,    0.89f,      6.1f,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    };</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// Calculated manually.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::vector&lt;float&gt; output = std::vector&lt;float&gt;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      -1.0f,       0.1f,     0.5f,      1.0f,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;     0.786f,    0.9875f,    -1.0f,    0.384f,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;       1.0f,       1.0f,     1.0f,    0.896f,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;       1.0f,       1.0f,     0.3f,     0.15f,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;     0.999f,       1.0f,    0.89f,      1.0f,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    };</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> BoundedReLuTestCommon&lt;armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        workloadFactory, memoryManager, 1.0f, -1.0f, 1.0f, 0, 1.0f, 0, input, output,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        inputWidth, inputHeight, inputChannels, inputBatchSize);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a359c1f734f9da1d6459e9d878e5612ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a359c1f734f9da1d6459e9d878e5612ba">&#9670;&nbsp;</a></span>BoundedReLuUpperBoundOnlyTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; BoundedReLuUpperBoundOnlyTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00122">122</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth = 4u;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = 5u;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels = 1u;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputBatchSize = 1;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    std::vector&lt;float&gt; input = std::vector&lt;float&gt;{</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;      -1.0f,       0.1f,     0.5f,      6.25f,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;     0.786f,    5.9875f,    -0.5f,     0.384f,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    6.0001f,       3.5f,     7.5f,     0.896f,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;     2.126f,      12.0f,     0.3f,      0.15f,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;     0.999f,       1.2f,    0.89f,       6.1f,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    };</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">// Calculated manually.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    std::vector&lt;float&gt; output = std::vector&lt;float&gt;{</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;       0.0f,       0.1f,     0.5f,       6.0f,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;     0.786f,    5.9875f,     0.0f,     0.384f,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;       6.0f,       3.5f,     6.0f,     0.896f,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;     2.126f,       6.0f,     0.3f,      0.15f,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;     0.999f,       1.2f,    0.89f,       6.0f,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    };</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">return</span> BoundedReLuTestCommon&lt;armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        workloadFactory, memoryManager, 6.0f, 0.0f, 1.0f, 0, 1.0f, 0, input, output,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        inputWidth, inputHeight, inputChannels, inputBatchSize);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a55dddf072af585903973b8e3398835dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55dddf072af585903973b8e3398835dc">&#9670;&nbsp;</a></span>CompareActivationInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t,4&gt; CompareActivationInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>refWorkloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a>&#160;</td>
          <td class="paramname"><em>f</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01257">1257</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;{</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    <span class="keywordflow">return</span> CompareActivationTestImpl&lt;armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;            workloadFactory, memoryManager, refWorkloadFactory, f, 5, 0.1f, 0);</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af226f71b992ee8076a3880def72b1f3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af226f71b992ee8076a3880def72b1f3f">&#9670;&nbsp;</a></span>CompareActivationTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float,4&gt; CompareActivationTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>refWorkloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a>&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>batchSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01236">1236</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;{</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    <span class="keywordflow">return</span> CompareActivationTestImpl&lt;armnn::DataType::Float32&gt;(</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;        workloadFactory, memoryManager, refWorkloadFactory, f, batchSize);</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0758d9003f13b30d5e29eae6cd89c32b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0758d9003f13b30d5e29eae6cd89c32b">&#9670;&nbsp;</a></span>CompareActivationTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T,4&gt; CompareActivationTestImpl </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>refWorkloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a>&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>batchSize</em> = <code>5</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01142">1142</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00014">CopyDataFromITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00009">CopyDataToITensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01099">IWorkloadFactory::CreateActivation()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00037">ActivationDescriptor::m_A</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00039">ActivationDescriptor::m_B</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00035">ActivationDescriptor::m_Function</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00033">armnn::numeric_cast()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00275">TensorInfo::SetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00259">TensorInfo::SetQuantizationScale()</a>, and <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054">armnn::Sqrt</a>.</p>
<div class="fragment"><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;{</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width     = 17;</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height    = 29;</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channels  = 2;</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;    <span class="keywordtype">float</span> a = 0.234f;</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;    <span class="keywordtype">float</span> b = -12.345f;</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo;</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo;</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[] = {batchSize, channels, height, width};</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;    inputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, shape, ArmnnType);</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;    outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, shape, ArmnnType);</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;    <span class="comment">// Set quantization parameters if the requested type is a quantized type.</span></div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;    <span class="keywordflow">if</span>(armnn::IsQuantizedType&lt;T&gt;())</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    {</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(qScale);</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(qOffset);</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;        outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(qScale);</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;        outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(qOffset);</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;    }</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    <span class="keywordtype">float</span> minVal = -10.f;</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    <span class="keywordflow">if</span> (f == <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054">armnn::ActivationFunction::Sqrt</a>)</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    {</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;        minVal = 0.f;</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    }</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    boost::multi_array&lt;T, 4&gt; input = MakeRandomTensor&lt;T, 4&gt;(inputTensorInfo, 21453, minVal, 10.f);</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T,4&gt;</a> ret(outputTensorInfo);</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    <span class="keyword">auto</span> boostArrayExtents = boost::extents</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;        [<a class="code" href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">boost::numeric_cast</a>&lt;boost::multi_array_types::extent_gen::index&gt;(batchSize)]</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    [boost::numeric_cast&lt;boost::multi_array_types::extent_gen::index&gt;(channels)]</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    [<a class="code" href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">boost::numeric_cast</a>&lt;boost::multi_array_types::extent_gen::index&gt;(height)]</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    [boost::numeric_cast&lt;boost::multi_array_types::extent_gen::index&gt;(width)];</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    ret.output.resize(boostArrayExtents);</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    ret.outputExpected.resize(boostArrayExtents);</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandleRef = refWorkloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandleRef = refWorkloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    <a class="code" href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a> data;</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a>        = a;</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">m_B</a>        = b;</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = f;</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    <a class="code" href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a> refData = data;</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> refInfo = info;</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    SetWorkloadInput(refData, refInfo, 0, inputTensorInfo, inputHandleRef.get());</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;    SetWorkloadOutput(refData, refInfo, 0, outputTensorInfo, outputHandleRef.get());</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">CreateActivation</a>(data, info);</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;    BOOST_ASSERT(workload != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workloadRef = refWorkloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">CreateActivation</a>(refData, refInfo);</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    BOOST_ASSERT(workloadRef != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    inputHandleRef-&gt;Allocate();</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    outputHandleRef-&gt;Allocate();</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), &amp;input[0][0][0][0]);</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandleRef.get(), &amp;input[0][0][0][0]);</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    workloadRef-&gt;Execute();</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;ret.output[0][0][0][0], outputHandle.get());</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;ret.outputExpected[0][0][0][0], outputHandleRef.get());</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054">armnn::ActivationFunction::Sqrt</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a4458d75c0db21c6abc941cd93a6a24c5"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">armnn::IWorkloadFactory::CreateActivation</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateActivation(const ActivationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01099">WorkloadFactory.cpp:1099</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00049">WorkloadData.hpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00259">Tensor.cpp:259</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a37fa39012e90d568df7f774cd6d1e956"><div class="ttname"><a href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00033">NumericCast.hpp:33</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_a99b626c58a926dc7d6df78d22ec186c8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *memory, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15c140be4ddceffee16436f009d3ed94"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">armnn::IWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a017b2990003a014234f13e999dc7c689"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">armnn::ActivationDescriptor::m_A</a></div><div class="ttdeci">float m_A</div><div class="ttdoc">Alpha upper bound value used by the activation functions. (BoundedReLu, Linear, TanH). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00037">Descriptors.hpp:37</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00029">LayerTestResult.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00275">Tensor.cpp:275</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a28c4c9cb15f6be3499abbc46b356060b"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">armnn::ActivationDescriptor::m_B</a></div><div class="ttdeci">float m_B</div><div class="ttdoc">Beta lower bound value used by the activation functions. (BoundedReLu, Linear, TanH). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00039">Descriptors.hpp:39</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu, LeakyReLu, Abs, Sqrt, Square). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00035">Descriptors.hpp:35</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00130">WorkloadData.hpp:130</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="addef260aaa3c7f7f1d08f821b823af33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addef260aaa3c7f7f1d08f821b823af33">&#9670;&nbsp;</a></span>CompareActivationUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t,4&gt; CompareActivationUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>refWorkloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a>&#160;</td>
          <td class="paramname"><em>f</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01247">1247</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;{</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    <span class="keywordflow">return</span> CompareActivationTestImpl&lt;armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;        workloadFactory, memoryManager, refWorkloadFactory, f, 5, 0.1f, 50);</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7aaeeaa0a8683fae56caa66849228a87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7aaeeaa0a8683fae56caa66849228a87">&#9670;&nbsp;</a></span>CompareBoundedReLuTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; CompareBoundedReLuTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>refWorkloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>upperBound</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>lowerBound</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00284">284</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::BoundedReLu</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00037">ActivationDescriptor::m_A</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00039">ActivationDescriptor::m_B</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00035">ActivationDescriptor::m_Function</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00040">LayerTestResult&lt; T, n &gt;::output</a>, and <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult&lt; T, n &gt;::outputExpected</a>.</p>
<div class="fragment"><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;{</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 4&gt;</a> result(BoundedReLuRandomInputTestTraits::GetOutputTensorInfo());</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a> activationDescriptor;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    activationDescriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a>;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    activationDescriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a> = upperBound;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    activationDescriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">m_B</a> = lowerBound;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    result.output = BoundedReLuRandomInputTest(</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        workloadFactory, memoryManager, 0.0f, upperBound, activationDescriptor);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    result.outputExpected = BoundedReLuRandomInputTest(</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        refWorkloadFactory, <span class="keyword">nullptr</span>, 0.0f, upperBound, activationDescriptor);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00020">Descriptors.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a></div><div class="ttdoc">min(a, max(b, input)) ReLu1 &amp; ReLu6. </div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a017b2990003a014234f13e999dc7c689"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">armnn::ActivationDescriptor::m_A</a></div><div class="ttdeci">float m_A</div><div class="ttdoc">Alpha upper bound value used by the activation functions. (BoundedReLu, Linear, TanH). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00037">Descriptors.hpp:37</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00029">LayerTestResult.hpp:29</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a28c4c9cb15f6be3499abbc46b356060b"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">armnn::ActivationDescriptor::m_B</a></div><div class="ttdeci">float m_B</div><div class="ttdoc">Beta lower bound value used by the activation functions. (BoundedReLu, Linear, TanH). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00039">Descriptors.hpp:39</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu, LeakyReLu, Abs, Sqrt, Square). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00035">Descriptors.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a32a6595835f4cb5e93fec4182ada51bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32a6595835f4cb5e93fec4182ada51bc">&#9670;&nbsp;</a></span>ConstantLinearActivationInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; ConstantLinearActivationInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00383">383</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;{</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordflow">return</span> ConstantLinearActivationTestCommon&lt;armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a52af2639a8f96fbbc86343ea8914033a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52af2639a8f96fbbc86343ea8914033a">&#9670;&nbsp;</a></span>ConstantLinearActivationTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; ConstantLinearActivationTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00368">368</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;{</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">return</span> ConstantLinearActivationTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a22562086e72d244fd7cf4156b958c134"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22562086e72d244fd7cf4156b958c134">&#9670;&nbsp;</a></span>ConstantLinearActivationTestCommon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T,4&gt; ConstantLinearActivationTestCommon </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00307">307</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00014">CopyDataFromITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00009">CopyDataToITensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01099">IWorkloadFactory::CreateActivation()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b">armnn::Linear</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00037">ActivationDescriptor::m_A</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00039">ActivationDescriptor::m_B</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00035">ActivationDescriptor::m_Function</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00040">LayerTestResult&lt; T, n &gt;::output</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult&lt; T, n &gt;::outputExpected</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00275">TensorInfo::SetQuantizationOffset()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00259">TensorInfo::SetQuantizationScale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;{</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight    = 20;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth     = 17;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels  = 3;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize      = 5;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[]  = {batchSize, inputChannels, inputHeight, inputWidth};</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    inputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, shape, ArmnnType);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, shape, ArmnnType);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="comment">// Set quantization parameters if the requested type is a quantized type.</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">if</span>(armnn::IsQuantizedType&lt;T&gt;())</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(qScale);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(qOffset);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(qScale);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(qOffset);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    }</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 4&gt;</a> ret(outputTensorInfo);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="comment">// Do linear activation that should leave the tensor unchanged.</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <a class="code" href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a> data;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a> = 1.0f;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">m_B</a> = 0.0f;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b">armnn::ActivationFunction::Linear</a>;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">CreateActivation</a>(data, info);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    boost::multi_array&lt;T, 4&gt; input = MakeRandomTensor&lt;T, 4&gt;(inputTensorInfo, 7123561);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), &amp;input[0][0][0][0]);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;ret.output[0][0][0][0], outputHandle.get());</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="comment">// Ensure output equals input.</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    ret.outputExpected = input;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a4458d75c0db21c6abc941cd93a6a24c5"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">armnn::IWorkloadFactory::CreateActivation</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateActivation(const ActivationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01099">WorkloadFactory.cpp:1099</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00049">WorkloadData.hpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00259">Tensor.cpp:259</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_a99b626c58a926dc7d6df78d22ec186c8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *memory, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15c140be4ddceffee16436f009d3ed94"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">armnn::IWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a017b2990003a014234f13e999dc7c689"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">armnn::ActivationDescriptor::m_A</a></div><div class="ttdeci">float m_A</div><div class="ttdoc">Alpha upper bound value used by the activation functions. (BoundedReLu, Linear, TanH). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00037">Descriptors.hpp:37</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00029">LayerTestResult.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00275">Tensor.cpp:275</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b">armnn::ActivationFunction::Linear</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a28c4c9cb15f6be3499abbc46b356060b"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">armnn::ActivationDescriptor::m_B</a></div><div class="ttdeci">float m_B</div><div class="ttdoc">Beta lower bound value used by the activation functions. (BoundedReLu, Linear, TanH). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00039">Descriptors.hpp:39</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu, LeakyReLu, Abs, Sqrt, Square). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00035">Descriptors.hpp:35</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00130">WorkloadData.hpp:130</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a34b322827b0d8ff9f8b3b8fb9410f7d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34b322827b0d8ff9f8b3b8fb9410f7d3">&#9670;&nbsp;</a></span>ConstantLinearActivationUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; ConstantLinearActivationUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00375">375</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;{</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">return</span> ConstantLinearActivationTestCommon&lt;armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        workloadFactory, memoryManager, 4.0f, 3);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a205500c03971e6ed3aae6e07afdaf145"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a205500c03971e6ed3aae6e07afdaf145">&#9670;&nbsp;</a></span>EluInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; EluInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01070">1070</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;{</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    <span class="keywordflow">return</span> EluTestCommon&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a96ba4985a8fff8c04e6585e866256868"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96ba4985a8fff8c04e6585e866256868">&#9670;&nbsp;</a></span>EluTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; EluTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01056">1056</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;{</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;    <span class="keywordflow">return</span> EluTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab653abd1ebff85e413b3647d2408f3b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab653abd1ebff85e413b3647d2408f3b1">&#9670;&nbsp;</a></span>EluTestCommon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; EluTestCommon </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01020">1020</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaed67cf7d54c570e4c4891800f085f41d">armnn::Elu</a>.</p>
<div class="fragment"><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;{</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    std::vector&lt;float&gt; inputData = {</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;            -0.1f, -0.2f, -0.3f, -0.4f,</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;            0.1f,  0.2f,  0.3f,  0.4f,</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;            -1.0f, -2.0f, -3.0f, -4.0f,</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;            1.0f,  2.0f,  3.0f,  4.0f</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    };</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a = 0.01f;</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    <span class="comment">// Calculate output values for input.</span></div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    <span class="keyword">auto</span> f = [a](<span class="keywordtype">float</span> value)</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    {</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;        <span class="keywordflow">return</span> (value &gt;= 0) ? value : a * (expf(value) - 1);</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    };</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    std::vector&lt;float&gt; outputExpectedData(inputData.size());</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;    std::transform(inputData.begin(), inputData.end(), outputExpectedData.begin(), f);</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;    <span class="keywordflow">return</span> SimpleActivationTest&lt;ArmnnType&gt;(workloadFactory,</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;                                           memoryManager,</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaed67cf7d54c570e4c4891800f085f41d">armnn::ActivationFunction::Elu</a>,</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;                                           a,</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;                                           0.0f,</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;                                           qScale,</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;                                           qOffset,</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;                                           inputData,</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                                           qScale,</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;                                           qOffset,</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                                           outputExpectedData);</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaaed67cf7d54c570e4c4891800f085f41d"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaed67cf7d54c570e4c4891800f085f41d">armnn::ActivationFunction::Elu</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4f95ca2d87f1d36d0a41d6a0cf56151b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f95ca2d87f1d36d0a41d6a0cf56151b">&#9670;&nbsp;</a></span>EluUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; EluUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01063">1063</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;{</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;    <span class="keywordflow">return</span> EluTestCommon&lt;armnn::DataType::QAsymmU8&gt;(workloadFactory, memoryManager, 0.1f, 64);</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad0ea8320eb816bc3b78ea9a18627d65a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0ea8320eb816bc3b78ea9a18627d65a">&#9670;&nbsp;</a></span>HardSwishInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; HardSwishInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01133">1133</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;{</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;    <span class="keywordflow">return</span> HardSwishTestCommon&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a630fd31472c64fa147a70b9be2d4911f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a630fd31472c64fa147a70b9be2d4911f">&#9670;&nbsp;</a></span>HardSwishTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; HardSwishTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01119">1119</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;{</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    <span class="keywordflow">return</span> HardSwishTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1fcf6512fb0db8090ce19979a9ac6472"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fcf6512fb0db8090ce19979a9ac6472">&#9670;&nbsp;</a></span>HardSwishTestCommon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; HardSwishTestCommon </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01079">1079</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa0877e5b3fbe9d7569df6399609ed0186">armnn::HardSwish</a>.</p>
<div class="fragment"><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;{</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    std::vector&lt;float&gt; inputData = {</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;        -0.1f, -0.2f, -0.3f, -0.4f,</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;        0.1f,  0.2f,  0.3f,  0.4f,</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;        -1.0f, -2.0f, -3.0f, -4.0f,</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;        1.0f,  2.0f,  3.0f,  4.0f</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;    };</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    <span class="comment">// Calculate output values for input.</span></div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    <span class="keyword">auto</span> f = [](<span class="keywordtype">float</span> x)</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;        {</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;            <span class="comment">// Break down the calculation to help with verification.</span></div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;            <span class="comment">// hard_swish(x) = x * relu6(x+3) / 6</span></div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;            <span class="comment">// relu6(x) = min(max(x,0),6)</span></div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;            <span class="keywordtype">float</span> reLu6_step1 = std::max((x + 3),0.0f);</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;            <span class="keywordtype">float</span> reLu6Complete = std::min(reLu6_step1, 6.0f);</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;            <span class="keywordtype">float</span> hardSwish_step1 = x * reLu6Complete;</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;            <span class="keywordtype">float</span> result = hardSwish_step1 / 6;</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;            <span class="keywordflow">return</span> result;</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;        };</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;    std::vector&lt;float&gt; outputExpectedData(inputData.size());</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    std::transform(inputData.begin(), inputData.end(), outputExpectedData.begin(), f);</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;    <span class="keywordflow">return</span> SimpleActivationTest&lt;ArmnnType&gt;(workloadFactory,</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;                                           memoryManager,</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa0877e5b3fbe9d7569df6399609ed0186">armnn::ActivationFunction::HardSwish</a>,</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;                                           0.f,</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;                                           0.f,</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;                                           qScale,</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;                                           qOffset,</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;                                           inputData,</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;                                           qScale,</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;                                           qOffset,</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;                                           outputExpectedData);</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa0877e5b3fbe9d7569df6399609ed0186"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa0877e5b3fbe9d7569df6399609ed0186">armnn::ActivationFunction::HardSwish</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4cf5b253aee4ecf81d75797802c09604"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cf5b253aee4ecf81d75797802c09604">&#9670;&nbsp;</a></span>HardSwishUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; HardSwishUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01126">1126</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;{</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    <span class="keywordflow">return</span> HardSwishTestCommon&lt;armnn::DataType::QAsymmU8&gt;(workloadFactory, memoryManager, 0.1f, 64);</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac01b6901c3f2921c998aff77a8362f87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac01b6901c3f2921c998aff77a8362f87">&#9670;&nbsp;</a></span>LeakyReLuInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; LeakyReLuInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00729">729</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;{</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keywordflow">return</span> LeakyReLuTestCommon&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0120909fa6b3032270399355f14654de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0120909fa6b3032270399355f14654de">&#9670;&nbsp;</a></span>LeakyReLuTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; LeakyReLuTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00715">715</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;{</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <span class="keywordflow">return</span> LeakyReLuTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6e45714708a6daf8688ef6ca58e54827"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e45714708a6daf8688ef6ca58e54827">&#9670;&nbsp;</a></span>LeakyReLuTestCommon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; LeakyReLuTestCommon </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00680">680</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaacb7667f5ec2f6e8a5943b781ba6c2735">armnn::LeakyReLu</a>.</p>
<div class="fragment"><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;{</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    std::vector&lt;float&gt; inputData = {</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            -0.1f, -0.2f, -0.3f, -0.4f,</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;            0.1f,  0.2f,  0.3f,  0.4f,</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;            -1.0f, -2.0f, -3.0f, -4.0f,</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;            1.0f,  2.0f,  3.0f,  4.0f</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    };</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a = 0.01f;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="comment">// Calculate output values for input.</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keyword">auto</span> f = [a](<span class="keywordtype">float</span> value)</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    {</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        <span class="keywordflow">return</span> value &gt; 0.0f ? value : (value * a);</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    };</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    std::vector&lt;float&gt; outputExpectedData(inputData.size());</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    std::transform(inputData.begin(), inputData.end(), outputExpectedData.begin(), f);</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keywordflow">return</span> SimpleActivationTest&lt;ArmnnType&gt;(workloadFactory,</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                                           memoryManager,</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaacb7667f5ec2f6e8a5943b781ba6c2735">armnn::ActivationFunction::LeakyReLu</a>,</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                                           a,</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                                           0.f,</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                                           qScale,</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                                           qOffset,</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                                           inputData,</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                                           qScale,</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                                           qOffset,</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                                           outputExpectedData);</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaacb7667f5ec2f6e8a5943b781ba6c2735"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaacb7667f5ec2f6e8a5943b781ba6c2735">armnn::ActivationFunction::LeakyReLu</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af9293a4d81453abbe8cbdc788c290943"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9293a4d81453abbe8cbdc788c290943">&#9670;&nbsp;</a></span>LeakyReLuUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; LeakyReLuUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00722">722</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;{</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="keywordflow">return</span> LeakyReLuTestCommon&lt;armnn::DataType::QAsymmU8&gt;(workloadFactory, memoryManager, 0.0625f, 64);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a20b01cc1552ab2c3abd70166fdd35faf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20b01cc1552ab2c3abd70166fdd35faf">&#9670;&nbsp;</a></span>ReLuInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; ReLuInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00555">555</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;{</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="keywordflow">return</span> ReLuTestCommon&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a58872a37a87790e3a3f91ee254ce304a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58872a37a87790e3a3f91ee254ce304a">&#9670;&nbsp;</a></span>ReLuTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; ReLuTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00570">570</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;{</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keywordflow">return</span> ReLuTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="acf22306b81aa054c64c48730b2786f96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf22306b81aa054c64c48730b2786f96">&#9670;&nbsp;</a></span>ReLuTestCommon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; ReLuTestCommon </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00521">521</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559">armnn::ReLu</a>.</p>
<div class="fragment"><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;{</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    std::vector&lt;float&gt; inputData = {</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            -0.1f, -0.2f, -0.3f, -0.4f,</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            0.1f,  0.2f,  0.3f,  0.4f,</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            -1.0f, -2.0f, -3.0f, -4.0f,</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            1.0f,  2.0f,  3.0f,  4.0f</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    };</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="comment">// Calculate output values for input.</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keyword">auto</span> f = [](<span class="keywordtype">float</span> value)</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    {</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <span class="keywordflow">return</span> std::fmax(0.0f, value);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    };</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    std::vector&lt;float&gt; outputExpectedData(inputData.size());</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    std::transform(inputData.begin(), inputData.end(), outputExpectedData.begin(), f);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keywordflow">return</span> SimpleActivationTest&lt;ArmnnType&gt;(workloadFactory,</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                                           memoryManager,</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559">armnn::ActivationFunction::ReLu</a>,</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                                           0.f,</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                                           0.f,</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                                           qScale,</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                                           qOffset,</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                                           inputData,</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                                           qScale,</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                                           qOffset,</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                                           outputExpectedData);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559">armnn::ActivationFunction::ReLu</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa986502e638eba65543c1cbb01467d26"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa986502e638eba65543c1cbb01467d26">&#9670;&nbsp;</a></span>ReLuUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; ReLuUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00563">563</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;{</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="keywordflow">return</span> ReLuTestCommon&lt;armnn::DataType::QAsymmU8&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaeea20fa5e5934ea49b8f764526a2d98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaeea20fa5e5934ea49b8f764526a2d98">&#9670;&nbsp;</a></span>SimpleActivationTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; SimpleActivationTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a>&#160;</td>
          <td class="paramname"><em>activationFunction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>activationParameterA</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>activationParameterB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>outScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>outOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputExpectedData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00392">392</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00014">CopyDataFromITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00009">CopyDataToITensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01099">IWorkloadFactory::CreateActivation()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00037">ActivationDescriptor::m_A</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00039">ActivationDescriptor::m_B</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00035">ActivationDescriptor::m_Function</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00040">LayerTestResult&lt; T, n &gt;::output</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult&lt; T, n &gt;::outputExpected</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00259">TensorInfo::SetQuantizationScale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;{</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth = 16u;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = 1u;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels = 1u;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputBatchSize = 1u;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputWidth = inputWidth;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputHeight = inputHeight;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannels = inputChannels;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputBatchSize = inputBatchSize;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({ inputBatchSize, inputChannels, inputHeight, inputWidth }, ArmnnType);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({ outputBatchSize, outputChannels, outputHeight, outputWidth }, ArmnnType);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="comment">// Set quantization parameters if the requested type is a quantized type.</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordflow">if</span>(armnn::IsQuantizedType&lt;T&gt;())</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    {</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(scale);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        inputTensorInfo.SetQuantizationOffset(offset);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        outputTensorInfo.SetQuantizationScale(outScale);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        outputTensorInfo.SetQuantizationOffset(outOffset);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    }</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 4&gt;</a> result(inputTensorInfo);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keyword">auto</span> input = MakeTensor&lt;T, 4&gt;(inputTensorInfo, armnnUtils::QuantizedVector&lt;T&gt;(inputData, scale, offset));</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="comment">// Setup bounded ReLu.</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <a class="code" href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a> descriptor;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> workloadInfo;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    AddInputToWorkload(descriptor, workloadInfo, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    AddOutputToWorkload(descriptor, workloadInfo, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = activationFunction;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a> = activationParameterA;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">m_B</a> = activationParameterB;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">CreateActivation</a>(descriptor, workloadInfo);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), &amp;input[0][0][0][0]);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;result.output[0][0][0][0], outputHandle.get());</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="comment">// Calculated manually.</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    result.outputExpected =</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        MakeTensor&lt;T, 4&gt;(outputTensorInfo, armnnUtils::QuantizedVector&lt;T&gt;(outputExpectedData, outScale, outOffset));</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a4458d75c0db21c6abc941cd93a6a24c5"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">armnn::IWorkloadFactory::CreateActivation</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateActivation(const ActivationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01099">WorkloadFactory.cpp:1099</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00049">WorkloadData.hpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00259">Tensor.cpp:259</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_a99b626c58a926dc7d6df78d22ec186c8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *memory, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15c140be4ddceffee16436f009d3ed94"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">armnn::IWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a017b2990003a014234f13e999dc7c689"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">armnn::ActivationDescriptor::m_A</a></div><div class="ttdeci">float m_A</div><div class="ttdoc">Alpha upper bound value used by the activation functions. (BoundedReLu, Linear, TanH). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00037">Descriptors.hpp:37</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00029">LayerTestResult.hpp:29</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a28c4c9cb15f6be3499abbc46b356060b"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">armnn::ActivationDescriptor::m_B</a></div><div class="ttdeci">float m_B</div><div class="ttdoc">Beta lower bound value used by the activation functions. (BoundedReLu, Linear, TanH). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00039">Descriptors.hpp:39</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu, LeakyReLu, Abs, Sqrt, Square). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00035">Descriptors.hpp:35</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00130">WorkloadData.hpp:130</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6558a4306d758625ab7804e9cb70b058"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6558a4306d758625ab7804e9cb70b058">&#9670;&nbsp;</a></span>SimpleSigmoidInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; SimpleSigmoidInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00513">513</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;{</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="keywordflow">return</span> SimpleSigmoidTestCommon&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa87c451f7a773fd4ec9cdf11c20d7a58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa87c451f7a773fd4ec9cdf11c20d7a58">&#9670;&nbsp;</a></span>SimpleSigmoidTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; SimpleSigmoidTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00499">499</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;{</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keywordflow">return</span> SimpleSigmoidTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, 0.0f, 0);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1020322feb8c6fe89ced59fcca8277c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1020322feb8c6fe89ced59fcca8277c4">&#9670;&nbsp;</a></span>SimpleSigmoidTestCommon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; SimpleSigmoidTestCommon </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00464">464</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">armnn::Sigmoid</a>.</p>
<div class="fragment"><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;{</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    std::vector&lt;float&gt; inputData =</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    {</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        -0.1f, -0.2f, -0.3f, -0.4f,</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        0.1f,  0.2f,  0.3f,  0.4f,</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        -1.0f, -2.0f, -3.0f, -4.0f,</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        1.0f,  2.0f,  3.0f,  4.0f</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    };</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="comment">// Calculate output values for input.</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keyword">auto</span> f = [](<span class="keywordtype">float</span> value)</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    {</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <span class="keywordflow">return</span> 1.0f / (1.0f + std::exp(-value));</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    };</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    std::vector&lt;float&gt; outputExpectedData(inputData.size());</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    std::transform(inputData.begin(), inputData.end(), outputExpectedData.begin(), f);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordflow">return</span> SimpleActivationTest&lt;ArmnnType&gt;(workloadFactory,</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                                           memoryManager,</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">armnn::ActivationFunction::Sigmoid</a>,</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                                           0.f,</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                                           0.f,</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                                           qScale,</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                                           qOffset,</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                                           inputData,</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                                           1.f / 256.f,</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                           0,</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                                           outputExpectedData);</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">armnn::ActivationFunction::Sigmoid</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0889979f9ffb67b036c3928c6e94af50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0889979f9ffb67b036c3928c6e94af50">&#9670;&nbsp;</a></span>SimpleSigmoidUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; SimpleSigmoidUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00506">506</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;{</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keywordflow">return</span> SimpleSigmoidTestCommon&lt;armnn::DataType::QAsymmU8&gt;(workloadFactory, memoryManager, 0.1f, 50);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a641db2befcd47ac97af966e20b1c4c2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a641db2befcd47ac97af966e20b1c4c2c">&#9670;&nbsp;</a></span>SoftReLuInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; SoftReLuInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00672">672</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;{</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="keywordflow">return</span> SoftReLuTestCommon&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8bfdab68fed1467b8720cceb47881236"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8bfdab68fed1467b8720cceb47881236">&#9670;&nbsp;</a></span>SoftReLuTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; SoftReLuTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00658">658</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;{</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keywordflow">return</span> SoftReLuTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4b43ab0b58fc8d4ad51b1b71c0e35622"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b43ab0b58fc8d4ad51b1b71c0e35622">&#9670;&nbsp;</a></span>SoftReLuTestCommon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; SoftReLuTestCommon </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00624">624</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa6bba7052636d1740303b1b2ef3b53fef">armnn::SoftReLu</a>.</p>
<div class="fragment"><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;{</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    std::vector&lt;float&gt; inputData = {</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            -0.1f, -0.2f, -0.3f, -0.4f,</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            0.1f,  0.2f,  0.3f,  0.4f,</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;            -1.0f, -2.0f, -3.0f, -4.0f,</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;            1.0f,  2.0f,  3.0f,  4.0f</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    };</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="comment">// Calculate output values for input.</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keyword">auto</span> f = [](<span class="keywordtype">float</span> value)</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    {</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        <span class="keywordflow">return</span> std::log(1.0f + std::exp(value));</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    };</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    std::vector&lt;float&gt; outputExpectedData(inputData.size());</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    std::transform(inputData.begin(), inputData.end(), outputExpectedData.begin(), f);</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordflow">return</span> SimpleActivationTest&lt;ArmnnType&gt;(workloadFactory,</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                                           memoryManager,</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa6bba7052636d1740303b1b2ef3b53fef">armnn::ActivationFunction::SoftReLu</a>,</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                                           0.f,</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                                           0.f,</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                                           qScale,</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                                           qOffset,</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                                           inputData,</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                                           qScale,</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                                           qOffset,</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                                           outputExpectedData);</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa6bba7052636d1740303b1b2ef3b53fef"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa6bba7052636d1740303b1b2ef3b53fef">armnn::ActivationFunction::SoftReLu</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a732229b22cff2a8f96798c38832cab92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a732229b22cff2a8f96798c38832cab92">&#9670;&nbsp;</a></span>SoftReLuUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; SoftReLuUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00665">665</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;{</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keywordflow">return</span> SoftReLuTestCommon&lt;armnn::DataType::QAsymmU8&gt;(workloadFactory, memoryManager, 0.0625f, 64);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8b855f5d3e8aab93decfa2bed46fc4cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b855f5d3e8aab93decfa2bed46fc4cf">&#9670;&nbsp;</a></span>SqrtInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; SqrtInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00897">897</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;{</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    <span class="keywordflow">return</span> SqrtTestCommon&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a86f53855f5ab422f4e035b1aa11676f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86f53855f5ab422f4e035b1aa11676f8">&#9670;&nbsp;</a></span>SqrtNNTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 5&gt; SqrtNNTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00792">792</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00014">CopyDataFromITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00009">CopyDataToITensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01099">IWorkloadFactory::CreateActivation()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00035">ActivationDescriptor::m_Function</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>, and <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054">armnn::Sqrt</a>.</p>
<div class="fragment"><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;{</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> inputDataSize = 120;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    std::vector&lt;float&gt; inputData(inputDataSize);</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0u; i &lt; inputDataSize; ++i)</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    {</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        inputData[i] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(i) / 10;</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    }</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    <span class="keyword">auto</span> f = [](<span class="keywordtype">float</span> value)</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    {</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        <span class="keywordflow">return</span> std::sqrt(value);</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    };</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    std::vector&lt;float&gt; outputExpectedData(inputDataSize);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    std::transform(inputData.begin(), inputData.end(), outputExpectedData.begin(), f);</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo(</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        { 1u, 2u, 3u, 4u, 5u }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo(</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;        { 1u, 2u, 3u, 4u, 5u }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 5&gt;</a> result(inputTensorInfo);</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    <span class="keyword">auto</span> input = MakeTensor&lt;float, 5&gt;(inputTensorInfo, inputData);</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle  = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <a class="code" href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a> descriptor;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> workloadInfo;</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    AddInputToWorkload(descriptor, workloadInfo, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    AddOutputToWorkload(descriptor, workloadInfo, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054">armnn::ActivationFunction::Sqrt</a>;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">CreateActivation</a>(descriptor, workloadInfo);</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), &amp;input[0][0][0][0][0]);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;result.output[0][0][0][0][0], outputHandle.get());</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="comment">// Calculated manually.</span></div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    result.outputExpected = MakeTensor&lt;float, 5&gt;(outputTensorInfo, outputExpectedData);</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;};</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054">armnn::ActivationFunction::Sqrt</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a4458d75c0db21c6abc941cd93a6a24c5"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">armnn::IWorkloadFactory::CreateActivation</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateActivation(const ActivationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01099">WorkloadFactory.cpp:1099</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00049">WorkloadData.hpp:49</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_a99b626c58a926dc7d6df78d22ec186c8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *memory, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15c140be4ddceffee16436f009d3ed94"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">armnn::IWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00029">LayerTestResult.hpp:29</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu, LeakyReLu, Abs, Sqrt, Square). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00035">Descriptors.hpp:35</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00130">WorkloadData.hpp:130</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad3928f2c56ed15642ff6306cc6823ebd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3928f2c56ed15642ff6306cc6823ebd">&#9670;&nbsp;</a></span>SqrtTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; SqrtTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00883">883</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;{</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    <span class="keywordflow">return</span> SqrtTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aab2458914aa40f83ba027de7a8c07d06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab2458914aa40f83ba027de7a8c07d06">&#9670;&nbsp;</a></span>SqrtTestCommon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; SqrtTestCommon </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00849">849</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054">armnn::Sqrt</a>.</p>
<div class="fragment"><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;{</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    std::vector&lt;float&gt; inputData = {</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            0.1f,  0.2f,  0.3f,  0.4f,</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;            0.1f,  0.2f,  0.3f,  0.4f,</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            1.0f,  2.0f,  3.0f,  4.0f,</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;            1.0f,  2.0f,  3.0f,  4.0f</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    };</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="comment">// Calculate output values for input.</span></div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    <span class="keyword">auto</span> f = [](<span class="keywordtype">float</span> value)</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    {</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        <span class="keywordflow">return</span> std::sqrt(value);</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    };</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    std::vector&lt;float&gt; outputExpectedData(inputData.size());</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    std::transform(inputData.begin(), inputData.end(), outputExpectedData.begin(), f);</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    <span class="keywordflow">return</span> SimpleActivationTest&lt;ArmnnType&gt;(workloadFactory,</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;                                           memoryManager,</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054">armnn::ActivationFunction::Sqrt</a>,</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;                                           0.f,</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                                           0.f,</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                                           qScale,</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                                           qOffset,</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                                           inputData,</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                                           qScale,</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                                           qOffset,</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                                           outputExpectedData);</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054">armnn::ActivationFunction::Sqrt</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6403e38cfee03672c164e3cba9863147"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6403e38cfee03672c164e3cba9863147">&#9670;&nbsp;</a></span>SqrtUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; SqrtUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00890">890</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;{</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <span class="keywordflow">return</span> SqrtTestCommon&lt;armnn::DataType::QAsymmU8&gt;(workloadFactory, memoryManager, 0.0625f, 64);</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a26219b66822d57b9fcce7a2504d1fca6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26219b66822d57b9fcce7a2504d1fca6">&#9670;&nbsp;</a></span>SquareInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; SquareInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00953">953</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;{</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    <span class="keywordflow">return</span> SquareTestCommon&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6584d436388485a5bd9252430a0af5b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6584d436388485a5bd9252430a0af5b6">&#9670;&nbsp;</a></span>SquareTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; SquareTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00939">939</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;{</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    <span class="keywordflow">return</span> SquareTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a26032da34ce1e283ae30d05ea3bbb103"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26032da34ce1e283ae30d05ea3bbb103">&#9670;&nbsp;</a></span>SquareTestCommon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; SquareTestCommon </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00905">905</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaceb46ca115d05c51aa5a16a8867c3304">armnn::Square</a>.</p>
<div class="fragment"><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;{</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    std::vector&lt;float&gt; inputData = {</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;            -0.1f, -0.2f, -0.3f, -0.4f,</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;            0.1f,  0.2f,  0.3f,  0.4f,</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;            -1.0f, -2.0f, -3.0f, -4.0f,</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;            1.0f,  2.0f,  3.0f,  4.0f</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    };</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <span class="comment">// Calculate output values for input.</span></div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <span class="keyword">auto</span> f = [](<span class="keywordtype">float</span> value)</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    {</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        <span class="keywordflow">return</span> std::pow(value,2);</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    };</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    std::vector&lt;float&gt; outputExpectedData(inputData.size());</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    std::transform(inputData.begin(), inputData.end(), outputExpectedData.begin(), f);</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    <span class="keywordflow">return</span> SimpleActivationTest&lt;ArmnnType&gt;(workloadFactory,</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;                                           memoryManager,</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaceb46ca115d05c51aa5a16a8867c3304">armnn::ActivationFunction::Square</a>,</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;                                           0.f,</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;                                           0.f,</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;                                           qScale,</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;                                           qOffset,</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                                           inputData,</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                                           qScale,</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                                           qOffset,</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                                           outputExpectedData);</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaaceb46ca115d05c51aa5a16a8867c3304"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaceb46ca115d05c51aa5a16a8867c3304">armnn::ActivationFunction::Square</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a61fffaf40ad721073b70c350174d0ff3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61fffaf40ad721073b70c350174d0ff3">&#9670;&nbsp;</a></span>SquareUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; SquareUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00946">946</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;{</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <span class="keywordflow">return</span> SquareTestCommon&lt;armnn::DataType::QAsymmU8&gt;(workloadFactory, memoryManager, 0.0625f, 64);</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aacd820bdf2307a2aa667db2899283035"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacd820bdf2307a2aa667db2899283035">&#9670;&nbsp;</a></span>TanhInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; TanhInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01011">1011</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;{</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    <span class="keywordflow">return</span> TanhTestCommon&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a923aa3e41cd11f5eeb7cc973fd8d3c76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a923aa3e41cd11f5eeb7cc973fd8d3c76">&#9670;&nbsp;</a></span>TanhTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; TanhTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00997">997</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;{</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;    <span class="keywordflow">return</span> TanhTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, 0.1f, 0);</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a65aa329dc6abc6cf9dfb6177f42595de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65aa329dc6abc6cf9dfb6177f42595de">&#9670;&nbsp;</a></span>TanhTestCommon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; TanhTestCommon </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00961">961</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">armnn::TanH</a>.</p>
<div class="fragment"><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;{</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    std::vector&lt;float&gt; inputData = {</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;            -0.1f, -0.2f, -0.3f, -0.4f,</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;            0.1f,  0.2f,  0.3f,  0.4f,</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;            -1.0f, -2.0f, -3.0f, -4.0f,</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;            1.0f,  2.0f,  3.0f,  4.0f</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    };</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a = 2.0f;</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> b = 3.0f;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    <span class="comment">// Calculate output values for input.</span></div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    <span class="keyword">auto</span> f = [a, b](<span class="keywordtype">float</span> value)</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    {</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        <span class="keywordflow">return</span> a * tanhf(b * value);</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    };</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    std::vector&lt;float&gt; outputExpectedData(inputData.size());</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    std::transform(inputData.begin(), inputData.end(), outputExpectedData.begin(), f);</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    <span class="keywordflow">return</span> SimpleActivationTest&lt;ArmnnType&gt;(workloadFactory,</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                                           memoryManager,</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">armnn::ActivationFunction::TanH</a>,</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                                           a,</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                                           b,</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                                           qScale,</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                                           qOffset,</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                                           inputData,</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                                           qScale,</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;                                           qOffset,</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                                           outputExpectedData);</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">armnn::ActivationFunction::TanH</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abe9073d08e150e3dd5e156af7ea8faa5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe9073d08e150e3dd5e156af7ea8faa5">&#9670;&nbsp;</a></span>TanhUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; TanhUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01004">1004</a> of file <a class="el" href="_activation_test_impl_8cpp_source.xhtml">ActivationTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;{</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    <span class="keywordflow">return</span> TanhTestCommon&lt;armnn::DataType::QAsymmU8&gt;(workloadFactory, memoryManager, 0.1f, 64);</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_99a30439342d160875b21dac3498ad7f.xhtml">layerTests</a></li><li class="navelem"><a class="el" href="_activation_test_impl_8cpp.xhtml">ActivationTestImpl.cpp</a></li>
    <li class="footer">Generated on Fri Mar 13 2020 16:09:14 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
