<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: include/armnn/Tensor.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_tensor_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Tensor.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_tensor_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_fwd_8hpp.xhtml">TensorFwd.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_exceptions_8hpp.xhtml">Exceptions.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_optional_8hpp.xhtml">Optional.hpp</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_types_8hpp.xhtml">Types.hpp</a>&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;initializer_list&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_shape.xhtml">   20</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">    /// Empty (invalid) constructor.</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>();</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDimensions);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDimensions, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* dimensionSizes);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>(std::initializer_list&lt;unsigned int&gt; dimensionSizeList);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; other);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a0ca6f42172d27e9799da3e3f7840ac31">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; other);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a6e6dab22049a4432e8306a301dceff52">operator[]</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a6e6dab22049a4432e8306a301dceff52">operator[]</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a07e348fae6036aecdaf41e738d1ae9ff">operator==</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; other) <span class="keyword">const</span>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a77d202fcd47612eb5a4d6d23a7d4b349">operator!=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; other) <span class="keyword">const</span>;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">   43</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_NumDimensions; }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    std::array&lt;unsigned int, MaxNumOfTensorDimensions&gt; m_Dimensions;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_NumDimensions;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordtype">void</span> CheckDimensionIndex(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;};</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml">   53</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">    /// Empty (invalid) constructor.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>();</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; shape,</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;               <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;               <span class="keywordtype">float</span> quantizationScale = 0.0f,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;               int32_t quantizationOffset = 0);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDimensions,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;               <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* dimensionSizes,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;               <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;               <span class="keywordtype">float</span> quantizationScale = 0.0f,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;               int32_t quantizationOffset = 0);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; shape,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;               <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;               <span class="keyword">const</span> std::vector&lt;float&gt;&amp; quantizationScales,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;               <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> quantizationDim);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDimensions,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;               <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* dimensionSizes,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;               <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType,</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;               <span class="keyword">const</span> std::vector&lt;float&gt;&amp; quantizationScales,</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;               <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> quantizationDim);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; other);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a0ca6f42172d27e9799da3e3f7840ac31">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; other);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a07e348fae6036aecdaf41e738d1ae9ff">operator==</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; other) <span class="keyword">const</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a77d202fcd47612eb5a4d6d23a7d4b349">operator!=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; other) <span class="keyword">const</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">   88</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()<span class="keyword"> const              </span>{ <span class="keywordflow">return</span> m_Shape; }</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#a350bcc7d86f7d9333340a0a04be078f6">   89</a></span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a350bcc7d86f7d9333340a0a04be078f6">GetShape</a>()                          { <span class="keywordflow">return</span> m_Shape; }</div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">   90</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; newShape)       { m_Shape = newShape; }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">   92</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()<span class="keyword"> const            </span>{ <span class="keywordflow">return</span> m_Shape.GetNumDimensions(); }</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">   93</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>()<span class="keyword"> const              </span>{ <span class="keywordflow">return</span> m_Shape.GetNumElements(); }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">   95</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()<span class="keyword"> const                     </span>{ <span class="keywordflow">return</span> m_DataType; }</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">   96</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">SetDataType</a>(<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> type)                  { m_DataType = type; }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">   98</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">HasMultipleQuantizationScales</a>()<span class="keyword"> const       </span>{ <span class="keywordflow">return</span> m_Quantization.m_Scales.size() &gt; 1; }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordtype">bool</span> HasPerAxisQuantization() <span class="keyword">const</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    std::vector&lt;float&gt; GetQuantizationScales() <span class="keyword">const</span>;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordtype">void</span> SetQuantizationScales(<span class="keyword">const</span> std::vector&lt;float&gt;&amp; scales);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordtype">float</span> GetQuantizationScale() <span class="keyword">const</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a522a440dc1e26bed45fd3f68be8484e9">SetQuantizationScale</a>(<span class="keywordtype">float</span> scale);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    int32_t GetQuantizationOffset() <span class="keyword">const</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#aec48a5a5ab6ecf86c8db0f6d0859fe2f">SetQuantizationOffset</a>(int32_t offset);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;unsigned int&gt;</a> GetQuantizationDim() <span class="keyword">const</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordtype">void</span> SetQuantizationDim(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;unsigned int&gt;</a>&amp; quantizationDim);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">bool</span> IsQuantized() <span class="keyword">const</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">    /// Check that the types are the same and, if quantize, that the quantization parameters are the same.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> IsTypeSpaceMatch(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; other) <span class="keyword">const</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetNumBytes() <span class="keyword">const</span>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> m_Shape;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>    m_DataType;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">    /// Vectors of scale and offset are used for per-axis quantization.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"></span>    <span class="keyword">struct </span>Quantization</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        Quantization()</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            : m_Scales{}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            , m_Offset(<a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>())</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            , m_QuantizationDim(<a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) {}</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a07e348fae6036aecdaf41e738d1ae9ff">operator==</a>(<span class="keyword">const</span> Quantization&amp; other)<span class="keyword"> const</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">return</span> ((m_Scales == other.m_Scales) &amp;&amp; (m_Offset == other.m_Offset) &amp;&amp;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                (m_QuantizationDim == other.m_QuantizationDim));</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        std::vector&lt;float&gt;     m_Scales;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;int32_t&gt;</a>      m_Offset;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;unsigned int&gt;</a> m_QuantizationDim;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    } m_Quantization;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;};</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">  146</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">BindingPointInfo</a> = std::pair&lt;armnn::LayerBindingId, armnn::TensorInfo&gt;;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> MemoryType&gt;</div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml">  149</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">    /// Empty (invalid) constructor.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">    /// Constructor from a raw memory pointer.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">    /// @param memoryArea - Region of CPU-addressable memory where tensor data will be stored. Must be valid while</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">    /// workloads are on the fly. Tensor instances do not claim ownership of referenced memory regions, that is,</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">    /// no attempt will be made by ArmNN to free these memory regions automatically.</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>, MemoryType memoryArea);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">    /// Tensors are copyable.</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&amp; other);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">    /// Tensors are copyable.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&amp; <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a0ca6f42172d27e9799da3e3f7840ac31">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&amp;);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">  167</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Info; }</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#ab2e02564acd2ce6db36de310702a75de">  168</a></span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_base_tensor.xhtml#ab2e02564acd2ce6db36de310702a75de">GetInfo</a>() { <span class="keywordflow">return</span> m_Info; }</div><div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">  169</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; <a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Info.GetShape(); }</div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#a350bcc7d86f7d9333340a0a04be078f6">  170</a></span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; <a class="code" href="classarmnn_1_1_base_tensor.xhtml#a350bcc7d86f7d9333340a0a04be078f6">GetShape</a>() { <span class="keywordflow">return</span> m_Info.GetShape(); }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#aea909c7327109228ef618d459015def3">  172</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="classarmnn_1_1_base_tensor.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()<span class="keyword"> const                    </span>{ <span class="keywordflow">return</span> m_Info.GetDataType(); }</div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">  173</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Info.GetNumDimensions(); }</div><div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">  174</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Info.GetNumBytes(); }</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">  175</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Info.GetNumElements(); }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">  177</a></span>&#160;    MemoryType <a class="code" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">GetMemoryArea</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_MemoryArea; }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">    /// Protected destructor to stop users from making these</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">    /// (could still new one on the heap and then leak it...)</span></div><div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#abac025efeffc6e099a365bdb17b5ca3e">  182</a></span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_base_tensor.xhtml#abac025efeffc6e099a365bdb17b5ca3e">~BaseTensor</a>() {}</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#aba26e5decca8be8786d8a5faf2e06a49">  184</a></span>&#160;    MemoryType <a class="code" href="classarmnn_1_1_base_tensor.xhtml#aba26e5decca8be8786d8a5faf2e06a49">m_MemoryArea</a>;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> m_Info;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;};</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">/// A tensor defined by a TensorInfo (shape and data type) and a mutable backing store.</span></div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor.xhtml">  191</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classarmnn_1_1_tensor.xhtml">Tensor</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&lt;void*&gt;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">    /// Brings in the constructors and assignment operator.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment"></span>    <span class="keyword">using</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor&lt;void*&gt;::BaseTensor</a>;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;};</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">/// A tensor defined by a TensorInfo (shape and data type) and an immutable backing store.</span></div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_tensor.xhtml">  199</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&lt;const void*&gt;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;{</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">    /// Brings in the constructors and assignment operator.</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment"></span>    <span class="keyword">using</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor&lt;const void*&gt;::BaseTensor</a>;</div><div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_tensor.xhtml#a6b6561873c02b1bd9b7a7ae8dd4a339c">  204</a></span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml#a6b6561873c02b1bd9b7a7ae8dd4a339c">ConstTensor</a>() : <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&lt;const void*&gt;() {} <span class="comment">// This needs to be redefined explicitly??</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">    /// Can be implicitly constructed from non-const Tensor.</span></div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_tensor.xhtml#a42aec46c635aa2e38932ca103d2064ed">  207</a></span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_const_tensor.xhtml#a42aec46c635aa2e38932ca103d2064ed">ConstTensor</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor.xhtml">Tensor</a>&amp; other) : <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&lt;const void*&gt;(other.GetInfo(), other.GetMemoryArea()) {}</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">    /// Constructor from a backing container.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">    /// @param container - An stl-like container type which implements data() and size() methods.</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">    /// Presence of data() and size() is a strong indicator of the continuous memory layout of the container,</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">    /// which is a requirement for Tensor data. Tensor instances do not claim ownership of referenced memory regions,</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">    /// that is, no attempt will be made by ArmNN to free these memory regions automatically.</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt; <span class="keyword">template</span>&lt;<span class="keyword">typename</span>, <span class="keyword">typename</span>...&gt; <span class="keyword">class </span>ContainerType, <span class="keyword">typename</span> T, <span class="keyword">typename</span>...ContainerArgs &gt;</div><div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_tensor.xhtml#aa04de06d072895b6df9125338d55c205">  215</a></span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml#aa04de06d072895b6df9125338d55c205">ConstTensor</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>, <span class="keyword">const</span> ContainerType&lt;T, ContainerArgs...&gt;&amp; container)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        : <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&lt;const void*&gt;(info, container.data())</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">if</span> (container.size() * <span class="keyword">sizeof</span>(T) != info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>())</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Container size is not correct&quot;</span>);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;};</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">  225</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> = std::vector&lt;std::pair&lt;LayerBindingId, class ConstTensor&gt;&gt;;</div><div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">  226</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> = std::vector&lt;std::pair&lt;LayerBindingId, class Tensor&gt;&gt;;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorShape::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00106">Tensor.cpp:106</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a77d202fcd47612eb5a4d6d23a7d4b349"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a77d202fcd47612eb5a4d6d23a7d4b349">armnn::TensorShape::operator!=</a></div><div class="ttdeci">bool operator!=(const TensorShape &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00101">Tensor.cpp:101</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a6e6dab22049a4432e8306a301dceff52"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a6e6dab22049a4432e8306a301dceff52">armnn::TensorShape::operator[]</a></div><div class="ttdeci">unsigned int operator[](unsigned int i) const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00083">Tensor.cpp:83</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00088">Tensor.hpp:88</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a0ca6f42172d27e9799da3e3f7840ac31"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a0ca6f42172d27e9799da3e3f7840ac31">armnn::TensorShape::operator=</a></div><div class="ttdeci">TensorShape &amp; operator=(const TensorShape &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00076">Tensor.cpp:76</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt; unsigned int &gt;</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_aec48a5a5ab6ecf86c8db0f6d0859fe2f"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#aec48a5a5ab6ecf86c8db0f6d0859fe2f">SetQuantizationOffset</a></div><div class="ttdeci">boxEncodingsInfo SetQuantizationOffset(1)</div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::BaseTensor::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00169">Tensor.hpp:169</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abcbdfb544ece4c31d0b37715ad0f3be0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">armnn::TensorInfo::GetNumBytes</a></div><div class="ttdeci">unsigned int GetNumBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00213">Tensor.cpp:213</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::BaseTensor::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00175">Tensor.hpp:175</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00225">Tensor.hpp:225</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_aa81f67ac64f0c249e26499600c45d996"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">armnn::BaseTensor::GetMemoryArea</a></div><div class="ttdeci">MemoryType GetMemoryArea() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00177">Tensor.hpp:177</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_af672d1c9e2a120a18926cb645981fbb7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">armnn::TensorInfo::HasMultipleQuantizationScales</a></div><div class="ttdeci">bool HasMultipleQuantizationScales() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00098">Tensor.hpp:98</a></div></div>
<div class="ttc" id="_tensor_fwd_8hpp_xhtml"><div class="ttname"><a href="_tensor_fwd_8hpp.xhtml">TensorFwd.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00090">Tensor.hpp:90</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml_a6b6561873c02b1bd9b7a7ae8dd4a339c"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml#a6b6561873c02b1bd9b7a7ae8dd4a339c">armnn::ConstTensor::ConstTensor</a></div><div class="ttdeci">ConstTensor()</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00204">Tensor.hpp:204</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a07e348fae6036aecdaf41e738d1ae9ff"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a07e348fae6036aecdaf41e738d1ae9ff">armnn::TensorShape::operator==</a></div><div class="ttdeci">bool operator==(const TensorShape &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00095">Tensor.cpp:95</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a522a440dc1e26bed45fd3f68be8484e9"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a522a440dc1e26bed45fd3f68be8484e9">SetQuantizationScale</a></div><div class="ttdeci">boxEncodingsInfo SetQuantizationScale(1.0f)</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a350bcc7d86f7d9333340a0a04be078f6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a350bcc7d86f7d9333340a0a04be078f6">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">TensorShape &amp; GetShape()</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00089">Tensor.hpp:89</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a76d053cd9b4373d90682ad646dad334c"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">armnn::TensorShape::TensorShape</a></div><div class="ttdeci">TensorShape()</div><div class="ttdoc">Empty (invalid) constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00023">Tensor.cpp:23</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00032">Types.hpp:32</a></div></div>
<div class="ttc" id="_optional_8hpp_xhtml"><div class="ttname"><a href="_optional_8hpp.xhtml">Optional.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00095">Tensor.hpp:95</a></div></div>
<div class="ttc" id="_types_8hpp_xhtml"><div class="ttname"><a href="_types_8hpp.xhtml">Types.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00199">Tensor.hpp:199</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00226">Tensor.hpp:226</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a350bcc7d86f7d9333340a0a04be078f6"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a350bcc7d86f7d9333340a0a04be078f6">armnn::BaseTensor::GetShape</a></div><div class="ttdeci">TensorShape &amp; GetShape()</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00170">Tensor.hpp:170</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_aba26e5decca8be8786d8a5faf2e06a49"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#aba26e5decca8be8786d8a5faf2e06a49">armnn::BaseTensor::m_MemoryArea</a></div><div class="ttdeci">MemoryType m_MemoryArea</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00184">Tensor.hpp:184</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_ab2e02564acd2ce6db36de310702a75de"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#ab2e02564acd2ce6db36de310702a75de">armnn::BaseTensor::GetInfo</a></div><div class="ttdeci">TensorInfo &amp; GetInfo()</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00168">Tensor.hpp:168</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a8aeddebdcf02e1832b22203c08a6b678"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">armnn::BaseTensor::GetInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00167">Tensor.hpp:167</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a71975fcec1464d639f1a78f73164d1bd"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">armnn::TensorInfo::SetDataType</a></div><div class="ttdeci">void SetDataType(DataType type)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00096">Tensor.hpp:96</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml_aa04de06d072895b6df9125338d55c205"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml#aa04de06d072895b6df9125338d55c205">armnn::ConstTensor::ConstTensor</a></div><div class="ttdeci">ConstTensor(const TensorInfo &amp;info, const ContainerType&lt; T, ContainerArgs... &gt; &amp;container)</div><div class="ttdoc">Constructor from a backing container. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00215">Tensor.hpp:215</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00146">Tensor.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml_a42aec46c635aa2e38932ca103d2064ed"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml#a42aec46c635aa2e38932ca103d2064ed">armnn::ConstTensor::ConstTensor</a></div><div class="ttdeci">ConstTensor(const Tensor &amp;other)</div><div class="ttdoc">Can be implicitly constructed from non-const Tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00207">Tensor.hpp:207</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::BaseTensor::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00173">Tensor.hpp:173</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml"><div class="ttname"><a href="_exceptions_8hpp.xhtml">Exceptions.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00043">Tensor.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml">armnn::BaseTensor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00149">Tensor.hpp:149</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_abac025efeffc6e099a365bdb17b5ca3e"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#abac025efeffc6e099a365bdb17b5ca3e">armnn::BaseTensor::~BaseTensor</a></div><div class="ttdeci">~BaseTensor()</div><div class="ttdoc">Protected destructor to stop users from making these (could still new one on the heap and then leak i...</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00182">Tensor.hpp:182</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#aea909c7327109228ef618d459015def3">armnn::BaseTensor::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00172">Tensor.hpp:172</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00092">Tensor.hpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00093">Tensor.hpp:93</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_abcbdfb544ece4c31d0b37715ad0f3be0"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">armnn::BaseTensor::GetNumBytes</a></div><div class="ttdeci">unsigned int GetNumBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00174">Tensor.hpp:174</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_2b72cc348e06937955e62ebdd8a13436.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_tensor_8hpp.xhtml">Tensor.hpp</a></li>
    <li class="footer">Generated on Fri Mar 13 2020 16:09:08 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
