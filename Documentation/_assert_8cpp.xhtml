<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnTfParser/test/Assert.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_assert_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Assert.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_i_tf_parser_8hpp_source.xhtml">armnnTfParser/ITfParser.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_graph_utils_8hpp_source.xhtml">test/GraphUtils.hpp</a>&quot;</code><br />
<code>#include &lt;boost/test/unit_test.hpp&gt;</code><br />
</div>
<p><a href="_assert_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aca9c806a9c2cf6fa453c4110ecb79af9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_assert_8cpp.xhtml#aca9c806a9c2cf6fa453c4110ecb79af9">BOOST_FIXTURE_TEST_CASE</a> (AssertSimpleTest, AssertSimpleFixture)</td></tr>
<tr class="separator:aca9c806a9c2cf6fa453c4110ecb79af9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac27dc1cabf754208dae88e0879dd6515"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_assert_8cpp.xhtml#ac27dc1cabf754208dae88e0879dd6515">BOOST_FIXTURE_TEST_CASE</a> (AssertSimpleGraphStructureTest, AssertSimpleFixture)</td></tr>
<tr class="separator:ac27dc1cabf754208dae88e0879dd6515"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79cb077a071f8d5232e2e902d562becd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_assert_8cpp.xhtml#a79cb077a071f8d5232e2e902d562becd">BOOST_FIXTURE_TEST_CASE</a> (AssertTest, AssertFixture)</td></tr>
<tr class="separator:a79cb077a071f8d5232e2e902d562becd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1645128a338ac44257fe852d11ea968b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_assert_8cpp.xhtml#a1645128a338ac44257fe852d11ea968b">BOOST_FIXTURE_TEST_CASE</a> (AssertGraphStructureTest, AssertFixture)</td></tr>
<tr class="separator:a1645128a338ac44257fe852d11ea968b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="aca9c806a9c2cf6fa453c4110ecb79af9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca9c806a9c2cf6fa453c4110ecb79af9">&#9670;&nbsp;</a></span>BOOST_FIXTURE_TEST_CASE() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_FIXTURE_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">AssertSimpleTest&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AssertSimpleFixture&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_assert_8cpp_source.xhtml#l00093">93</a> of file <a class="el" href="_assert_8cpp_source.xhtml">Assert.cpp</a>.</p>

<p class="reference">References <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00086">ParserPrototxtFixture&lt; TParser &gt;::SetupSingleInputSingleOutput()</a>.</p>
<div class="fragment"><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    SetupSingleInputSingleOutput({ 1, 1, 1, 4 }, <span class="stringliteral">&quot;Placeholder&quot;</span>, <span class="stringliteral">&quot;Add&quot;</span>);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    RunTest&lt;4&gt;({ 1.0f, 2.0f, 3.0f, 4.0f }, { 2.0f, 4.0f, 6.0f, 8.0f });</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac27dc1cabf754208dae88e0879dd6515"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac27dc1cabf754208dae88e0879dd6515">&#9670;&nbsp;</a></span>BOOST_FIXTURE_TEST_CASE() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_FIXTURE_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">AssertSimpleGraphStructureTest&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AssertSimpleFixture&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_assert_8cpp_source.xhtml#l00099">99</a> of file <a class="el" href="_assert_8cpp_source.xhtml">Assert.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::Addition</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00032">CheckNumberOfInputSlot()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00037">CheckNumberOfOutputSlot()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00020">GetFirstLayerWithName()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00259">Layer::GetType()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00042">IsConnected()</a>, and <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00158">ParserPrototxtFixture&lt; TParser &gt;::SetupOptimizedNetwork()</a>.</p>
<div class="fragment"><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">auto</span> optimized = SetupOptimizedNetwork({ { <span class="stringliteral">&quot;Placeholder&quot;</span>, { 1, 1, 1, 4 } } }, { <span class="stringliteral">&quot;Add&quot;</span> });</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">auto</span> optimizedNetwork = boost::polymorphic_downcast&lt;armnn::OptimizedNetwork*&gt;(optimized.get());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">auto</span> graph = optimizedNetwork-&gt;GetGraph();</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    BOOST_TEST((graph.GetNumInputs() == 1));</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    BOOST_TEST((graph.GetNumOutputs() == 1));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    BOOST_TEST((graph.GetNumLayers() == 3));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* inputLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;Placeholder&quot;</span>);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    BOOST_TEST((inputLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a>));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(inputLayer, 0));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(inputLayer, 1));</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* addLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;Add&quot;</span>);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    BOOST_TEST((addLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a>));</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(addLayer, 2));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(addLayer, 1));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({1, 1, 1, 4}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(inputLayer, addLayer, 0, 0, tensorInfo));</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(inputLayer, addLayer, 0, 1, tensorInfo));</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; outputLayer : graph.GetOutputLayers())</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(addLayer, const_cast&lt;armnn::OutputLayer*&gt;(outputLayer), 0, 0, tensorInfo));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="ttc" id="_graph_utils_8cpp_xhtml_a5f17e02e0054dac0a691685a0464ed36"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a></div><div class="ttdeci">armnn::Layer * GetFirstLayerWithName(armnn::Graph &amp;graph, const std::string &amp;name)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00020">GraphUtils.cpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_afd518dba3d52728670459e4ad3bed5e1"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a></div><div class="ttdeci">bool IsConnected(armnn::Layer *srcLayer, armnn::Layer *destLayer, unsigned int srcSlot, unsigned int destSlot, const armnn::TensorInfo &amp;expectedTensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00042">GraphUtils.cpp:42</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_aaef29472862381822654ab6cbf7cba2a"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">armnn::Layer::GetType</a></div><div class="ttdeci">LayerType GetType() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00259">Layer.hpp:259</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a4c04337db4d5f380219a005657a8223b"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a></div><div class="ttdeci">bool CheckNumberOfInputSlot(armnn::Layer *layer, unsigned int num)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00032">GraphUtils.cpp:32</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_aada2e27f100807f5786eecb03390ba58"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a></div><div class="ttdeci">bool CheckNumberOfOutputSlot(armnn::Layer *layer, unsigned int num)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00037">GraphUtils.cpp:37</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00209">Layer.hpp:209</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a79cb077a071f8d5232e2e902d562becd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79cb077a071f8d5232e2e902d562becd">&#9670;&nbsp;</a></span>BOOST_FIXTURE_TEST_CASE() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_FIXTURE_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">AssertTest&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AssertFixture&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_assert_8cpp_source.xhtml#l00237">237</a> of file <a class="el" href="_assert_8cpp_source.xhtml">Assert.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    Setup({ { <span class="stringliteral">&quot;Input0&quot;</span>, { 1, 1, 2, 2 } },</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            { <span class="stringliteral">&quot;Input1&quot;</span>, { 1, 1, 2, 2 } } },</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;          { <span class="stringliteral">&quot;Output&quot;</span> });</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    RunTest&lt;4&gt;({ { <span class="stringliteral">&quot;Input0&quot;</span>, { 4.0f,   3.0f,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                               2.0f,   1.0f } },</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                 { <span class="stringliteral">&quot;Input1&quot;</span>, { 1.0f,   2.0f,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                               3.0f,   4.0f } } },</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;               { { <span class="stringliteral">&quot;Output&quot;</span>, { 7.0f,   4.0f,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                               1.0f,  -2.0f } } });</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1645128a338ac44257fe852d11ea968b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1645128a338ac44257fe852d11ea968b">&#9670;&nbsp;</a></span>BOOST_FIXTURE_TEST_CASE() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_FIXTURE_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">AssertGraphStructureTest&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AssertFixture&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_assert_8cpp_source.xhtml#l00253">253</a> of file <a class="el" href="_assert_8cpp_source.xhtml">Assert.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::Addition</a>, <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00032">CheckNumberOfInputSlot()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00037">CheckNumberOfOutputSlot()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00020">GetFirstLayerWithName()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00259">Layer::GetType()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00042">IsConnected()</a>, and <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::Subtraction</a>.</p>
<div class="fragment"><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">auto</span> optimized = SetupOptimizedNetwork({ { <span class="stringliteral">&quot;Input0&quot;</span>, { 1, 1, 2, 2 } },</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                             { <span class="stringliteral">&quot;Input1&quot;</span>, { 1, 1, 2, 2 } } },</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                           { <span class="stringliteral">&quot;Output&quot;</span> });</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">auto</span> optimizedNetwork = boost::polymorphic_downcast&lt;armnn::OptimizedNetwork*&gt;(optimized.get());</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">auto</span> graph = optimizedNetwork-&gt;GetGraph();</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    BOOST_TEST((graph.GetNumInputs() == 2));</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    BOOST_TEST((graph.GetNumOutputs() == 1));</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    BOOST_TEST((graph.GetNumLayers() == 5));</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* inputLayer0 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;Input0&quot;</span>);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    BOOST_TEST((inputLayer0-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a>));</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(inputLayer0, 0));</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(inputLayer0, 1));</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* inputLayer1 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;Input1&quot;</span>);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    BOOST_TEST((inputLayer1-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a>));</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(inputLayer1, 0));</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(inputLayer1, 1));</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* subLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;Sub&quot;</span>);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    BOOST_TEST((subLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a>));</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(subLayer, 2));</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(subLayer, 1));</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* addLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;Output&quot;</span>);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    BOOST_TEST((addLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a>));</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(addLayer, 2));</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(addLayer, 1));</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({1, 1, 2, 2}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(inputLayer0, subLayer, 0, 0, tensorInfo));</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(inputLayer1, subLayer, 0, 1, tensorInfo));</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(inputLayer0, addLayer, 0, 0, tensorInfo));</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(subLayer, addLayer, 0, 1, tensorInfo));</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; outputLayer : graph.GetOutputLayers())</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(addLayer, const_cast&lt;armnn::OutputLayer*&gt;(outputLayer), 0, 0, tensorInfo));</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div><div class="ttc" id="_graph_utils_8cpp_xhtml_a5f17e02e0054dac0a691685a0464ed36"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a></div><div class="ttdeci">armnn::Layer * GetFirstLayerWithName(armnn::Graph &amp;graph, const std::string &amp;name)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00020">GraphUtils.cpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_afd518dba3d52728670459e4ad3bed5e1"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a></div><div class="ttdeci">bool IsConnected(armnn::Layer *srcLayer, armnn::Layer *destLayer, unsigned int srcSlot, unsigned int destSlot, const armnn::TensorInfo &amp;expectedTensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00042">GraphUtils.cpp:42</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_aaef29472862381822654ab6cbf7cba2a"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">armnn::Layer::GetType</a></div><div class="ttdeci">LayerType GetType() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00259">Layer.hpp:259</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a4c04337db4d5f380219a005657a8223b"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a></div><div class="ttdeci">bool CheckNumberOfInputSlot(armnn::Layer *layer, unsigned int num)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00032">GraphUtils.cpp:32</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_aada2e27f100807f5786eecb03390ba58"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a></div><div class="ttdeci">bool CheckNumberOfOutputSlot(armnn::Layer *layer, unsigned int num)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00037">GraphUtils.cpp:37</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00209">Layer.hpp:209</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_50aba35e23cba3c8856f8642cc06d5dc.xhtml">armnnTfParser</a></li><li class="navelem"><a class="el" href="dir_4ccaefd65a1feacebd3c00536508ef51.xhtml">test</a></li><li class="navelem"><a class="el" href="_assert_8cpp.xhtml">Assert.cpp</a></li>
    <li class="footer">Generated on Fri Mar 13 2020 16:09:14 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
