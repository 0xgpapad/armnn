<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: armnnTfParser Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearmnn_tf_parser.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">armnnTfParser Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml">ITfParser</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parses a directed acyclic graph from a tensorflow protobuf file.  <a href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml" title="WithOutputTensorIndex wraps a value and an index. ">WithOutputTensorIndex</a> wraps a value and an index.  <a href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a9084adbf804022c874039ad40d1939e9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> = <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></td></tr>
<tr class="separator:a9084adbf804022c874039ad40d1939e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7cec8b9a69e02f18a5de38502675d94"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#af7cec8b9a69e02f18a5de38502675d94">ITfParserPtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml">ITfParser</a>, void(*)(<a class="el" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml">ITfParser</a> *parser)&gt;</td></tr>
<tr class="separator:af7cec8b9a69e02f18a5de38502675d94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa36bf288c19fe35767bb6e059636f405"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> = std::unique_ptr&lt; ParsedTfOperation &gt;</td></tr>
<tr class="separator:aa36bf288c19fe35767bb6e059636f405"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad85fe4a9bf2aff90c53bc2f50c8931e6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#ad85fe4a9bf2aff90c53bc2f50c8931e6">OutputOfParsedTfOperation</a> = <a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a>&lt; ParsedTfOperation * &gt;</td></tr>
<tr class="separator:ad85fe4a9bf2aff90c53bc2f50c8931e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c8735480b01dbd0f75c63377fe054e9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#a4c8735480b01dbd0f75c63377fe054e9">OutputOfConstNodeDef</a> = <a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a>&lt; const tensorflow::NodeDef * &gt;</td></tr>
<tr class="separator:a4c8735480b01dbd0f75c63377fe054e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcf8e5fd95ba7e7bd8cd36fc24974223"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#abcf8e5fd95ba7e7bd8cd36fc24974223">OutputId</a> = <a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a>&lt; std::string &gt;</td></tr>
<tr class="separator:abcf8e5fd95ba7e7bd8cd36fc24974223"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aca0a31de02d5c087029bb28c9202b4d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#aca0a31de02d5c087029bb28c9202b4d6">CalcPadding</a> (uint32_t inputSize, uint32_t filterSize, uint32_t stride, uint32_t dilation, uint32_t &amp;paddingFront, uint32_t &amp;paddingBack, bool samePadding)</td></tr>
<tr class="separator:aca0a31de02d5c087029bb28c9202b4d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d934e14ca544ba7af4fe562def8a986"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#a3d934e14ca544ba7af4fe562def8a986">ConvertTfTensorDataType</a> (const tensorflow::DataType tfDataType, const tensorflow::NodeDef &amp;nodeDef)</td></tr>
<tr class="separator:a3d934e14ca544ba7af4fe562def8a986"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9be4b3b32d110ca8d27936f6f7df1408"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#a9be4b3b32d110ca8d27936f6f7df1408">OutputShapeOfExpandDims</a> (const tensorflow::NodeDef &amp;nodeDef, <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo, std::int32_t expandDim)</td></tr>
<tr class="separator:a9be4b3b32d110ca8d27936f6f7df1408"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5488f1478c62281c5e937e79ebcd145"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#ae5488f1478c62281c5e937e79ebcd145">CheckPaddingTensor</a> (const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;paddingTensor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;inputTensorInfo, const std::string &amp;nodeName)</td></tr>
<tr class="separator:ae5488f1478c62281c5e937e79ebcd145"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c18860db8b032de579c5ad94cbae5d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#a9c18860db8b032de579c5ad94cbae5d0">CalculatePaddedOutputTensorInfo</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;inputTensorInfo, const std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt;&gt; &amp;padList)</td></tr>
<tr class="separator:a9c18860db8b032de579c5ad94cbae5d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e06adf62d53562032e738b89f3eb37c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_tf_parser.xhtml#a6e06adf62d53562032e738b89f3eb37c">OutputShapeOfSqueeze</a> (const tensorflow::NodeDef &amp;nodeDef, <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo)</td></tr>
<tr class="separator:a6e06adf62d53562032e738b89f3eb37c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="a9084adbf804022c874039ad40d1939e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9084adbf804022c874039ad40d1939e9">&#9670;&nbsp;</a></span>BindingPointInfo</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_tf_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> =  <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_tf_parser_8hpp_source.xhtml#l00019">19</a> of file <a class="el" href="_i_tf_parser_8hpp_source.xhtml">ITfParser.hpp</a>.</p>

</div>
</div>
<a id="af7cec8b9a69e02f18a5de38502675d94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7cec8b9a69e02f18a5de38502675d94">&#9670;&nbsp;</a></span>ITfParserPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_tf_parser.xhtml#af7cec8b9a69e02f18a5de38502675d94">ITfParserPtr</a> =  std::unique_ptr&lt;<a class="el" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml">ITfParser</a>, void(*)(<a class="el" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml">ITfParser</a>* parser)&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_tf_parser_8hpp_source.xhtml#l00022">22</a> of file <a class="el" href="_i_tf_parser_8hpp_source.xhtml">ITfParser.hpp</a>.</p>

</div>
</div>
<a id="abcf8e5fd95ba7e7bd8cd36fc24974223"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcf8e5fd95ba7e7bd8cd36fc24974223">&#9670;&nbsp;</a></span>OutputId</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_tf_parser.xhtml#abcf8e5fd95ba7e7bd8cd36fc24974223">OutputId</a> =  <a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a>&lt;std::string&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8hpp_source.xhtml#l00062">62</a> of file <a class="el" href="_tf_parser_8hpp_source.xhtml">TfParser.hpp</a>.</p>

</div>
</div>
<a id="a4c8735480b01dbd0f75c63377fe054e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c8735480b01dbd0f75c63377fe054e9">&#9670;&nbsp;</a></span>OutputOfConstNodeDef</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_tf_parser.xhtml#a4c8735480b01dbd0f75c63377fe054e9">OutputOfConstNodeDef</a> =  <a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a>&lt;const tensorflow::NodeDef*&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8hpp_source.xhtml#l00061">61</a> of file <a class="el" href="_tf_parser_8hpp_source.xhtml">TfParser.hpp</a>.</p>

</div>
</div>
<a id="ad85fe4a9bf2aff90c53bc2f50c8931e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad85fe4a9bf2aff90c53bc2f50c8931e6">&#9670;&nbsp;</a></span>OutputOfParsedTfOperation</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_tf_parser.xhtml#ad85fe4a9bf2aff90c53bc2f50c8931e6">OutputOfParsedTfOperation</a> =  <a class="el" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a>&lt;ParsedTfOperation *&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8hpp_source.xhtml#l00060">60</a> of file <a class="el" href="_tf_parser_8hpp_source.xhtml">TfParser.hpp</a>.</p>

</div>
</div>
<a id="aa36bf288c19fe35767bb6e059636f405"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa36bf288c19fe35767bb6e059636f405">&#9670;&nbsp;</a></span>ParsedTfOperationPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> =  std::unique_ptr&lt;ParsedTfOperation&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="_tf_parser_8hpp_source.xhtml">TfParser.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="aca0a31de02d5c087029bb28c9202b4d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca0a31de02d5c087029bb28c9202b4d6">&#9670;&nbsp;</a></span>CalcPadding()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void armnnTfParser::CalcPadding </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>inputSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>filterSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>stride</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>paddingFront</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t &amp;&#160;</td>
          <td class="paramname"><em>paddingBack</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>samePadding</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8cpp_source.xhtml#l00429">429</a> of file <a class="el" href="_tf_parser_8cpp_source.xhtml">TfParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00197">CHECK_LOCATION</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00311">Layer::GetName()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00314">Layer::GetNumOutputSlots()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00318">Layer::GetOutputSlot()</a>, and <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml#l00243">m_Layer</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00672">TfLiteParserImpl::CreateNetworkFromBinary()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00628">OnnxParserImpl::CreateNetworkFromString()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l01213">ITfParser::TfParserImpl::ParseConv2D()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l01341">ITfParser::TfParserImpl::ParseDepthwiseConv2D()</a>, and <a class="el" href="_tf_parser_8cpp_source.xhtml#l03009">ITfParser::TfParserImpl::ParsePooling2d()</a>.</p>
<div class="fragment"><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;{</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    paddingFront = 0;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    paddingBack = 0;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">if</span> (samePadding)</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    {</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        uint32_t outputSize = (inputSize + stride - 1) / stride;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        uint32_t dilatedSize = filterSize + (dilation - 1) * (filterSize - 1);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        uint32_t temp = (outputSize - 1) * stride + dilatedSize;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keywordflow">if</span> (temp &gt; inputSize)</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        {</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            paddingFront = (temp - inputSize) / 2;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            paddingBack = (temp - inputSize) - paddingFront;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        }</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    }</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a9c18860db8b032de579c5ad94cbae5d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c18860db8b032de579c5ad94cbae5d0">&#9670;&nbsp;</a></span>CalculatePaddedOutputTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> armnnTfParser::CalculatePaddedOutputTensorInfo </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>padList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8cpp_source.xhtml#l02176">2176</a> of file <a class="el" href="_tf_parser_8cpp_source.xhtml">TfParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, and <a class="el" href="_tensor_8hpp_source.xhtml#l00189">TensorInfo::SetShape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_parser_8cpp_source.xhtml#l02195">ITfParser::TfParserImpl::ParsePad()</a>.</p>
<div class="fragment"><div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;{</div><div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDims = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;    std::vector&lt;unsigned int&gt; outDims;</div><div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numDims; ++i)</div><div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;    {</div><div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dimSize = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i];</div><div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160;        <span class="keyword">const</span> std::pair&lt;unsigned int, unsigned int&gt;&amp; dimPadding = padList[i];</div><div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;        dimSize += dimPadding.first;</div><div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;        dimSize += dimPadding.second;</div><div class="line"><a name="l02187"></a><span class="lineno"> 2187</span>&#160;        outDims.push_back(dimSize);</div><div class="line"><a name="l02188"></a><span class="lineno"> 2188</span>&#160;    }</div><div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> paddedTensorInfo = inputTensorInfo;</div><div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outDimsSize = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(outDims.size());</div><div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160;    paddedTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>{ outDimsSize, outDims.data() });</div><div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;    <span class="keywordflow">return</span> paddedTensorInfo;</div><div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00189">Tensor.hpp:189</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae5488f1478c62281c5e937e79ebcd145"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5488f1478c62281c5e937e79ebcd145">&#9670;&nbsp;</a></span>CheckPaddingTensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int armnnTfParser::CheckPaddingTensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>paddingTensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>nodeName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8cpp_source.xhtml#l02147">2147</a> of file <a class="el" href="_tf_parser_8cpp_source.xhtml">TfParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00197">CHECK_LOCATION</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetNumDimensions()</a>, and <a class="el" href="_tensor_8hpp_source.xhtml#l00284">BaseTensor&lt; MemoryType &gt;::GetShape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_parser_8cpp_source.xhtml#l02195">ITfParser::TfParserImpl::ParsePad()</a>.</p>
<div class="fragment"><div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;{</div><div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank = paddingTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[0];</div><div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> expectedRank = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;    <span class="keywordflow">if</span> (rank != expectedRank)</div><div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;    {</div><div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;                fmt::format(<span class="stringliteral">&quot;Expected the padding tensor to be of rank {} not {} on Node {} {}.&quot;</span>,</div><div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;                            expectedRank,</div><div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;                            rank,</div><div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;                            nodeName,</div><div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;                            <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;    }</div><div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> second = paddingTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[1];</div><div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;    <span class="keywordflow">if</span> (second != 2)</div><div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;    {</div><div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;                fmt::format(<span class="stringliteral">&quot;Expected the padding tensor to be of dimensions &quot;</span></div><div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;                            <span class="stringliteral">&quot;[{1}, 2] not [{1}, {2}] on Node {3} {4}.&quot;</span>,</div><div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;                            rank,</div><div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;                            second,</div><div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;                            nodeName,</div><div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;                            <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;    }</div><div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;    <span class="keywordflow">return</span> rank;</div><div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::BaseTensor::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00284">Tensor.hpp:284</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00197">Exceptions.hpp:197</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3d934e14ca544ba7af4fe562def8a986"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d934e14ca544ba7af4fe562def8a986">&#9670;&nbsp;</a></span>ConvertTfTensorDataType()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> armnnTfParser::ConvertTfTensorDataType </td>
          <td>(</td>
          <td class="paramtype">const tensorflow::DataType&#160;</td>
          <td class="paramname"><em>tfDataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const tensorflow::NodeDef &amp;&#160;</td>
          <td class="paramname"><em>nodeDef</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8cpp_source.xhtml#l00952">952</a> of file <a class="el" href="_tf_parser_8cpp_source.xhtml">TfParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00197">CHECK_LOCATION</a>, and <a class="el" href="_i_tf_parser_8hpp_source.xhtml#l00067">ITfParser::MakeTfOperation</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_parser_8cpp_source.xhtml#l01086">ITfParser::TfParserImpl::ParseConst()</a>.</p>
<div class="fragment"><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;{</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    <span class="keywordflow">switch</span> (tfDataType)</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    {</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    <span class="keywordflow">case</span> tensorflow::DT_FLOAT:</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;        <span class="keywordflow">return</span> DataType::Float32;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    <span class="keywordflow">case</span> tensorflow::DT_INT32:</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;        <span class="keywordflow">return</span> DataType::Signed32;</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;            fmt::format(<span class="stringliteral">&quot;Unknown DataType {} for node {} {}&quot;</span>,</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                        tensorflow::DataType_Name(tfDataType),</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                        nodeDef.name(),</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;                        <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    }</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;}</div><div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00197">Exceptions.hpp:197</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9be4b3b32d110ca8d27936f6f7df1408"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9be4b3b32d110ca8d27936f6f7df1408">&#9670;&nbsp;</a></span>OutputShapeOfExpandDims()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> armnnTfParser::OutputShapeOfExpandDims </td>
          <td>(</td>
          <td class="paramtype">const tensorflow::NodeDef &amp;&#160;</td>
          <td class="paramname"><em>nodeDef</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>expandDim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8cpp_source.xhtml#l01466">1466</a> of file <a class="el" href="_tf_parser_8cpp_source.xhtml">TfParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00197">CHECK_LOCATION</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>, and <a class="el" href="_tensor_8hpp_source.xhtml#l00189">TensorInfo::SetShape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_parser_8cpp_source.xhtml#l01535">ITfParser::TfParserImpl::ParseExpandDims()</a>.</p>
<div class="fragment"><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;{</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(nodeDef.op() == <span class="stringliteral">&quot;ExpandDims&quot;</span>);</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    <span class="keywordflow">if</span> (inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &gt; 4) {</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;                fmt::format(<span class="stringliteral">&quot;Unsupported number of dimensions: {} for input shape for ExpandDims {} {}&quot;</span>,</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;                            inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(),</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;                            nodeDef.name(),</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;                            <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;    }</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    std::int32_t inputDimSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;int32_t&gt;(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>());</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    std::vector&lt;uint32_t&gt; outputDims;</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;    <span class="comment">// expandDim operation requires: -1-input.dims() &lt;= dim &lt;= input.dims()</span></div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    <span class="keywordflow">if</span> (expandDim &gt;= -1 - inputDimSize &amp;&amp; expandDim &lt;= inputDimSize)</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    {</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;        <span class="comment">// add current input shape to outputDims</span></div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); ++i) {</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;            <span class="keyword">auto</span> currentDimension = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i];</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;            outputDims.push_back(currentDimension);</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;        }</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;        <span class="comment">// insert a dimension of 1 at index &#39;expandDim&#39; of inputs shape</span></div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;        <span class="keywordflow">if</span> (expandDim &gt;= 0)</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;        {</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;            <span class="keyword">auto</span> getPosition = std::next(outputDims.begin() + 0, expandDim);</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;            outputDims.insert(getPosition, 1);</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;        }</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;        <span class="comment">// if negative number for &#39;expandDim&#39; then count backwards from the last element</span></div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;        <span class="comment">// and insert 1 dimension at index &#39;expandDim&#39;</span></div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;        <span class="keywordflow">if</span> (expandDim &lt; 0)</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;        {</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;            <span class="keywordtype">int</span> outputDimSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">int</span>&gt;(outputDims.size() + 1);</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;            <span class="keyword">auto</span> getPosition = std::next(outputDims.begin() + outputDimSize, expandDim);</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;            outputDims.insert(getPosition, 1);</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;        }</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;    }</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    {</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;                fmt::format(<span class="stringliteral">&quot;Cannot expand dimension {} in input tensor with {} dimension {}&quot;</span>,</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;                            expandDim,</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;                            inputDimSize,</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;                            <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    }</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    <span class="keywordflow">if</span> (outputDims.size() &gt; 4)</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;    {</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;                fmt::format(<span class="stringliteral">&quot;Unsupported number of dimensions: {} for output shape for ExpandDims {} {}&quot;</span>,</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;                            outputDims.size(),</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;                            nodeDef.name(),</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;                            <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    }</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(static_cast&lt;unsigned int&gt;(outputDims.size()),</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;                                       outputDims.data());</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outTensorInfo = inputTensorInfo;</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;    outTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outShape);</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;    <span class="keywordflow">return</span> outTensorInfo;</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00189">Tensor.hpp:189</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00197">Exceptions.hpp:197</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6e06adf62d53562032e738b89f3eb37c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e06adf62d53562032e738b89f3eb37c">&#9670;&nbsp;</a></span>OutputShapeOfSqueeze()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> armnnTfParser::OutputShapeOfSqueeze </td>
          <td>(</td>
          <td class="paramtype">const tensorflow::NodeDef &amp;&#160;</td>
          <td class="paramname"><em>nodeDef</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_parser_8cpp_source.xhtml#l02485">2485</a> of file <a class="el" href="_tf_parser_8cpp_source.xhtml">TfParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00197">CHECK_LOCATION</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, and <a class="el" href="_tensor_8hpp_source.xhtml#l00189">TensorInfo::SetShape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_parser_8cpp_source.xhtml#l02557">ITfParser::TfParserImpl::ParseSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l02486"></a><span class="lineno"> 2486</span>&#160;{</div><div class="line"><a name="l02487"></a><span class="lineno"> 2487</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(nodeDef.op() == <span class="stringliteral">&quot;Squeeze&quot;</span>);</div><div class="line"><a name="l02488"></a><span class="lineno"> 2488</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">tensorflow::DataType</a> tfDataType = ReadMandatoryNodeTypeAttribute(nodeDef, <span class="stringliteral">&quot;T&quot;</span>);</div><div class="line"><a name="l02489"></a><span class="lineno"> 2489</span>&#160;</div><div class="line"><a name="l02490"></a><span class="lineno"> 2490</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> type;</div><div class="line"><a name="l02491"></a><span class="lineno"> 2491</span>&#160;    <span class="keywordflow">if</span> (tfDataType == tensorflow::DT_FLOAT)</div><div class="line"><a name="l02492"></a><span class="lineno"> 2492</span>&#160;    {</div><div class="line"><a name="l02493"></a><span class="lineno"> 2493</span>&#160;        type = DataType::Float32;</div><div class="line"><a name="l02494"></a><span class="lineno"> 2494</span>&#160;    }</div><div class="line"><a name="l02495"></a><span class="lineno"> 2495</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tfDataType == tensorflow::DT_INT32)</div><div class="line"><a name="l02496"></a><span class="lineno"> 2496</span>&#160;    {</div><div class="line"><a name="l02497"></a><span class="lineno"> 2497</span>&#160;        type = DataType::Signed32;</div><div class="line"><a name="l02498"></a><span class="lineno"> 2498</span>&#160;    }</div><div class="line"><a name="l02499"></a><span class="lineno"> 2499</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l02500"></a><span class="lineno"> 2500</span>&#160;    {</div><div class="line"><a name="l02501"></a><span class="lineno"> 2501</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02502"></a><span class="lineno"> 2502</span>&#160;            fmt::format(<span class="stringliteral">&quot;Unsupported DataType {} for Squeeze operation {} {}&quot;</span>,</div><div class="line"><a name="l02503"></a><span class="lineno"> 2503</span>&#160;                        tensorflow::DataType_Name(tfDataType),</div><div class="line"><a name="l02504"></a><span class="lineno"> 2504</span>&#160;                        nodeDef.name(),</div><div class="line"><a name="l02505"></a><span class="lineno"> 2505</span>&#160;                        <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02506"></a><span class="lineno"> 2506</span>&#160;    }</div><div class="line"><a name="l02507"></a><span class="lineno"> 2507</span>&#160;</div><div class="line"><a name="l02508"></a><span class="lineno"> 2508</span>&#160;</div><div class="line"><a name="l02509"></a><span class="lineno"> 2509</span>&#160;    <span class="keywordflow">if</span> (inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &gt; 4)</div><div class="line"><a name="l02510"></a><span class="lineno"> 2510</span>&#160;    {</div><div class="line"><a name="l02511"></a><span class="lineno"> 2511</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02512"></a><span class="lineno"> 2512</span>&#160;            fmt::format(<span class="stringliteral">&quot;Unsupported number of dimensions: {} for input shape for Squeeze {} {}&quot;</span>,</div><div class="line"><a name="l02513"></a><span class="lineno"> 2513</span>&#160;                        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(),</div><div class="line"><a name="l02514"></a><span class="lineno"> 2514</span>&#160;                        nodeDef.name(),</div><div class="line"><a name="l02515"></a><span class="lineno"> 2515</span>&#160;                        <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02516"></a><span class="lineno"> 2516</span>&#160;    }</div><div class="line"><a name="l02517"></a><span class="lineno"> 2517</span>&#160;</div><div class="line"><a name="l02518"></a><span class="lineno"> 2518</span>&#160;    std::vector&lt;uint32_t&gt; squeezeDims = ReadOptionalNodeUint32ListAttribute(nodeDef, <span class="stringliteral">&quot;squeeze_dims&quot;</span>);</div><div class="line"><a name="l02519"></a><span class="lineno"> 2519</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> uint32_t dimensionSequence[] = { 0, 1, 2, 3 };</div><div class="line"><a name="l02520"></a><span class="lineno"> 2520</span>&#160;</div><div class="line"><a name="l02521"></a><span class="lineno"> 2521</span>&#160;    <span class="keywordflow">if</span> (squeezeDims.empty())</div><div class="line"><a name="l02522"></a><span class="lineno"> 2522</span>&#160;    {</div><div class="line"><a name="l02523"></a><span class="lineno"> 2523</span>&#160;        squeezeDims.assign(dimensionSequence,</div><div class="line"><a name="l02524"></a><span class="lineno"> 2524</span>&#160;                           dimensionSequence+inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>());</div><div class="line"><a name="l02525"></a><span class="lineno"> 2525</span>&#160;    }</div><div class="line"><a name="l02526"></a><span class="lineno"> 2526</span>&#160;</div><div class="line"><a name="l02527"></a><span class="lineno"> 2527</span>&#160;    std::vector&lt;uint32_t&gt; outputDims;</div><div class="line"><a name="l02528"></a><span class="lineno"> 2528</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div><div class="line"><a name="l02529"></a><span class="lineno"> 2529</span>&#160;    {</div><div class="line"><a name="l02530"></a><span class="lineno"> 2530</span>&#160;        <span class="keywordtype">bool</span> skipSqueeze = (std::find(squeezeDims.begin(), squeezeDims.end(), i) == squeezeDims.end());</div><div class="line"><a name="l02531"></a><span class="lineno"> 2531</span>&#160;        <span class="keyword">auto</span> currentDimension = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i];</div><div class="line"><a name="l02532"></a><span class="lineno"> 2532</span>&#160;        <span class="keywordflow">if</span> (skipSqueeze || currentDimension != 1)</div><div class="line"><a name="l02533"></a><span class="lineno"> 2533</span>&#160;        {</div><div class="line"><a name="l02534"></a><span class="lineno"> 2534</span>&#160;            outputDims.push_back(currentDimension);</div><div class="line"><a name="l02535"></a><span class="lineno"> 2535</span>&#160;        }</div><div class="line"><a name="l02536"></a><span class="lineno"> 2536</span>&#160;    }</div><div class="line"><a name="l02537"></a><span class="lineno"> 2537</span>&#160;</div><div class="line"><a name="l02538"></a><span class="lineno"> 2538</span>&#160;    <span class="keywordflow">if</span> (outputDims.size() &gt; 4)</div><div class="line"><a name="l02539"></a><span class="lineno"> 2539</span>&#160;    {</div><div class="line"><a name="l02540"></a><span class="lineno"> 2540</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02541"></a><span class="lineno"> 2541</span>&#160;            fmt::format(<span class="stringliteral">&quot;Unsupported number of dimensions: {} for output shape for Squeeze {} {}&quot;</span>,</div><div class="line"><a name="l02542"></a><span class="lineno"> 2542</span>&#160;                        outputDims.size(),</div><div class="line"><a name="l02543"></a><span class="lineno"> 2543</span>&#160;                        nodeDef.name(),</div><div class="line"><a name="l02544"></a><span class="lineno"> 2544</span>&#160;                        <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02545"></a><span class="lineno"> 2545</span>&#160;    }</div><div class="line"><a name="l02546"></a><span class="lineno"> 2546</span>&#160;</div><div class="line"><a name="l02547"></a><span class="lineno"> 2547</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(static_cast&lt;unsigned int&gt;(outputDims.size()),</div><div class="line"><a name="l02548"></a><span class="lineno"> 2548</span>&#160;                                       outputDims.data());</div><div class="line"><a name="l02549"></a><span class="lineno"> 2549</span>&#160;</div><div class="line"><a name="l02550"></a><span class="lineno"> 2550</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outTensorInfo = inputTensorInfo;</div><div class="line"><a name="l02551"></a><span class="lineno"> 2551</span>&#160;    outTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outShape);</div><div class="line"><a name="l02552"></a><span class="lineno"> 2552</span>&#160;    outTensorInfo.SetDataType(type);</div><div class="line"><a name="l02553"></a><span class="lineno"> 2553</span>&#160;</div><div class="line"><a name="l02554"></a><span class="lineno"> 2554</span>&#160;    <span class="keywordflow">return</span> outTensorInfo;</div><div class="line"><a name="l02555"></a><span class="lineno"> 2555</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00189">Tensor.hpp:189</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00032">Types.hpp:32</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00197">Exceptions.hpp:197</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn_tf_parser.xhtml">armnnTfParser</a></li>
    <li class="footer">Generated on Fri Mar 19 2021 15:26:16 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
