<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/NetworkQuantizationScheme.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_network_quantization_scheme_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NetworkQuantizationScheme.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_network_quantization_scheme_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_8hpp.xhtml">armnn/Types.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a9b8e5a95f8c061bbbcdb036915dcb61a">   16</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a9b8e5a95f8c061bbbcdb036915dcb61a">OffsetScalePair</a> = std::pair&lt;float, int&gt;;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="structarmnn_1_1_i_quantization_scheme.xhtml">   18</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml">IQuantizationScheme</a></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn.xhtml#a9b8e5a95f8c061bbbcdb036915dcb61a">OffsetScalePair</a> <a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml#a6a5561395e9693f02258b49dfcc009b4">ComputeScheme</a>(<span class="keywordtype">double</span> min, <span class="keywordtype">double</span> max) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml#a7ebe7ca1c6100440fcc130217f43561b">NumBits</a>() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml#ad23181f9f8fcc85758f62c49fc7ca23f">GetDataType</a>() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="structarmnn_1_1_i_quantization_scheme.xhtml#ac7ce71800ca0ebb1222958717a834c9a">   26</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml#ac7ce71800ca0ebb1222958717a834c9a">~IQuantizationScheme</a>() {}</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;};</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_asymm_u8_quantization_scheme.xhtml">   29</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarmnn_1_1_q_asymm_u8_quantization_scheme.xhtml">QAsymmU8QuantizationScheme</a> : <a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml">IQuantizationScheme</a></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_asymm_u8_quantization_scheme.xhtml#a9fb07d8d7554a1502e732b8afa92040a">   31</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#a9b8e5a95f8c061bbbcdb036915dcb61a">OffsetScalePair</a> <a class="code" href="structarmnn_1_1_q_asymm_u8_quantization_scheme.xhtml#a9fb07d8d7554a1502e732b8afa92040a">ComputeScheme</a>(<span class="keywordtype">double</span> min, <span class="keywordtype">double</span> max)<span class="keyword"> const override</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordflow">if</span> (min &gt; max)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;min &gt; max will result in invalid quantization.&quot;</span>);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordtype">double</span> highest = (1 &lt;&lt; <a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml#a7ebe7ca1c6100440fcc130217f43561b">NumBits</a>()) - 1;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        min = std::min(0.0, min); <span class="comment">// min &lt;= 0.0</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        max = std::max(0.0, max); <span class="comment">// max &gt;= 0.0</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="comment">// To avoid dividing by zero when quantizing a zero filled tensor</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">if</span> (min == 0.0 &amp;&amp; max == 0.0)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            max = 1.0;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="comment">// Assumes quantization range [0-highest]</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordtype">double</span> scale = (max-min) / highest;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordtype">double</span> offset = -min / scale;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="comment">// Clamp offset [0-highest]</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        offset = std::max(0.0, std::min(highest, offset));</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">return</span> std::make_pair(static_cast&lt;float&gt;(scale), static_cast&lt;int&gt;(std::round(offset)));</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_asymm_u8_quantization_scheme.xhtml#a1046eb36ff708a1b84f9a6bf0103fbc7">   59</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structarmnn_1_1_q_asymm_u8_quantization_scheme.xhtml#a1046eb36ff708a1b84f9a6bf0103fbc7">NumBits</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> 8; }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_asymm_u8_quantization_scheme.xhtml#a57d67416d97cb7138e43656b43feb797">   61</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="structarmnn_1_1_q_asymm_u8_quantization_scheme.xhtml#a57d67416d97cb7138e43656b43feb797">GetDataType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>; }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;};</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_asymm_s8_quantization_scheme.xhtml">   64</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarmnn_1_1_q_asymm_s8_quantization_scheme.xhtml">QAsymmS8QuantizationScheme</a> : <a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml">IQuantizationScheme</a></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_asymm_s8_quantization_scheme.xhtml#a9fb07d8d7554a1502e732b8afa92040a">   66</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#a9b8e5a95f8c061bbbcdb036915dcb61a">OffsetScalePair</a> <a class="code" href="structarmnn_1_1_q_asymm_s8_quantization_scheme.xhtml#a9fb07d8d7554a1502e732b8afa92040a">ComputeScheme</a>(<span class="keywordtype">double</span> min, <span class="keywordtype">double</span> max)<span class="keyword"> const override</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">if</span> (min &gt; max)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;min &gt; max will result in invalid quantization.&quot;</span>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordtype">double</span> highest = (1 &lt;&lt; <a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml#a7ebe7ca1c6100440fcc130217f43561b">NumBits</a>()) - 1;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        min = std::min(0.0, min); <span class="comment">// min &lt;= 0.0</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        max = std::max(0.0, max); <span class="comment">// max &gt;= 0.0</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="comment">// To avoid dividing by zero when quantizing a zero filled tensor</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">if</span> (min == 0.0 &amp;&amp; max == 0.0)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            max = 1.0;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="comment">// Assumes quantization range [0-255]</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordtype">double</span> scale = (max-min) / highest ;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordtype">double</span> offset = - min / scale;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="comment">//Clamp 0 to Highest</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        offset = std::max(0.0, std::min(highest, offset));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="comment">//-128 on offset to cast to signed range</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">return</span> std::make_pair(static_cast&lt;float&gt;(scale), static_cast&lt;int&gt;(std::round(offset)-128));</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_asymm_s8_quantization_scheme.xhtml#a1046eb36ff708a1b84f9a6bf0103fbc7">   95</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structarmnn_1_1_q_asymm_s8_quantization_scheme.xhtml#a1046eb36ff708a1b84f9a6bf0103fbc7">NumBits</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> 8; }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_asymm_s8_quantization_scheme.xhtml#a57d67416d97cb7138e43656b43feb797">   97</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="structarmnn_1_1_q_asymm_s8_quantization_scheme.xhtml#a57d67416d97cb7138e43656b43feb797">GetDataType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">DataType::QAsymmS8</a>; }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;};</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_symm_s8_quantization_scheme.xhtml">  100</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarmnn_1_1_q_symm_s8_quantization_scheme.xhtml">QSymmS8QuantizationScheme</a> : <a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml">IQuantizationScheme</a></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_symm_s8_quantization_scheme.xhtml#a9fb07d8d7554a1502e732b8afa92040a">  102</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#a9b8e5a95f8c061bbbcdb036915dcb61a">OffsetScalePair</a> <a class="code" href="structarmnn_1_1_q_symm_s8_quantization_scheme.xhtml#a9fb07d8d7554a1502e732b8afa92040a">ComputeScheme</a>(<span class="keywordtype">double</span> min, <span class="keywordtype">double</span> max)<span class="keyword"> const override</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">if</span> (min &gt; max)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;min &gt; max will result in invalid quantization.&quot;</span>);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="comment">// To avoid dividing by zero when quantizing a zero filled tensor</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">if</span> (min == 0.0 &amp;&amp; max == 0.0)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            max = 1.0;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordtype">double</span> highest = (1 &lt;&lt; (<a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml#a7ebe7ca1c6100440fcc130217f43561b">NumBits</a>()-1)) - 1; <span class="comment">// (numbits-1) accounts for the sign bit</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordtype">double</span> extent = std::max(std::abs(min), std::abs(max));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordtype">double</span> scale = extent / highest;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">return</span> std::make_pair(static_cast&lt;float&gt;(scale), 0);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_symm_s8_quantization_scheme.xhtml#a1046eb36ff708a1b84f9a6bf0103fbc7">  123</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structarmnn_1_1_q_symm_s8_quantization_scheme.xhtml#a1046eb36ff708a1b84f9a6bf0103fbc7">NumBits</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> 8; }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_symm_s8_quantization_scheme.xhtml#a57d67416d97cb7138e43656b43feb797">  125</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="structarmnn_1_1_q_symm_s8_quantization_scheme.xhtml#a57d67416d97cb7138e43656b43feb797">GetDataType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">DataType::QSymmS8</a>; }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;};</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_symm16_quantization_scheme.xhtml">  128</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarmnn_1_1_q_symm16_quantization_scheme.xhtml">QSymm16QuantizationScheme</a> : <a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml">IQuantizationScheme</a></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_symm16_quantization_scheme.xhtml#a9fb07d8d7554a1502e732b8afa92040a">  130</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#a9b8e5a95f8c061bbbcdb036915dcb61a">OffsetScalePair</a> <a class="code" href="structarmnn_1_1_q_symm16_quantization_scheme.xhtml#a9fb07d8d7554a1502e732b8afa92040a">ComputeScheme</a>(<span class="keywordtype">double</span> min, <span class="keywordtype">double</span> max)<span class="keyword"> const override</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">if</span> (min &gt; max)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;min &gt; max will result in invalid quantization.&quot;</span>);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="comment">// To avoid dividing by zero when quantizing a zero filled tensor</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">if</span> (min == 0.0 &amp;&amp; max == 0.0)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            max = 1.0;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordtype">double</span> highest = (1 &lt;&lt; (<a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml#a7ebe7ca1c6100440fcc130217f43561b">NumBits</a>()-1)) - 1; <span class="comment">// (numbits-1) accounts for the sign bit</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordtype">double</span> extent = std::max(std::abs(min), std::abs(max));</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordtype">double</span> scale = extent / highest;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">return</span> std::make_pair(static_cast&lt;float&gt;(scale), 0);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_symm16_quantization_scheme.xhtml#a1046eb36ff708a1b84f9a6bf0103fbc7">  152</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structarmnn_1_1_q_symm16_quantization_scheme.xhtml#a1046eb36ff708a1b84f9a6bf0103fbc7">NumBits</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> 16; }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="structarmnn_1_1_q_symm16_quantization_scheme.xhtml#a57d67416d97cb7138e43656b43feb797">  154</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="structarmnn_1_1_q_symm16_quantization_scheme.xhtml#a57d67416d97cb7138e43656b43feb797">GetDataType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">DataType::QSymmS16</a>; }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;};</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="structarmnn_1_1_q_symm_s8_quantization_scheme_xhtml_a1046eb36ff708a1b84f9a6bf0103fbc7"><div class="ttname"><a href="structarmnn_1_1_q_symm_s8_quantization_scheme.xhtml#a1046eb36ff708a1b84f9a6bf0103fbc7">armnn::QSymmS8QuantizationScheme::NumBits</a></div><div class="ttdeci">int NumBits() const override</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00123">NetworkQuantizationScheme.hpp:123</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9b8e5a95f8c061bbbcdb036915dcb61a"><div class="ttname"><a href="namespacearmnn.xhtml#a9b8e5a95f8c061bbbcdb036915dcb61a">armnn::OffsetScalePair</a></div><div class="ttdeci">std::pair&lt; float, int &gt; OffsetScalePair</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00016">NetworkQuantizationScheme.hpp:16</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_asymm_s8_quantization_scheme_xhtml_a57d67416d97cb7138e43656b43feb797"><div class="ttname"><a href="structarmnn_1_1_q_asymm_s8_quantization_scheme.xhtml#a57d67416d97cb7138e43656b43feb797">armnn::QAsymmS8QuantizationScheme::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const override</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00097">NetworkQuantizationScheme.hpp:97</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_asymm_u8_quantization_scheme_xhtml_a57d67416d97cb7138e43656b43feb797"><div class="ttname"><a href="structarmnn_1_1_q_asymm_u8_quantization_scheme.xhtml#a57d67416d97cb7138e43656b43feb797">armnn::QAsymmU8QuantizationScheme::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const override</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00061">NetworkQuantizationScheme.hpp:61</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_symm16_quantization_scheme_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_symm16_quantization_scheme.xhtml">armnn::QSymm16QuantizationScheme</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00128">NetworkQuantizationScheme.hpp:128</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_symm16_quantization_scheme_xhtml_a1046eb36ff708a1b84f9a6bf0103fbc7"><div class="ttname"><a href="structarmnn_1_1_q_symm16_quantization_scheme.xhtml#a1046eb36ff708a1b84f9a6bf0103fbc7">armnn::QSymm16QuantizationScheme::NumBits</a></div><div class="ttdeci">int NumBits() const override</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00152">NetworkQuantizationScheme.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__software__tools_8dox_source.xhtml#l00006">01_00_software_tools.dox:6</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_quantization_scheme_xhtml_a6a5561395e9693f02258b49dfcc009b4"><div class="ttname"><a href="structarmnn_1_1_i_quantization_scheme.xhtml#a6a5561395e9693f02258b49dfcc009b4">armnn::IQuantizationScheme::ComputeScheme</a></div><div class="ttdeci">virtual OffsetScalePair ComputeScheme(double min, double max) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_q_asymm_u8_quantization_scheme_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_asymm_u8_quantization_scheme.xhtml">armnn::QAsymmU8QuantizationScheme</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00029">NetworkQuantizationScheme.hpp:29</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_symm_s8_quantization_scheme_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_symm_s8_quantization_scheme.xhtml">armnn::QSymmS8QuantizationScheme</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00100">NetworkQuantizationScheme.hpp:100</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_quantization_scheme_xhtml_a7ebe7ca1c6100440fcc130217f43561b"><div class="ttname"><a href="structarmnn_1_1_i_quantization_scheme.xhtml#a7ebe7ca1c6100440fcc130217f43561b">armnn::IQuantizationScheme::NumBits</a></div><div class="ttdeci">virtual int NumBits() const =0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00032">Types.hpp:32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="_types_8hpp_xhtml"><div class="ttname"><a href="_types_8hpp.xhtml">Types.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_symm_s8_quantization_scheme_xhtml_a9fb07d8d7554a1502e732b8afa92040a"><div class="ttname"><a href="structarmnn_1_1_q_symm_s8_quantization_scheme.xhtml#a9fb07d8d7554a1502e732b8afa92040a">armnn::QSymmS8QuantizationScheme::ComputeScheme</a></div><div class="ttdeci">OffsetScalePair ComputeScheme(double min, double max) const override</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00102">NetworkQuantizationScheme.hpp:102</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_quantization_scheme_xhtml_ad23181f9f8fcc85758f62c49fc7ca23f"><div class="ttname"><a href="structarmnn_1_1_i_quantization_scheme.xhtml#ad23181f9f8fcc85758f62c49fc7ca23f">armnn::IQuantizationScheme::GetDataType</a></div><div class="ttdeci">virtual DataType GetDataType() const =0</div></div>
<div class="ttc" id="structarmnn_1_1_q_asymm_s8_quantization_scheme_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_asymm_s8_quantization_scheme.xhtml">armnn::QAsymmS8QuantizationScheme</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00064">NetworkQuantizationScheme.hpp:64</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_symm16_quantization_scheme_xhtml_a57d67416d97cb7138e43656b43feb797"><div class="ttname"><a href="structarmnn_1_1_q_symm16_quantization_scheme.xhtml#a57d67416d97cb7138e43656b43feb797">armnn::QSymm16QuantizationScheme::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const override</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00154">NetworkQuantizationScheme.hpp:154</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_quantization_scheme_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_quantization_scheme.xhtml">armnn::IQuantizationScheme</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00018">NetworkQuantizationScheme.hpp:18</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_symm_s8_quantization_scheme_xhtml_a57d67416d97cb7138e43656b43feb797"><div class="ttname"><a href="structarmnn_1_1_q_symm_s8_quantization_scheme.xhtml#a57d67416d97cb7138e43656b43feb797">armnn::QSymmS8QuantizationScheme::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const override</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00125">NetworkQuantizationScheme.hpp:125</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::DataType::QSymmS8</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_asymm_s8_quantization_scheme_xhtml_a9fb07d8d7554a1502e732b8afa92040a"><div class="ttname"><a href="structarmnn_1_1_q_asymm_s8_quantization_scheme.xhtml#a9fb07d8d7554a1502e732b8afa92040a">armnn::QAsymmS8QuantizationScheme::ComputeScheme</a></div><div class="ttdeci">OffsetScalePair ComputeScheme(double min, double max) const override</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00066">NetworkQuantizationScheme.hpp:66</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_asymm_u8_quantization_scheme_xhtml_a9fb07d8d7554a1502e732b8afa92040a"><div class="ttname"><a href="structarmnn_1_1_q_asymm_u8_quantization_scheme.xhtml#a9fb07d8d7554a1502e732b8afa92040a">armnn::QAsymmU8QuantizationScheme::ComputeScheme</a></div><div class="ttdeci">OffsetScalePair ComputeScheme(double min, double max) const override</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00031">NetworkQuantizationScheme.hpp:31</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_quantization_scheme_xhtml_ac7ce71800ca0ebb1222958717a834c9a"><div class="ttname"><a href="structarmnn_1_1_i_quantization_scheme.xhtml#ac7ce71800ca0ebb1222958717a834c9a">armnn::IQuantizationScheme::~IQuantizationScheme</a></div><div class="ttdeci">virtual ~IQuantizationScheme()</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00026">NetworkQuantizationScheme.hpp:26</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_symm16_quantization_scheme_xhtml_a9fb07d8d7554a1502e732b8afa92040a"><div class="ttname"><a href="structarmnn_1_1_q_symm16_quantization_scheme.xhtml#a9fb07d8d7554a1502e732b8afa92040a">armnn::QSymm16QuantizationScheme::ComputeScheme</a></div><div class="ttdeci">OffsetScalePair ComputeScheme(double min, double max) const override</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00130">NetworkQuantizationScheme.hpp:130</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_asymm_s8_quantization_scheme_xhtml_a1046eb36ff708a1b84f9a6bf0103fbc7"><div class="ttname"><a href="structarmnn_1_1_q_asymm_s8_quantization_scheme.xhtml#a1046eb36ff708a1b84f9a6bf0103fbc7">armnn::QAsymmS8QuantizationScheme::NumBits</a></div><div class="ttdeci">int NumBits() const override</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00095">NetworkQuantizationScheme.hpp:95</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_asymm_u8_quantization_scheme_xhtml_a1046eb36ff708a1b84f9a6bf0103fbc7"><div class="ttname"><a href="structarmnn_1_1_q_asymm_u8_quantization_scheme.xhtml#a1046eb36ff708a1b84f9a6bf0103fbc7">armnn::QAsymmU8QuantizationScheme::NumBits</a></div><div class="ttdeci">int NumBits() const override</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00059">NetworkQuantizationScheme.hpp:59</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_network_quantization_scheme_8hpp.xhtml">NetworkQuantizationScheme.hpp</a></li>
    <li class="footer">Generated on Thu Feb 25 2021 17:27:29 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
