<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/layers/FullyConnectedLayer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_fully_connected_layer_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">FullyConnectedLayer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_fully_connected_layer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_fully_connected_layer_8hpp.xhtml">FullyConnectedLayer.hpp</a>&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_layer_clone_base_8hpp.xhtml">LayerCloneBase.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_utils_8hpp.xhtml">armnn/TypesUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_cpu_tensor_handle_8hpp.xhtml">backendsCommon/CpuTensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_workload_data_8hpp.xhtml">backendsCommon/WorkloadData.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_workload_factory_8hpp.xhtml">backendsCommon/WorkloadFactory.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="classarmnn_1_1_fully_connected_layer.xhtml#a88ae76d1f14ba0eaf81701eb38e3682a">   17</a></span>&#160;<a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a88ae76d1f14ba0eaf81701eb38e3682a">FullyConnectedLayer::FullyConnectedLayer</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a>&amp; param, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    : <a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml">LayerWithParameters</a>(1, 1, <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>::<a class="code" href="namespacearmnn.xhtml#a5739b990434e95ee13ff6d99824ffaf3">FullyConnected</a>, param, name)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;}</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="classarmnn_1_1_fully_connected_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">   22</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">FullyConnectedLayer::CreateWorkload</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a>&amp; factory)<span class="keyword"> const</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="comment">// on this level constant data should not be released..</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a> != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;FullyConnectedLayer: Weights data should not be null.&quot;</span>);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <a class="code" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">FullyConnectedQueueDescriptor</a> descriptor;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml#a3369b66d9316a773a41711e3f590c041">m_Weight</a> = <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a>.get();</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#ad32ac22bc72e28dfd6b466d143c8e262">m_Param</a>.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a>)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a39925bc24d3afcfb322a46a5884fadb9">m_Bias</a> != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;FullyConnectedLayer: Bias data should not be null.&quot;</span>);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml#ab3437cee6b0687812104fc1b37cbe8b3">m_Bias</a> = <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a39925bc24d3afcfb322a46a5884fadb9">m_Bias</a>.get();</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    }</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml#af7f0460d32511de0da525f1817d13e8c">SetAdditionalInfo</a>(descriptor);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> factory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a1c193739520e08f686b347ff795ad2fe">CreateFullyConnected</a>(descriptor, <a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#a30a858b2b26d651a066537e499fbf40d">PrepInfoAndDesc</a>(descriptor));</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classarmnn_1_1_fully_connected_layer.xhtml#ae23412fdfc6726dc1823a18f5e84f8a9">   41</a></span>&#160;<a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml">FullyConnectedLayer</a>* <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#ae23412fdfc6726dc1823a18f5e84f8a9">FullyConnectedLayer::Clone</a>(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph)<span class="keyword"> const</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">auto</span> layer = CloneBase&lt;FullyConnectedLayer&gt;(graph, <a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#ad32ac22bc72e28dfd6b466d143c8e262">m_Param</a>, <a class="code" href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">GetName</a>());</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a> = <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a> ? std::make_unique&lt;ScopedCpuTensorHandle&gt;(*m_Weight) : <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">if</span> (layer-&gt;m_Param.m_BiasEnabled)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        layer-&gt;m_Bias = <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a39925bc24d3afcfb322a46a5884fadb9">m_Bias</a> ? std::make_unique&lt;ScopedCpuTensorHandle&gt;(*m_Bias) : <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">return</span> std::move(layer);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classarmnn_1_1_fully_connected_layer.xhtml#a65ca562c882ad619684445a1402f415a">   54</a></span>&#160;std::vector&lt;TensorShape&gt; <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a65ca562c882ad619684445a1402f415a">FullyConnectedLayer::InferOutputShapes</a>(<span class="keyword">const</span> std::vector&lt;TensorShape&gt;&amp; inputShapes)<span class="keyword"> const</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(inputShapes.size() == 2);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inputShape = inputShapes[0];</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> weightShape = inputShapes[1];</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="comment">// Output for FC is [1, w[1]].</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batches = inputShape[0];</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dimIdx = <a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#ad32ac22bc72e28dfd6b466d143c8e262">m_Param</a>.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#a281fcaec86e17c97f7b8402633f6b55a">m_TransposeWeightMatrix</a> ? 0 : 1;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> std::vector&lt;TensorShape&gt;({ <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({batches, weightShape[dimIdx]})});</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classarmnn_1_1_fully_connected_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">   67</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">FullyConnectedLayer::ValidateTensorShapesFromInputs</a>()</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; outputShape = <a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml#a448afc716fda85394df1e8e5b7d530e8">VerifyShapeInferenceType</a>(outputShape, <a class="code" href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">m_ShapeInferenceMethod</a>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// check if we m_Weight data is not nullptr</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a> != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;FullyConnectedLayer: Weights data should not be null.&quot;</span>);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">auto</span> inferredShapes = <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a65ca562c882ad619684445a1402f415a">InferOutputShapes</a>({<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0).<a class="code" href="classarmnn_1_1_input_slot.xhtml#a3153abb7c0c0a84629079b2fac7db54f">GetConnection</a>()-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(),</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                             <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a>-&gt;GetTensorInfo().GetShape() });</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(inferredShapes.size() == 1);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(inferredShapes[0].GetDimensionality() == <a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">Dimensionality::Specified</a>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml#aeb2d638cc0e02c10075e015100996f2d">ValidateAndCopyShape</a>(outputShape, inferredShapes[0], <a class="code" href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">m_ShapeInferenceMethod</a>, <span class="stringliteral">&quot;FullyConnectedLayer&quot;</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classarmnn_1_1_fully_connected_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">   85</a></span>&#160;<a class="code" href="classarmnn_1_1_layer.xhtml#a585d59ec610af46a76487fd6c1c55ac1">Layer::ConstantTensors</a> <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">FullyConnectedLayer::GetConstantTensorsByRef</a>()</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;{</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">return</span> {<a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a>, <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a39925bc24d3afcfb322a46a5884fadb9">m_Bias</a>};</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classarmnn_1_1_fully_connected_layer.xhtml#a75a50f464326fefa605ea84ae2c9be85">   90</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a75a50f464326fefa605ea84ae2c9be85">FullyConnectedLayer::Accept</a>(<a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a>&amp; visitor)<span class="keyword"> const</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> weightsTensor(<a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a>-&gt;GetTensorInfo(), <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a>-&gt;Map(<span class="keyword">true</span>));</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a> optionalBiasTensor = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#a502c06a1b13e6d90a6cbf47c081f1444">GetParameters</a>().m_BiasEnabled)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> biasTensor(<a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a39925bc24d3afcfb322a46a5884fadb9">m_Bias</a>-&gt;GetTensorInfo(), <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a39925bc24d3afcfb322a46a5884fadb9">m_Bias</a>-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        optionalBiasTensor = <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>(biasTensor);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    visitor.<a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#ab93a48970564c6eabbc982a2116c1262">VisitFullyConnectedLayer</a>(<span class="keyword">this</span>, <a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#a502c06a1b13e6d90a6cbf47c081f1444">GetParameters</a>(), weightsTensor, optionalBiasTensor, <a class="code" href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">GetName</a>());</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classarmnn_1_1_fully_connected_layer.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">  104</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">FullyConnectedLayer::ExecuteStrategy</a>(<a class="code" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a>&amp; strategy)<span class="keyword"> const</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    std::vector&lt;armnn::ConstTensor&gt; constTensors { {<a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a>-&gt;GetTensorInfo(), <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a2664044e28e69309ea08ef385fe53903">m_Weight</a>-&gt;Map(<span class="keyword">true</span>)} };</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#a502c06a1b13e6d90a6cbf47c081f1444">GetParameters</a>().m_BiasEnabled)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        constTensors.emplace_back(<a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>(<a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a39925bc24d3afcfb322a46a5884fadb9">m_Bias</a>-&gt;GetTensorInfo(), <a class="code" href="classarmnn_1_1_fully_connected_layer.xhtml#a39925bc24d3afcfb322a46a5884fadb9">m_Bias</a>-&gt;Map(<span class="keyword">true</span>)));</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    strategy.<a class="code" href="classarmnn_1_1_i_strategy.xhtml#aad5bb4d8050fd428ff03ae6d81e3014c">ExecuteStrategy</a>(<span class="keyword">this</span>, <a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#a502c06a1b13e6d90a6cbf47c081f1444">GetParameters</a>(), constTensors, <a class="code" href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">GetName</a>());</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="_workload_data_8hpp_xhtml"><div class="ttname"><a href="_workload_data_8hpp.xhtml">WorkloadData.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_fully_connected_layer_xhtml_a75a50f464326fefa605ea84ae2c9be85"><div class="ttname"><a href="classarmnn_1_1_fully_connected_layer.xhtml#a75a50f464326fefa605ea84ae2c9be85">armnn::FullyConnectedLayer::Accept</a></div><div class="ttdeci">void Accept(ILayerVisitor &amp;visitor) const override</div><div class="ttdoc">Apply a visitor to this layer. </div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_8cpp_source.xhtml#l00090">FullyConnectedLayer.cpp:90</a></div></div>
<div class="ttc" id="classarmnn_1_1_fully_connected_layer_xhtml_adfa912d0c4c6c00f1af2cbfa799572b7"><div class="ttname"><a href="classarmnn_1_1_fully_connected_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">armnn::FullyConnectedLayer::CreateWorkload</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateWorkload(const IWorkloadFactory &amp;factory) const override</div><div class="ttdoc">Makes a workload for the FullyConnected type. </div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_8cpp_source.xhtml#l00022">FullyConnectedLayer.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_fully_connected_layer_xhtml_a65ca562c882ad619684445a1402f415a"><div class="ttname"><a href="classarmnn_1_1_fully_connected_layer.xhtml#a65ca562c882ad619684445a1402f415a">armnn::FullyConnectedLayer::InferOutputShapes</a></div><div class="ttdeci">std::vector&lt; TensorShape &gt; InferOutputShapes(const std::vector&lt; TensorShape &gt; &amp;inputShapes) const override</div><div class="ttdoc">By default returns inputShapes if the number of inputs are equal to number of outputs, otherwise infers the output shapes from given input shapes and layer properties. </div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_8cpp_source.xhtml#l00054">FullyConnectedLayer.cpp:54</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_with_parameters_xhtml_ad32ac22bc72e28dfd6b466d143c8e262"><div class="ttname"><a href="classarmnn_1_1_layer_with_parameters.xhtml#ad32ac22bc72e28dfd6b466d143c8e262">armnn::LayerWithParameters&lt; FullyConnectedDescriptor &gt;::m_Param</a></div><div class="ttdeci">FullyConnectedDescriptor m_Param</div><div class="ttdoc">The parameters for the layer (not including tensor-valued weights etc.). </div><div class="ttdef"><b>Definition:</b> <a href="_layer_with_parameters_8hpp_source.xhtml#l00050">LayerWithParameters.hpp:50</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_with_parameters_xhtml_a502c06a1b13e6d90a6cbf47c081f1444"><div class="ttname"><a href="classarmnn_1_1_layer_with_parameters.xhtml#a502c06a1b13e6d90a6cbf47c081f1444">armnn::LayerWithParameters&lt; FullyConnectedDescriptor &gt;::GetParameters</a></div><div class="ttdeci">const FullyConnectedDescriptor &amp; GetParameters() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_with_parameters_8hpp_source.xhtml#l00018">LayerWithParameters.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_fully_connected_layer_xhtml_a2664044e28e69309ea08ef385fe53903"><div class="ttname"><a href="classarmnn_1_1_fully_connected_layer.xhtml#a2664044e28e69309ea08ef385fe53903">armnn::FullyConnectedLayer::m_Weight</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_Weight</div><div class="ttdoc">A unique pointer to store Weight values. </div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_8hpp_source.xhtml#l00019">FullyConnectedLayer.hpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_queue_descriptor_xhtml_a3369b66d9316a773a41711e3f590c041"><div class="ttname"><a href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml#a3369b66d9316a773a41711e3f590c041">armnn::FullyConnectedQueueDescriptor::m_Weight</a></div><div class="ttdeci">const ConstCpuTensorHandle * m_Weight</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00173">WorkloadData.hpp:173</a></div></div>
<div class="ttc" id="_workload_factory_8hpp_xhtml"><div class="ttname"><a href="_workload_factory_8hpp.xhtml">WorkloadFactory.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_fully_connected_layer_xhtml_a46fc3fdd4b2a5dd6d184e57983cf20bc"><div class="ttname"><a href="classarmnn_1_1_fully_connected_layer.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">armnn::FullyConnectedLayer::ExecuteStrategy</a></div><div class="ttdeci">void ExecuteStrategy(IStrategy &amp;strategy) const override</div><div class="ttdoc">Apply a visitor to this layer. </div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_8cpp_source.xhtml#l00104">FullyConnectedLayer.cpp:104</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8hpp_source.xhtml#l00022">WorkloadFactory.hpp:22</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml_a281fcaec86e17c97f7b8402633f6b55a"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml#a281fcaec86e17c97f7b8402633f6b55a">armnn::FullyConnectedDescriptor::m_TransposeWeightMatrix</a></div><div class="ttdeci">bool m_TransposeWeightMatrix</div><div class="ttdoc">Enable/disable transpose weight matrix. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00404">Descriptors.hpp:404</a></div></div>
<div class="ttc" id="classarmnn_1_1_fully_connected_layer_xhtml_abe659a5afa7523f5dbc04bcba9b31f1a"><div class="ttname"><a href="classarmnn_1_1_fully_connected_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">armnn::FullyConnectedLayer::GetConstantTensorsByRef</a></div><div class="ttdeci">ConstantTensors GetConstantTensorsByRef() override</div><div class="ttdoc">Retrieve the handles to the constant values stored by the layer. </div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_8cpp_source.xhtml#l00085">FullyConnectedLayer.cpp:85</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_strategy_xhtml_aad5bb4d8050fd428ff03ae6d81e3014c"><div class="ttname"><a href="classarmnn_1_1_i_strategy.xhtml#aad5bb4d8050fd428ff03ae6d81e3014c">armnn::IStrategy::ExecuteStrategy</a></div><div class="ttdeci">virtual void ExecuteStrategy(const armnn::IConnectableLayer *layer, const armnn::BaseDescriptor &amp;descriptor, const std::vector&lt; armnn::ConstTensor &gt; &amp;constants, const char *name, const armnn::LayerBindingId id=0)=0</div></div>
<div class="ttc" id="classarmnn_1_1_fully_connected_layer_xhtml_a8c8f543d7e9729362c266d12ec169966"><div class="ttname"><a href="classarmnn_1_1_fully_connected_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">armnn::FullyConnectedLayer::ValidateTensorShapesFromInputs</a></div><div class="ttdeci">void ValidateTensorShapesFromInputs() override</div><div class="ttdoc">Check if the input tensor shape(s) will lead to a valid configuration of FullyConnectedLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_8cpp_source.xhtml#l00067">FullyConnectedLayer.cpp:67</a></div></div>
<div class="ttc" id="classarmnn_1_1_fully_connected_layer_xhtml_ae23412fdfc6726dc1823a18f5e84f8a9"><div class="ttname"><a href="classarmnn_1_1_fully_connected_layer.xhtml#ae23412fdfc6726dc1823a18f5e84f8a9">armnn::FullyConnectedLayer::Clone</a></div><div class="ttdeci">FullyConnectedLayer * Clone(Graph &amp;graph) const override</div><div class="ttdoc">Creates a dynamically-allocated copy of this layer. </div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_8cpp_source.xhtml#l00041">FullyConnectedLayer.cpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a448afc716fda85394df1e8e5b7d530e8"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a448afc716fda85394df1e8e5b7d530e8">armnn::Layer::VerifyShapeInferenceType</a></div><div class="ttdeci">void VerifyShapeInferenceType(const TensorShape &amp;outputShape, ShapeInferenceMethod shapeInferenceMethod)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00432">Layer.cpp:432</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__software__tools_8dox_source.xhtml#l00006">01_00_software_tools.dox:6</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">armnn::FullyConnectedQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00165">WorkloadData.hpp:165</a></div></div>
<div class="ttc" id="classarmnn_1_1_fully_connected_layer_xhtml_a88ae76d1f14ba0eaf81701eb38e3682a"><div class="ttname"><a href="classarmnn_1_1_fully_connected_layer.xhtml#a88ae76d1f14ba0eaf81701eb38e3682a">armnn::FullyConnectedLayer::FullyConnectedLayer</a></div><div class="ttdeci">FullyConnectedLayer(const FullyConnectedDescriptor &amp;param, const char *name)</div><div class="ttdoc">Constructor to create a FullyConnectedLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_8cpp_source.xhtml#l00017">FullyConnectedLayer.cpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Dimensionality::Specified</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_input_slot_xhtml_a3153abb7c0c0a84629079b2fac7db54f"><div class="ttname"><a href="classarmnn_1_1_input_slot.xhtml#a3153abb7c0c0a84629079b2fac7db54f">armnn::InputSlot::GetConnection</a></div><div class="ttdeci">const IOutputSlot * GetConnection() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00199">Layer.hpp:199</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_aeb2d638cc0e02c10075e015100996f2d"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aeb2d638cc0e02c10075e015100996f2d">armnn::Layer::ValidateAndCopyShape</a></div><div class="ttdeci">void ValidateAndCopyShape(const TensorShape &amp;outputShape, const TensorShape &amp;inferredShape, const ShapeInferenceMethod shapeInferenceMethod, const std::string &amp;layerName, const unsigned int outputSlotIndex=0)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00392">Layer.cpp:392</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5739b990434e95ee13ff6d99824ffaf3"><div class="ttname"><a href="namespacearmnn.xhtml#a5739b990434e95ee13ff6d99824ffaf3">armnn::FullyConnected</a></div><div class="ttdeci">void FullyConnected(const TensorShape &amp;rInputShape, Decoder&lt; float &gt; &amp;rInputDecoder, const TensorShape &amp;rOutputShape, Encoder&lt; float &gt; &amp;rOutputEncoder, const TensorShape &amp;rWeightsShape, Decoder&lt; float &gt; &amp;rWeightDecoder, Decoder&lt; float &gt; &amp;rBiasDecoder, const bool biasEnabled, const unsigned int K, const bool transposeWeights)</div><div class="ttdoc">Performs a matrix multiplication and optionally adds a bias. </div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_fully_connected_8cpp_source.xhtml#l00013">FullyConnected.cpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_strategy_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_strategy.xhtml">armnn::IStrategy</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_strategy_8hpp_source.xhtml#l00013">IStrategy.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_acf8b8e23bf647836592982f97088d375"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">armnn::Layer::GetInputSlot</a></div><div class="ttdeci">const InputSlot &amp; GetInputSlot(unsigned int index) const override</div><div class="ttdoc">Get a const input slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00316">Layer.hpp:316</a></div></div>
<div class="ttc" id="_types_utils_8hpp_xhtml"><div class="ttname"><a href="_types_utils_8hpp.xhtml">TypesUtils.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_ab93a48970564c6eabbc982a2116c1262"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#ab93a48970564c6eabbc982a2116c1262">armnn::ILayerVisitor::VisitFullyConnectedLayer</a></div><div class="ttdeci">virtual void VisitFullyConnectedLayer(const IConnectableLayer *layer, const FullyConnectedDescriptor &amp;fullyConnectedDescriptor, const ConstTensor &amp;weights, const Optional&lt; ConstTensor &gt; &amp;biases, const char *name=nullptr)=0</div><div class="ttdoc">Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is...</div></div>
<div class="ttc" id="classarmnn_1_1_fully_connected_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_fully_connected_layer.xhtml">armnn::FullyConnectedLayer</a></div><div class="ttdoc">This layer represents a fully connected operation. </div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_8hpp_source.xhtml#l00015">FullyConnectedLayer.hpp:15</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a></div><div class="ttdoc">A FullyConnectedDescriptor for the FullyConnectedLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00389">Descriptors.hpp:389</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::FullyConnectedDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00402">Descriptors.hpp:402</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00314">Tensor.hpp:314</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00029">Graph.hpp:29</a></div></div>
<div class="ttc" id="_cpu_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="_cpu_tensor_handle_8hpp.xhtml">CpuTensorHandle.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_af7f0460d32511de0da525f1817d13e8c"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#af7f0460d32511de0da525f1817d13e8c">armnn::Layer::SetAdditionalInfo</a></div><div class="ttdeci">void SetAdditionalInfo(QueueDescriptor &amp;descriptor) const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00245">Layer.cpp:245</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="_fully_connected_layer_8hpp_xhtml"><div class="ttname"><a href="_fully_connected_layer_8hpp.xhtml">FullyConnectedLayer.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_fully_connected_layer_xhtml_a39925bc24d3afcfb322a46a5884fadb9"><div class="ttname"><a href="classarmnn_1_1_fully_connected_layer.xhtml#a39925bc24d3afcfb322a46a5884fadb9">armnn::FullyConnectedLayer::m_Bias</a></div><div class="ttdeci">std::unique_ptr&lt; ScopedCpuTensorHandle &gt; m_Bias</div><div class="ttdoc">A unique pointer to store Bias values. </div><div class="ttdef"><b>Definition:</b> <a href="_fully_connected_layer_8hpp_source.xhtml#l00021">FullyConnectedLayer.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_with_parameters_xhtml_a30a858b2b26d651a066537e499fbf40d"><div class="ttname"><a href="classarmnn_1_1_layer_with_parameters.xhtml#a30a858b2b26d651a066537e499fbf40d">armnn::LayerWithParameters&lt; FullyConnectedDescriptor &gt;::PrepInfoAndDesc</a></div><div class="ttdeci">WorkloadInfo PrepInfoAndDesc(QueueDescriptor &amp;descriptor) const</div><div class="ttdoc">Helper function to reduce duplication in *LayerCreateWorkload. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_with_parameters_8hpp_source.xhtml#l00043">LayerWithParameters.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml">armnn::ILayerVisitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_visitor_8hpp_source.xhtml#l00016">ILayerVisitor.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a0e36688a43c35668d8db5257274c68fe"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">armnn::Layer::GetOutputSlot</a></div><div class="ttdeci">const OutputSlot &amp; GetOutputSlot(unsigned int index=0) const override</div><div class="ttdoc">Get the const output slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00318">Layer.hpp:318</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a9943775a364fc4ab53b85ac88f311886"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">armnn::IOutputSlot::GetTensorInfo</a></div><div class="ttdeci">virtual const TensorInfo &amp; GetTensorInfo() const =0</div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a7ddf0cf6f620d59c10e63495ace795d0"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">armnn::Layer::GetName</a></div><div class="ttdeci">const char * GetName() const override</div><div class="ttdoc">Returns the name of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00311">Layer.hpp:311</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a1c193739520e08f686b347ff795ad2fe"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a1c193739520e08f686b347ff795ad2fe">armnn::IWorkloadFactory::CreateFullyConnected</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateFullyConnected(const FullyConnectedQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01440">WorkloadFactory.cpp:1440</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_with_parameters_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer_with_parameters.xhtml">armnn::LayerWithParameters</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_with_parameters_8hpp_source.xhtml#l00013">LayerWithParameters.hpp:13</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_queue_descriptor_xhtml_ab3437cee6b0687812104fc1b37cbe8b3"><div class="ttname"><a href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml#ab3437cee6b0687812104fc1b37cbe8b3">armnn::FullyConnectedQueueDescriptor::m_Bias</a></div><div class="ttdeci">const ConstCpuTensorHandle * m_Bias</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00174">WorkloadData.hpp:174</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a585d59ec610af46a76487fd6c1c55ac1"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a585d59ec610af46a76487fd6c1c55ac1">armnn::Layer::ConstantTensors</a></div><div class="ttdeci">std::vector&lt; std::reference_wrapper&lt; std::unique_ptr&lt; ScopedCpuTensorHandle &gt; &gt;&gt; ConstantTensors</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00393">Layer.hpp:393</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ada2ad7d1caeeb4ef6195c8925fad6a65"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">armnn::OutputSlot::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00063">Layer.cpp:63</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_afe508761cc8318b15329ba4acf7fbfec"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">armnn::Layer::m_ShapeInferenceMethod</a></div><div class="ttdeci">ShapeInferenceMethod m_ShapeInferenceMethod</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00408">Layer.hpp:408</a></div></div>
<div class="ttc" id="_layer_clone_base_8hpp_xhtml"><div class="ttname"><a href="_layer_clone_base_8hpp.xhtml">LayerCloneBase.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">armnn::LayerType</a></div><div class="ttdeci">LayerType</div><div class="ttdoc">When adding a new layer, adapt also the LastLayer enum value in the enum class LayerType below...</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00419">Types.hpp:419</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9da6642ce0fd5a8c83524f1b621275be.xhtml">layers</a></li><li class="navelem"><a class="el" href="_fully_connected_layer_8cpp.xhtml">FullyConnectedLayer.cpp</a></li>
    <li class="footer">Generated on Thu Feb 25 2021 17:27:28 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
