<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnTfLiteParser/test/ParserFlatbuffersFixture.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_parser_flatbuffers_fixture_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ParserFlatbuffersFixture.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_parser_flatbuffers_fixture_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_schema_8hpp.xhtml">Schema.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_descriptors_8hpp.xhtml">armnn/Descriptors.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_runtime_8hpp.xhtml">armnn/IRuntime.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_utils_8hpp.xhtml">armnn/TypesUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_backend_registry_8hpp.xhtml">armnn/BackendRegistry.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_assert_8hpp.xhtml">armnn/utility/Assert.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_tf_lite_parser_8hpp.xhtml">armnnTfLiteParser/ITfLiteParser.hpp</a>&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a>&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_helpers_8hpp.xhtml">test/TensorHelpers.hpp</a>&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;fmt/format.h&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;flatbuffers/idl.h&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;flatbuffers/util.h&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;flatbuffers/flexbuffers.h&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;schema_generated.h&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml">armnnTfLiteParser::ITfLiteParser</a>;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn_tf_lite_parser.xhtml#af69bedce3c37be895f75146016ba8a17">armnnTfLiteParser::ITfLiteParserPtr</a>;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="_parser_flatbuffers_fixture_8hpp.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">   35</a></span>&#160;<span class="keyword">using</span> <a class="code" href="_parser_flatbuffers_serialize_fixture_8hpp.xhtml#a15c20a0693cd3fc4d85565e2f920d8ef">TensorRawPtr</a> = <span class="keyword">const</span> tflite::TensorT *;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml">   36</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct_parser_flatbuffers_fixture.xhtml">ParserFlatbuffersFixture</a></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#ad748cc696b0f92b478ba4f145e966754">   38</a></span>&#160;    <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad748cc696b0f92b478ba4f145e966754">ParserFlatbuffersFixture</a>() :</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad30eda63c4e66a0e2e3f538a2181f4ac">m_Parser</a>(nullptr, &amp;<a class="code" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml">ITfLiteParser</a>::Destroy),</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>(<a class="code" href="namespacearmnn.xhtml">armnn</a>::IRuntime::Create(<a class="code" href="namespacearmnn.xhtml">armnn</a>::IRuntime::CreationOptions())),</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>(-1)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        ITfLiteParser::TfLiteParserOptions options;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        options.m_StandInLayerForUnsupported = <span class="keyword">true</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        options.m_InferAndValidate = <span class="keyword">true</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad30eda63c4e66a0e2e3f538a2181f4ac">m_Parser</a>.reset(ITfLiteParser::CreateRaw(<a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;ITfLiteParser::TfLiteParserOptions&gt;</a>(options)));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#a9fbc789fd0aca759cb40737fdeb8ed63">   50</a></span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a9fbc789fd0aca759cb40737fdeb8ed63">m_GraphBinary</a>;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#a803c86dca3acef653c1cc481a27be7a9">   51</a></span>&#160;    std::string          <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a803c86dca3acef653c1cc481a27be7a9">m_JsonString</a>;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#ad30eda63c4e66a0e2e3f538a2181f4ac">   52</a></span>&#160;    <a class="code" href="namespacearmnn_tf_lite_parser.xhtml#af69bedce3c37be895f75146016ba8a17">ITfLiteParserPtr</a>     <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad30eda63c4e66a0e2e3f538a2181f4ac">m_Parser</a>;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">   53</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a>   <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">   54</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a>     <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">    /// If the single-input-single-output overload of Setup() is called, these will store the input and output name</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    /// so they don&#39;t need to be passed to the single-input-single-output overload of RunTest().</span></div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">   58</a></span>&#160;<span class="comment"></span>    std::string <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">m_SingleInputName</a>;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">   59</a></span>&#160;    std::string <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">m_SingleOutputName</a>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">   61</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">Setup</a>()</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordtype">bool</span> ok = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a69fc8e7f42386fa67732cb8c98d8b024">ReadStringToBinary</a>();</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">if</span> (!ok) {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;LoadNetwork failed while reading binary input&quot;</span>);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network =</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                m_Parser-&gt;CreateNetworkFromBinary(m_GraphBinary);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">if</span> (!network) {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;The parser failed to create an ArmNN network&quot;</span>);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">auto</span> optimized = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, { <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a> },</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                  m_Runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        std::string errorMessage;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a> ret = m_Runtime-&gt;LoadNetwork(m_NetworkIdentifier, move(optimized), errorMessage);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">if</span> (ret != <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a>)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                fmt::format(<span class="stringliteral">&quot;The runtime failed to load the network. &quot;</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                            <span class="stringliteral">&quot;Error was: {}. in {} [{}:{}]&quot;</span>,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                            errorMessage,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                            __func__,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                            __FILE__,</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                            __LINE__));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#a2bb4ea256fbbf6d53068ca93bb4bc95c">   93</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a2bb4ea256fbbf6d53068ca93bb4bc95c">SetupSingleInputSingleOutput</a>(<span class="keyword">const</span> std::string&amp; inputName, <span class="keyword">const</span> std::string&amp; outputName)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="comment">// Store the input and output name so they don&#39;t need to be passed to the single-input-single-output RunTest().</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        m_SingleInputName = inputName;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        m_SingleOutputName = outputName;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">Setup</a>();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#a69fc8e7f42386fa67732cb8c98d8b024">  101</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a69fc8e7f42386fa67732cb8c98d8b024">ReadStringToBinary</a>()</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        std::string schemafile(<a class="code" href="_schema_8hpp.xhtml#a6747d3548926a8130c42fb3398027acf">g_TfLiteSchemaText</a>, <a class="code" href="_schema_8hpp.xhtml#a6747d3548926a8130c42fb3398027acf">g_TfLiteSchemaText</a> + <a class="code" href="_schema_8hpp.xhtml#abe07dadc9cf942cbf847470102a8980e">g_TfLiteSchemaText_len</a>);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="comment">// parse schema first, so we can use it to parse the data after</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        flatbuffers::Parser parser;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordtype">bool</span> ok = parser.Parse(schemafile.c_str());</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(ok, <span class="stringliteral">&quot;Failed to parse schema file&quot;</span>);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        ok &amp;= parser.Parse(m_JsonString.c_str());</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(ok, <span class="stringliteral">&quot;Failed to parse json input&quot;</span>);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">if</span> (!ok)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keyword">const</span> uint8_t * bufferPtr = parser.builder_.GetBufferPointer();</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordtype">size_t</span> size = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(parser.builder_.GetSize());</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            m_GraphBinary.assign(bufferPtr, bufferPtr+size);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">return</span> ok;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">    /// Executes the network with the given input tensor and checks the result against the given output tensor.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">    /// This assumes the network has a single input and a single output.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;              <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnType&gt;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a">RunTest</a>(<span class="keywordtype">size_t</span> subgraphId,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                 <span class="keyword">const</span> std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType&gt;</a>&gt;&amp; inputData,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                 <span class="keyword">const</span> std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType&gt;</a>&gt;&amp; expectedOutputData);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">    /// Executes the network with the given input tensors and checks the results against the given output tensors.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">    /// This overload supports multiple inputs and multiple outputs, identified by name.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;              <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnType&gt;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a">RunTest</a>(<span class="keywordtype">size_t</span> subgraphId,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                 <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType&gt;</a>&gt;&gt;&amp; inputData,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                 <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType&gt;</a>&gt;&gt;&amp; expectedOutputData);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">    /// Multiple Inputs, Multiple Outputs w/ Variable Datatypes and different dimension sizes.</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">    /// Executes the network with the given input tensors and checks the results against the given output tensors.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">    /// This overload supports multiple inputs and multiple outputs, identified by name along with the allowance for</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">    /// the input datatype to be different to the output</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;              <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnType1,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;              <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnType2&gt;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a">RunTest</a>(<span class="keywordtype">size_t</span> subgraphId,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                 <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType1&gt;</a>&gt;&gt;&amp; inputData,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                 <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType2&gt;</a>&gt;&gt;&amp; expectedOutputData,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                 <span class="keywordtype">bool</span> isDynamic = <span class="keyword">false</span>);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">    /// Multiple Inputs with different DataTypes, Multiple Outputs w/ Variable DataTypes</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">    /// Executes the network with the given input tensors and checks the results against the given output tensors.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">    /// This overload supports multiple inputs and multiple outputs, identified by name along with the allowance for</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">    /// the input datatype to be different to the output</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> inputType1,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> inputType2,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> outputType&gt;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a">RunTest</a>(<span class="keywordtype">size_t</span> subgraphId,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                 <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;inputType1&gt;</a>&gt;&gt;&amp; input1Data,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                 <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;inputType2&gt;</a>&gt;&gt;&amp; input2Data,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                 <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;outputType&gt;</a>&gt;&gt;&amp; expectedOutputData);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">    /// Multiple Inputs, Multiple Outputs w/ Variable Datatypes and different dimension sizes.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">    /// Executes the network with the given input tensors and checks the results against the given output tensors.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">    /// This overload supports multiple inputs and multiple outputs, identified by name along with the allowance for</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">    /// the input datatype to be different to the output</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"></span>    <span class="keyword">template</span>&lt;<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnType1,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;             <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnType2&gt;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a">RunTest</a>(std::size_t subgraphId,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                 <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType1&gt;</a>&gt;&gt;&amp; inputData,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                 <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType2&gt;</a>&gt;&gt;&amp; expectedOutputData);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#ab77021b45ae36342092fac96ec3534b7">  178</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> std::string <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ab77021b45ae36342092fac96ec3534b7">GenerateDetectionPostProcessJsonString</a>(</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a>&amp; descriptor)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        flexbuffers::Builder detectPostProcess;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        detectPostProcess.Map([&amp;]() {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            detectPostProcess.Bool(<span class="stringliteral">&quot;use_regular_nms&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">m_UseRegularNms</a>);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            detectPostProcess.Int(<span class="stringliteral">&quot;max_detections&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">m_MaxDetections</a>);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            detectPostProcess.Int(<span class="stringliteral">&quot;max_classes_per_detection&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">m_MaxClassesPerDetection</a>);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            detectPostProcess.Int(<span class="stringliteral">&quot;detections_per_class&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7e2f87544b8bc7e497e1dec8d3ca4055">m_DetectionsPerClass</a>);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            detectPostProcess.Int(<span class="stringliteral">&quot;num_classes&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">m_NumClasses</a>);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            detectPostProcess.Float(<span class="stringliteral">&quot;nms_score_threshold&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a4392dd6b4862cc9cf95ae8f1001ba592">m_NmsScoreThreshold</a>);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            detectPostProcess.Float(<span class="stringliteral">&quot;nms_iou_threshold&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a53c8a7f33a40e1e240256bcfcf41b101">m_NmsIouThreshold</a>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            detectPostProcess.Float(<span class="stringliteral">&quot;h_scale&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#aa61510cbd529870182e918ac6e8b9d72">m_ScaleH</a>);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            detectPostProcess.Float(<span class="stringliteral">&quot;w_scale&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ab509802c659de19929f18bad14a35c58">m_ScaleW</a>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            detectPostProcess.Float(<span class="stringliteral">&quot;x_scale&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae64523937ea910030ad66fee6fddd51f">m_ScaleX</a>);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            detectPostProcess.Float(<span class="stringliteral">&quot;y_scale&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7a2156ec7d9c012ce00bbcc6afcb9028">m_ScaleY</a>);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        });</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        detectPostProcess.Finish();</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="comment">// Create JSON string</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        std::stringstream strStream;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        std::vector&lt;uint8_t&gt; buffer = detectPostProcess.GetBuffer();</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        std::copy(buffer.begin(), buffer.end(),std::ostream_iterator&lt;int&gt;(strStream,<span class="stringliteral">&quot;,&quot;</span>));</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">return</span> strStream.str();</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#a131f9fe1b625ce21cfe4285136ecfa20">  205</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a131f9fe1b625ce21cfe4285136ecfa20">CheckTensors</a>(<span class="keyword">const</span> <a class="code" href="_parser_flatbuffers_serialize_fixture_8hpp.xhtml#a15c20a0693cd3fc4d85565e2f920d8ef">TensorRawPtr</a>&amp; tensors, <span class="keywordtype">size_t</span> shapeSize, <span class="keyword">const</span> std::vector&lt;int32_t&gt;&amp; shape,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                      tflite::TensorType tensorType, uint32_t buffer, <span class="keyword">const</span> std::string&amp; name,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                      <span class="keyword">const</span> std::vector&lt;float&gt;&amp; min, <span class="keyword">const</span> std::vector&lt;float&gt;&amp; max,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                      <span class="keyword">const</span> std::vector&lt;float&gt;&amp; scale, <span class="keyword">const</span> std::vector&lt;int64_t&gt;&amp; zeroPoint)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        BOOST_CHECK(tensors);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        BOOST_CHECK_EQUAL(shapeSize, tensors-&gt;shape.size());</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        BOOST_CHECK_EQUAL_COLLECTIONS(shape.begin(), shape.end(), tensors-&gt;shape.begin(), tensors-&gt;shape.end());</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        BOOST_CHECK_EQUAL(tensorType, tensors-&gt;type);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        BOOST_CHECK_EQUAL(buffer, tensors-&gt;buffer);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        BOOST_CHECK_EQUAL(name, tensors-&gt;name);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        BOOST_CHECK(tensors-&gt;quantization);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        BOOST_CHECK_EQUAL_COLLECTIONS(min.begin(), min.end(), tensors-&gt;quantization.get()-&gt;min.begin(),</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                      tensors-&gt;quantization.get()-&gt;min.end());</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        BOOST_CHECK_EQUAL_COLLECTIONS(max.begin(), max.end(), tensors-&gt;quantization.get()-&gt;max.begin(),</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                      tensors-&gt;quantization.get()-&gt;max.end());</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        BOOST_CHECK_EQUAL_COLLECTIONS(scale.begin(), scale.end(), tensors-&gt;quantization.get()-&gt;scale.begin(),</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                      tensors-&gt;quantization.get()-&gt;scale.end());</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        BOOST_CHECK_EQUAL_COLLECTIONS(zeroPoint.begin(), zeroPoint.end(),</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                      tensors-&gt;quantization.get()-&gt;zero_point.begin(),</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                      tensors-&gt;quantization.get()-&gt;zero_point.end());</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">    /// Fills the InputTensors with given input data</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;armnn::DataType dataType&gt;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordtype">void</span> FillInputTensors(<a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a>&amp; inputTensors,</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                          <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;dataType&gt;</a>&gt;&gt;&amp; inputData,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                          <span class="keywordtype">size_t</span> subgraphId);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;};</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">/// Fills the InputTensors with given input data</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;armnn::DataType dataType&gt;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keywordtype">void</span> ParserFlatbuffersFixture::FillInputTensors(</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                  <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a>&amp; inputTensors,</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                  <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;dataType&gt;</a>&gt;&gt;&amp; inputData,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                  <span class="keywordtype">size_t</span> subgraphId)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;{</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : inputData)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad30eda63c4e66a0e2e3f538a2181f4ac">m_Parser</a>-&gt;GetNetworkInputBindingInfo(subgraphId, it.first);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a>(bindingInfo.second, dataType);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        inputTensors.push_back({ bindingInfo.first, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(bindingInfo.second, it.second.data()) });</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    }</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;}</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">/// Single Input, Single Output</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">/// Executes the network with the given input tensor and checks the result against the given output tensor.</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">/// This overload assumes the network has a single input and a single output.</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> armnnType&gt;</div><div class="line"><a name="l00256"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a">  256</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a">ParserFlatbuffersFixture::RunTest</a>(<span class="keywordtype">size_t</span> subgraphId,</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                       <span class="keyword">const</span> std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnnType&gt;</a>&gt;&amp; inputData,</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                       <span class="keyword">const</span> std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnnType&gt;</a>&gt;&amp; expectedOutputData)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;{</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    RunTest&lt;NumOutputDimensions, armnnType&gt;(subgraphId,</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                            { { <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">m_SingleInputName</a>, inputData } },</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                            { { <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">m_SingleOutputName</a>, expectedOutputData } });</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">/// Multiple Inputs, Multiple Outputs</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">/// Executes the network with the given input tensors and checks the results against the given output tensors.</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">/// This overload supports multiple inputs and multiple outputs, identified by name.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> armnnType&gt;</div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#a515ada4931d7b8d8f9c9b84d1090ada1">  270</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a">ParserFlatbuffersFixture::RunTest</a>(<span class="keywordtype">size_t</span> subgraphId,</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnnType&gt;</a>&gt;&gt;&amp; inputData,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnnType&gt;</a>&gt;&gt;&amp; expectedOutputData)</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;{</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    RunTest&lt;NumOutputDimensions, armnnType, armnnType&gt;(subgraphId, inputData, expectedOutputData);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">/// Multiple Inputs, Multiple Outputs w/ Variable Datatypes</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">/// Executes the network with the given input tensors and checks the results against the given output tensors.</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">/// This overload supports multiple inputs and multiple outputs, identified by name along with the allowance for</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">/// the input datatype to be different to the output</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> armnnType1,</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> armnnType2&gt;</div><div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#a4bd9d97856a0c52dc07afdea7e7831c9">  284</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a">ParserFlatbuffersFixture::RunTest</a>(<span class="keywordtype">size_t</span> subgraphId,</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnnType1&gt;</a>&gt;&gt;&amp; inputData,</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnnType2&gt;</a>&gt;&gt;&amp; expectedOutputData,</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordtype">bool</span> isDynamic)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;{</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">using</span> DataType2 = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnnType2&gt;</a>;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="comment">// Setup the armnn input tensors from the given vectors.</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    FillInputTensors&lt;armnnType1&gt;(inputTensors, inputData, subgraphId);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">// Allocate storage for the output tensors to be written to and setup the armnn output tensors.</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    std::map&lt;std::string, boost::multi_array&lt;DataType2, NumOutputDimensions&gt;&gt; outputStorage;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> outputBindingId = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad30eda63c4e66a0e2e3f538a2181f4ac">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(subgraphId, it.first).first;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;GetOutputTensorInfo(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, outputBindingId);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="comment">// Check that output tensors have correct number of dimensions (NumOutputDimensions specified in test)</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keyword">auto</span> outputNumDimensions = outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        BOOST_CHECK_MESSAGE((outputNumDimensions == NumOutputDimensions),</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            fmt::format(<span class="stringliteral">&quot;Number of dimensions expected {}, but got {} for output layer {}&quot;</span>,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                        NumOutputDimensions,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                        outputNumDimensions,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                        it.first));</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a>(outputTensorInfo, armnnType2);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        outputStorage.emplace(it.first, MakeTensor&lt;DataType2, NumOutputDimensions&gt;(outputTensorInfo));</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        outputTensors.push_back(</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                { outputBindingId, <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(outputTensorInfo, outputStorage.at(it.first).data()) });</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    }</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;EnqueueWorkload(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, inputTensors, outputTensors);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="comment">// Compare each output tensor to the expected values</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    {</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad30eda63c4e66a0e2e3f538a2181f4ac">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(subgraphId, it.first);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="keyword">auto</span> outputExpected = MakeTensor&lt;DataType2, NumOutputDimensions&gt;(bindingInfo.second, it.second, isDynamic);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        BOOST_TEST(<a class="code" href="_tensor_helpers_8hpp.xhtml#aa5a4b75c5fa1d312b4f3615b2315ff58">CompareTensors</a>(outputExpected, outputStorage[it.first], <span class="keyword">false</span>, isDynamic));</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    }</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">/// Multiple Inputs, Multiple Outputs w/ Variable Datatypes and different dimension sizes.</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">/// Executes the network with the given input tensors and checks the results against the given output tensors.</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">/// This overload supports multiple inputs and multiple outputs, identified by name along with the allowance for</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">/// the input datatype to be different to the output.</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> armnnType1,</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> armnnType2&gt;</div><div class="line"><a name="l00334"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#a603fc6ee4530690774de844a399dbc06">  334</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a">ParserFlatbuffersFixture::RunTest</a>(std::size_t subgraphId,</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnnType1&gt;</a>&gt;&gt;&amp; inputData,</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnnType2&gt;</a>&gt;&gt;&amp; expectedOutputData)</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;{</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">using</span> DataType2 = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnnType2&gt;</a>;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="comment">// Setup the armnn input tensors from the given vectors.</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    FillInputTensors&lt;armnnType1&gt;(inputTensors, inputData, subgraphId);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    outputTensors.reserve(expectedOutputData.size());</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    std::map&lt;std::string, std::vector&lt;DataType2&gt;&gt; outputStorage;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    {</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad30eda63c4e66a0e2e3f538a2181f4ac">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(subgraphId, it.first);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a>(bindingInfo.second, armnnType2);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        std::vector&lt;DataType2&gt; out(it.second.size());</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        outputStorage.emplace(it.first, out);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        outputTensors.push_back({ bindingInfo.first,</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                  <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(bindingInfo.second,</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                                  outputStorage.at(it.first).data()) });</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;EnqueueWorkload(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, inputTensors, outputTensors);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="comment">// Checks the results.</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        std::vector&lt;armnn::ResolveType&lt;armnnType2&gt;&gt; out = outputStorage.at(it.first);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        {</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; out.size(); ++i)</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            {</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                BOOST_TEST(it.second[i] == out[i], boost::test_tools::tolerance(0.000001f));</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            }</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        }</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    }</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;}</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">/// Multiple Inputs with different DataTypes, Multiple Outputs w/ Variable DataTypes</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">/// Executes the network with the given input tensors and checks the results against the given output tensors.</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">/// This overload supports multiple inputs and multiple outputs, identified by name along with the allowance for</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">/// the input datatype to be different to the output</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> inputType1,</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> inputType2,</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> outputType&gt;</div><div class="line"><a name="l00382"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_fixture.xhtml#a7c5b6cc5f5d14210b60323913d2b8841">  382</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a">ParserFlatbuffersFixture::RunTest</a>(<span class="keywordtype">size_t</span> subgraphId,</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;inputType1&gt;</a>&gt;&gt;&amp; input1Data,</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;inputType2&gt;</a>&gt;&gt;&amp; input2Data,</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;<a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;outputType&gt;</a>&gt;&gt;&amp; expectedOutputData)</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;{</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keyword">using</span> DataType2 = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;outputType&gt;</a>;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="comment">// Setup the armnn input tensors from the given vectors.</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    FillInputTensors&lt;inputType1&gt;(inputTensors, input1Data, subgraphId);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    FillInputTensors&lt;inputType2&gt;(inputTensors, input2Data, subgraphId);</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="comment">// Allocate storage for the output tensors to be written to and setup the armnn output tensors.</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    std::map&lt;std::string, boost::multi_array&lt;DataType2, NumOutputDimensions&gt;&gt; outputStorage;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    {</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> outputBindingId = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad30eda63c4e66a0e2e3f538a2181f4ac">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(subgraphId, it.first).first;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;GetOutputTensorInfo(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, outputBindingId);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="comment">// Check that output tensors have correct number of dimensions (NumOutputDimensions specified in test)</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keyword">auto</span> outputNumDimensions = outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        BOOST_CHECK_MESSAGE((outputNumDimensions == NumOutputDimensions),</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            fmt::format(<span class="stringliteral">&quot;Number of dimensions expected {}, but got {} for output layer {}&quot;</span>,</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                        NumOutputDimensions,</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                        outputNumDimensions,</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                        it.first));</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a>(outputTensorInfo, outputType);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        outputStorage.emplace(it.first, MakeTensor&lt;DataType2, NumOutputDimensions&gt;(outputTensorInfo));</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        outputTensors.push_back(</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                { outputBindingId, <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(outputTensorInfo, outputStorage.at(it.first).data()) });</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;EnqueueWorkload(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, inputTensors, outputTensors);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="comment">// Compare each output tensor to the expected values</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    {</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad30eda63c4e66a0e2e3f538a2181f4ac">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(subgraphId, it.first);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <span class="keyword">auto</span> outputExpected = MakeTensor&lt;DataType2, NumOutputDimensions&gt;(bindingInfo.second, it.second);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        BOOST_TEST(<a class="code" href="_tensor_helpers_8hpp.xhtml#aa5a4b75c5fa1d312b4f3615b2315ff58">CompareTensors</a>(outputExpected, outputStorage[it.first], <span class="keyword">false</span>));</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    }</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;}</div><div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a0b81fa34e5ca505b9880755f702fafe7"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">ParserFlatbuffersFixture::m_NetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_NetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00054">ParserFlatbuffersFixture.hpp:54</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a803c86dca3acef653c1cc481a27be7a9"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a803c86dca3acef653c1cc481a27be7a9">ParserFlatbuffersFixture::m_JsonString</a></div><div class="ttdeci">std::string m_JsonString</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00051">ParserFlatbuffersFixture.hpp:51</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ab509802c659de19929f18bad14a35c58"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ab509802c659de19929f18bad14a35c58">armnn::DetectionPostProcessDescriptor::m_ScaleW</a></div><div class="ttdeci">float m_ScaleW</div><div class="ttdoc">Center size encoding scale weight. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00561">Descriptors.hpp:561</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_ab77021b45ae36342092fac96ec3534b7"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#ab77021b45ae36342092fac96ec3534b7">ParserFlatbuffersFixture::GenerateDetectionPostProcessJsonString</a></div><div class="ttdeci">static std::string GenerateDetectionPostProcessJsonString(const armnn::DetectionPostProcessDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00178">ParserFlatbuffersFixture.hpp:178</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae64523937ea910030ad66fee6fddd51f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae64523937ea910030ad66fee6fddd51f">armnn::DetectionPostProcessDescriptor::m_ScaleX</a></div><div class="ttdeci">float m_ScaleX</div><div class="ttdoc">Center size encoding scale x. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00557">Descriptors.hpp:557</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_ad748cc696b0f92b478ba4f145e966754"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#ad748cc696b0f92b478ba4f145e966754">ParserFlatbuffersFixture::ParserFlatbuffersFixture</a></div><div class="ttdeci">ParserFlatbuffersFixture()</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00038">ParserFlatbuffersFixture.hpp:38</a></div></div>
<div class="ttc" id="_tensor_helpers_8hpp_xhtml_aa5a4b75c5fa1d312b4f3615b2315ff58"><div class="ttname"><a href="_tensor_helpers_8hpp.xhtml#aa5a4b75c5fa1d312b4f3615b2315ff58">CompareTensors</a></div><div class="ttdeci">boost::test_tools::predicate_result CompareTensors(const boost::multi_array&lt; T, n &gt; &amp;a, const boost::multi_array&lt; T, n &gt; &amp;b, bool compareBoolean=false, bool isDynamic=false)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_helpers_8hpp_source.xhtml#l00073">TensorHelpers.hpp:73</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a131f9fe1b625ce21cfe4285136ecfa20"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a131f9fe1b625ce21cfe4285136ecfa20">ParserFlatbuffersFixture::CheckTensors</a></div><div class="ttdeci">void CheckTensors(const TensorRawPtr &amp;tensors, size_t shapeSize, const std::vector&lt; int32_t &gt; &amp;shape, tflite::TensorType tensorType, uint32_t buffer, const std::string &amp;name, const std::vector&lt; float &gt; &amp;min, const std::vector&lt; float &gt; &amp;max, const std::vector&lt; float &gt; &amp;scale, const std::vector&lt; int64_t &gt; &amp;zeroPoint)</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00205">ParserFlatbuffersFixture.hpp:205</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00026">IRuntime.hpp:26</a></div></div>
<div class="ttc" id="_i_runtime_8hpp_xhtml"><div class="ttname"><a href="_i_runtime_8hpp.xhtml">IRuntime.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7e2f87544b8bc7e497e1dec8d3ca4055"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7e2f87544b8bc7e497e1dec8d3ca4055">armnn::DetectionPostProcessDescriptor::m_DetectionsPerClass</a></div><div class="ttdeci">uint32_t m_DetectionsPerClass</div><div class="ttdoc">Detections per classes, used in Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00547">Descriptors.hpp:547</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser_xhtml"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml">armnnTfLiteParser::ITfLiteParser</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_tf_lite_parser_8hpp_source.xhtml#l00026">ITfLiteParser.hpp:26</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0743ed5e860c316a20b68ca96301b411"><div class="ttname"><a href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a></div><div class="ttdeci">typename ResolveTypeImpl&lt; DT &gt;::Type ResolveType</div><div class="ttdef"><b>Definition:</b> <a href="_resolve_type_8hpp_source.xhtml#l00073">ResolveType.hpp:73</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a69fc8e7f42386fa67732cb8c98d8b024"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a69fc8e7f42386fa67732cb8c98d8b024">ParserFlatbuffersFixture::ReadStringToBinary</a></div><div class="ttdeci">bool ReadStringToBinary()</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00101">ParserFlatbuffersFixture.hpp:101</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00340">Tensor.hpp:340</a></div></div>
<div class="ttc" id="_resolve_type_8hpp_xhtml"><div class="ttname"><a href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_tf_lite_parser_xhtml_af69bedce3c37be895f75146016ba8a17"><div class="ttname"><a href="namespacearmnn_tf_lite_parser.xhtml#af69bedce3c37be895f75146016ba8a17">armnnTfLiteParser::ITfLiteParserPtr</a></div><div class="ttdeci">std::unique_ptr&lt; ITfLiteParser, void(*)(ITfLiteParser *parser)&gt; ITfLiteParserPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_tf_lite_parser_8hpp_source.xhtml#l00024">ITfLiteParser.hpp:24</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a769404f2985a027a0d626fedfd4de1e9"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">ParserFlatbuffersFixture::Setup</a></div><div class="ttdeci">void Setup()</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00061">ParserFlatbuffersFixture.hpp:61</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__software__tools_8dox_source.xhtml#l00006">01_00_software_tools.dox:6</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml">ParserFlatbuffersFixture</a></div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00036">ParserFlatbuffersFixture.hpp:36</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_ad7406d5673bc2a8bc1efbdd4f4da140a"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a">ParserFlatbuffersFixture::RunTest</a></div><div class="ttdeci">void RunTest(size_t subgraphId, const std::vector&lt; armnn::ResolveType&lt; ArmnnType &gt;&gt; &amp;inputData, const std::vector&lt; armnn::ResolveType&lt; ArmnnType &gt;&gt; &amp;expectedOutputData)</div><div class="ttdoc">Executes the network with the given input tensor and checks the result against the given output tenso...</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00256">ParserFlatbuffersFixture.hpp:256</a></div></div>
<div class="ttc" id="_backend_registry_8hpp_xhtml"><div class="ttname"><a href="_backend_registry_8hpp.xhtml">BackendRegistry.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00210">Types.hpp:210</a></div></div>
<div class="ttc" id="_schema_8hpp_xhtml"><div class="ttname"><a href="_schema_8hpp.xhtml">Schema.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a9ae2c9796692ebeafe19a4d3f09c8ea8"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">armnn::DetectionPostProcessDescriptor::m_MaxClassesPerDetection</a></div><div class="ttdeci">uint32_t m_MaxClassesPerDetection</div><div class="ttdoc">Maximum numbers of classes per detection, used in Fast NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00545">Descriptors.hpp:545</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00306">Tensor.hpp:306</a></div></div>
<div class="ttc" id="_i_tf_lite_parser_8hpp_xhtml"><div class="ttname"><a href="_i_tf_lite_parser_8hpp.xhtml">ITfLiteParser.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae72089bcab60ac175557f4241b16a014"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">armnn::DetectionPostProcessDescriptor::m_MaxDetections</a></div><div class="ttdeci">uint32_t m_MaxDetections</div><div class="ttdoc">Maximum numbers of detections. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00543">Descriptors.hpp:543</a></div></div>
<div class="ttc" id="_tensor_helpers_8hpp_xhtml"><div class="ttname"><a href="_tensor_helpers_8hpp.xhtml">TensorHelpers.hpp</a></div></div>
<div class="ttc" id="_types_utils_8hpp_xhtml"><div class="ttname"><a href="_types_utils_8hpp.xhtml">TypesUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00032">Types.hpp:32</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a53c8a7f33a40e1e240256bcfcf41b101"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a53c8a7f33a40e1e240256bcfcf41b101">armnn::DetectionPostProcessDescriptor::m_NmsIouThreshold</a></div><div class="ttdeci">float m_NmsIouThreshold</div><div class="ttdoc">Intersection over union threshold. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00551">Descriptors.hpp:551</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01502">Network.cpp:1502</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="_parser_flatbuffers_serialize_fixture_8hpp_xhtml_a15c20a0693cd3fc4d85565e2f920d8ef"><div class="ttname"><a href="_parser_flatbuffers_serialize_fixture_8hpp.xhtml#a15c20a0693cd3fc4d85565e2f920d8ef">TensorRawPtr</a></div><div class="ttdeci">armnnSerializer::TensorInfo * TensorRawPtr</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00025">ParserFlatbuffersSerializeFixture.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00314">Tensor.hpp:314</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00341">Tensor.hpp:341</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00026">Types.hpp:26</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a3a04b0ccee4bb2f21721ee5045e83df4"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">armnn::DetectionPostProcessDescriptor::m_NumClasses</a></div><div class="ttdeci">uint32_t m_NumClasses</div><div class="ttdoc">Number of classes. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00553">Descriptors.hpp:553</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7ed9bc7c26df67d274d5dd4cd83adf0f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">armnn::DetectionPostProcessDescriptor::m_UseRegularNms</a></div><div class="ttdeci">bool m_UseRegularNms</div><div class="ttdoc">Use Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00555">Descriptors.hpp:555</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_add32b4d209a5b5d6ea6db94b9894ad75"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">ParserFlatbuffersFixture::m_SingleOutputName</a></div><div class="ttdeci">std::string m_SingleOutputName</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00059">ParserFlatbuffersFixture.hpp:59</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a9fbc789fd0aca759cb40737fdeb8ed63"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a9fbc789fd0aca759cb40737fdeb8ed63">ParserFlatbuffersFixture::m_GraphBinary</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; m_GraphBinary</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00050">ParserFlatbuffersFixture.hpp:50</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">ParserFlatbuffersFixture::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00053">ParserFlatbuffersFixture.hpp:53</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_aa61510cbd529870182e918ac6e8b9d72"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#aa61510cbd529870182e918ac6e8b9d72">armnn::DetectionPostProcessDescriptor::m_ScaleH</a></div><div class="ttdeci">float m_ScaleH</div><div class="ttdoc">Center size encoding scale height. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00563">Descriptors.hpp:563</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml"><div class="ttname"><a href="_assert_8hpp.xhtml">Assert.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00261">Tensor.hpp:261</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a2bb4ea256fbbf6d53068ca93bb4bc95c"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a2bb4ea256fbbf6d53068ca93bb4bc95c">ParserFlatbuffersFixture::SetupSingleInputSingleOutput</a></div><div class="ttdeci">void SetupSingleInputSingleOutput(const std::string &amp;inputName, const std::string &amp;outputName)</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00093">ParserFlatbuffersFixture.hpp:93</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="_descriptors_8hpp_xhtml"><div class="ttname"><a href="_descriptors_8hpp.xhtml">Descriptors.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9667bea652e3a5ef81fea59b71513ced"><div class="ttname"><a href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a></div><div class="ttdeci">void VerifyTensorInfoDataType(const armnn::TensorInfo &amp;info, armnn::DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00309">TypesUtils.hpp:309</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7a2156ec7d9c012ce00bbcc6afcb9028"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7a2156ec7d9c012ce00bbcc6afcb9028">armnn::DetectionPostProcessDescriptor::m_ScaleY</a></div><div class="ttdeci">float m_ScaleY</div><div class="ttdoc">Center size encoding scale y. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00559">Descriptors.hpp:559</a></div></div>
<div class="ttc" id="_schema_8hpp_xhtml_a6747d3548926a8130c42fb3398027acf"><div class="ttname"><a href="_schema_8hpp.xhtml#a6747d3548926a8130c42fb3398027acf">g_TfLiteSchemaText</a></div><div class="ttdeci">unsigned char g_TfLiteSchemaText[]</div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a4392dd6b4862cc9cf95ae8f1001ba592"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a4392dd6b4862cc9cf95ae8f1001ba592">armnn::DetectionPostProcessDescriptor::m_NmsScoreThreshold</a></div><div class="ttdeci">float m_NmsScoreThreshold</div><div class="ttdoc">NMS score threshold. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00549">Descriptors.hpp:549</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00173">INetwork.hpp:173</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00511">Descriptors.hpp:511</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a2f8365158b7c75e43897fbe804b7fc4f"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">ParserFlatbuffersFixture::m_SingleInputName</a></div><div class="ttdeci">std::string m_SingleInputName</div><div class="ttdoc">If the single-input-single-output overload of Setup() is called, these will store the input and outpu...</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00058">ParserFlatbuffersFixture.hpp:58</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_ad30eda63c4e66a0e2e3f538a2181f4ac"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#ad30eda63c4e66a0e2e3f538a2181f4ac">ParserFlatbuffersFixture::m_Parser</a></div><div class="ttdeci">ITfLiteParserPtr m_Parser</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00052">ParserFlatbuffersFixture.hpp:52</a></div></div>
<div class="ttc" id="_schema_8hpp_xhtml_abe07dadc9cf942cbf847470102a8980e"><div class="ttname"><a href="_schema_8hpp.xhtml#abe07dadc9cf942cbf847470102a8980e">g_TfLiteSchemaText_len</a></div><div class="ttdeci">unsigned int g_TfLiteSchemaText_len</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_510324e450b9df55f9aac2d01fae83d8.xhtml">armnnTfLiteParser</a></li><li class="navelem"><a class="el" href="dir_6d8d07609c57029a35488d2120e28fbd.xhtml">test</a></li><li class="navelem"><a class="el" href="_parser_flatbuffers_fixture_8hpp.xhtml">ParserFlatbuffersFixture.hpp</a></li>
    <li class="footer">Generated on Fri Mar 19 2021 15:26:00 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
