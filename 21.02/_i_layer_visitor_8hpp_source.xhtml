<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: include/armnn/ILayerVisitor.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_i_layer_visitor_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ILayerVisitor.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_i_layer_visitor_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_deprecated_8hpp.xhtml">armnn/Deprecated.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_descriptors_fwd_8hpp.xhtml">armnn/DescriptorsFwd.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_network_fwd_8hpp.xhtml">armnn/NetworkFwd.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_optional_8hpp.xhtml">armnn/Optional.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_fwd_8hpp.xhtml">armnn/TensorFwd.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_8hpp.xhtml">armnn/Types.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_layer_visitor.xhtml">   16</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_layer_visitor.xhtml#a27fa880bce96ac7355284a7681f2377e">   19</a></span>&#160;    <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a27fa880bce96ac7355284a7681f2377e">ILayerVisitor</a>() {}</div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_layer_visitor.xhtml#a7ad7aeeaf26228ef11c15fa5d4507d8a">   20</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a7ad7aeeaf26228ef11c15fa5d4507d8a">~ILayerVisitor</a>() {}</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">    /// Function an absolute layer should call back to when its Accept(ILayerVisitor&amp;)</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">    /// function is invoked.</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"></span>    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use VisitElementwiseUnaryLayer instead&quot;</span>)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a288db083c224e756f7bb35afe6289b7f">VisitAbsLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                               <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">    /// Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">    /// @param activationDescriptor - ActivationDescriptor to configure the activation.</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#ab2a1e493b983a932792bc5d0c1a20127">VisitActivationLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a>&amp; activationDescriptor,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">    /// Function that an addition layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a2d20b94b7de822f3d29ab12e47e3be4e">VisitAdditionLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                    <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">    /// Function that an arg min max layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">    /// @param argMinMaxDescriptor - ArgMinMaxDescriptor to configure the activation.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a8423316906ebe6ae6d28c7f69ad91248">VisitArgMinMaxLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a>&amp; argMinMaxDescriptor,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                                     <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">    /// Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;)</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">    /// function is invoked.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">    /// @param mean - Pre-calculated mean for each channel.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    /// @param variance - Pre-calculated variance for each channel.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">    /// @param beta - Per-channel additive factor.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">    /// @param gamma - Per-channel multiplicative factor.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a9e642355474f31268e66a404e6c1b81d">VisitBatchNormalizationLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a>&amp; desc,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; mean,</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; variance,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; beta,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; gamma,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                                              <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">    /// Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;)</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">    /// function is invoked.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">    /// @param batchToSpaceNdDescriptor - Description of the layer.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a1cee693185bcda15bd777008e60c7cf7">VisitBatchToSpaceNdLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a>&amp; batchToSpaceNdDescriptor,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                          <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">    /// Function a Comparison layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">    /// @param comparisonDescriptor - Description of the layer.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a6a1a6856fe4210d9c84c4fb86b4b661e">VisitComparisonLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a>&amp; comparisonDescriptor,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">    /// Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">    /// @param concatDescriptor - ConcatDescriptor (synonym for OriginsDescriptor) to configure the concatenation</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">    ///                           process. Number of Views must be equal to the number of inputs, and their order</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">    ///                           must match - e.g. first view corresponds to the first input, second view to the</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">    ///                           second input, etc....</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_layer_visitor.xhtml#aeb90d7587f7887aee1f2b43261d4ee5c">   93</a></span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#aeb90d7587f7887aee1f2b43261d4ee5c">VisitConcatLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a>&amp; concatDescriptor,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="comment">// default implementation to ease transition while MergerLayer is being deprecated</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#acc80689b27497fe0c4ee3c27b50d1f31">VisitMergerLayer</a>(layer, concatDescriptor, name);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">    /// Function a layer with no inputs and a single output, which always corresponds to</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">    /// the passed in constant tensor should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">    /// @param input - Tensor to be provided as the only output of the layer. The layer will maintain</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">    ///                its own copy of the tensor data, meaning the memory referenced by @a input can</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">    ///                be freed or reused after this function is called.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a2f123a6a99ac143c0f3806cb505765cd">VisitConstantLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; input,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                    <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">    /// Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;)</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">    /// function is invoked.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">    /// @param convolution2dDescriptor - Description of the 2D convolution layer.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">    /// @param weights - Tensor for the weights data.</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">    /// @param biases - Optional tensor for the bias data. If specified, must match the output tensor shape.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#abc8fe4c6cbc8fa2b13c525500dddfbf6">VisitConvolution2dLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a>&amp; convolution2dDescriptor,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; weights,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; biases,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">    /// Function a depth to space layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">    /// @param depthToSpaceDescriptor - Parameters for the depth to space operation.</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a72d308d6f24ffb8846375d770394af66">VisitDepthToSpaceLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">DepthToSpaceDescriptor</a>&amp; depthToSpaceDescriptor,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                        <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">    /// Function that a 2D depthwise convolution layer with biases should call back to when its</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">    /// Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">    /// @param convolution2dDescriptor - Description of the 2D depthwise convolution layer.</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">    /// @param weights - Tensor for the weights. Expected format: [channelMultiplier, inputChannels, height, width].</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">    /// @param biases - Optional tensor for the bias data. If specified, must match the output tensor shape.</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#ad39aaac8f8fb790ae364c87f1a249d68">VisitDepthwiseConvolution2dLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a>&amp; convolution2dDescriptor,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; weights,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; biases,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">    /// Function that a Dequantize layer should call back to when its</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">    /// Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a0fa32cbc3ca68467c749d50e844faeaf">VisitDequantizeLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">    /// Function that a Detection PostProcess layer should call back to when its</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">    /// Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">    /// @param descriptor - Description of the Detection PostProcess layer.</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">    /// @param anchors - Tensor for the anchors.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#ab270e1bebbe01a22543cc49ac3a14c25">VisitDetectionPostProcessLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">    /// Function a division layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#ada3c96a7b0d4251edb24584096b90a24">VisitDivisionLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                    <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">    /// Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">    /// @param elementwiseUnaryDescriptor - Description of the layer.</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#aaf99c2bdfe61c48821f23826433a5abc">VisitElementwiseUnaryLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a>&amp; elementwiseUnaryDescriptor,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                            <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">    /// Function an Equal layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment"></span>    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use VisitComparisonLayer instead&quot;</span>)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#ae242b544b15e9d80aa2f3be385540eb6">VisitEqualLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                 <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">    /// Function a fill layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">    /// @param fillDescriptor - Description of the layer</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#abf67d8273706f9dfc51be559b8505199">VisitFillLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a>&amp; fillDescriptor,</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">    /// Function a floor layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a3fd73f343863eedb8dde418c6183193c">VisitFloorLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                 <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">    /// Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;)</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">    /// function is invoked.</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">    /// @param fullyConnectedDescriptor - Description of the fully connected layer.</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">    /// @param weights - Tensor for the weights data.</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">    /// @param biases - Optional tensor for the bias data.</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#ab93a48970564c6eabbc982a2116c1262">VisitFullyConnectedLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a>&amp; fullyConnectedDescriptor,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; weights,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; biases,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                          <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">    /// Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"></span>    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use VisitGatherLayer with descriptor instead&quot;</span>)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a8b19c99b738524199b49d4b9819d4d8a">VisitGatherLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">    /// Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">    /// @param gatherDescriptor - Parameters for the gather operation.</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a8b19c99b738524199b49d4b9819d4d8a">VisitGatherLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a>&amp; gatherDescriptor,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">    /// Function a Greater layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"></span>    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use VisitComparisonLayer instead&quot;</span>)</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#ac81739b57b9a27fb0c363bcd6479692e">VisitGreaterLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                   <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">    /// Function that an InputLayer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">    /// @param id - User generated id to uniquely identify a particular input. The same id needs to be specified</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">    ///             when passing the inputs to the IRuntime::EnqueueWorkload() function.</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#ab6dc51682cb4178194f3f00c2309ec7b">VisitInputLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                 <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> <span class="keywordtype">id</span>,</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                 <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">    /// Function that an instance normalization layer should call back to when its Accept(ILayerVisitor&amp;)</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">    /// function is invoked.</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">    /// @param desc - Parameters for the instance normalization operation.</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#aaf4e8d2b1ed2612f4821ed1d2351667b">VisitInstanceNormalizationLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a>&amp; desc,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                                 <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">    /// Function that an L2 normalization layer should call back to when its Accept(ILayerVisitor&amp;)</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">    /// function is invoked. Normalization is performed along dimension 1, but requires a 4d input.</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">    /// @param desc - Parameters for the L2 normalization operation.</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a0678ff146765cea41b6d577773680fda">VisitL2NormalizationLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a>&amp; desc,</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                           <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">    /// Function that a log softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">    /// @param logSoftmaxDescriptor - LogSoftmaxDescriptor to configure the log softmax.</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a2db103c5db69877b05b365e50ee3bd5b">VisitLogSoftmaxLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">LogSoftmaxDescriptor</a>&amp; logSoftmaxDescriptor,</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">    /// Function that a logical binary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">    /// @param logicalBinaryDescriptor - LogicalBinaryDescriptor to configure the logical unary layer.</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a42258b02ff22765d6f2eeba7bff7f802">VisitLogicalBinaryLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a>&amp; logicalBinaryDescriptor,</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">    /// Function an Lstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">    /// @param descriptor - Parameters controlling the operation of the Lstm operation.</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">    /// @param params - The weights and biases for the LSTM cell.</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#aed730aaef50861ea8b7b6276ce880c9a">VisitLstmLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a>&amp; params,</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">    /// Function a Maximum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a9cbdbdbda6abefbc2e1eacaad47795bd">VisitMaximumLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                                   <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">    /// Function a Mean layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">    /// @param meanDescriptor - Parameters for the mean operation.</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#ab33e9cae83e312ccc9e12adcf53494e3">VisitMeanLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a>&amp; meanDescriptor,</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">    /// Function that a merge layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a002ed3346c6a89035f54e11155d5b1e1">VisitMergeLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                 <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">    /// Function that a merger layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">    /// @param mergerDescriptor - MergerDescriptor (synonym for OriginsDescriptor) to configure the concatenation</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">    ///                           process. Number of Views must be equal to the number of inputs, and their order</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">    ///                           must match - e.g. first view corresponds to the first input, second view to the</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">    ///                           second input, etc....</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"></span>    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use VisitConcatLayer instead&quot;</span>)</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#acc80689b27497fe0c4ee3c27b50d1f31">VisitMergerLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">MergerDescriptor</a>&amp; mergerDescriptor,</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">    /// Function a Minimum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a63187da01b5bb0bd4500ddf851edd0ff">VisitMinimumLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                   <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">    /// Function that a multiplication layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a1e415ad61a4fa40d85a4f0da855cf485">VisitMultiplicationLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                                          <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">    /// Function that a normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">    /// @param normalizationDescriptor - NormalizationDescriptor to configure the normalization.</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a96501b3e43422b9fdf6fc45d89b20992">VisitNormalizationLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a>&amp; normalizationDescriptor,</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">    /// Function an output layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">    /// @param id - User generated id to uniquely identify a particular output. The same id needs to be specified</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">    /// when passing the outputs to the IRuntime::EnqueueWorkload() function.</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a0da6bde681d919b7282eddad4a446890">VisitOutputLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                  <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> <span class="keywordtype">id</span>,</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">    /// Function a pad layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment">    /// @param paddings - n by 2 tensor, where n is the rank of the input tensor,</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">    ///                   such that paddings[i,0] indicates the amount of padding to add in front of dimension i, and</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">    ///                   paddings[i,1] indicates the amount of padding to add after the end of dimension i</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#aab2febd844bcf654e80cf164984c8904">VisitPadLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a>&amp; padDescriptor,</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                               <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">    /// Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">    /// @param permuteDescriptor - PermuteDescriptor to configure the permute.</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a211e587a05b0c7e7202f8f8894f89894">VisitPermuteLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a>&amp; permuteDescriptor,</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                   <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment">    /// Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment">    /// @param pooling2dDescriptor - Pooling2dDescriptor to configure the pooling.</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#aef56afef7d87afa51fd363487c375af5">VisitPooling2dLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a>&amp; pooling2dDescriptor,</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                     <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">    /// Function that a PReLU activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a4f6971a5d2c164c691dc7943f4befd5c">VisitPreluLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                 <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">    /// Function a quantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a78ec371d5935104926bca5c5febf6780">VisitQuantizeLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                    <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">    /// Function a QLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">    /// @param descriptor - Parameters controlling the operation of the QLstm operation.</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment">    /// @param params - The weights and biases for the layer</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a3f99f4f70c011a8ab5234e5595350781">VisitQLstmLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a>&amp; params,</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                 <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">    /// Function a QuantizedLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">    /// @param params - The weights and biases for the Quantized LSTM cell</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#acb1bac244973743d460064c1e0d816fd">VisitQuantizedLstmLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">QuantizedLstmInputParams</a>&amp; params,</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment">    /// Function a rank layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a7b2632b6e22ac7bc314bad5532fdb3c9">VisitRankLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">    /// Function that a reduce layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment">    /// @param ReduceDescriptor - Parameters for the reduce max operation.</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a226889fe8ad44b16a54f1cc50fc9730b">VisitReduceLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a>&amp; reduceDescriptor,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">    /// Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">    /// @param reshapeDescriptor - Parameters for the reshape operation.</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#acb732489554691ba852ca323888093ac">VisitReshapeLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a>&amp; reshapeDescriptor,</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                                   <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment">    /// Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">    /// @param resizeDesc - Parameters for the resize operation.</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment"></span>    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use VisitResizeLayer instead&quot;</span>)</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a8d87dab666a8aa6e132fcd93717a3c4b">VisitResizeBilinearLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">ResizeBilinearDescriptor</a>&amp; resizeDesc,</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                                          <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">    /// Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment">    /// @param resizeDescriptor - Parameters for the resize operation.</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a306e22f3cc6baaf7a6f1390f669be42e">VisitResizeLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a>&amp; resizeDescriptor,</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">    /// Function a Reciprocal of square root layer should call back to when its Accept(ILayerVisitor&amp;)</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">    /// function is invoked.</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment"></span>    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use VisitElementwiseUnaryLayer instead&quot;</span>)</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a413253dbf325ea0b44559b55242170d1">VisitRsqrtLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                                 <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">    /// Function that a slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">    /// @param sliceDescriptor - SliceDescriptor to configure the slice operation.</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#aad5c9d5c9cf256ea990097732fd1f108">VisitSliceLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a>&amp; sliceDescriptor,</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                                 <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">    /// Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment">    /// @param softmaxDescriptor - SoftmaxDescriptor to configure the softmax.</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#ae47c90e3188970462a28d297644133d1">VisitSoftmaxLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a>&amp; softmaxDescriptor,</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                                   <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment">    /// Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment">    /// @param spaceToBatchNdDescriptor - Parameters for the space to batch operation.</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#aa8c1ec6712293700fb3874f63f2ec5f0">VisitSpaceToBatchNdLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a>&amp; spaceToBatchNdDescriptor,</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                                          <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment">    /// Function a space to depth layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment">    /// @param spaceToDepthDescriptor - Parameters for the space to depth operation.</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a7ac3fe15d509443ffbe985370b61b913">VisitSpaceToDepthLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a>&amp; spaceToDepthDescriptor,</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                                        <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment">    /// Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment">    /// @param splitterDescriptor - ViewsDescriptor to configure the splitting process.</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment">    ///                             Number of Views must be equal to the number of outputs,</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment">    ///                             and their order must match - e.g. first view corresponds to</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment">    ///                             the first output, second view to the second output, etc....</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a45c613d43c30b3314cafb1be3ef7685c">VisitSplitterLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a>&amp; splitterDescriptor,</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                    <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment">    /// Function a stack layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment">    /// @param stackDescriptor - Parameters for the stack operation.</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a5c7df9d37959280f4328848ae4b2be37">VisitStackLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a>&amp; stackDescriptor,</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                                 <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment">    /// Function a StandInLayer should call back to when its Accept(ILaterVisitor&amp;) function is invoked</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">    /// @param standInDescriptor - Parameters for the stand-in layer.</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a2c97836f7288428fe4f070033d2f0aea">VisitStandInLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a>&amp; standInDescriptor,</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                                   <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">    /// Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment">    /// @param stridedSliceDescriptor - Parameters for the strided slice operation.</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#ac2f4ca5ada6d8fcf82d7bea2e6a06924">VisitStridedSliceLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a>&amp; stridedSliceDescriptor,</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                                        <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="comment">    /// Function a subtraction layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#ad339435c8d56522efc647da668d47047">VisitSubtractionLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                                       <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment">    /// Function a switch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a6d33c538a0f3f179ec2eeb4dcee2a21e">VisitSwitchLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment">    /// Function that a 2D transpose convolution layer should call back to when its Accept(ILayerVisitor&amp;)</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment">    /// function is invoked.</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment">    /// @param descriptor - Description of the 2D transpose convolution layer.</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment">    /// @param weights - Tensor for the weights data.</span></div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment">    /// @param biases - Optional tensor for the bias data.</span></div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a58bb3bc96c089a4d0b954be81f1899c6">VisitTransposeConvolution2dLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; weights,</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; biases,</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment">    /// Function that a transpose  layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.</span></div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment">    /// @param layer - pointer to the layer which is calling back to this visit function.</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment">    /// @param transposeDescriptor - TransposeDescriptor to configure the transpose.</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment">    /// @param name - Optional name for the layer.</span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a5e101341277244c45eb20f4db63c77a3">VisitTransposeLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a>&amp; transposeDescriptor,</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                                     <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="keyword">nullptr</span>) = 0;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_layer_visitor.xhtml#a463965a96896bf0d261b44eea5172c7b">  554</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a463965a96896bf0d261b44eea5172c7b">StartVisit</a>() {}</div><div class="line"><a name="l00555"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_layer_visitor.xhtml#a4549b1bbb63fa26700d74854e388784f">  555</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#a4549b1bbb63fa26700d74854e388784f">FinishVisit</a>() {}</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;};</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_acc80689b27497fe0c4ee3c27b50d1f31"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#acc80689b27497fe0c4ee3c27b50d1f31">armnn::ILayerVisitor::VisitMergerLayer</a></div><div class="ttdeci">virtual void VisitMergerLayer(const IConnectableLayer *layer, const MergerDescriptor &amp;mergerDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a merger layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a3f99f4f70c011a8ab5234e5595350781"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a3f99f4f70c011a8ab5234e5595350781">armnn::ILayerVisitor::VisitQLstmLayer</a></div><div class="ttdeci">virtual void VisitQLstmLayer(const IConnectableLayer *layer, const QLstmDescriptor &amp;descriptor, const LstmInputParams &amp;params, const char *name=nullptr)=0</div><div class="ttdoc">Function a QLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml">armnn::ViewsDescriptor</a></div><div class="ttdoc">A ViewsDescriptor for the SplitterLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00206">Descriptors.hpp:206</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00062">INetwork.hpp:62</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">armnn::TransposeConvolution2dDescriptor</a></div><div class="ttdoc">A TransposeConvolution2dDescriptor for the TransposeConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01213">Descriptors.hpp:1213</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a27fa880bce96ac7355284a7681f2377e"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a27fa880bce96ac7355284a7681f2377e">armnn::ILayerVisitor::ILayerVisitor</a></div><div class="ttdeci">ILayerVisitor()</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_visitor_8hpp_source.xhtml#l00019">ILayerVisitor.hpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_ab2a1e493b983a932792bc5d0c1a20127"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#ab2a1e493b983a932792bc5d0c1a20127">armnn::ILayerVisitor::VisitActivationLayer</a></div><div class="ttdeci">virtual void VisitActivationLayer(const IConnectableLayer *layer, const ActivationDescriptor &amp;activationDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is inv...</div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a></div><div class="ttdoc">A ReshapeDescriptor for the ReshapeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00832">Descriptors.hpp:832</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_ad339435c8d56522efc647da668d47047"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#ad339435c8d56522efc647da668d47047">armnn::ILayerVisitor::VisitSubtractionLayer</a></div><div class="ttdeci">virtual void VisitSubtractionLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function a subtraction layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_ab66a241a0ed3ee89c866e777b035d0ed"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_BEGIN</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00033">Deprecated.hpp:33</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a7b2632b6e22ac7bc314bad5532fdb3c9"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a7b2632b6e22ac7bc314bad5532fdb3c9">armnn::ILayerVisitor::VisitRankLayer</a></div><div class="ttdeci">virtual void VisitRankLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function a rank layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="structarmnn_1_1_comparison_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_comparison_descriptor.xhtml">armnn::ComparisonDescriptor</a></div><div class="ttdoc">A ComparisonDescriptor for the ComparisonLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00078">Descriptors.hpp:78</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_aed730aaef50861ea8b7b6276ce880c9a"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#aed730aaef50861ea8b7b6276ce880c9a">armnn::ILayerVisitor::VisitLstmLayer</a></div><div class="ttdeci">virtual void VisitLstmLayer(const IConnectableLayer *layer, const LstmDescriptor &amp;descriptor, const LstmInputParams &amp;params, const char *name=nullptr)=0</div><div class="ttdoc">Function an Lstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00408">Descriptors.hpp:408</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a4f6971a5d2c164c691dc7943f4befd5c"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a4f6971a5d2c164c691dc7943f4befd5c">armnn::ILayerVisitor::VisitPreluLayer</a></div><div class="ttdeci">virtual void VisitPreluLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function that a PReLU activation layer should call back to when its Accept(ILayerVisitor&amp;) function i...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a2d20b94b7de822f3d29ab12e47e3be4e"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a2d20b94b7de822f3d29ab12e47e3be4e">armnn::ILayerVisitor::VisitAdditionLayer</a></div><div class="ttdeci">virtual void VisitAdditionLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function that an addition layer should call back to when its Accept(ILayerVisitor&amp;) function is invok...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a7ac3fe15d509443ffbe985370b61b913"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a7ac3fe15d509443ffbe985370b61b913">armnn::ILayerVisitor::VisitSpaceToDepthLayer</a></div><div class="ttdeci">virtual void VisitSpaceToDepthLayer(const IConnectableLayer *layer, const SpaceToDepthDescriptor &amp;spaceToDepthDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function a space to depth layer should call back to when its Accept(ILayerVisitor&amp;) function is invok...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a78ec371d5935104926bca5c5febf6780"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a78ec371d5935104926bca5c5febf6780">armnn::ILayerVisitor::VisitQuantizeLayer</a></div><div class="ttdeci">virtual void VisitQuantizeLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function a quantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a42258b02ff22765d6f2eeba7bff7f802"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a42258b02ff22765d6f2eeba7bff7f802">armnn::ILayerVisitor::VisitLogicalBinaryLayer</a></div><div class="ttdeci">virtual void VisitLogicalBinaryLayer(const IConnectableLayer *layer, const LogicalBinaryDescriptor &amp;logicalBinaryDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a logical binary layer should call back to when its Accept(ILayerVisitor&amp;) function is ...</div></div>
<div class="ttc" id="structarmnn_1_1_logical_binary_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_logical_binary_descriptor.xhtml">armnn::LogicalBinaryDescriptor</a></div><div class="ttdoc">A LogicalBinaryDescriptor for the LogicalBinaryLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01284">Descriptors.hpp:1284</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_abc8fe4c6cbc8fa2b13c525500dddfbf6"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#abc8fe4c6cbc8fa2b13c525500dddfbf6">armnn::ILayerVisitor::VisitConvolution2dLayer</a></div><div class="ttdeci">virtual void VisitConvolution2dLayer(const IConnectableLayer *layer, const Convolution2dDescriptor &amp;convolution2dDescriptor, const ConstTensor &amp;weights, const Optional&lt; ConstTensor &gt; &amp;biases, const char *name=nullptr)=0</div><div class="ttdoc">Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is ...</div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__software__tools_8dox_source.xhtml#l00006">01_00_software_tools.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a63187da01b5bb0bd4500ddf851edd0ff"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a63187da01b5bb0bd4500ddf851edd0ff">armnn::ILayerVisitor::VisitMinimumLayer</a></div><div class="ttdeci">virtual void VisitMinimumLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function a Minimum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_aef56afef7d87afa51fd363487c375af5"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#aef56afef7d87afa51fd363487c375af5">armnn::ILayerVisitor::VisitPooling2dLayer</a></div><div class="ttdeci">virtual void VisitPooling2dLayer(const IConnectableLayer *layer, const Pooling2dDescriptor &amp;pooling2dDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_xhtml"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml">armnn::QuantizedLstmInputParams</a></div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00013">QuantizedLstmParams.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_aaf99c2bdfe61c48821f23826433a5abc"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#aaf99c2bdfe61c48821f23826433a5abc">armnn::ILayerVisitor::VisitElementwiseUnaryLayer</a></div><div class="ttdeci">virtual void VisitElementwiseUnaryLayer(const IConnectableLayer *layer, const ElementwiseUnaryDescriptor &amp;elementwiseUnaryDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is inv...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a3fd73f343863eedb8dde418c6183193c"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a3fd73f343863eedb8dde418c6183193c">armnn::ILayerVisitor::VisitFloorLayer</a></div><div class="ttdeci">virtual void VisitFloorLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function a floor layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a5c7df9d37959280f4328848ae4b2be37"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a5c7df9d37959280f4328848ae4b2be37">armnn::ILayerVisitor::VisitStackLayer</a></div><div class="ttdeci">virtual void VisitStackLayer(const IConnectableLayer *layer, const StackDescriptor &amp;stackDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function a stack layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a9e642355474f31268e66a404e6c1b81d"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a9e642355474f31268e66a404e6c1b81d">armnn::ILayerVisitor::VisitBatchNormalizationLayer</a></div><div class="ttdeci">virtual void VisitBatchNormalizationLayer(const IConnectableLayer *layer, const BatchNormalizationDescriptor &amp;desc, const ConstTensor &amp;mean, const ConstTensor &amp;variance, const ConstTensor &amp;beta, const ConstTensor &amp;gamma, const char *name=nullptr)=0</div><div class="ttdoc">Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;) functio...</div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::SpaceToDepthDescriptor</a></div><div class="ttdoc">A SpaceToDepthDescriptor for the SpaceToDepthLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00884">Descriptors.hpp:884</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a></div><div class="ttdoc">A BatchToSpaceNdDescriptor for the BatchToSpaceNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00673">Descriptors.hpp:673</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_ab33e9cae83e312ccc9e12adcf53494e3"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#ab33e9cae83e312ccc9e12adcf53494e3">armnn::ILayerVisitor::VisitMeanLayer</a></div><div class="ttdeci">virtual void VisitMeanLayer(const IConnectableLayer *layer, const MeanDescriptor &amp;meanDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function a Mean layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="_tensor_fwd_8hpp_xhtml"><div class="ttname"><a href="_tensor_fwd_8hpp.xhtml">TensorFwd.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a211e587a05b0c7e7202f8f8894f89894"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a211e587a05b0c7e7202f8f8894f89894">armnn::ILayerVisitor::VisitPermuteLayer</a></div><div class="ttdeci">virtual void VisitPermuteLayer(const IConnectableLayer *layer, const PermuteDescriptor &amp;permuteDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a7ad7aeeaf26228ef11c15fa5d4507d8a"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a7ad7aeeaf26228ef11c15fa5d4507d8a">armnn::ILayerVisitor::~ILayerVisitor</a></div><div class="ttdeci">virtual ~ILayerVisitor()</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_visitor_8hpp_source.xhtml#l00020">ILayerVisitor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a1e415ad61a4fa40d85a4f0da855cf485"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a1e415ad61a4fa40d85a4f0da855cf485">armnn::ILayerVisitor::VisitMultiplicationLayer</a></div><div class="ttdeci">virtual void VisitMultiplicationLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function that a multiplication layer should call back to when its Accept(ILayerVisitor&amp;) function is ...</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00210">Types.hpp:210</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a></div><div class="ttdoc">A ResizeDescriptor for the ResizeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00794">Descriptors.hpp:794</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml">armnn::StackDescriptor</a></div><div class="ttdoc">A StackDescriptor for the StackLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01024">Descriptors.hpp:1024</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a6d33c538a0f3f179ec2eeb4dcee2a21e"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a6d33c538a0f3f179ec2eeb4dcee2a21e">armnn::ILayerVisitor::VisitSwitchLayer</a></div><div class="ttdeci">virtual void VisitSwitchLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function a switch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a002ed3346c6a89035f54e11155d5b1e1"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a002ed3346c6a89035f54e11155d5b1e1">armnn::ILayerVisitor::VisitMergeLayer</a></div><div class="ttdeci">virtual void VisitMergeLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function that a merge layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a></div><div class="ttdoc">A PadDescriptor for the PadLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00975">Descriptors.hpp:975</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_ac2f4ca5ada6d8fcf82d7bea2e6a06924"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#ac2f4ca5ada6d8fcf82d7bea2e6a06924">armnn::ILayerVisitor::VisitStridedSliceLayer</a></div><div class="ttdeci">virtual void VisitStridedSliceLayer(const IConnectableLayer *layer, const StridedSliceDescriptor &amp;stridedSliceDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoke...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_ab93a48970564c6eabbc982a2116c1262"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#ab93a48970564c6eabbc982a2116c1262">armnn::ILayerVisitor::VisitFullyConnectedLayer</a></div><div class="ttdeci">virtual void VisitFullyConnectedLayer(const IConnectableLayer *layer, const FullyConnectedDescriptor &amp;fullyConnectedDescriptor, const ConstTensor &amp;weights, const Optional&lt; ConstTensor &gt; &amp;biases, const char *name=nullptr)=0</div><div class="ttdoc">Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_aad5c9d5c9cf256ea990097732fd1f108"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#aad5c9d5c9cf256ea990097732fd1f108">armnn::ILayerVisitor::VisitSliceLayer</a></div><div class="ttdeci">virtual void VisitSliceLayer(const IConnectableLayer *layer, const SliceDescriptor &amp;sliceDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a8d87dab666a8aa6e132fcd93717a3c4b"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a8d87dab666a8aa6e132fcd93717a3c4b">armnn::ILayerVisitor::VisitResizeBilinearLayer</a></div><div class="ttdeci">virtual void VisitResizeBilinearLayer(const IConnectableLayer *layer, const ResizeBilinearDescriptor &amp;resizeDesc, const char *name=nullptr)=0</div><div class="ttdoc">Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is...</div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a></div><div class="ttdoc">An LstmDescriptor for the LstmLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00911">Descriptors.hpp:911</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_ad762b11b48e5c1d1c1743f529485728a"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_END</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00034">Deprecated.hpp:34</a></div></div>
<div class="ttc" id="_optional_8hpp_xhtml"><div class="ttname"><a href="_optional_8hpp.xhtml">Optional.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a2f123a6a99ac143c0f3806cb505765cd"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a2f123a6a99ac143c0f3806cb505765cd">armnn::ILayerVisitor::VisitConstantLayer</a></div><div class="ttdeci">virtual void VisitConstantLayer(const IConnectableLayer *layer, const ConstTensor &amp;input, const char *name=nullptr)=0</div><div class="ttdoc">Function a layer with no inputs and a single output, which always corresponds to the passed in consta...</div></div>
<div class="ttc" id="structarmnn_1_1_l2_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_descriptor.xhtml">armnn::L2NormalizationDescriptor</a></div><div class="ttdoc">A L2NormalizationDescriptor for the L2NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00607">Descriptors.hpp:607</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a></div><div class="ttdoc">An ArgMinMaxDescriptor for ArgMinMaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00056">Descriptors.hpp:56</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a2db103c5db69877b05b365e50ee3bd5b"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a2db103c5db69877b05b365e50ee3bd5b">armnn::ILayerVisitor::VisitLogSoftmaxLayer</a></div><div class="ttdeci">virtual void VisitLogSoftmaxLayer(const IConnectableLayer *layer, const LogSoftmaxDescriptor &amp;logSoftmaxDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a log softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is inv...</div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml">armnn::OriginsDescriptor</a></div><div class="ttdoc">An OriginsDescriptor for the ConcatLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00163">Descriptors.hpp:163</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reduce_descriptor.xhtml">armnn::ReduceDescriptor</a></div><div class="ttdoc">A ReduceDescriptor for the REDUCE operators. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01304">Descriptors.hpp:1304</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a226889fe8ad44b16a54f1cc50fc9730b"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a226889fe8ad44b16a54f1cc50fc9730b">armnn::ILayerVisitor::VisitReduceLayer</a></div><div class="ttdeci">virtual void VisitReduceLayer(const IConnectableLayer *layer, const ReduceDescriptor &amp;reduceDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a reduce layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="_types_8hpp_xhtml"><div class="ttname"><a href="_types_8hpp.xhtml">Types.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a></div><div class="ttdoc">A FullyConnectedDescriptor for the FullyConnectedLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00389">Descriptors.hpp:389</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_abf67d8273706f9dfc51be559b8505199"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#abf67d8273706f9dfc51be559b8505199">armnn::ILayerVisitor::VisitFillLayer</a></div><div class="ttdeci">virtual void VisitFillLayer(const IConnectableLayer *layer, const FillDescriptor &amp;fillDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function a fill layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00314">Tensor.hpp:314</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml">armnn::LstmInputParams</a></div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00013">LstmParams.hpp:13</a></div></div>
<div class="ttc" id="structarmnn_1_1_gather_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a></div><div class="ttdoc">A GatherDescriptor for the GatherLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00742">Descriptors.hpp:742</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_ad39aaac8f8fb790ae364c87f1a249d68"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#ad39aaac8f8fb790ae364c87f1a249d68">armnn::ILayerVisitor::VisitDepthwiseConvolution2dLayer</a></div><div class="ttdeci">virtual void VisitDepthwiseConvolution2dLayer(const IConnectableLayer *layer, const DepthwiseConvolution2dDescriptor &amp;convolution2dDescriptor, const ConstTensor &amp;weights, const Optional&lt; ConstTensor &gt; &amp;biases, const char *name=nullptr)=0</div><div class="ttdoc">Function that a 2D depthwise convolution layer with biases should call back to when its Accept(ILayer...</div></div>
<div class="ttc" id="structarmnn_1_1_stand_in_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stand_in_descriptor.xhtml">armnn::StandInDescriptor</a></div><div class="ttdoc">A StandInDescriptor for the StandIn layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01054">Descriptors.hpp:1054</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml">armnn::QLstmDescriptor</a></div><div class="ttdoc">A QLstmDescriptor for the QLstmLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01153">Descriptors.hpp:1153</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_ac81739b57b9a27fb0c363bcd6479692e"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#ac81739b57b9a27fb0c363bcd6479692e">armnn::ILayerVisitor::VisitGreaterLayer</a></div><div class="ttdeci">virtual void VisitGreaterLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function a Greater layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00025">Descriptors.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a5e101341277244c45eb20f4db63c77a3"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a5e101341277244c45eb20f4db63c77a3">armnn::ILayerVisitor::VisitTransposeLayer</a></div><div class="ttdeci">virtual void VisitTransposeLayer(const IConnectableLayer *layer, const TransposeDescriptor &amp;transposeDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a transpose layer should call back to when its Accept(ILayerVisitor&amp;) function is invok...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a72d308d6f24ffb8846375d770394af66"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a72d308d6f24ffb8846375d770394af66">armnn::ILayerVisitor::VisitDepthToSpaceLayer</a></div><div class="ttdeci">virtual void VisitDepthToSpaceLayer(const IConnectableLayer *layer, const DepthToSpaceDescriptor &amp;depthToSpaceDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function a depth to space layer should call back to when its Accept(ILayerVisitor&amp;) function is invok...</div></div>
<div class="ttc" id="structarmnn_1_1_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_slice_descriptor.xhtml">armnn::SliceDescriptor</a></div><div class="ttdoc">A SliceDescriptor for the SliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01001">Descriptors.hpp:1001</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a306e22f3cc6baaf7a6f1390f669be42e"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a306e22f3cc6baaf7a6f1390f669be42e">armnn::ILayerVisitor::VisitResizeLayer</a></div><div class="ttdeci">virtual void VisitResizeLayer(const IConnectableLayer *layer, const ResizeDescriptor &amp;resizeDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a1cee693185bcda15bd777008e60c7cf7"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a1cee693185bcda15bd777008e60c7cf7">armnn::ILayerVisitor::VisitBatchToSpaceNdLayer</a></div><div class="ttdeci">virtual void VisitBatchToSpaceNdLayer(const IConnectableLayer *layer, const BatchToSpaceNdDescriptor &amp;batchToSpaceNdDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;) function ...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_acb1bac244973743d460064c1e0d816fd"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#acb1bac244973743d460064c1e0d816fd">armnn::ILayerVisitor::VisitQuantizedLstmLayer</a></div><div class="ttdeci">virtual void VisitQuantizedLstmLayer(const IConnectableLayer *layer, const QuantizedLstmInputParams &amp;params, const char *name=nullptr)=0</div><div class="ttdoc">Function a QuantizedLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoke...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a2c97836f7288428fe4f070033d2f0aea"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a2c97836f7288428fe4f070033d2f0aea">armnn::ILayerVisitor::VisitStandInLayer</a></div><div class="ttdeci">virtual void VisitStandInLayer(const IConnectableLayer *layer, const StandInDescriptor &amp;standInDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function a StandInLayer should call back to when its Accept(ILaterVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a></div><div class="ttdoc">A SpaceToBatchNdDescriptor for the SpaceToBatchNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00852">Descriptors.hpp:852</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml"><div class="ttname"><a href="_deprecated_8hpp.xhtml">Deprecated.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_aeb90d7587f7887aee1f2b43261d4ee5c"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#aeb90d7587f7887aee1f2b43261d4ee5c">armnn::ILayerVisitor::VisitConcatLayer</a></div><div class="ttdeci">virtual void VisitConcatLayer(const IConnectableLayer *layer, const OriginsDescriptor &amp;concatDescriptor, const char *name=nullptr)</div><div class="ttdoc">Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor.hpp:93</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">armnn::ElementwiseUnaryDescriptor</a></div><div class="ttdoc">A ElementwiseUnaryDescriptor for the ElementwiseUnaryLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00098">Descriptors.hpp:98</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a0da6bde681d919b7282eddad4a446890"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a0da6bde681d919b7282eddad4a446890">armnn::ILayerVisitor::VisitOutputLayer</a></div><div class="ttdeci">virtual void VisitOutputLayer(const IConnectableLayer *layer, LayerBindingId id, const char *name=nullptr)=0</div><div class="ttdoc">Function an output layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_ae242b544b15e9d80aa2f3be385540eb6"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#ae242b544b15e9d80aa2f3be385540eb6">armnn::ILayerVisitor::VisitEqualLayer</a></div><div class="ttdeci">virtual void VisitEqualLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function an Equal layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a45c613d43c30b3314cafb1be3ef7685c"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a45c613d43c30b3314cafb1be3ef7685c">armnn::ILayerVisitor::VisitSplitterLayer</a></div><div class="ttdeci">virtual void VisitSplitterLayer(const IConnectableLayer *layer, const ViewsDescriptor &amp;splitterDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoke...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a58bb3bc96c089a4d0b954be81f1899c6"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a58bb3bc96c089a4d0b954be81f1899c6">armnn::ILayerVisitor::VisitTransposeConvolution2dLayer</a></div><div class="ttdeci">virtual void VisitTransposeConvolution2dLayer(const IConnectableLayer *layer, const TransposeConvolution2dDescriptor &amp;descriptor, const ConstTensor &amp;weights, const Optional&lt; ConstTensor &gt; &amp;biases, const char *name=nullptr)=0</div><div class="ttdoc">Function that a 2D transpose convolution layer should call back to when its Accept(ILayerVisitor&amp;) fu...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a463965a96896bf0d261b44eea5172c7b"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a463965a96896bf0d261b44eea5172c7b">armnn::ILayerVisitor::StartVisit</a></div><div class="ttdeci">virtual void StartVisit()</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_visitor_8hpp_source.xhtml#l00554">ILayerVisitor.hpp:554</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a96501b3e43422b9fdf6fc45d89b20992"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a96501b3e43422b9fdf6fc45d89b20992">armnn::ILayerVisitor::VisitNormalizationLayer</a></div><div class="ttdeci">virtual void VisitNormalizationLayer(const IConnectableLayer *layer, const NormalizationDescriptor &amp;normalizationDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is i...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_ae47c90e3188970462a28d297644133d1"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#ae47c90e3188970462a28d297644133d1">armnn::ILayerVisitor::VisitSoftmaxLayer</a></div><div class="ttdeci">virtual void VisitSoftmaxLayer(const IConnectableLayer *layer, const SoftmaxDescriptor &amp;softmaxDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_acb732489554691ba852ca323888093ac"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#acb732489554691ba852ca323888093ac">armnn::ILayerVisitor::VisitReshapeLayer</a></div><div class="ttdeci">virtual void VisitReshapeLayer(const IConnectableLayer *layer, const ReshapeDescriptor &amp;reshapeDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_ab6dc51682cb4178194f3f00c2309ec7b"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#ab6dc51682cb4178194f3f00c2309ec7b">armnn::ILayerVisitor::VisitInputLayer</a></div><div class="ttdeci">virtual void VisitInputLayer(const IConnectableLayer *layer, LayerBindingId id, const char *name=nullptr)=0</div><div class="ttdoc">Function that an InputLayer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="structarmnn_1_1_mean_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a></div><div class="ttdoc">A MeanDescriptor for the MeanLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00951">Descriptors.hpp:951</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml">armnn::ILayerVisitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_visitor_8hpp_source.xhtml#l00016">ILayerVisitor.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a0fa32cbc3ca68467c749d50e844faeaf"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a0fa32cbc3ca68467c749d50e844faeaf">armnn::ILayerVisitor::VisitDequantizeLayer</a></div><div class="ttdeci">virtual void VisitDequantizeLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function that a Dequantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invo...</div></div>
<div class="ttc" id="structarmnn_1_1_transpose_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a></div><div class="ttdoc">A TransposeDescriptor for the TransposeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01263">Descriptors.hpp:1263</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a></div><div class="ttdoc">A StridedSliceDescriptor for the StridedSliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01076">Descriptors.hpp:1076</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_ada3c96a7b0d4251edb24584096b90a24"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#ada3c96a7b0d4251edb24584096b90a24">armnn::ILayerVisitor::VisitDivisionLayer</a></div><div class="ttdeci">virtual void VisitDivisionLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function a division layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_a76fb13a018f8e01087a7ae0eb23509e1"><div class="ttname"><a href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a></div><div class="ttdeci">#define ARMNN_DEPRECATED_MSG(message)</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00043">Deprecated.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a8b19c99b738524199b49d4b9819d4d8a"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a8b19c99b738524199b49d4b9819d4d8a">armnn::ILayerVisitor::VisitGatherLayer</a></div><div class="ttdeci">virtual void VisitGatherLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a6a1a6856fe4210d9c84c4fb86b4b661e"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a6a1a6856fe4210d9c84c4fb86b4b661e">armnn::ILayerVisitor::VisitComparisonLayer</a></div><div class="ttdeci">virtual void VisitComparisonLayer(const IConnectableLayer *layer, const ComparisonDescriptor &amp;comparisonDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function a Comparison layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="_network_fwd_8hpp_xhtml"><div class="ttname"><a href="_network_fwd_8hpp.xhtml">NetworkFwd.hpp</a></div></div>
<div class="ttc" id="_descriptors_fwd_8hpp_xhtml"><div class="ttname"><a href="_descriptors_fwd_8hpp.xhtml">DescriptorsFwd.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_aa8c1ec6712293700fb3874f63f2ec5f0"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#aa8c1ec6712293700fb3874f63f2ec5f0">armnn::ILayerVisitor::VisitSpaceToBatchNdLayer</a></div><div class="ttdeci">virtual void VisitSpaceToBatchNdLayer(const IConnectableLayer *layer, const SpaceToBatchNdDescriptor &amp;spaceToBatchNdDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invok...</div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00329">Descriptors.hpp:329</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a0678ff146765cea41b6d577773680fda"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a0678ff146765cea41b6d577773680fda">armnn::ILayerVisitor::VisitL2NormalizationLayer</a></div><div class="ttdeci">virtual void VisitL2NormalizationLayer(const IConnectableLayer *layer, const L2NormalizationDescriptor &amp;desc, const char *name=nullptr)=0</div><div class="ttdoc">Function that an L2 normalization layer should call back to when its Accept(ILayerVisitor&amp;) function ...</div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a></div><div class="ttdoc">A NormalizationDescriptor for the NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00567">Descriptors.hpp:567</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a288db083c224e756f7bb35afe6289b7f"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a288db083c224e756f7bb35afe6289b7f">armnn::ILayerVisitor::VisitAbsLayer</a></div><div class="ttdeci">virtual void VisitAbsLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function an absolute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00511">Descriptors.hpp:511</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml">armnn::InstanceNormalizationDescriptor</a></div><div class="ttdoc">An InstanceNormalizationDescriptor for InstanceNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00645">Descriptors.hpp:645</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_bilinear_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">armnn::ResizeBilinearDescriptor</a></div><div class="ttdoc">A ResizeBilinearDescriptor for the ResizeBilinearLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00762">Descriptors.hpp:762</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_ab270e1bebbe01a22543cc49ac3a14c25"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#ab270e1bebbe01a22543cc49ac3a14c25">armnn::ILayerVisitor::VisitDetectionPostProcessLayer</a></div><div class="ttdeci">virtual void VisitDetectionPostProcessLayer(const IConnectableLayer *layer, const DetectionPostProcessDescriptor &amp;descriptor, const ConstTensor &amp;anchors, const char *name=nullptr)=0</div><div class="ttdoc">Function that a Detection PostProcess layer should call back to when its Accept(ILayerVisitor&amp;) funct...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a413253dbf325ea0b44559b55242170d1"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a413253dbf325ea0b44559b55242170d1">armnn::ILayerVisitor::VisitRsqrtLayer</a></div><div class="ttdeci">virtual void VisitRsqrtLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function a Reciprocal of square root layer should call back to when its Accept(ILayerVisitor&amp;) functi...</div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a></div><div class="ttdoc">A SoftmaxDescriptor for the SoftmaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00139">Descriptors.hpp:139</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a8423316906ebe6ae6d28c7f69ad91248"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a8423316906ebe6ae6d28c7f69ad91248">armnn::ILayerVisitor::VisitArgMinMaxLayer</a></div><div class="ttdeci">virtual void VisitArgMinMaxLayer(const IConnectableLayer *layer, const ArgMinMaxDescriptor &amp;argMinMaxDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that an arg min max layer should call back to when its Accept(ILayerVisitor&amp;) function is in...</div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a></div><div class="ttdoc">A DepthwiseConvolution2dDescriptor for the DepthwiseConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00460">Descriptors.hpp:460</a></div></div>
<div class="ttc" id="structarmnn_1_1_fill_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fill_descriptor.xhtml">armnn::FillDescriptor</a></div><div class="ttdoc">A FillDescriptor for the FillLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00723">Descriptors.hpp:723</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a></div><div class="ttdoc">A BatchNormalizationDescriptor for the BatchNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00626">Descriptors.hpp:626</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_aab2febd844bcf654e80cf164984c8904"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#aab2febd844bcf654e80cf164984c8904">armnn::ILayerVisitor::VisitPadLayer</a></div><div class="ttdeci">virtual void VisitPadLayer(const IConnectableLayer *layer, const PadDescriptor &amp;padDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function a pad layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a9cbdbdbda6abefbc2e1eacaad47795bd"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a9cbdbdbda6abefbc2e1eacaad47795bd">armnn::ILayerVisitor::VisitMaximumLayer</a></div><div class="ttdeci">virtual void VisitMaximumLayer(const IConnectableLayer *layer, const char *name=nullptr)=0</div><div class="ttdoc">Function a Maximum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_aaf4e8d2b1ed2612f4821ed1d2351667b"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#aaf4e8d2b1ed2612f4821ed1d2351667b">armnn::ILayerVisitor::VisitInstanceNormalizationLayer</a></div><div class="ttdeci">virtual void VisitInstanceNormalizationLayer(const IConnectableLayer *layer, const InstanceNormalizationDescriptor &amp;desc, const char *name=nullptr)=0</div><div class="ttdoc">Function that an instance normalization layer should call back to when its Accept(ILayerVisitor&amp;) fun...</div></div>
<div class="ttc" id="structarmnn_1_1_permute_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a></div><div class="ttdoc">A PermuteDescriptor for the PermuteLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00118">Descriptors.hpp:118</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_a4549b1bbb63fa26700d74854e388784f"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#a4549b1bbb63fa26700d74854e388784f">armnn::ILayerVisitor::FinishVisit</a></div><div class="ttdeci">virtual void FinishVisit()</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_visitor_8hpp_source.xhtml#l00555">ILayerVisitor.hpp:555</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ac0981848e4ae57729f14f72bd4caa9f8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a></div><div class="ttdeci">std::vector&lt; float &gt; anchors({ 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 100.5f, 1.0f, 1.0f })</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_2b72cc348e06937955e62ebdd8a13436.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_i_layer_visitor_8hpp.xhtml">ILayerVisitor.hpp</a></li>
    <li class="footer">Generated on Thu Feb 25 2021 17:27:28 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
