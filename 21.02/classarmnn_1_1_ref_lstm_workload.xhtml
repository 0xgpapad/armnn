<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: RefLstmWorkload Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_ref_lstm_workload.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_ref_lstm_workload-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">RefLstmWorkload Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_ref_lstm_workload_8hpp_source.xhtml">RefLstmWorkload.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for RefLstmWorkload:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_ref_lstm_workload.png" usemap="#RefLstmWorkload_map" alt=""/>
  <map id="RefLstmWorkload_map" name="RefLstmWorkload_map">
<area href="classarmnn_1_1_base_workload.xhtml" alt="BaseWorkload&lt; LstmQueueDescriptor &gt;" shape="rect" coords="0,56,239,80"/>
<area href="classarmnn_1_1_i_workload.xhtml" title="Workload interface to enqueue a layer computation. " alt="IWorkload" shape="rect" coords="0,0,239,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a236c28ffd299dcfa88d6c0260e69f000"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ref_lstm_workload.xhtml#a236c28ffd299dcfa88d6c0260e69f000">RefLstmWorkload</a> (const <a class="el" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</td></tr>
<tr class="separator:a236c28ffd299dcfa88d6c0260e69f000"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae071e8822437c78baea75c3aef3a263a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ref_lstm_workload.xhtml#ae071e8822437c78baea75c3aef3a263a">Execute</a> () const override</td></tr>
<tr class="separator:ae071e8822437c78baea75c3aef3a263a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_base_workload"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_base_workload')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_base_workload.xhtml">BaseWorkload&lt; LstmQueueDescriptor &gt;</a></td></tr>
<tr class="memitem:af2ef420610280dc5a661cd3d4836d5a2 inherit pub_methods_classarmnn_1_1_base_workload"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_base_workload.xhtml#af2ef420610280dc5a661cd3d4836d5a2">BaseWorkload</a> (const <a class="el" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;info)</td></tr>
<tr class="separator:af2ef420610280dc5a661cd3d4836d5a2 inherit pub_methods_classarmnn_1_1_base_workload"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81627f96ba06d76e147f7d392a8117ed inherit pub_methods_classarmnn_1_1_base_workload"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_base_workload.xhtml#a81627f96ba06d76e147f7d392a8117ed">PostAllocationConfigure</a> () override</td></tr>
<tr class="separator:a81627f96ba06d76e147f7d392a8117ed inherit pub_methods_classarmnn_1_1_base_workload"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a965cf380c7adf547d0f14b3f6d1da249 inherit pub_methods_classarmnn_1_1_base_workload"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_base_workload.xhtml#a965cf380c7adf547d0f14b3f6d1da249">GetData</a> () const</td></tr>
<tr class="separator:a965cf380c7adf547d0f14b3f6d1da249 inherit pub_methods_classarmnn_1_1_base_workload"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29c2c6dd77c6fe10674fc6876751cbce inherit pub_methods_classarmnn_1_1_base_workload"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1profiling_1_1_profiling_guid.xhtml">profiling::ProfilingGuid</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_base_workload.xhtml#a29c2c6dd77c6fe10674fc6876751cbce">GetGuid</a> () const final</td></tr>
<tr class="separator:a29c2c6dd77c6fe10674fc6876751cbce inherit pub_methods_classarmnn_1_1_base_workload"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_workload"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_workload')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a></td></tr>
<tr class="memitem:a69c83c02ae8de866bc7a46c49e69c1ba inherit pub_methods_classarmnn_1_1_i_workload"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload.xhtml#a69c83c02ae8de866bc7a46c49e69c1ba">~IWorkload</a> ()</td></tr>
<tr class="separator:a69c83c02ae8de866bc7a46c49e69c1ba inherit pub_methods_classarmnn_1_1_i_workload"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab81312bd5e64cbae2803de9f243bdb32 inherit pub_methods_classarmnn_1_1_i_workload"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload.xhtml#ab81312bd5e64cbae2803de9f243bdb32">RegisterDebugCallback</a> (const <a class="el" href="namespacearmnn.xhtml#a15f3ad9b5e4e3d46b0a6dda246a7bc28">DebugCallbackFunction</a> &amp;)</td></tr>
<tr class="separator:ab81312bd5e64cbae2803de9f243bdb32 inherit pub_methods_classarmnn_1_1_i_workload"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_attribs_classarmnn_1_1_base_workload"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classarmnn_1_1_base_workload')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="classarmnn_1_1_base_workload.xhtml">BaseWorkload&lt; LstmQueueDescriptor &gt;</a></td></tr>
<tr class="memitem:a0a487c549c63319505095b855ea3c195 inherit pro_attribs_classarmnn_1_1_base_workload"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a></td></tr>
<tr class="separator:a0a487c549c63319505095b855ea3c195 inherit pro_attribs_classarmnn_1_1_base_workload"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a902044db290170b8467ed4697b7fed24 inherit pro_attribs_classarmnn_1_1_base_workload"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1profiling_1_1_profiling_guid.xhtml">profiling::ProfilingGuid</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_base_workload.xhtml#a902044db290170b8467ed4697b7fed24">m_Guid</a></td></tr>
<tr class="separator:a902044db290170b8467ed4697b7fed24 inherit pro_attribs_classarmnn_1_1_base_workload"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_ref_lstm_workload_8hpp_source.xhtml#l00016">16</a> of file <a class="el" href="_ref_lstm_workload_8hpp_source.xhtml">RefLstmWorkload.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a236c28ffd299dcfa88d6c0260e69f000"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a236c28ffd299dcfa88d6c0260e69f000">&#9670;&nbsp;</a></span>RefLstmWorkload()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_ref_lstm_workload.xhtml">RefLstmWorkload</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_lstm_workload_8cpp_source.xhtml#l00016">16</a> of file <a class="el" href="_ref_lstm_workload_8cpp_source.xhtml">RefLstmWorkload.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    : BaseWorkload&lt;LstmQueueDescriptor&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    , m_InputToInputWeightsTensor     (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_InputToInputWeights))</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    , m_InputToForgetWeightsTensor    (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_InputToForgetWeights))</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    , m_InputToCellWeightsTensor      (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_InputToCellWeights))</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    , m_InputToOutputWeightsTensor    (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_InputToOutputWeights))</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    , m_RecurrentToInputWeightsTensor (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_RecurrentToInputWeights))</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    , m_RecurrentToForgetWeightsTensor(<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_RecurrentToForgetWeights))</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    , m_RecurrentToCellWeightsTensor  (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_RecurrentToCellWeights))</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    , m_RecurrentToOutputWeightsTensor(<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_RecurrentToOutputWeights))</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    , m_CellToInputWeightsTensor      (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_CellToInputWeights))</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    , m_CellToForgetWeightsTensor     (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_CellToForgetWeights))</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    , m_CellToOutputWeightsTensor     (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_CellToOutputWeights))</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    , m_InputGateBiasTensor           (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_InputGateBias))</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    , m_ForgetGateBiasTensor          (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_ForgetGateBias))</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    , m_CellBiasTensor                (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_CellBias))</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    , m_OutputGateBiasTensor          (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_OutputGateBias))</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    , m_ProjectionWeightsTensor       (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_ProjectionWeights))</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    , m_ProjectionBiasTensor          (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_ProjectionBias))</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    , m_InputLayerNormWeights         (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_InputLayerNormWeights))</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    , m_ForgetLayerNormWeights        (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_ForgetLayerNormWeights))</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    , m_CellLayerNormWeights          (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_CellLayerNormWeights))</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    , m_OutputLayerNormWeights        (<a class="code" href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a>(descriptor.m_OutputLayerNormWeights))</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a1aef5d233d1f569f34d6c36bdf5ae9e5"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a1aef5d233d1f569f34d6c36bdf5ae9e5">AssignScopedCpuTensorHandle</a></div><div class="ttdeci">std::unique_ptr&lt; armnn::ScopedCpuTensorHandle &gt; AssignScopedCpuTensorHandle(const armnn::ConstCpuTensorHandle *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00299">LstmUtils.cpp:299</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ae071e8822437c78baea75c3aef3a263a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae071e8822437c78baea75c3aef3a263a">&#9670;&nbsp;</a></span>Execute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Execute </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload.xhtml#a72ae00e6604850c8798c5e0d825ee7e4">IWorkload</a>.</p>

<p class="definition">Definition at line <a class="el" href="_ref_lstm_workload_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="_ref_lstm_workload_8cpp_source.xhtml">RefLstmWorkload.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::Activation</a>, <a class="el" href="_lstm_utils_8cpp_source.xhtml#l00229">ClipVector()</a>, <a class="el" href="_lstm_utils_8cpp_source.xhtml#l00244">CopyVector()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00194">TensorInfo::GetDataType()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, <a class="el" href="_ref_workload_utils_8hpp_source.xhtml#l00026">armnn::GetTensorInfo()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00935">LstmDescriptor::m_ActivationFunc</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00941">LstmDescriptor::m_CifgEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00937">LstmDescriptor::m_ClippingThresCell</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00939">LstmDescriptor::m_ClippingThresProj</a>, <a class="el" href="_workload_8hpp_source.xhtml#l00046">BaseWorkload&lt; LstmQueueDescriptor &gt;::m_Data</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00030">QueueDescriptor::m_Inputs</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00947">LstmDescriptor::m_LayerNormEnabled</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00031">QueueDescriptor::m_Outputs</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00057">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00943">LstmDescriptor::m_PeepholeEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00945">LstmDescriptor::m_ProjectionEnabled</a>, <a class="el" href="_lstm_utils_8cpp_source.xhtml#l00087">MatrixBatchVectorMultiplyAccumulate()</a>, <a class="el" href="_lstm_utils_8cpp_source.xhtml#l00040">MeanStddevNormalization()</a>, <a class="el" href="_lstm_utils_8cpp_source.xhtml#l00258">SetActivationParameters()</a>, <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">armnn::Sigmoid</a>, <a class="el" href="_lstm_utils_8cpp_source.xhtml#l00173">Sub1Vector()</a>, <a class="el" href="_lstm_utils_8cpp_source.xhtml#l00016">VectorBatchVectorAdd()</a>, <a class="el" href="_lstm_utils_8cpp_source.xhtml#l00113">VectorBatchVectorAssign()</a>, <a class="el" href="_lstm_utils_8cpp_source.xhtml#l00152">VectorBatchVectorCwiseProduct()</a>, <a class="el" href="_lstm_utils_8cpp_source.xhtml#l00131">VectorBatchVectorCwiseProductAccumulate()</a>, <a class="el" href="_lstm_utils_8cpp_source.xhtml#l00187">VectorVectorCwiseProduct()</a>, <a class="el" href="_lstm_utils_8cpp_source.xhtml#l00204">VectorVectorCwiseProductAccumulate()</a>, and <a class="el" href="_lstm_utils_8cpp_source.xhtml#l00076">ZeroVector()</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// This is a porting of the LSTM::Eval() method in the Android code base</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="comment">// Refer to: android/frameworks/ml/nn/common/operations/LSTM.cpp</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> TensorInfo&amp; inputInfo = <a class="code" href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">GetTensorInfo</a>(<a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>[0]);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> TensorInfo&amp; outputInfo = <a class="code" href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">GetTensorInfo</a>(<a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[0]);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> TensorShape&amp; inputShape = inputInfo.GetShape();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&amp; outputType = outputInfo.GetDataType();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; outputStateOut = MakeEncoder&lt;float&gt;(outputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[1]-&gt;Map());</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; cellStateOut   = MakeEncoder&lt;float&gt;(outputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[2]-&gt;Map());</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; output         = MakeEncoder&lt;float&gt;(outputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[3]-&gt;Map());</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellStateOutDecoder = MakeDecoder&lt;float&gt;(outputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[2]-&gt;Map());</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; outputDecoder       = MakeDecoder&lt;float&gt;(outputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[3]-&gt;Map());</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputData     = MakeDecoder&lt;float&gt;(inputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>[0]-&gt;Map());</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; outputStateIn = MakeDecoder&lt;float&gt;(inputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>[1]-&gt;Map());</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellStateIn   = MakeDecoder&lt;float&gt;(inputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>[2]-&gt;Map());</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> uint32_t nBatch = inputShape[0];</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> uint32_t nInput = inputShape[1];</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> uint32_t nCell   = m_InputToOutputWeightsTensor-&gt;GetShape()[0];</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> uint32_t nOutput = m_RecurrentToOutputWeightsTensor-&gt;GetShape()[1];</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> useCifg      = <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> usePeephole  = <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> useLayerNorm = <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// Index the scratch buffers pointers to the global scratch buffer.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; inputGateScratch  = MakeEncoder&lt;float&gt;(outputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[0]-&gt;Map());</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; cellScratch       = MakeEncoder&lt;float&gt;(outputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[0]-&gt;Map());</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; forgetGateScratch = MakeEncoder&lt;float&gt;(outputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[0]-&gt;Map());</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; outputGateScratch = MakeEncoder&lt;float&gt;(outputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[0]-&gt;Map());</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputGateScratchDecoder =</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        MakeDecoder&lt;float&gt;(outputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[0]-&gt;Map());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellScratchDecoder =</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        MakeDecoder&lt;float&gt;(outputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[0]-&gt;Map());</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; forgetGateScratchDecoder =</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        MakeDecoder&lt;float&gt;(outputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[0]-&gt;Map());</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; outputGateScratchDecoder =</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        MakeDecoder&lt;float&gt;(outputInfo, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[0]-&gt;Map());</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">if</span> (useCifg)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        *cellScratch       += (0 * nCell * nBatch);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        *forgetGateScratch += (1 * nCell * nBatch);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        *outputGateScratch += (2 * nCell * nBatch);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        *cellScratchDecoder       += (0 * nCell * nBatch);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        *forgetGateScratchDecoder += (1 * nCell * nBatch);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        *outputGateScratchDecoder += (2 * nCell * nBatch);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        *inputGateScratch  += (0 * nCell * nBatch);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        *cellScratch       += (1 * nCell * nBatch);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        *forgetGateScratch += (2 * nCell * nBatch);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        *outputGateScratch += (3 * nCell * nBatch);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        *inputGateScratchDecoder  += (0 * nCell * nBatch);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        *cellScratchDecoder       += (1 * nCell * nBatch);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        *forgetGateScratchDecoder += (2 * nCell * nBatch);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        *outputGateScratchDecoder += (3 * nCell * nBatch);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputToInputWeightsTensor;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputToForgetWeightsTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        m_InputToForgetWeightsTensor-&gt;GetTensorInfo(), m_InputToForgetWeightsTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputToCellWeightsTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        m_InputToCellWeightsTensor-&gt;GetTensorInfo(), m_InputToCellWeightsTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputToOutputWeightsTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        m_InputToOutputWeightsTensor-&gt;GetTensorInfo(), m_InputToOutputWeightsTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; recurrentToInputWeightsTensor;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; recurrentToForgetWeightsTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        m_RecurrentToForgetWeightsTensor-&gt;GetTensorInfo(), m_RecurrentToForgetWeightsTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; recurrentToCellWeightsTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        m_RecurrentToCellWeightsTensor-&gt;GetTensorInfo(), m_RecurrentToCellWeightsTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; recurrentToOutputWeightsTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        m_RecurrentToOutputWeightsTensor-&gt;GetTensorInfo(), m_RecurrentToOutputWeightsTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputGateBiasTensor;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; forgetGateBiasTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        m_ForgetGateBiasTensor-&gt;GetTensorInfo(), m_ForgetGateBiasTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellBiasTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        m_CellBiasTensor-&gt;GetTensorInfo(), m_CellBiasTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; outputGateBiasTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        m_OutputGateBiasTensor-&gt;GetTensorInfo(), m_OutputGateBiasTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellToInputWeightsTensor;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellToForgetWeightsTensor;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellToOutputWeightsTensor;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; projectionWeightsTensor;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; projectionBiasTensor;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputLayerNormWeights;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; forgetLayerNormWeights;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellLayerNormWeights;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; outputLayerNormWeights;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">if</span> (useLayerNorm)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">if</span> (!useCifg)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            inputLayerNormWeights = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    m_InputLayerNormWeights-&gt;GetTensorInfo(), m_InputLayerNormWeights-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        forgetLayerNormWeights = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                m_ForgetLayerNormWeights-&gt;GetTensorInfo(), m_ForgetLayerNormWeights-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        cellLayerNormWeights = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                m_CellLayerNormWeights-&gt;GetTensorInfo(), m_CellLayerNormWeights-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        outputLayerNormWeights = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                m_OutputLayerNormWeights-&gt;GetTensorInfo(), m_OutputLayerNormWeights-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">if</span> (!useCifg)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        inputToInputWeightsTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            m_InputToInputWeightsTensor-&gt;GetTensorInfo(), m_InputToInputWeightsTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        inputGateBiasTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            m_InputGateBiasTensor-&gt;GetTensorInfo(), m_InputGateBiasTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        recurrentToInputWeightsTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            m_RecurrentToInputWeightsTensor-&gt;GetTensorInfo(), m_RecurrentToInputWeightsTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">if</span> (usePeephole)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        cellToForgetWeightsTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            m_CellToForgetWeightsTensor-&gt;GetTensorInfo(), m_CellToForgetWeightsTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        cellToOutputWeightsTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            m_CellToOutputWeightsTensor-&gt;GetTensorInfo(), m_CellToOutputWeightsTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">if</span> (!useCifg &amp;&amp; usePeephole)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        cellToInputWeightsTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            m_CellToInputWeightsTensor-&gt;GetTensorInfo(), m_CellToInputWeightsTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        projectionWeightsTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            m_ProjectionWeightsTensor-&gt;GetTensorInfo(), m_ProjectionWeightsTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">if</span> (m_ProjectionBiasTensor)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            projectionBiasTensor = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                m_ProjectionBiasTensor-&gt;GetTensorInfo(), m_ProjectionBiasTensor-&gt;GetTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">if</span> (!useLayerNorm)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="comment">// Initialize scratch buffers with bias.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">if</span> (!useCifg)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a>(*inputGateBiasTensor,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                    nCell, nBatch, *inputGateScratch);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a>(*forgetGateBiasTensor,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                nCell, nBatch, *forgetGateScratch);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a>(*cellBiasTensor,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                nCell, nBatch, *cellScratch);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a>(*outputGateBiasTensor,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                nCell, nBatch, *outputGateScratch);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="comment">// Initialize scratch buffers with zeroes.</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">if</span> (!useCifg)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a>(*inputGateScratch, nCell * nBatch);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a>(*forgetGateScratch, nCell * nBatch);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a>(*cellScratch      , nCell * nBatch);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a>(*outputGateScratch, nCell * nBatch);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="comment">// For each batch and cell: compute input_weight * input.</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">if</span> (!useCifg)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*inputToInputWeightsTensor,</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                            nCell, nInput, *inputData, nBatch, *inputGateScratch);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*inputToForgetWeightsTensor,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                        nCell, nInput, *inputData, nBatch, *forgetGateScratch);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*inputToCellWeightsTensor,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                        nCell, nInput, *inputData, nBatch, *cellScratch);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*inputToOutputWeightsTensor,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                        nCell, nInput, *inputData, nBatch, *outputGateScratch);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="comment">// For each batch and cell: compute recurrent_weight * output_state.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">if</span> (!useCifg)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*recurrentToInputWeightsTensor,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                            nCell, nOutput, *outputStateIn, nBatch, *inputGateScratch);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*recurrentToForgetWeightsTensor,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                        nCell, nOutput, *outputStateIn, nBatch, *forgetGateScratch);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*recurrentToCellWeightsTensor,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                        nCell, nOutput, *outputStateIn, nBatch, *cellScratch);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*recurrentToOutputWeightsTensor,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                        nCell, nOutput, *outputStateIn, nBatch, *outputGateScratch);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="comment">// For each batch and cell: update input gate.</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">if</span> (!useCifg)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">if</span> (usePeephole)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a796323e16216b880043dc5ebbaa2372b">VectorBatchVectorCwiseProductAccumulate</a>(*cellToInputWeightsTensor,</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                                    nCell, *cellStateIn, nBatch, *inputGateScratch);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">if</span> (useLayerNorm)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a>(*inputGateScratchDecoder,</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                    *inputGateScratch, nCell, nBatch, m_LayerNormEpsilon);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a>(*inputLayerNormWeights,</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                                          nCell, *inputGateScratchDecoder, nBatch, *inputGateScratch);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a>(*inputGateBiasTensor,</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                                 nCell, *inputGateScratchDecoder, nBatch, *inputGateScratch);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">Activation</a>(*inputGateScratchDecoder, *inputGateScratch,</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                   TensorInfo({nCell, nBatch}, outputType),</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                   <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">ActivationFunction::Sigmoid</a>, 0, 0);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="comment">// For each batch and cell: update forget gate.</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">if</span> (usePeephole)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a796323e16216b880043dc5ebbaa2372b">VectorBatchVectorCwiseProductAccumulate</a>(*cellToForgetWeightsTensor, nCell,</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                                *cellStateIn, nBatch, *forgetGateScratch);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">if</span> (useLayerNorm)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    {</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a>(*forgetGateScratchDecoder,</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                *forgetGateScratch, nCell, nBatch, m_LayerNormEpsilon);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a>(*forgetLayerNormWeights,</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                      nCell, *forgetGateScratchDecoder, nBatch, *forgetGateScratch);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a>(*forgetGateBiasTensor,</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                             nCell, *forgetGateScratchDecoder, nBatch, *forgetGateScratch);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">Activation</a>(*forgetGateScratchDecoder, *forgetGateScratch,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;               TensorInfo({nCell, nBatch}, outputType),</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;               <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">ActivationFunction::Sigmoid</a>, 0, 0);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="comment">// For each batch and cell: update the cell.</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">if</span> (useLayerNorm)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a>(*cellScratchDecoder,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                *cellScratch, nCell, nBatch, m_LayerNormEpsilon);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a>(*cellLayerNormWeights,</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                      nCell, *cellScratchDecoder, nBatch, *cellScratch);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a>(*cellBiasTensor,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                             nCell, *cellScratchDecoder, nBatch, *cellScratch);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#a5b81dc0a1a9a2bccab8bb79dfa3e77b7">VectorVectorCwiseProduct</a>(*forgetGateScratchDecoder, *cellStateIn, nBatch * nCell, *cellStateOut);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationFunction</a> armnnActivationFunc = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">ActivationFunction::Sigmoid</a>;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordtype">float</span> a = 0;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordtype">float</span> b = 0;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#afc83b9418e9721cee21de245cb8533de">SetActivationParameters</a>(<a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a>, armnnActivationFunc, a, b);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> &gt; 0)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">Activation</a>(*cellScratchDecoder, *cellScratch,</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                   TensorInfo({nCell, nBatch}, outputType),</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                   armnnActivationFunc, a, b);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    }</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">if</span> (useCifg)</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#aca7bd1dff180b6a5de894537f8220793">Sub1Vector</a>(*forgetGateScratchDecoder, nBatch * nCell, *forgetGateScratch);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a2e653f948d93f4177f267a7b1b4ed47d">VectorVectorCwiseProductAccumulate</a>(</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            *cellScratchDecoder, *forgetGateScratchDecoder, nBatch * nCell, *cellStateOut);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    }</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a2e653f948d93f4177f267a7b1b4ed47d">VectorVectorCwiseProductAccumulate</a>(</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            *cellScratchDecoder, *inputGateScratchDecoder, nBatch * nCell, *cellStateOut);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    }</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> &gt; 0.0)</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    {</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a117781e8e9b7321722bbdd8ff74b484a">ClipVector</a>(*cellStateOutDecoder, nBatch * nCell, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a>, *cellStateOut);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    }</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="comment">// For each batch and cell: update the output gate.</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">if</span> (usePeephole)</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    {</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a796323e16216b880043dc5ebbaa2372b">VectorBatchVectorCwiseProductAccumulate</a>(*cellToOutputWeightsTensor,</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                                                nCell, *cellStateOutDecoder, nBatch, *outputGateScratch);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    }</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordflow">if</span> (useLayerNorm)</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a>(*outputGateScratchDecoder,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                *outputGateScratch, nCell, nBatch, m_LayerNormEpsilon);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a>(*outputLayerNormWeights,</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                                      nCell, *outputGateScratchDecoder, nBatch, *outputGateScratch);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a>(*outputGateBiasTensor,</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                             nCell, *outputGateScratchDecoder, nBatch, *outputGateScratch);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    }</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">Activation</a>(*outputGateScratchDecoder, *outputGateScratch,</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;               TensorInfo({nCell, nBatch}, outputType),</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;               <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">ActivationFunction::Sigmoid</a>, 0, 0);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> &gt; 0)</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    {</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">Activation</a>(*cellStateOutDecoder, *cellScratch,</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                   TensorInfo({nCell, nBatch}, outputType),</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                   armnnActivationFunc, a, b);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    }</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#a5b81dc0a1a9a2bccab8bb79dfa3e77b7">VectorVectorCwiseProduct</a>(*outputGateScratchDecoder, *cellScratchDecoder, nBatch * nCell, *outputGateScratch);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="comment">// For each batch: update the projection and output_state.</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>)</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    {</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">if</span> (m_ProjectionBiasTensor)</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a>(*projectionBiasTensor,</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                                    nOutput, nBatch, *output);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        }</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*projectionWeightsTensor,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                            nOutput, nCell, *outputGateScratchDecoder, nBatch, *output);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a> &gt; 0.0)</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        {</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a117781e8e9b7321722bbdd8ff74b484a">ClipVector</a>(*outputDecoder, nBatch * nOutput, <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a>, *output);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        }</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    }</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    {</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a00d8a623c04f1120f6fee3fe38d1cee9">CopyVector</a>(*outputGateScratchDecoder, nBatch * nOutput, *output);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    }</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#a00d8a623c04f1120f6fee3fe38d1cee9">CopyVector</a>(*outputDecoder, nBatch * nOutput, *outputStateOut);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;}</div><div class="ttc" id="_lstm_utils_8cpp_xhtml_a0ed27dd6d6125a06bf654080f4184360"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a></div><div class="ttdeci">void MeanStddevNormalization(armnn::Decoder&lt; float &gt; &amp;input_vector, armnn::Encoder&lt; float &gt; &amp;output_vector, uint32_t v_size, uint32_t n_batch, float normalization_epsilon)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00040">LstmUtils.cpp:40</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a389c4bbafd0fff7060cbb183f20a2134"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a></div><div class="ttdeci">void VectorBatchVectorAdd(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Decoder&lt; float &gt; &amp;batchVector, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00016">LstmUtils.cpp:16</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a6c9de81fc65b3c4924cab11907075a17"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">armnn::LstmDescriptor::m_ProjectionEnabled</a></div><div class="ttdeci">bool m_ProjectionEnabled</div><div class="ttdoc">Enable/disable the projection layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00945">Descriptors.hpp:945</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a86e88bef0df4df96df752b4b8955a3af"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">armnn::LstmDescriptor::m_ClippingThresProj</a></div><div class="ttdeci">float m_ClippingThresProj</div><div class="ttdoc">Clipping threshold value for the projection. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00939">Descriptors.hpp:939</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a117781e8e9b7321722bbdd8ff74b484a"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a117781e8e9b7321722bbdd8ff74b484a">ClipVector</a></div><div class="ttdeci">void ClipVector(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, float absLimit, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00229">LstmUtils.cpp:229</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_aca7bd1dff180b6a5de894537f8220793"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#aca7bd1dff180b6a5de894537f8220793">Sub1Vector</a></div><div class="ttdeci">void Sub1Vector(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Encoder&lt; float &gt; &amp;result)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00173">LstmUtils.cpp:173</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml_a0a487c549c63319505095b855ea3c195"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">armnn::BaseWorkload&lt; LstmQueueDescriptor &gt;::m_Data</a></div><div class="ttdeci">const LstmQueueDescriptor m_Data</div><div class="ttdef"><b>Definition:</b> <a href="_workload_8hpp_source.xhtml#l00046">Workload.hpp:46</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a00d8a623c04f1120f6fee3fe38d1cee9"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a00d8a623c04f1120f6fee3fe38d1cee9">CopyVector</a></div><div class="ttdeci">void CopyVector(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00244">LstmUtils.cpp:244</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">armnn::ActivationFunction::Sigmoid</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a796323e16216b880043dc5ebbaa2372b"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a796323e16216b880043dc5ebbaa2372b">VectorBatchVectorCwiseProductAccumulate</a></div><div class="ttdeci">void VectorBatchVectorCwiseProductAccumulate(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Decoder&lt; float &gt; &amp;batchVector, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00131">LstmUtils.cpp:131</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a4c20bc573b70e89327b334f924da97b5"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a></div><div class="ttdeci">void ZeroVector(armnn::Encoder&lt; float &gt; &amp;vector, uint32_t vSize)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00076">LstmUtils.cpp:76</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a5b81dc0a1a9a2bccab8bb79dfa3e77b7"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a5b81dc0a1a9a2bccab8bb79dfa3e77b7">VectorVectorCwiseProduct</a></div><div class="ttdeci">void VectorVectorCwiseProduct(armnn::Decoder&lt; float &gt; &amp;vector1, armnn::Decoder&lt; float &gt; &amp;vector2, uint32_t vSize, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00187">LstmUtils.cpp:187</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00057">WorkloadData.hpp:57</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a1d7ad9698b02282a57fdb17b3af745f9"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a></div><div class="ttdeci">void VectorBatchVectorCwiseProduct(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Decoder&lt; float &gt; &amp;batchVector, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00152">LstmUtils.cpp:152</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_ab93a2c78551c3d3aba8ddcafb792a36d"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a></div><div class="ttdeci">void MatrixBatchVectorMultiplyAccumulate(armnn::Decoder&lt; float &gt; &amp;matrix, uint32_t mRows, uint32_t mCols, armnn::Decoder&lt; float &gt; &amp;vector, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00087">LstmUtils.cpp:87</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00032">Types.hpp:32</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a2837b4396f20c956952d1a7286cab5f8"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">armnn::LstmDescriptor::m_PeepholeEnabled</a></div><div class="ttdeci">bool m_PeepholeEnabled</div><div class="ttdoc">Enable/disable peephole. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00943">Descriptors.hpp:943</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a2e653f948d93f4177f267a7b1b4ed47d"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a2e653f948d93f4177f267a7b1b4ed47d">VectorVectorCwiseProductAccumulate</a></div><div class="ttdeci">void VectorVectorCwiseProductAccumulate(armnn::Decoder&lt; float &gt; &amp;vector1, armnn::Decoder&lt; float &gt; &amp;vector2, uint32_t vSize, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00204">LstmUtils.cpp:204</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ae1b07ed928036004bd257169e5aeeef4"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">armnn::LstmDescriptor::m_ActivationFunc</a></div><div class="ttdeci">uint32_t m_ActivationFunc</div><div class="ttdoc">The activation function to use. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00935">Descriptors.hpp:935</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a8c4a96233c9b62c76d611316da11124b"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a></div><div class="ttdeci">void VectorBatchVectorAssign(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outBatchVector)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00113">LstmUtils.cpp:113</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a531a3907ec13d3772370da88030191a5"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">armnn::LstmDescriptor::m_ClippingThresCell</a></div><div class="ttdeci">float m_ClippingThresCell</div><div class="ttdoc">Clipping threshold value for the cell state. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00937">Descriptors.hpp:937</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ad474e5c51a0b194ef32e812b86c0cbdb"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">armnn::LstmDescriptor::m_CifgEnabled</a></div><div class="ttdeci">bool m_CifgEnabled</div><div class="ttdoc">Enable/disable cifg (coupled input &amp; forget gate). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00941">Descriptors.hpp:941</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_xhtml_a6abd491bb99ffe88bd472c1ae5a1ed1a"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">armnn::QueueDescriptor::m_Outputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Outputs</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00031">WorkloadData.hpp:31</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a4a8ec49f130084445d44297549254780"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">armnn::LstmDescriptor::m_LayerNormEnabled</a></div><div class="ttdeci">bool m_LayerNormEnabled</div><div class="ttdoc">Enable/disable layer normalization. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00947">Descriptors.hpp:947</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_xhtml_a4b50e46a6810018f3edecfb68b2a76b3"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">armnn::QueueDescriptor::m_Inputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Inputs</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00030">WorkloadData.hpp:30</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_afc83b9418e9721cee21de245cb8533de"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#afc83b9418e9721cee21de245cb8533de">SetActivationParameters</a></div><div class="ttdeci">void SetActivationParameters(uint32_t activation, armnn::ActivationFunction &amp;outArmnnActivation, float &amp;outA, float &amp;outB)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00258">LstmUtils.cpp:258</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af7ec4c0fa4375a45a70e4e31f3d8af47"><div class="ttname"><a href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">armnn::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo(const ITensorHandle *tensorHandle)</div><div class="ttdoc">float32 helpers </div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_utils_8hpp_source.xhtml#l00026">RefWorkloadUtils.hpp:26</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9ea"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a></div><div class="ttdeci">ActivationFunction</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00056">Types.hpp:56</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/reference/workloads/<a class="el" href="_ref_lstm_workload_8hpp_source.xhtml">RefLstmWorkload.hpp</a></li>
<li>src/backends/reference/workloads/<a class="el" href="_ref_lstm_workload_8cpp_source.xhtml">RefLstmWorkload.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_ref_lstm_workload.xhtml">RefLstmWorkload</a></li>
    <li class="footer">Generated on Fri Mar 19 2021 15:26:13 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
