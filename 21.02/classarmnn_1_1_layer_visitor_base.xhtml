<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: LayerVisitorBase&lt; DefaultPolicy &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_layer_visitor_base.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="classarmnn_1_1_layer_visitor_base-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">LayerVisitorBase&lt; DefaultPolicy &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Visitor base class with empty implementations.  
 <a href="classarmnn_1_1_layer_visitor_base.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for LayerVisitorBase&lt; DefaultPolicy &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_layer_visitor_base.png" usemap="#LayerVisitorBase_3C_20DefaultPolicy_20_3E_map" alt=""/>
  <map id="LayerVisitorBase_3C_20DefaultPolicy_20_3E_map" name="LayerVisitorBase_3C_20DefaultPolicy_20_3E_map">
<area href="classarmnn_1_1_i_layer_visitor.xhtml" alt="ILayerVisitor" shape="rect" coords="0,0,208,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:acb663f7919f9566c3dcc8b6478999d34"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acb663f7919f9566c3dcc8b6478999d34">VisitAbsLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:acb663f7919f9566c3dcc8b6478999d34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an absolute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#acb663f7919f9566c3dcc8b6478999d34">More...</a><br /></td></tr>
<tr class="separator:acb663f7919f9566c3dcc8b6478999d34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30b99e5202fc77b02f92d5c44e5ca86d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a30b99e5202fc77b02f92d5c44e5ca86d">VisitActivationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a30b99e5202fc77b02f92d5c44e5ca86d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a30b99e5202fc77b02f92d5c44e5ca86d">More...</a><br /></td></tr>
<tr class="separator:a30b99e5202fc77b02f92d5c44e5ca86d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c9f3396207de48925016a2eee6aa12b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0c9f3396207de48925016a2eee6aa12b">VisitAdditionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a0c9f3396207de48925016a2eee6aa12b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an addition layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a0c9f3396207de48925016a2eee6aa12b">More...</a><br /></td></tr>
<tr class="separator:a0c9f3396207de48925016a2eee6aa12b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a719076848950255b929636c97aaaede4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a719076848950255b929636c97aaaede4">VisitArgMinMaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a719076848950255b929636c97aaaede4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an arg min max layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a719076848950255b929636c97aaaede4">More...</a><br /></td></tr>
<tr class="separator:a719076848950255b929636c97aaaede4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0ae25ba5f3c494d1fb32f06cd57af10"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab0ae25ba5f3c494d1fb32f06cd57af10">VisitBatchNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ab0ae25ba5f3c494d1fb32f06cd57af10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ab0ae25ba5f3c494d1fb32f06cd57af10">More...</a><br /></td></tr>
<tr class="separator:ab0ae25ba5f3c494d1fb32f06cd57af10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62aac266e23bd680633e62832f56bc11"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a62aac266e23bd680633e62832f56bc11">VisitBatchToSpaceNdLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a62aac266e23bd680633e62832f56bc11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a62aac266e23bd680633e62832f56bc11">More...</a><br /></td></tr>
<tr class="separator:a62aac266e23bd680633e62832f56bc11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95dc828296e6d05c0bf0b691d4dc6a3f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a95dc828296e6d05c0bf0b691d4dc6a3f">VisitComparisonLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a95dc828296e6d05c0bf0b691d4dc6a3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Comparison layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a95dc828296e6d05c0bf0b691d4dc6a3f">More...</a><br /></td></tr>
<tr class="separator:a95dc828296e6d05c0bf0b691d4dc6a3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d4f84683c4a00dfb5eecb6b165d41b9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2d4f84683c4a00dfb5eecb6b165d41b9">VisitConcatLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">ConcatDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a2d4f84683c4a00dfb5eecb6b165d41b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a2d4f84683c4a00dfb5eecb6b165d41b9">More...</a><br /></td></tr>
<tr class="separator:a2d4f84683c4a00dfb5eecb6b165d41b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90698dba3e90ced6f562cda146bf15e3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a90698dba3e90ced6f562cda146bf15e3">VisitConstantLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a90698dba3e90ced6f562cda146bf15e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a layer with no inputs and a single output, which always corresponds to the passed in constant tensor should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a90698dba3e90ced6f562cda146bf15e3">More...</a><br /></td></tr>
<tr class="separator:a90698dba3e90ced6f562cda146bf15e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff3099f516e132f4d8818a54fa1ee767"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aff3099f516e132f4d8818a54fa1ee767">VisitConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;, const char *) override</td></tr>
<tr class="memdesc:aff3099f516e132f4d8818a54fa1ee767"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aff3099f516e132f4d8818a54fa1ee767">More...</a><br /></td></tr>
<tr class="separator:aff3099f516e132f4d8818a54fa1ee767"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3aaff3b6165f8de16522bc4a1ed32a0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ad3aaff3b6165f8de16522bc4a1ed32a0">VisitDepthToSpaceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ad3aaff3b6165f8de16522bc4a1ed32a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a depth to space layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ad3aaff3b6165f8de16522bc4a1ed32a0">More...</a><br /></td></tr>
<tr class="separator:ad3aaff3b6165f8de16522bc4a1ed32a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70050fc50ee44a439665f914d5fe9684"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a70050fc50ee44a439665f914d5fe9684">VisitDepthwiseConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;, const char *) override</td></tr>
<tr class="memdesc:a70050fc50ee44a439665f914d5fe9684"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D depthwise convolution layer with biases should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a70050fc50ee44a439665f914d5fe9684">More...</a><br /></td></tr>
<tr class="separator:a70050fc50ee44a439665f914d5fe9684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa27cc900d32dcc4a92f59e3bab4f4653"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aa27cc900d32dcc4a92f59e3bab4f4653">VisitDequantizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:aa27cc900d32dcc4a92f59e3bab4f4653"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a Dequantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aa27cc900d32dcc4a92f59e3bab4f4653">More...</a><br /></td></tr>
<tr class="separator:aa27cc900d32dcc4a92f59e3bab4f4653"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88bad2eef809ccf6f2129f9ed4a6f3a7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a88bad2eef809ccf6f2129f9ed4a6f3a7">VisitDetectionPostProcessLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a88bad2eef809ccf6f2129f9ed4a6f3a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a Detection PostProcess layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a88bad2eef809ccf6f2129f9ed4a6f3a7">More...</a><br /></td></tr>
<tr class="separator:a88bad2eef809ccf6f2129f9ed4a6f3a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7450859464a381eafaedb33adc582f75"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a7450859464a381eafaedb33adc582f75">VisitDivisionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a7450859464a381eafaedb33adc582f75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a division layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a7450859464a381eafaedb33adc582f75">More...</a><br /></td></tr>
<tr class="separator:a7450859464a381eafaedb33adc582f75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d02f4bfaffcb16e340e9b8c20bc5e35"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9d02f4bfaffcb16e340e9b8c20bc5e35">VisitElementwiseUnaryLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a9d02f4bfaffcb16e340e9b8c20bc5e35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a9d02f4bfaffcb16e340e9b8c20bc5e35">More...</a><br /></td></tr>
<tr class="separator:a9d02f4bfaffcb16e340e9b8c20bc5e35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3249cd1186dc7e700a0ec0884fb9d5fa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3249cd1186dc7e700a0ec0884fb9d5fa">VisitEqualLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a3249cd1186dc7e700a0ec0884fb9d5fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an Equal layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a3249cd1186dc7e700a0ec0884fb9d5fa">More...</a><br /></td></tr>
<tr class="separator:a3249cd1186dc7e700a0ec0884fb9d5fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae343d79924ac474939c3e38a8b80004e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae343d79924ac474939c3e38a8b80004e">VisitFillLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ae343d79924ac474939c3e38a8b80004e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a fill layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ae343d79924ac474939c3e38a8b80004e">More...</a><br /></td></tr>
<tr class="separator:ae343d79924ac474939c3e38a8b80004e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a060c3a3f978fec03212afaff1fe1648d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a060c3a3f978fec03212afaff1fe1648d">VisitFloorLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a060c3a3f978fec03212afaff1fe1648d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a floor layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a060c3a3f978fec03212afaff1fe1648d">More...</a><br /></td></tr>
<tr class="separator:a060c3a3f978fec03212afaff1fe1648d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9049cf6d72d4b67fff93670f21c09da3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9049cf6d72d4b67fff93670f21c09da3">VisitFullyConnectedLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;, const char *) override</td></tr>
<tr class="memdesc:a9049cf6d72d4b67fff93670f21c09da3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a9049cf6d72d4b67fff93670f21c09da3">More...</a><br /></td></tr>
<tr class="separator:a9049cf6d72d4b67fff93670f21c09da3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7639178bd8c29ffa83162dfd108b725"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae7639178bd8c29ffa83162dfd108b725">VisitGatherLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:ae7639178bd8c29ffa83162dfd108b725"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ae7639178bd8c29ffa83162dfd108b725">More...</a><br /></td></tr>
<tr class="separator:ae7639178bd8c29ffa83162dfd108b725"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea011723381847939ee1773d7c6fac25"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aea011723381847939ee1773d7c6fac25">VisitGatherLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:aea011723381847939ee1773d7c6fac25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aea011723381847939ee1773d7c6fac25">More...</a><br /></td></tr>
<tr class="separator:aea011723381847939ee1773d7c6fac25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a28dbfcd1e83bc8158d78feb93d4a0c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2a28dbfcd1e83bc8158d78feb93d4a0c">VisitGreaterLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a2a28dbfcd1e83bc8158d78feb93d4a0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Greater layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a2a28dbfcd1e83bc8158d78feb93d4a0c">More...</a><br /></td></tr>
<tr class="separator:a2a28dbfcd1e83bc8158d78feb93d4a0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c23f9e9d8427775925d071feee5dbd1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6c23f9e9d8427775925d071feee5dbd1">VisitInputLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>, const char *) override</td></tr>
<tr class="memdesc:a6c23f9e9d8427775925d071feee5dbd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an <a class="el" href="classarmnn_1_1_input_layer.xhtml" title="A layer user-provided data can be bound to (e.g. inputs, outputs). ">InputLayer</a> should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a6c23f9e9d8427775925d071feee5dbd1">More...</a><br /></td></tr>
<tr class="separator:a6c23f9e9d8427775925d071feee5dbd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58f90a911e6827702c478cabaeac57fe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a58f90a911e6827702c478cabaeac57fe">VisitInstanceNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a58f90a911e6827702c478cabaeac57fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an instance normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a58f90a911e6827702c478cabaeac57fe">More...</a><br /></td></tr>
<tr class="separator:a58f90a911e6827702c478cabaeac57fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae68e2b431ea3d2822f19ad4ac806fdaa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae68e2b431ea3d2822f19ad4ac806fdaa">VisitL2NormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ae68e2b431ea3d2822f19ad4ac806fdaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an L2 normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ae68e2b431ea3d2822f19ad4ac806fdaa">More...</a><br /></td></tr>
<tr class="separator:ae68e2b431ea3d2822f19ad4ac806fdaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d4d2e5580385ee664830720698d112c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4d2e5580385ee664830720698d112c">VisitLogSoftmaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8d4d2e5580385ee664830720698d112c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a log softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8d4d2e5580385ee664830720698d112c">More...</a><br /></td></tr>
<tr class="separator:a8d4d2e5580385ee664830720698d112c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4f176ed33afb13a9e590b86990eaa3c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aa4f176ed33afb13a9e590b86990eaa3c">VisitLogicalBinaryLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:aa4f176ed33afb13a9e590b86990eaa3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a logical binary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aa4f176ed33afb13a9e590b86990eaa3c">More...</a><br /></td></tr>
<tr class="separator:aa4f176ed33afb13a9e590b86990eaa3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf1a238ec5b6bb172bc4cd3811f08b28"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aaf1a238ec5b6bb172bc4cd3811f08b28">VisitLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:aaf1a238ec5b6bb172bc4cd3811f08b28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an Lstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aaf1a238ec5b6bb172bc4cd3811f08b28">More...</a><br /></td></tr>
<tr class="separator:aaf1a238ec5b6bb172bc4cd3811f08b28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a778e1b2219e3eb2d790d6e6e653a9f25"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a778e1b2219e3eb2d790d6e6e653a9f25">VisitMaximumLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a778e1b2219e3eb2d790d6e6e653a9f25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Maximum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a778e1b2219e3eb2d790d6e6e653a9f25">More...</a><br /></td></tr>
<tr class="separator:a778e1b2219e3eb2d790d6e6e653a9f25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0180a15e542f4ef240fadc09fe4b2e3f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0180a15e542f4ef240fadc09fe4b2e3f">VisitMeanLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a0180a15e542f4ef240fadc09fe4b2e3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Mean layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a0180a15e542f4ef240fadc09fe4b2e3f">More...</a><br /></td></tr>
<tr class="separator:a0180a15e542f4ef240fadc09fe4b2e3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafb62c879f0c78bfdc3c4e4f2cb82e68"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aafb62c879f0c78bfdc3c4e4f2cb82e68">VisitMergeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:aafb62c879f0c78bfdc3c4e4f2cb82e68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a merge layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aafb62c879f0c78bfdc3c4e4f2cb82e68">More...</a><br /></td></tr>
<tr class="separator:aafb62c879f0c78bfdc3c4e4f2cb82e68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acef69a3870409ca9a6130db91047e729"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acef69a3870409ca9a6130db91047e729">VisitMergerLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="namespacearmnn.xhtml#a003d213dd28b0b8c0f26fbf268ccb975">MergerDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:acef69a3870409ca9a6130db91047e729"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a merger layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#acef69a3870409ca9a6130db91047e729">More...</a><br /></td></tr>
<tr class="separator:acef69a3870409ca9a6130db91047e729"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e24e9a7bf52efc1699c126435574e95"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1e24e9a7bf52efc1699c126435574e95">VisitMinimumLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a1e24e9a7bf52efc1699c126435574e95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Minimum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a1e24e9a7bf52efc1699c126435574e95">More...</a><br /></td></tr>
<tr class="separator:a1e24e9a7bf52efc1699c126435574e95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac57d22126a9131108214df9177addade"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac57d22126a9131108214df9177addade">VisitMultiplicationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:ac57d22126a9131108214df9177addade"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a multiplication layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ac57d22126a9131108214df9177addade">More...</a><br /></td></tr>
<tr class="separator:ac57d22126a9131108214df9177addade"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3150ff2299a2e193952300b8c9edd1e1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3150ff2299a2e193952300b8c9edd1e1">VisitNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a3150ff2299a2e193952300b8c9edd1e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a3150ff2299a2e193952300b8c9edd1e1">More...</a><br /></td></tr>
<tr class="separator:a3150ff2299a2e193952300b8c9edd1e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc39ddb06acfd91cf3cfb0fcd9337005"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acc39ddb06acfd91cf3cfb0fcd9337005">VisitOutputLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>, const char *) override</td></tr>
<tr class="memdesc:acc39ddb06acfd91cf3cfb0fcd9337005"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an output layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#acc39ddb06acfd91cf3cfb0fcd9337005">More...</a><br /></td></tr>
<tr class="separator:acc39ddb06acfd91cf3cfb0fcd9337005"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a240e1b725cc204bb468b6b402e1670"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a240e1b725cc204bb468b6b402e1670">VisitPadLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8a240e1b725cc204bb468b6b402e1670"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a pad layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8a240e1b725cc204bb468b6b402e1670">More...</a><br /></td></tr>
<tr class="separator:a8a240e1b725cc204bb468b6b402e1670"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a275f4c270ce472abc8701f6475ff7f38"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a275f4c270ce472abc8701f6475ff7f38">VisitPermuteLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a275f4c270ce472abc8701f6475ff7f38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a275f4c270ce472abc8701f6475ff7f38">More...</a><br /></td></tr>
<tr class="separator:a275f4c270ce472abc8701f6475ff7f38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e369658cb00178eeb9136f1c912fd3f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a5e369658cb00178eeb9136f1c912fd3f">VisitPooling2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a5e369658cb00178eeb9136f1c912fd3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a5e369658cb00178eeb9136f1c912fd3f">More...</a><br /></td></tr>
<tr class="separator:a5e369658cb00178eeb9136f1c912fd3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79c933bea6fb9986c3baa171be98da5c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a79c933bea6fb9986c3baa171be98da5c">VisitPreluLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a79c933bea6fb9986c3baa171be98da5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a PReLU activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a79c933bea6fb9986c3baa171be98da5c">More...</a><br /></td></tr>
<tr class="separator:a79c933bea6fb9986c3baa171be98da5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a6db421f0be147916cb4894ad3885d1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a6db421f0be147916cb4894ad3885d1">VisitQuantizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a8a6db421f0be147916cb4894ad3885d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a quantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8a6db421f0be147916cb4894ad3885d1">More...</a><br /></td></tr>
<tr class="separator:a8a6db421f0be147916cb4894ad3885d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab80f8f2c2202a4651c63757b307a21b7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab80f8f2c2202a4651c63757b307a21b7">VisitQLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ab80f8f2c2202a4651c63757b307a21b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a QLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ab80f8f2c2202a4651c63757b307a21b7">More...</a><br /></td></tr>
<tr class="separator:ab80f8f2c2202a4651c63757b307a21b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fdb21a22a95af72177b4e909741b5c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2fdb21a22a95af72177b4e909741b5c7">VisitQuantizedLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">QuantizedLstmInputParams</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a2fdb21a22a95af72177b4e909741b5c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a QuantizedLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a2fdb21a22a95af72177b4e909741b5c7">More...</a><br /></td></tr>
<tr class="separator:a2fdb21a22a95af72177b4e909741b5c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e6452322927acf6fe4e38ca9cc6d117"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0e6452322927acf6fe4e38ca9cc6d117">VisitRankLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a0e6452322927acf6fe4e38ca9cc6d117"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a rank layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a0e6452322927acf6fe4e38ca9cc6d117">More...</a><br /></td></tr>
<tr class="separator:a0e6452322927acf6fe4e38ca9cc6d117"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4aafbeec347992842c3e18eaf735cbfc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a4aafbeec347992842c3e18eaf735cbfc">VisitReduceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a4aafbeec347992842c3e18eaf735cbfc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a reduce layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a4aafbeec347992842c3e18eaf735cbfc">More...</a><br /></td></tr>
<tr class="separator:a4aafbeec347992842c3e18eaf735cbfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ebd504c48864d63917836e0dc335725"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9ebd504c48864d63917836e0dc335725">VisitReshapeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a9ebd504c48864d63917836e0dc335725"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a9ebd504c48864d63917836e0dc335725">More...</a><br /></td></tr>
<tr class="separator:a9ebd504c48864d63917836e0dc335725"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d4c5571a4b3db2badf7f1dce3467391"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4c5571a4b3db2badf7f1dce3467391">VisitResizeBilinearLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">ResizeBilinearDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8d4c5571a4b3db2badf7f1dce3467391"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8d4c5571a4b3db2badf7f1dce3467391">More...</a><br /></td></tr>
<tr class="separator:a8d4c5571a4b3db2badf7f1dce3467391"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49c296c5d0f9efb76f165954cf40c281"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a49c296c5d0f9efb76f165954cf40c281">VisitResizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a49c296c5d0f9efb76f165954cf40c281"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a49c296c5d0f9efb76f165954cf40c281">More...</a><br /></td></tr>
<tr class="separator:a49c296c5d0f9efb76f165954cf40c281"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a62605ac51992ce0913cc119b59546b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6a62605ac51992ce0913cc119b59546b">VisitRsqrtLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a6a62605ac51992ce0913cc119b59546b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Reciprocal of square root layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a6a62605ac51992ce0913cc119b59546b">More...</a><br /></td></tr>
<tr class="separator:a6a62605ac51992ce0913cc119b59546b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c023b3170bed9368b65730bc7fff60b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1c023b3170bed9368b65730bc7fff60b">VisitSliceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a1c023b3170bed9368b65730bc7fff60b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a1c023b3170bed9368b65730bc7fff60b">More...</a><br /></td></tr>
<tr class="separator:a1c023b3170bed9368b65730bc7fff60b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd8b0b2e365bbeabceddc35a1cb52916"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#abd8b0b2e365bbeabceddc35a1cb52916">VisitSoftmaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:abd8b0b2e365bbeabceddc35a1cb52916"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#abd8b0b2e365bbeabceddc35a1cb52916">More...</a><br /></td></tr>
<tr class="separator:abd8b0b2e365bbeabceddc35a1cb52916"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9478c4f41840a2e2c12b7f336e725a8a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9478c4f41840a2e2c12b7f336e725a8a">VisitSpaceToBatchNdLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a9478c4f41840a2e2c12b7f336e725a8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a9478c4f41840a2e2c12b7f336e725a8a">More...</a><br /></td></tr>
<tr class="separator:a9478c4f41840a2e2c12b7f336e725a8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdedda623455cc7a0f982d6f4e96d53a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acdedda623455cc7a0f982d6f4e96d53a">VisitSpaceToDepthLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:acdedda623455cc7a0f982d6f4e96d53a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a space to depth layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#acdedda623455cc7a0f982d6f4e96d53a">More...</a><br /></td></tr>
<tr class="separator:acdedda623455cc7a0f982d6f4e96d53a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8689a80f8939de6323319aba5806ee9e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8689a80f8939de6323319aba5806ee9e">VisitSplitterLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8689a80f8939de6323319aba5806ee9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8689a80f8939de6323319aba5806ee9e">More...</a><br /></td></tr>
<tr class="separator:a8689a80f8939de6323319aba5806ee9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b47d411d147aa420f7a69356d84fb80"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8b47d411d147aa420f7a69356d84fb80">VisitStackLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8b47d411d147aa420f7a69356d84fb80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a stack layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8b47d411d147aa420f7a69356d84fb80">More...</a><br /></td></tr>
<tr class="separator:a8b47d411d147aa420f7a69356d84fb80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c15053a7e295099a1a34c4add5a03b8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3c15053a7e295099a1a34c4add5a03b8">VisitStandInLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a3c15053a7e295099a1a34c4add5a03b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a <a class="el" href="classarmnn_1_1_stand_in_layer.xhtml" title="This layer represents an unknown operation in the input graph. ">StandInLayer</a> should call back to when its Accept(ILaterVisitor&amp;) function is invoked.  <a href="#a3c15053a7e295099a1a34c4add5a03b8">More...</a><br /></td></tr>
<tr class="separator:a3c15053a7e295099a1a34c4add5a03b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31862ce4ffaddde96ebe0afcf04f3577"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a31862ce4ffaddde96ebe0afcf04f3577">VisitStridedSliceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a31862ce4ffaddde96ebe0afcf04f3577"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a31862ce4ffaddde96ebe0afcf04f3577">More...</a><br /></td></tr>
<tr class="separator:a31862ce4ffaddde96ebe0afcf04f3577"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac42c3a57a82260c8315d4f0320620934"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac42c3a57a82260c8315d4f0320620934">VisitSubtractionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:ac42c3a57a82260c8315d4f0320620934"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a subtraction layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ac42c3a57a82260c8315d4f0320620934">More...</a><br /></td></tr>
<tr class="separator:ac42c3a57a82260c8315d4f0320620934"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a877d400155151a5afba9f0b17fbcf8f3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a877d400155151a5afba9f0b17fbcf8f3">VisitSwitchLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a877d400155151a5afba9f0b17fbcf8f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a switch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a877d400155151a5afba9f0b17fbcf8f3">More...</a><br /></td></tr>
<tr class="separator:a877d400155151a5afba9f0b17fbcf8f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dfb04de9aa0b8b55c70fe96af13e1e1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a4dfb04de9aa0b8b55c70fe96af13e1e1">VisitTransposeConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;, const char *) override</td></tr>
<tr class="memdesc:a4dfb04de9aa0b8b55c70fe96af13e1e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D transpose convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a4dfb04de9aa0b8b55c70fe96af13e1e1">More...</a><br /></td></tr>
<tr class="separator:a4dfb04de9aa0b8b55c70fe96af13e1e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cb213b083367f4fe9bed2916206525f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2cb213b083367f4fe9bed2916206525f">VisitTransposeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a2cb213b083367f4fe9bed2916206525f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a transpose layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a2cb213b083367f4fe9bed2916206525f">More...</a><br /></td></tr>
<tr class="separator:a2cb213b083367f4fe9bed2916206525f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_layer_visitor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_layer_visitor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a></td></tr>
<tr class="memitem:a463965a96896bf0d261b44eea5172c7b inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a463965a96896bf0d261b44eea5172c7b">StartVisit</a> ()</td></tr>
<tr class="separator:a463965a96896bf0d261b44eea5172c7b inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4549b1bbb63fa26700d74854e388784f inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a4549b1bbb63fa26700d74854e388784f">FinishVisit</a> ()</td></tr>
<tr class="separator:a4549b1bbb63fa26700d74854e388784f inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:aec6644c81f84f086262dfd06088acd99"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aec6644c81f84f086262dfd06088acd99">LayerVisitorBase</a> ()</td></tr>
<tr class="separator:aec6644c81f84f086262dfd06088acd99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab59e5e8c65aa44857c27db70fc412baa"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab59e5e8c65aa44857c27db70fc412baa">~LayerVisitorBase</a> ()</td></tr>
<tr class="separator:ab59e5e8c65aa44857c27db70fc412baa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_layer_visitor"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_layer_visitor')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a></td></tr>
<tr class="memitem:a27fa880bce96ac7355284a7681f2377e inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a27fa880bce96ac7355284a7681f2377e">ILayerVisitor</a> ()</td></tr>
<tr class="separator:a27fa880bce96ac7355284a7681f2377e inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ad7aeeaf26228ef11c15fa5d4507d8a inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7ad7aeeaf26228ef11c15fa5d4507d8a">~ILayerVisitor</a> ()</td></tr>
<tr class="separator:a7ad7aeeaf26228ef11c15fa5d4507d8a inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename DefaultPolicy&gt;<br />
class armnn::LayerVisitorBase&lt; DefaultPolicy &gt;</h3>

<p>Visitor base class with empty implementations. </p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00025">25</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aec6644c81f84f086262dfd06088acd99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec6644c81f84f086262dfd06088acd99">&#9670;&nbsp;</a></span>LayerVisitorBase()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml">LayerVisitorBase</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00028">28</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<a id="ab59e5e8c65aa44857c27db70fc412baa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab59e5e8c65aa44857c27db70fc412baa">&#9670;&nbsp;</a></span>~LayerVisitorBase()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml">LayerVisitorBase</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00029">29</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="acb663f7919f9566c3dcc8b6478999d34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb663f7919f9566c3dcc8b6478999d34">&#9670;&nbsp;</a></span>VisitAbsLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitAbsLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function an absolute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a288db083c224e756f7bb35afe6289b7f">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00032">32</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                                             { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a30b99e5202fc77b02f92d5c44e5ca86d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30b99e5202fc77b02f92d5c44e5ca86d">&#9670;&nbsp;</a></span>VisitActivationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitActivationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>activationDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">activationDescriptor</td><td>- <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml" title="An ActivationDescriptor for the ActivationLayer. ">ActivationDescriptor</a> to configure the activation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab2a1e493b983a932792bc5d0c1a20127">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                                                    { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a0c9f3396207de48925016a2eee6aa12b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c9f3396207de48925016a2eee6aa12b">&#9670;&nbsp;</a></span>VisitAdditionLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitAdditionLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an addition layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2d20b94b7de822f3d29ab12e47e3be4e">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00039">39</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                                                  { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a719076848950255b929636c97aaaede4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a719076848950255b929636c97aaaede4">&#9670;&nbsp;</a></span>VisitArgMinMaxLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitArgMinMaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>argMinMaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an arg min max layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">argMinMaxDescriptor</td><td>- <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml" title="An ArgMinMaxDescriptor for ArgMinMaxLayer. ">ArgMinMaxDescriptor</a> to configure the activation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8423316906ebe6ae6d28c7f69ad91248">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00042">42</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                                   { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="ab0ae25ba5f3c494d1fb32f06cd57af10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0ae25ba5f3c494d1fb32f06cd57af10">&#9670;&nbsp;</a></span>VisitBatchNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitBatchNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>variance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">mean</td><td>- Pre-calculated mean for each channel. </td></tr>
    <tr><td class="paramname">variance</td><td>- Pre-calculated variance for each channel. </td></tr>
    <tr><td class="paramname">beta</td><td>- Per-channel additive factor. </td></tr>
    <tr><td class="paramname">gamma</td><td>- Per-channel multiplicative factor. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a9e642355474f31268e66a404e6c1b81d">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00046">46</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                                            { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a62aac266e23bd680633e62832f56bc11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62aac266e23bd680633e62832f56bc11">&#9670;&nbsp;</a></span>VisitBatchToSpaceNdLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitBatchToSpaceNdLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>batchToSpaceNdDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">batchToSpaceNdDescriptor</td><td>- Description of the layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a1cee693185bcda15bd777008e60c7cf7">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00054">54</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                                                        { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a95dc828296e6d05c0bf0b691d4dc6a3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95dc828296e6d05c0bf0b691d4dc6a3f">&#9670;&nbsp;</a></span>VisitComparisonLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitComparisonLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>comparisonDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Comparison layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">comparisonDescriptor</td><td>- Description of the layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a6a1a6856fe4210d9c84c4fb86b4b661e">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00058">58</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                                                    { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a2d4f84683c4a00dfb5eecb6b165d41b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d4f84683c4a00dfb5eecb6b165d41b9">&#9670;&nbsp;</a></span>VisitConcatLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitConcatLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">ConcatDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>concatDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">concatDescriptor</td><td>- ConcatDescriptor (synonym for <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml" title="An OriginsDescriptor for the ConcatLayer. ">OriginsDescriptor</a>) to configure the concatenation process. Number of Views must be equal to the number of inputs, and their order must match - e.g. first view corresponds to the first input, second view to the second input, etc.... </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aeb90d7587f7887aee1f2b43261d4ee5c">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00062">62</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                                { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a90698dba3e90ced6f562cda146bf15e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a90698dba3e90ced6f562cda146bf15e3">&#9670;&nbsp;</a></span>VisitConstantLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitConstantLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a layer with no inputs and a single output, which always corresponds to the passed in constant tensor should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">input</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> to be provided as the only output of the layer. The layer will maintain its own copy of the tensor data, meaning the memory referenced by <em>input</em> can be freed or reused after this function is called. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2f123a6a99ac143c0f3806cb505765cd">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00066">66</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                                  { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="aff3099f516e132f4d8818a54fa1ee767"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff3099f516e132f4d8818a54fa1ee767">&#9670;&nbsp;</a></span>VisitConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">convolution2dDescriptor</td><td>- Description of the 2D convolution layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the weights data. </td></tr>
    <tr><td class="paramname">biases</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> tensor for the bias data. If specified, must match the output tensor shape. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#abc8fe4c6cbc8fa2b13c525500dddfbf6">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00070">70</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                                       { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="ad3aaff3b6165f8de16522bc4a1ed32a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3aaff3b6165f8de16522bc4a1ed32a0">&#9670;&nbsp;</a></span>VisitDepthToSpaceLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitDepthToSpaceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>depthToSpaceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a depth to space layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">depthToSpaceDescriptor</td><td>- Parameters for the depth to space operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a72d308d6f24ffb8846375d770394af66">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00076">76</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                                      { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a70050fc50ee44a439665f914d5fe9684"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70050fc50ee44a439665f914d5fe9684">&#9670;&nbsp;</a></span>VisitDepthwiseConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitDepthwiseConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a 2D depthwise convolution layer with biases should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">convolution2dDescriptor</td><td>- Description of the 2D depthwise convolution layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the weights. Expected format: [channelMultiplier, inputChannels, height, width]. </td></tr>
    <tr><td class="paramname">biases</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> tensor for the bias data. If specified, must match the output tensor shape. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ad39aaac8f8fb790ae364c87f1a249d68">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00080">80</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                                                { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="aa27cc900d32dcc4a92f59e3bab4f4653"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa27cc900d32dcc4a92f59e3bab4f4653">&#9670;&nbsp;</a></span>VisitDequantizeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitDequantizeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a Dequantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a0fa32cbc3ca68467c749d50e844faeaf">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00086">86</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                                    { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a88bad2eef809ccf6f2129f9ed4a6f3a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88bad2eef809ccf6f2129f9ed4a6f3a7">&#9670;&nbsp;</a></span>VisitDetectionPostProcessLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitDetectionPostProcessLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a Detection PostProcess layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">descriptor</td><td>- Description of the Detection PostProcess layer. </td></tr>
    <tr><td class="paramname">anchors</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the anchors. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab270e1bebbe01a22543cc49ac3a14c25">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00089">89</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                                              { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a7450859464a381eafaedb33adc582f75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7450859464a381eafaedb33adc582f75">&#9670;&nbsp;</a></span>VisitDivisionLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitDivisionLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a division layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ada3c96a7b0d4251edb24584096b90a24">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00094">94</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                                  { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a9d02f4bfaffcb16e340e9b8c20bc5e35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d02f4bfaffcb16e340e9b8c20bc5e35">&#9670;&nbsp;</a></span>VisitElementwiseUnaryLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitElementwiseUnaryLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>elementwiseUnaryDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">elementwiseUnaryDescriptor</td><td>- Description of the layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aaf99c2bdfe61c48821f23826433a5abc">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00097">97</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                                          { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a3249cd1186dc7e700a0ec0884fb9d5fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3249cd1186dc7e700a0ec0884fb9d5fa">&#9670;&nbsp;</a></span>VisitEqualLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitEqualLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function an Equal layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ae242b544b15e9d80aa2f3be385540eb6">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00101">101</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                                               { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="ae343d79924ac474939c3e38a8b80004e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae343d79924ac474939c3e38a8b80004e">&#9670;&nbsp;</a></span>VisitFillLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitFillLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>fillDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a fill layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">fillDescriptor</td><td>- Description of the layer </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#abf67d8273706f9dfc51be559b8505199">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00104">104</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                              { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a060c3a3f978fec03212afaff1fe1648d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a060c3a3f978fec03212afaff1fe1648d">&#9670;&nbsp;</a></span>VisitFloorLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitFloorLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a floor layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a3fd73f343863eedb8dde418c6183193c">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00108">108</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                               { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a9049cf6d72d4b67fff93670f21c09da3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9049cf6d72d4b67fff93670f21c09da3">&#9670;&nbsp;</a></span>VisitFullyConnectedLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitFullyConnectedLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>fullyConnectedDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">fullyConnectedDescriptor</td><td>- Description of the fully connected layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the weights data. </td></tr>
    <tr><td class="paramname">biases</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> tensor for the bias data. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab93a48970564c6eabbc982a2116c1262">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00111">111</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                                        { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="ae7639178bd8c29ffa83162dfd108b725"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7639178bd8c29ffa83162dfd108b725">&#9670;&nbsp;</a></span>VisitGatherLayer() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitGatherLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8b19c99b738524199b49d4b9819d4d8a">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00118">118</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                                { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="aea011723381847939ee1773d7c6fac25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea011723381847939ee1773d7c6fac25">&#9670;&nbsp;</a></span>VisitGatherLayer() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitGatherLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>gatherDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">gatherDescriptor</td><td>- Parameters for the gather operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ad2e2934576c5b4755cc9b36671227bc2">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00121">121</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                                { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a2a28dbfcd1e83bc8158d78feb93d4a0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a28dbfcd1e83bc8158d78feb93d4a0c">&#9670;&nbsp;</a></span>VisitGreaterLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitGreaterLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Greater layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ac81739b57b9a27fb0c363bcd6479692e">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00125">125</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                                                 { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a6c23f9e9d8427775925d071feee5dbd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c23f9e9d8427775925d071feee5dbd1">&#9670;&nbsp;</a></span>VisitInputLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitInputLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an <a class="el" href="classarmnn_1_1_input_layer.xhtml" title="A layer user-provided data can be bound to (e.g. inputs, outputs). ">InputLayer</a> should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">id</td><td>- User generated id to uniquely identify a particular input. The same id needs to be specified when passing the inputs to the <a class="el" href="classarmnn_1_1_i_runtime.xhtml#ab88fe81be37ed549ae7247c18025cc35" title="Evaluates a network using input in inputTensors and outputs filled into outputTensors. ">IRuntime::EnqueueWorkload()</a> function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab6dc51682cb4178194f3f00c2309ec7b">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00128">128</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                               { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a58f90a911e6827702c478cabaeac57fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58f90a911e6827702c478cabaeac57fe">&#9670;&nbsp;</a></span>VisitInstanceNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitInstanceNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an instance normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">desc</td><td>- Parameters for the instance normalization operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aaf4e8d2b1ed2612f4821ed1d2351667b">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00132">132</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                                               { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="ae68e2b431ea3d2822f19ad4ac806fdaa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae68e2b431ea3d2822f19ad4ac806fdaa">&#9670;&nbsp;</a></span>VisitL2NormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitL2NormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an L2 normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<p>Normalization is performed along dimension 1, but requires a 4d input. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">desc</td><td>- Parameters for the L2 normalization operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a0678ff146765cea41b6d577773680fda">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00136">136</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                                         { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="aa4f176ed33afb13a9e590b86990eaa3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4f176ed33afb13a9e590b86990eaa3c">&#9670;&nbsp;</a></span>VisitLogicalBinaryLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitLogicalBinaryLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>logicalBinaryDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a logical binary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">logicalBinaryDescriptor</td><td>- <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml" title="A LogicalBinaryDescriptor for the LogicalBinaryLayer. ">LogicalBinaryDescriptor</a> to configure the logical unary layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a42258b02ff22765d6f2eeba7bff7f802">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00144">144</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                                       {DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a8d4d2e5580385ee664830720698d112c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d4d2e5580385ee664830720698d112c">&#9670;&nbsp;</a></span>VisitLogSoftmaxLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitLogSoftmaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>logSoftmaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a log softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">logSoftmaxDescriptor</td><td>- LogSoftmaxDescriptor to configure the log softmax. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2db103c5db69877b05b365e50ee3bd5b">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00140">140</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                                    { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="aaf1a238ec5b6bb172bc4cd3811f08b28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf1a238ec5b6bb172bc4cd3811f08b28">&#9670;&nbsp;</a></span>VisitLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function an Lstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">descriptor</td><td>- Parameters controlling the operation of the Lstm operation. </td></tr>
    <tr><td class="paramname">params</td><td>- The weights and biases for the LSTM cell. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aed730aaef50861ea8b7b6276ce880c9a">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00148">148</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                              { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a778e1b2219e3eb2d790d6e6e653a9f25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a778e1b2219e3eb2d790d6e6e653a9f25">&#9670;&nbsp;</a></span>VisitMaximumLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMaximumLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Maximum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a9cbdbdbda6abefbc2e1eacaad47795bd">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00153">153</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                                 { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a0180a15e542f4ef240fadc09fe4b2e3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0180a15e542f4ef240fadc09fe4b2e3f">&#9670;&nbsp;</a></span>VisitMeanLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMeanLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>meanDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Mean layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">meanDescriptor</td><td>- Parameters for the mean operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab33e9cae83e312ccc9e12adcf53494e3">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00156">156</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                              { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="aafb62c879f0c78bfdc3c4e4f2cb82e68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafb62c879f0c78bfdc3c4e4f2cb82e68">&#9670;&nbsp;</a></span>VisitMergeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMergeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a merge layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a002ed3346c6a89035f54e11155d5b1e1">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00160">160</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_tests_8cpp_source.xhtml#l00423">BOOST_AUTO_TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                               { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="acef69a3870409ca9a6130db91047e729"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acef69a3870409ca9a6130db91047e729">&#9670;&nbsp;</a></span>VisitMergerLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMergerLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a003d213dd28b0b8c0f26fbf268ccb975">MergerDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>mergerDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a merger layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">mergerDescriptor</td><td>- MergerDescriptor (synonym for <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml" title="An OriginsDescriptor for the ConcatLayer. ">OriginsDescriptor</a>) to configure the concatenation process. Number of Views must be equal to the number of inputs, and their order must match - e.g. first view corresponds to the first input, second view to the second input, etc.... </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#acc80689b27497fe0c4ee3c27b50d1f31">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00163">163</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                                { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a1e24e9a7bf52efc1699c126435574e95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e24e9a7bf52efc1699c126435574e95">&#9670;&nbsp;</a></span>VisitMinimumLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMinimumLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Minimum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a63187da01b5bb0bd4500ddf851edd0ff">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00167">167</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                                 { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="ac57d22126a9131108214df9177addade"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac57d22126a9131108214df9177addade">&#9670;&nbsp;</a></span>VisitMultiplicationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitMultiplicationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a multiplication layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a1e415ad61a4fa40d85a4f0da855cf485">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00170">170</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                                        { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a3150ff2299a2e193952300b8c9edd1e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3150ff2299a2e193952300b8c9edd1e1">&#9670;&nbsp;</a></span>VisitNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>normalizationDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">normalizationDescriptor</td><td>- <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml" title="A NormalizationDescriptor for the NormalizationLayer. ">NormalizationDescriptor</a> to configure the normalization. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a96501b3e43422b9fdf6fc45d89b20992">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00173">173</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                                       { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="acc39ddb06acfd91cf3cfb0fcd9337005"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc39ddb06acfd91cf3cfb0fcd9337005">&#9670;&nbsp;</a></span>VisitOutputLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitOutputLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function an output layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">id</td><td>- User generated id to uniquely identify a particular output. The same id needs to be specified when passing the outputs to the <a class="el" href="classarmnn_1_1_i_runtime.xhtml#ab88fe81be37ed549ae7247c18025cc35" title="Evaluates a network using input in inputTensors and outputs filled into outputTensors. ">IRuntime::EnqueueWorkload()</a> function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a0da6bde681d919b7282eddad4a446890">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00177">177</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                                { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a8a240e1b725cc204bb468b6b402e1670"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a240e1b725cc204bb468b6b402e1670">&#9670;&nbsp;</a></span>VisitPadLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitPadLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>padDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a pad layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">paddings</td><td>- n by 2 tensor, where n is the rank of the input tensor, such that paddings[i,0] indicates the amount of padding to add in front of dimension i, and paddings[i,1] indicates the amount of padding to add after the end of dimension i </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aab2febd844bcf654e80cf164984c8904">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00181">181</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                             { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a275f4c270ce472abc8701f6475ff7f38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a275f4c270ce472abc8701f6475ff7f38">&#9670;&nbsp;</a></span>VisitPermuteLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitPermuteLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>permuteDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">permuteDescriptor</td><td>- <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml" title="A PermuteDescriptor for the PermuteLayer. ">PermuteDescriptor</a> to configure the permute. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a211e587a05b0c7e7202f8f8894f89894">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00185">185</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                                                 { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a5e369658cb00178eeb9136f1c912fd3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e369658cb00178eeb9136f1c912fd3f">&#9670;&nbsp;</a></span>VisitPooling2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitPooling2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>pooling2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">pooling2dDescriptor</td><td>- <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml" title="A Pooling2dDescriptor for the Pooling2dLayer. ">Pooling2dDescriptor</a> to configure the pooling. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aef56afef7d87afa51fd363487c375af5">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00189">189</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                                   { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a79c933bea6fb9986c3baa171be98da5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79c933bea6fb9986c3baa171be98da5c">&#9670;&nbsp;</a></span>VisitPreluLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitPreluLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a PReLU activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a4f6971a5d2c164c691dc7943f4befd5c">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00193">193</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                               { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="ab80f8f2c2202a4651c63757b307a21b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab80f8f2c2202a4651c63757b307a21b7">&#9670;&nbsp;</a></span>VisitQLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitQLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a QLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">descriptor</td><td>- Parameters controlling the operation of the QLstm operation. </td></tr>
    <tr><td class="paramname">params</td><td>- The weights and biases for the layer </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a3f99f4f70c011a8ab5234e5595350781">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00199">199</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                               { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a2fdb21a22a95af72177b4e909741b5c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fdb21a22a95af72177b4e909741b5c7">&#9670;&nbsp;</a></span>VisitQuantizedLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitQuantizedLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">QuantizedLstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a QuantizedLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">params</td><td>- The weights and biases for the Quantized LSTM cell </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#acb1bac244973743d460064c1e0d816fd">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00204">204</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                                       { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a8a6db421f0be147916cb4894ad3885d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a6db421f0be147916cb4894ad3885d1">&#9670;&nbsp;</a></span>VisitQuantizeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitQuantizeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a quantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a78ec371d5935104926bca5c5febf6780">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00196">196</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_tests_8cpp_source.xhtml#l00373">BOOST_AUTO_TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                                  { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a0e6452322927acf6fe4e38ca9cc6d117"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e6452322927acf6fe4e38ca9cc6d117">&#9670;&nbsp;</a></span>VisitRankLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitRankLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a rank layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7b2632b6e22ac7bc314bad5532fdb3c9">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00208">208</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                              { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a4aafbeec347992842c3e18eaf735cbfc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4aafbeec347992842c3e18eaf735cbfc">&#9670;&nbsp;</a></span>VisitReduceLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitReduceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>reduceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a reduce layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname"><a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml" title="A ReduceDescriptor for the REDUCE operators. ">ReduceDescriptor</a></td><td>- Parameters for the reduce max operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a226889fe8ad44b16a54f1cc50fc9730b">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00211">211</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                                { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a9ebd504c48864d63917836e0dc335725"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ebd504c48864d63917836e0dc335725">&#9670;&nbsp;</a></span>VisitReshapeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitReshapeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>reshapeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">reshapeDescriptor</td><td>- Parameters for the reshape operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#acb732489554691ba852ca323888093ac">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00215">215</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                                 { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a8d4c5571a4b3db2badf7f1dce3467391"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d4c5571a4b3db2badf7f1dce3467391">&#9670;&nbsp;</a></span>VisitResizeBilinearLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitResizeBilinearLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">ResizeBilinearDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>resizeDesc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">resizeDesc</td><td>- Parameters for the resize operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8d87dab666a8aa6e132fcd93717a3c4b">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00219">219</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                                        { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a49c296c5d0f9efb76f165954cf40c281"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49c296c5d0f9efb76f165954cf40c281">&#9670;&nbsp;</a></span>VisitResizeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitResizeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>resizeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">resizeDescriptor</td><td>- Parameters for the resize operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a306e22f3cc6baaf7a6f1390f669be42e">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00223">223</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                                { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a6a62605ac51992ce0913cc119b59546b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a62605ac51992ce0913cc119b59546b">&#9670;&nbsp;</a></span>VisitRsqrtLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitRsqrtLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Reciprocal of square root layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a413253dbf325ea0b44559b55242170d1">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00227">227</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                               { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a1c023b3170bed9368b65730bc7fff60b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c023b3170bed9368b65730bc7fff60b">&#9670;&nbsp;</a></span>VisitSliceLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSliceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>sliceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">sliceDescriptor</td><td>- <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml" title="A SliceDescriptor for the SliceLayer. ">SliceDescriptor</a> to configure the slice operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aad5c9d5c9cf256ea990097732fd1f108">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00230">230</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                               { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="abd8b0b2e365bbeabceddc35a1cb52916"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd8b0b2e365bbeabceddc35a1cb52916">&#9670;&nbsp;</a></span>VisitSoftmaxLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSoftmaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>softmaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">softmaxDescriptor</td><td>- <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml" title="A SoftmaxDescriptor for the SoftmaxLayer. ">SoftmaxDescriptor</a> to configure the softmax. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ae47c90e3188970462a28d297644133d1">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00234">234</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                 { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a9478c4f41840a2e2c12b7f336e725a8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9478c4f41840a2e2c12b7f336e725a8a">&#9670;&nbsp;</a></span>VisitSpaceToBatchNdLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSpaceToBatchNdLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>spaceToBatchNdDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">spaceToBatchNdDescriptor</td><td>- Parameters for the space to batch operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aa8c1ec6712293700fb3874f63f2ec5f0">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00238">238</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                                        { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="acdedda623455cc7a0f982d6f4e96d53a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acdedda623455cc7a0f982d6f4e96d53a">&#9670;&nbsp;</a></span>VisitSpaceToDepthLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSpaceToDepthLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>spaceToDepthDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a space to depth layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">spaceToDepthDescriptor</td><td>- Parameters for the space to depth operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7ac3fe15d509443ffbe985370b61b913">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00242">242</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                                      { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a8689a80f8939de6323319aba5806ee9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8689a80f8939de6323319aba5806ee9e">&#9670;&nbsp;</a></span>VisitSplitterLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSplitterLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>splitterDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">splitterDescriptor</td><td>- <a class="el" href="structarmnn_1_1_views_descriptor.xhtml" title="A ViewsDescriptor for the SplitterLayer. ">ViewsDescriptor</a> to configure the splitting process. Number of Views must be equal to the number of outputs, and their order must match - e.g. first view corresponds to the first output, second view to the second output, etc.... </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a45c613d43c30b3314cafb1be3ef7685c">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00246">246</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                                  { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a8b47d411d147aa420f7a69356d84fb80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b47d411d147aa420f7a69356d84fb80">&#9670;&nbsp;</a></span>VisitStackLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitStackLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>stackDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a stack layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">stackDescriptor</td><td>- Parameters for the stack operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a5c7df9d37959280f4328848ae4b2be37">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00250">250</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                               { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a3c15053a7e295099a1a34c4add5a03b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c15053a7e295099a1a34c4add5a03b8">&#9670;&nbsp;</a></span>VisitStandInLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitStandInLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>standInDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a <a class="el" href="classarmnn_1_1_stand_in_layer.xhtml" title="This layer represents an unknown operation in the input graph. ">StandInLayer</a> should call back to when its Accept(ILaterVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">standInDescriptor</td><td>- Parameters for the stand-in layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2c97836f7288428fe4f070033d2f0aea">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00254">254</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                                 { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a31862ce4ffaddde96ebe0afcf04f3577"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31862ce4ffaddde96ebe0afcf04f3577">&#9670;&nbsp;</a></span>VisitStridedSliceLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitStridedSliceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>stridedSliceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">stridedSliceDescriptor</td><td>- Parameters for the strided slice operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ac2f4ca5ada6d8fcf82d7bea2e6a06924">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00258">258</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                                                      { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="ac42c3a57a82260c8315d4f0320620934"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac42c3a57a82260c8315d4f0320620934">&#9670;&nbsp;</a></span>VisitSubtractionLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSubtractionLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a subtraction layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ad339435c8d56522efc647da668d47047">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00262">262</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                                                     { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a877d400155151a5afba9f0b17fbcf8f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a877d400155151a5afba9f0b17fbcf8f3">&#9670;&nbsp;</a></span>VisitSwitchLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitSwitchLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a switch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a6d33c538a0f3f179ec2eeb4dcee2a21e">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00265">265</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                                                { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a4dfb04de9aa0b8b55c70fe96af13e1e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4dfb04de9aa0b8b55c70fe96af13e1e1">&#9670;&nbsp;</a></span>VisitTransposeConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitTransposeConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a 2D transpose convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">descriptor</td><td>- Description of the 2D transpose convolution layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the weights data. </td></tr>
    <tr><td class="paramname">biases</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> tensor for the bias data. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a58bb3bc96c089a4d0b954be81f1899c6">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00268">268</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                                                { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<a id="a2cb213b083367f4fe9bed2916206525f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2cb213b083367f4fe9bed2916206525f">&#9670;&nbsp;</a></span>VisitTransposeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitTransposeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>transposeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a transpose layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">transposeDescriptor</td><td>- <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml" title="A TransposeDescriptor for the TransposeLayer. ">TransposeDescriptor</a> to configure the transpose. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a5e101341277244c45eb20f4db63c77a3">ILayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_visitor_base_8hpp_source.xhtml#l00274">274</a> of file <a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                                   { DefaultPolicy::Apply(__func__); }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>include/armnn/<a class="el" href="_layer_visitor_base_8hpp_source.xhtml">LayerVisitorBase.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml">LayerVisitorBase</a></li>
    <li class="footer">Generated on Thu Feb 25 2021 17:27:59 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
