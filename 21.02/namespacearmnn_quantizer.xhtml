<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: armnnQuantizer Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearmnn_quantizer.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">armnnQuantizer Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_quantizer_1_1_command_line_processor.xhtml">CommandLineProcessor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_quantizer_1_1_input_layer_strategy.xhtml">InputLayerStrategy</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Visitor class implementation to gather the TensorInfo for LayerBindingID for creation of ConstTensor for Refine.  <a href="classarmnn_quantizer_1_1_input_layer_strategy.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_quantizer_1_1_input_layer_visitor.xhtml">InputLayerVisitor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Visitor class implementation to gather the TensorInfo for LayerBindingID for creation of ConstTensor for Refine.  <a href="classarmnn_quantizer_1_1_input_layer_visitor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml">QuantizationDataSet</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml" title="QuantizationDataSet is a structure which is created after parsing a quantization CSV file...">QuantizationDataSet</a> is a structure which is created after parsing a quantization CSV file.  <a href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_quantizer_1_1_quantization_input.xhtml">QuantizationInput</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarmnn_quantizer_1_1_quantization_input.xhtml" title="QuantizationInput for specific pass ID, can list a corresponding raw data file for each LayerBindingI...">QuantizationInput</a> for specific pass ID, can list a corresponding raw data file for each LayerBindingId.  <a href="classarmnn_quantizer_1_1_quantization_input.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:af3f2172356efe007c3be8ffcf3d38fb4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_quantizer.xhtml#af3f2172356efe007c3be8ffcf3d38fb4">ValidateOutputDirectory</a> (std::string &amp;dir)</td></tr>
<tr class="separator:af3f2172356efe007c3be8ffcf3d38fb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeff6c00ca10f0433e12ddf17f59425f8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_quantizer.xhtml#aeff6c00ca10f0433e12ddf17f59425f8">ValidateProvidedFile</a> (const std::string &amp;inputFileName)</td></tr>
<tr class="separator:aeff6c00ca10f0433e12ddf17f59425f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23b67d4cd304c7bde724f50135d90769"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_quantizer.xhtml#a23b67d4cd304c7bde724f50135d90769">ValidateQuantizationScheme</a> (const std::string &amp;scheme)</td></tr>
<tr class="separator:a23b67d4cd304c7bde724f50135d90769"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8e5898c3b39c2d3c1dda16b157d519d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_quantizer.xhtml#ab8e5898c3b39c2d3c1dda16b157d519d">AddInputData</a> (unsigned int passId, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> bindingId, const std::string &amp;inputFilePath, std::map&lt; unsigned int, <a class="el" href="classarmnn_quantizer_1_1_quantization_input.xhtml">QuantizationInput</a> &gt; &amp;passIdToQuantizationInput)</td></tr>
<tr class="separator:ab8e5898c3b39c2d3c1dda16b157d519d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99c0e54acc977e7c0a06c99bc22674ce"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_quantizer.xhtml#a99c0e54acc977e7c0a06c99bc22674ce">GetPassIdFromCsvRow</a> (std::vector&lt; std::string &gt; tokens, unsigned int lineIndex)</td></tr>
<tr class="separator:a99c0e54acc977e7c0a06c99bc22674ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa23e2b87263686b68dcf93197a58eaad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_quantizer.xhtml#aa23e2b87263686b68dcf93197a58eaad">GetBindingIdFromCsvRow</a> (std::vector&lt; std::string &gt; tokens, unsigned int lineIndex)</td></tr>
<tr class="separator:aa23e2b87263686b68dcf93197a58eaad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6177e03abd9f435ed544709eb97ed33"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_quantizer.xhtml#ad6177e03abd9f435ed544709eb97ed33">GetFileNameFromCsvRow</a> (std::vector&lt; std::string &gt; tokens, unsigned int lineIndex)</td></tr>
<tr class="separator:ad6177e03abd9f435ed544709eb97ed33"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ab8e5898c3b39c2d3c1dda16b157d519d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8e5898c3b39c2d3c1dda16b157d519d">&#9670;&nbsp;</a></span>AddInputData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void armnnQuantizer::AddInputData </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>passId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>bindingId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>inputFilePath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::map&lt; unsigned int, <a class="el" href="classarmnn_quantizer_1_1_quantization_input.xhtml">QuantizationInput</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>passIdToQuantizationInput</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_quantization_data_set_8cpp_source.xhtml#l00028">28</a> of file <a class="el" href="_quantization_data_set_8cpp_source.xhtml">QuantizationDataSet.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_quantization_data_set_8cpp_source.xhtml#l00132">GetFileNameFromCsvRow()</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">auto</span> iterator = passIdToQuantizationInput.find(passId);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">if</span> (iterator == passIdToQuantizationInput.end())</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        QuantizationInput input(passId, bindingId, inputFilePath);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        passIdToQuantizationInput.emplace(passId, input);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    }</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keyword">auto</span> existingQuantizationInput = iterator-&gt;second;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        existingQuantizationInput.AddEntry(bindingId, inputFilePath);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa23e2b87263686b68dcf93197a58eaad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa23e2b87263686b68dcf93197a58eaad">&#9670;&nbsp;</a></span>GetBindingIdFromCsvRow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> armnnQuantizer::GetBindingIdFromCsvRow </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt;&#160;</td>
          <td class="paramname"><em>tokens</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>lineIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_quantization_data_set_8cpp_source.xhtml#l00117">117</a> of file <a class="el" href="_quantization_data_set_8cpp_source.xhtml">QuantizationDataSet.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_quantization_data_set_8cpp_source.xhtml#l00132">GetFileNameFromCsvRow()</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> bindingId;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        bindingId = std::stoi(tokens[1]);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::invalid_argument&amp;)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>(fmt::format(<span class="stringliteral">&quot;Binding ID [{}] is not correct format on CSV row {}&quot;</span>,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                                                tokens[1], lineIndex));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">return</span> bindingId;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00210">Types.hpp:210</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad6177e03abd9f435ed544709eb97ed33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6177e03abd9f435ed544709eb97ed33">&#9670;&nbsp;</a></span>GetFileNameFromCsvRow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string armnnQuantizer::GetFileNameFromCsvRow </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt;&#160;</td>
          <td class="paramname"><em>tokens</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>lineIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_quantization_data_set_8cpp_source.xhtml#l00132">132</a> of file <a class="el" href="_quantization_data_set_8cpp_source.xhtml">QuantizationDataSet.cpp</a>.</p>

<p class="reference">References <a class="el" href="_quantization_data_set_8cpp_source.xhtml#l00028">AddInputData()</a>, <a class="el" href="_quantization_data_set_8cpp_source.xhtml#l00117">GetBindingIdFromCsvRow()</a>, <a class="el" href="_quantization_data_set_8cpp_source.xhtml#l00102">GetPassIdFromCsvRow()</a>, <a class="el" href="_string_utils_8hpp_source.xhtml#l00020">armnn::stringUtils::StringTokenizer()</a>, and <a class="el" href="_string_utils_8hpp_source.xhtml#l00077">armnn::stringUtils::StringTrim()</a>.</p>
<div class="fragment"><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    std::string fileName = <a class="code" href="namespacearmnn_1_1string_utils.xhtml#acdeebefc9791d026eeb564f373479510">armnn::stringUtils::StringTrim</a>(tokens[2]);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(fileName))</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>(fmt::format(<span class="stringliteral">&quot;File [{}] provided on CSV row {} does not exist.&quot;</span>,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                                fileName, lineIndex));</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">if</span> (fileName.empty())</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>(fmt::format(<span class="stringliteral">&quot;Filename cannot be empty on CSV row {} &quot;</span>, lineIndex));</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">return</span> fileName;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_1_1string_utils_xhtml_acdeebefc9791d026eeb564f373479510"><div class="ttname"><a href="namespacearmnn_1_1string_utils.xhtml#acdeebefc9791d026eeb564f373479510">armnn::stringUtils::StringTrim</a></div><div class="ttdeci">std::string &amp; StringTrim(std::string &amp;str, const std::string &amp;chars=&quot;\\\&quot;)</div><div class="ttdoc">Trim from both the start and the end of a string. </div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8hpp_source.xhtml#l00077">StringUtils.hpp:77</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a99c0e54acc977e7c0a06c99bc22674ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99c0e54acc977e7c0a06c99bc22674ce">&#9670;&nbsp;</a></span>GetPassIdFromCsvRow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int armnnQuantizer::GetPassIdFromCsvRow </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt;&#160;</td>
          <td class="paramname"><em>tokens</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>lineIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_quantization_data_set_8cpp_source.xhtml#l00102">102</a> of file <a class="el" href="_quantization_data_set_8cpp_source.xhtml">QuantizationDataSet.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_quantization_data_set_8cpp_source.xhtml#l00132">GetFileNameFromCsvRow()</a>.</p>
<div class="fragment"><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> passId;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        passId = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::stoi(tokens[0]));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::invalid_argument&amp;)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>(fmt::format(<span class="stringliteral">&quot;Pass ID [{}] is not correct format on CSV row {}&quot;</span>,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                                tokens[0], lineIndex));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> passId;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af3f2172356efe007c3be8ffcf3d38fb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3f2172356efe007c3be8ffcf3d38fb4">&#9670;&nbsp;</a></span>ValidateOutputDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool armnnQuantizer::ValidateOutputDirectory </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>dir</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml#l00014">14</a> of file <a class="el" href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml">CommandLineProcessor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml#l00084">CommandLineProcessor::ProcessCommandLine()</a>.</p>
<div class="fragment"><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="keywordflow">if</span> (dir.empty())</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    {</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;No output directory specified&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    }</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keywordflow">if</span> (dir[dir.length() - 1] != <span class="charliteral">&#39;/&#39;</span>)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        dir += <span class="stringliteral">&quot;/&quot;</span>;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    }</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(dir))</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Output directory [&quot;</span> &lt;&lt; dir &lt;&lt; <span class="stringliteral">&quot;] does not exist&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    }</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">if</span> (!fs::is_directory(dir))</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given output directory [&quot;</span> &lt;&lt; dir &lt;&lt; <span class="stringliteral">&quot;] is not a directory&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aeff6c00ca10f0433e12ddf17f59425f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeff6c00ca10f0433e12ddf17f59425f8">&#9670;&nbsp;</a></span>ValidateProvidedFile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool armnnQuantizer::ValidateProvidedFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>inputFileName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml#l00042">42</a> of file <a class="el" href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml">CommandLineProcessor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml#l00084">CommandLineProcessor::ProcessCommandLine()</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(inputFileName))</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Provided file [&quot;</span> &lt;&lt; inputFileName &lt;&lt; <span class="stringliteral">&quot;] does not exist&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">if</span> (fs::is_directory(inputFileName))</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given file [&quot;</span> &lt;&lt; inputFileName &lt;&lt; <span class="stringliteral">&quot;] is a directory&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a23b67d4cd304c7bde724f50135d90769"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23b67d4cd304c7bde724f50135d90769">&#9670;&nbsp;</a></span>ValidateQuantizationScheme()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool armnnQuantizer::ValidateQuantizationScheme </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>scheme</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml#l00059">59</a> of file <a class="el" href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml">CommandLineProcessor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml#l00084">CommandLineProcessor::ProcessCommandLine()</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">if</span> (scheme.empty())</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;No Quantization Scheme specified&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    std::vector&lt;std::string&gt; supportedSchemes =</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="stringliteral">&quot;QAsymmS8&quot;</span>,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="stringliteral">&quot;QAsymmU8&quot;</span>,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="stringliteral">&quot;QSymm16&quot;</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    };</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">auto</span> iterator = std::find(supportedSchemes.begin(), supportedSchemes.end(), scheme);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">if</span> (iterator == supportedSchemes.end())</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Quantization Scheme [&quot;</span> &lt;&lt; scheme &lt;&lt; <span class="stringliteral">&quot;] is not supported&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn_quantizer.xhtml">armnnQuantizer</a></li>
    <li class="footer">Generated on Fri Mar 19 2021 15:26:14 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
