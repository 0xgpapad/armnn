<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/CpuTensorHandle.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_cpu_tensor_handle_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CpuTensorHandle.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_cpu_tensor_handle_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_cpu_tensor_handle_fwd_8hpp.xhtml">armnn/backends/CpuTensorHandleFwd.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_i_tensor_handle_8hpp.xhtml">armnn/backends/ITensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_utils_8hpp.xhtml">armnn/TypesUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_compatible_types_8hpp.xhtml">CompatibleTypes.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_assert_8hpp.xhtml">armnn/utility/Assert.hpp</a>&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">// Get a TensorShape representing the strides (in bytes) for each dimension</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">// of a tensor, assuming fully packed data with no padding</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;TensorShape <a class="code" href="namespacearmnn.xhtml#a36e8f52330a21eeab3cc7c4e030f3583">GetUnpaddedTensorStrides</a>(<span class="keyword">const</span> TensorInfo&amp; tensorInfo);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">// Abstract tensor handles wrapping a CPU-readable region of memory, interpreting it as tensor data.</span></div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml">   27</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml">ConstCpuTensorHandle</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">   31</a></span>&#160;    <span class="keyword">const</span> T* <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">GetConstTensor</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(CompatibleTypes&lt;T&gt;(<a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>().GetDataType()));</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T*<span class="keyword">&gt;</span>(m_Memory);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">   37</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">return</span> m_TensorInfo;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a19aa18d78d5ac31e3a3c8f782f0e8606">   42</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a19aa18d78d5ac31e3a3c8f782f0e8606">Manage</a>()<span class="keyword"> override </span>{}</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#ab6c52b35388890f2c563afbebfb456a6">   44</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>* <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#ab6c52b35388890f2c563afbebfb456a6">GetParent</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">nullptr</span>; }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#acc3fcce7a100cc3b64247519f22e37fc">   46</a></span>&#160;    <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">void</span>* <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#acc3fcce7a100cc3b64247519f22e37fc">Map</a>(<span class="keywordtype">bool</span> <span class="comment">/* blocking = true */</span>)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_Memory; }</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a88ab6decf78c152e746b7d8dc2dd931f">   47</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a88ab6decf78c152e746b7d8dc2dd931f">Unmap</a>()<span class="keyword"> const override </span>{}</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a967f220393d291f71dabce0c06bf9b6c">   49</a></span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a967f220393d291f71dabce0c06bf9b6c">GetStrides</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a36e8f52330a21eeab3cc7c4e030f3583">GetUnpaddedTensorStrides</a>(m_TensorInfo);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a8e8d2fbabcac19f9e12779080ddff54e">   53</a></span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a8e8d2fbabcac19f9e12779080ddff54e">GetShape</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(); }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#ac9bdc423c74013d226c902c3d8a263bf">ConstCpuTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#ae21d7415b7d191de4fe6e02d134a4f38">   58</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#ae21d7415b7d191de4fe6e02d134a4f38">SetConstMemory</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* mem) { m_Memory = mem; }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Only used for testing</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordtype">void</span> CopyOutTo(<span class="keywordtype">void</span> *)<span class="keyword"> const override </span>{ <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Unimplemented&quot;</span>); }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordtype">void</span> CopyInFrom(<span class="keyword">const</span> <span class="keywordtype">void</span>*)<span class="keyword"> override </span>{ <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Unimplemented&quot;</span>); }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#ac9bdc423c74013d226c902c3d8a263bf">ConstCpuTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml">ConstCpuTensorHandle</a>&amp; other) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml">ConstCpuTensorHandle</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml">ConstCpuTensorHandle</a>&amp; other) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> m_TensorInfo;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span>* m_Memory;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;};</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">const</span> <span class="keywordtype">void</span>* ConstCpuTensorHandle::GetConstTensor&lt;void&gt;() <span class="keyword">const</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">// Abstract specialization of ConstCpuTensorHandle that allows write access to the same data.</span></div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classarmnn_1_1_cpu_tensor_handle.xhtml">   76</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_cpu_tensor_handle.xhtml">CpuTensorHandle</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml">ConstCpuTensorHandle</a></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classarmnn_1_1_cpu_tensor_handle.xhtml#aabedf69ab42fd7a0b0f751dd8534e2ab">   80</a></span>&#160;    T* <a class="code" href="classarmnn_1_1_cpu_tensor_handle.xhtml#aabedf69ab42fd7a0b0f751dd8534e2ab">GetTensor</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(CompatibleTypes&lt;T&gt;(<a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>().GetDataType()));</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span>T*<span class="keyword">&gt;</span>(m_MutableMemory);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="classarmnn_1_1_cpu_tensor_handle.xhtml">CpuTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classarmnn_1_1_cpu_tensor_handle.xhtml#a0feac8591ac1a88993aa3278b24dcb57">   89</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_cpu_tensor_handle.xhtml#a0feac8591ac1a88993aa3278b24dcb57">SetMemory</a>(<span class="keywordtype">void</span>* mem)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        m_MutableMemory = mem;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#ae21d7415b7d191de4fe6e02d134a4f38">SetConstMemory</a>(m_MutableMemory);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="classarmnn_1_1_cpu_tensor_handle.xhtml">CpuTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_cpu_tensor_handle.xhtml">CpuTensorHandle</a>&amp; other) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="classarmnn_1_1_cpu_tensor_handle.xhtml">CpuTensorHandle</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_cpu_tensor_handle.xhtml">CpuTensorHandle</a>&amp; other) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordtype">void</span>* m_MutableMemory;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;};</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keywordtype">void</span>* CpuTensorHandle::GetTensor&lt;void&gt;() <span class="keyword">const</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">// A CpuTensorHandle that owns the wrapped memory region.</span></div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">  106</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">ScopedCpuTensorHandle</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_cpu_tensor_handle.xhtml">CpuTensorHandle</a></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">ScopedCpuTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="comment">// Copies contents from Tensor.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">ScopedCpuTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; tensor);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// Copies contents from ConstCpuTensorHandle</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">ScopedCpuTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml">ConstCpuTensorHandle</a>&amp; tensorHandle);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">ScopedCpuTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">ScopedCpuTensorHandle</a>&amp; other);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">ScopedCpuTensorHandle</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">ScopedCpuTensorHandle</a>&amp; other);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    ~<a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">ScopedCpuTensorHandle</a>();</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#a5cceed8b707a09bf27eb61f17acf8a88">Allocate</a>() <span class="keyword">override</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="comment">// Only used for testing</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordtype">void</span> CopyOutTo(<span class="keywordtype">void</span>* memory) <span class="keyword">const override</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">void</span> CopyInFrom(<span class="keyword">const</span> <span class="keywordtype">void</span>* memory) <span class="keyword">override</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">void</span> CopyFrom(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">ScopedCpuTensorHandle</a>&amp; other);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">void</span> CopyFrom(<span class="keyword">const</span> <span class="keywordtype">void</span>* srcMemory, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numBytes);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;};</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">// A CpuTensorHandle that wraps an already allocated memory region.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">// Clients must make sure the passed in memory region stays alive for the lifetime of</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">// the PassthroughCpuTensorHandle instance.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">// Note there is no polymorphism to/from ConstPassthroughCpuTensorHandle.</span></div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classarmnn_1_1_passthrough_cpu_tensor_handle.xhtml">  138</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_passthrough_cpu_tensor_handle.xhtml">PassthroughCpuTensorHandle</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_cpu_tensor_handle.xhtml">CpuTensorHandle</a></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classarmnn_1_1_passthrough_cpu_tensor_handle.xhtml#a20d4552d89c3a0517cd3be16abc266f2">  141</a></span>&#160;    <a class="code" href="classarmnn_1_1_passthrough_cpu_tensor_handle.xhtml#a20d4552d89c3a0517cd3be16abc266f2">PassthroughCpuTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo, <span class="keywordtype">void</span>* mem)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    :   <a class="code" href="classarmnn_1_1_cpu_tensor_handle.xhtml">CpuTensorHandle</a>(tensorInfo)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        SetMemory(mem);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#a5cceed8b707a09bf27eb61f17acf8a88">Allocate</a>() <span class="keyword">override</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;};</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">// A ConstCpuTensorHandle that wraps an already allocated memory region.</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">// This allows users to pass in const memory to a network.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">// Clients must make sure the passed in memory region stays alive for the lifetime of</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">// the PassthroughCpuTensorHandle instance.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">// Note there is no polymorphism to/from PassthroughCpuTensorHandle.</span></div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_passthrough_cpu_tensor_handle.xhtml">  157</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_const_passthrough_cpu_tensor_handle.xhtml">ConstPassthroughCpuTensorHandle</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml">ConstCpuTensorHandle</a></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_passthrough_cpu_tensor_handle.xhtml#a172de6b7c4a9447f5afc3f7117d4dba0">  160</a></span>&#160;    <a class="code" href="classarmnn_1_1_const_passthrough_cpu_tensor_handle.xhtml#a172de6b7c4a9447f5afc3f7117d4dba0">ConstPassthroughCpuTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo, <span class="keyword">const</span> <span class="keywordtype">void</span>* mem)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    :   <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml">ConstCpuTensorHandle</a>(tensorInfo)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#ae21d7415b7d191de4fe6e02d134a4f38">SetConstMemory</a>(mem);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#a5cceed8b707a09bf27eb61f17acf8a88">Allocate</a>() <span class="keyword">override</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;};</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">// Template specializations.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keyword">const</span> <span class="keywordtype">void</span>* <a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">ConstCpuTensorHandle::GetConstTensor</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keywordtype">void</span>* <a class="code" href="classarmnn_1_1_cpu_tensor_handle.xhtml#aabedf69ab42fd7a0b0f751dd8534e2ab">CpuTensorHandle::GetTensor</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_const_passthrough_cpu_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_passthrough_cpu_tensor_handle.xhtml">armnn::ConstPassthroughCpuTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00157">CpuTensorHandle.hpp:157</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_cpu_tensor_handle_fwd_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_cpu_tensor_handle_fwd_8hpp.xhtml">CpuTensorHandleFwd.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_cpu_tensor_handle_xhtml_ab6c52b35388890f2c563afbebfb456a6"><div class="ttname"><a href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#ab6c52b35388890f2c563afbebfb456a6">armnn::ConstCpuTensorHandle::GetParent</a></div><div class="ttdeci">virtual ITensorHandle * GetParent() const override</div><div class="ttdoc">Get the parent tensor if this is a subtensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00044">CpuTensorHandle.hpp:44</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_cpu_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_cpu_tensor_handle.xhtml">armnn::ConstCpuTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00027">CpuTensorHandle.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_xhtml_a5cceed8b707a09bf27eb61f17acf8a88"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle.xhtml#a5cceed8b707a09bf27eb61f17acf8a88">armnn::ITensorHandle::Allocate</a></div><div class="ttdeci">virtual void Allocate()=0</div><div class="ttdoc">Indicate to the memory manager that this resource is no longer active. </div></div>
<div class="ttc" id="classarmnn_1_1_cpu_tensor_handle_xhtml_aabedf69ab42fd7a0b0f751dd8534e2ab"><div class="ttname"><a href="classarmnn_1_1_cpu_tensor_handle.xhtml#aabedf69ab42fd7a0b0f751dd8534e2ab">armnn::CpuTensorHandle::GetTensor</a></div><div class="ttdeci">T * GetTensor() const</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00080">CpuTensorHandle.hpp:80</a></div></div>
<div class="ttc" id="classarmnn_1_1_cpu_tensor_handle_xhtml_a0feac8591ac1a88993aa3278b24dcb57"><div class="ttname"><a href="classarmnn_1_1_cpu_tensor_handle.xhtml#a0feac8591ac1a88993aa3278b24dcb57">armnn::CpuTensorHandle::SetMemory</a></div><div class="ttdeci">void SetMemory(void *mem)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00089">CpuTensorHandle.hpp:89</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_cpu_tensor_handle_xhtml_a88ab6decf78c152e746b7d8dc2dd931f"><div class="ttname"><a href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a88ab6decf78c152e746b7d8dc2dd931f">armnn::ConstCpuTensorHandle::Unmap</a></div><div class="ttdeci">virtual void Unmap() const override</div><div class="ttdoc">Unmap the tensor data. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00047">CpuTensorHandle.hpp:47</a></div></div>
<div class="ttc" id="classarmnn_1_1_passthrough_cpu_tensor_handle_xhtml_a20d4552d89c3a0517cd3be16abc266f2"><div class="ttname"><a href="classarmnn_1_1_passthrough_cpu_tensor_handle.xhtml#a20d4552d89c3a0517cd3be16abc266f2">armnn::PassthroughCpuTensorHandle::PassthroughCpuTensorHandle</a></div><div class="ttdeci">PassthroughCpuTensorHandle(const TensorInfo &amp;tensorInfo, void *mem)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00141">CpuTensorHandle.hpp:141</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_cpu_tensor_handle_xhtml_a3a76fc8b348e13d5a6ac1240c96ebef4"><div class="ttname"><a href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">armnn::ConstCpuTensorHandle::GetConstTensor</a></div><div class="ttdeci">const T * GetConstTensor() const</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00031">CpuTensorHandle.hpp:31</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__software__tools_8dox_source.xhtml#l00006">01_00_software_tools.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_cpu_tensor_handle_xhtml_a19aa18d78d5ac31e3a3c8f782f0e8606"><div class="ttname"><a href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a19aa18d78d5ac31e3a3c8f782f0e8606">armnn::ConstCpuTensorHandle::Manage</a></div><div class="ttdeci">virtual void Manage() override</div><div class="ttdoc">Indicate to the memory manager that this resource is active. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00042">CpuTensorHandle.hpp:42</a></div></div>
<div class="ttc" id="_types_utils_8hpp_xhtml"><div class="ttname"><a href="_types_utils_8hpp.xhtml">TypesUtils.hpp</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_cpu_tensor_handle_xhtml_a8e8d2fbabcac19f9e12779080ddff54e"><div class="ttname"><a href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a8e8d2fbabcac19f9e12779080ddff54e">armnn::ConstCpuTensorHandle::GetShape</a></div><div class="ttdeci">TensorShape GetShape() const override</div><div class="ttdoc">Get the number of elements for each dimension ordered from slowest iterating dimension to fastest ite...</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00053">CpuTensorHandle.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00015">ITensorHandle.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_cpu_tensor_handle_xhtml_a967f220393d291f71dabce0c06bf9b6c"><div class="ttname"><a href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a967f220393d291f71dabce0c06bf9b6c">armnn::ConstCpuTensorHandle::GetStrides</a></div><div class="ttdeci">TensorShape GetStrides() const override</div><div class="ttdoc">Get the strides for each dimension ordered from largest to smallest where the smallest value is the s...</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00049">CpuTensorHandle.hpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00314">Tensor.hpp:314</a></div></div>
<div class="ttc" id="classarmnn_1_1_cpu_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_cpu_tensor_handle.xhtml">armnn::CpuTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00076">CpuTensorHandle.hpp:76</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_passthrough_cpu_tensor_handle_xhtml_a172de6b7c4a9447f5afc3f7117d4dba0"><div class="ttname"><a href="classarmnn_1_1_const_passthrough_cpu_tensor_handle.xhtml#a172de6b7c4a9447f5afc3f7117d4dba0">armnn::ConstPassthroughCpuTensorHandle::ConstPassthroughCpuTensorHandle</a></div><div class="ttdeci">ConstPassthroughCpuTensorHandle(const TensorInfo &amp;tensorInfo, const void *mem)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00160">CpuTensorHandle.hpp:160</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_cpu_tensor_handle_xhtml_acc3fcce7a100cc3b64247519f22e37fc"><div class="ttname"><a href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#acc3fcce7a100cc3b64247519f22e37fc">armnn::ConstCpuTensorHandle::Map</a></div><div class="ttdeci">virtual const void * Map(bool) const override</div><div class="ttdoc">Map the tensor data for access. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00046">CpuTensorHandle.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a36e8f52330a21eeab3cc7c4e030f3583"><div class="ttname"><a href="namespacearmnn.xhtml#a36e8f52330a21eeab3cc7c4e030f3583">armnn::GetUnpaddedTensorStrides</a></div><div class="ttdeci">TensorShape GetUnpaddedTensorStrides(const TensorInfo &amp;tensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8cpp_source.xhtml#l00015">CpuTensorHandle.cpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_cpu_tensor_handle_xhtml_ac9bdc423c74013d226c902c3d8a263bf"><div class="ttname"><a href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#ac9bdc423c74013d226c902c3d8a263bf">armnn::ConstCpuTensorHandle::ConstCpuTensorHandle</a></div><div class="ttdeci">ConstCpuTensorHandle(const TensorInfo &amp;tensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8cpp_source.xhtml#l00031">CpuTensorHandle.cpp:31</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml"><div class="ttname"><a href="_assert_8hpp.xhtml">Assert.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_cpu_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">armnn::ScopedCpuTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00106">CpuTensorHandle.hpp:106</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_cpu_tensor_handle_xhtml_ae21d7415b7d191de4fe6e02d134a4f38"><div class="ttname"><a href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#ae21d7415b7d191de4fe6e02d134a4f38">armnn::ConstCpuTensorHandle::SetConstMemory</a></div><div class="ttdeci">void SetConstMemory(const void *mem)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00058">CpuTensorHandle.hpp:58</a></div></div>
<div class="ttc" id="_compatible_types_8hpp_xhtml"><div class="ttname"><a href="_compatible_types_8hpp.xhtml">CompatibleTypes.hpp</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_i_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_i_tensor_handle_8hpp.xhtml">ITensorHandle.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_passthrough_cpu_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_passthrough_cpu_tensor_handle.xhtml">armnn::PassthroughCpuTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00138">CpuTensorHandle.hpp:138</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_cpu_tensor_handle_xhtml_a66e8f43a5b42b500871ed96e15419567"><div class="ttname"><a href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">armnn::ConstCpuTensorHandle::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00037">CpuTensorHandle.hpp:37</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="_cpu_tensor_handle_8hpp.xhtml">CpuTensorHandle.hpp</a></li>
    <li class="footer">Generated on Fri Mar 19 2021 15:26:01 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
