<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnQuantizer/CommandLineProcessor.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CommandLineProcessor.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="src_2armnn_quantizer_2_command_line_processor_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2armnn_quantizer_2_command_line_processor_8hpp.xhtml">CommandLineProcessor.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_filesystem_8hpp.xhtml">Filesystem.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;cxxopts/cxxopts.hpp&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno"><a class="line" href="namespacearmnn_quantizer.xhtml">   11</a></span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn_quantizer.xhtml">armnnQuantizer</a></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;{</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="namespacearmnn_quantizer.xhtml#af3f2172356efe007c3be8ffcf3d38fb4">   14</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn_quantizer.xhtml#af3f2172356efe007c3be8ffcf3d38fb4">ValidateOutputDirectory</a>(std::string&amp; dir)</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="keywordflow">if</span> (dir.empty())</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    {</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;No output directory specified&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    }</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keywordflow">if</span> (dir[dir.length() - 1] != <span class="charliteral">&#39;/&#39;</span>)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        dir += <span class="stringliteral">&quot;/&quot;</span>;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    }</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(dir))</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Output directory [&quot;</span> &lt;&lt; dir &lt;&lt; <span class="stringliteral">&quot;] does not exist&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    }</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">if</span> (!fs::is_directory(dir))</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given output directory [&quot;</span> &lt;&lt; dir &lt;&lt; <span class="stringliteral">&quot;] is not a directory&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="namespacearmnn_quantizer.xhtml#aeff6c00ca10f0433e12ddf17f59425f8">   42</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn_quantizer.xhtml#aeff6c00ca10f0433e12ddf17f59425f8">ValidateProvidedFile</a>(<span class="keyword">const</span> std::string&amp; inputFileName)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(inputFileName))</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Provided file [&quot;</span> &lt;&lt; inputFileName &lt;&lt; <span class="stringliteral">&quot;] does not exist&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">if</span> (fs::is_directory(inputFileName))</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given file [&quot;</span> &lt;&lt; inputFileName &lt;&lt; <span class="stringliteral">&quot;] is a directory&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="namespacearmnn_quantizer.xhtml#a23b67d4cd304c7bde724f50135d90769">   59</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn_quantizer.xhtml#a23b67d4cd304c7bde724f50135d90769">ValidateQuantizationScheme</a>(<span class="keyword">const</span> std::string&amp; scheme)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">if</span> (scheme.empty())</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;No Quantization Scheme specified&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    std::vector&lt;std::string&gt; supportedSchemes =</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="stringliteral">&quot;QAsymmS8&quot;</span>,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="stringliteral">&quot;QAsymmU8&quot;</span>,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="stringliteral">&quot;QSymm16&quot;</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    };</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">auto</span> iterator = std::find(supportedSchemes.begin(), supportedSchemes.end(), scheme);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">if</span> (iterator == supportedSchemes.end())</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Quantization Scheme [&quot;</span> &lt;&lt; scheme &lt;&lt; <span class="stringliteral">&quot;] is not supported&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a2f7e28f477647e992871d50e7b793221">   84</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a2f7e28f477647e992871d50e7b793221">CommandLineProcessor::ProcessCommandLine</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        cxxopts::Options options(<span class="stringliteral">&quot;ArmnnQuantizer&quot;</span>,<span class="stringliteral">&quot;Convert a Fp32 ArmNN model to a quantized ArmNN model.&quot;</span>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        options.add_options()</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            (<span class="stringliteral">&quot;h,help&quot;</span>, <span class="stringliteral">&quot;Display help messages&quot;</span>)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            (<span class="stringliteral">&quot;f,infile&quot;</span>,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="stringliteral">&quot;Input file containing float 32 ArmNN Input Graph&quot;</span>,</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                cxxopts::value&lt;std::string&gt;(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a7d1dcf01fee1566cbab614e2fbd3aebd">m_InputFileName</a>))</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            (<span class="stringliteral">&quot;s,scheme&quot;</span>,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="stringliteral">&quot;Quantization scheme,&quot;</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="stringliteral">&quot; \&quot;QAsymmU8\&quot; or \&quot;QAsymmS8\&quot; or \&quot;QSymm16\&quot;,&quot;</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="stringliteral">&quot; default value QAsymmU8&quot;</span>,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                cxxopts::value&lt;std::string&gt;(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a39b10d2bffdb22af36545d10bf205c26">m_QuantizationScheme</a>)-&gt;default_value(<span class="stringliteral">&quot;QAsymmU8&quot;</span>))</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            (<span class="stringliteral">&quot;c,csvfile&quot;</span>,</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="stringliteral">&quot;CSV file containing paths for RAW input tensors&quot;</span>,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                cxxopts::value&lt;std::string&gt;(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a63a5c903eaabd717af1512ab5125af8d">m_CsvFileName</a>)-&gt;default_value(<span class="stringliteral">&quot;&quot;</span>))</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            (<span class="stringliteral">&quot;p,preserve-data-type&quot;</span>,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="stringliteral">&quot;Preserve the input and output data types&quot;</span>,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                cxxopts::value&lt;bool&gt;(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a8c679cfea9ed505165ba3fd5564f433c">m_PreserveDataType</a>)-&gt;default_value(<span class="stringliteral">&quot;false&quot;</span>))</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            (<span class="stringliteral">&quot;d,outdir&quot;</span>,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="stringliteral">&quot;Directory that output file will be written to&quot;</span>,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                cxxopts::value&lt;std::string&gt;(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#aa64986ca8573f32773a8ab4d13c4984d">m_OutputDirectory</a>))</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            (<span class="stringliteral">&quot;o,outfile&quot;</span>,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <span class="stringliteral">&quot;ArmNN output file name&quot;</span>,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                cxxopts::value&lt;std::string&gt;(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#adf3d6dfc2019b8ce0c84e3eea7ae845e">m_OutputFileName</a>));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">auto</span> result = options.parse(argc, argv);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">if</span> (result.count(<span class="stringliteral">&quot;help&quot;</span>) &gt; 0 || argc &lt;= 1)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            std::cout &lt;&lt; options.help() &lt;&lt; std::endl;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="comment">// Check for mandatory single options.</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        std::string mandatorySingleParameters[] = { <span class="stringliteral">&quot;infile&quot;</span>, <span class="stringliteral">&quot;outdir&quot;</span>, <span class="stringliteral">&quot;outfile&quot;</span> };</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> param : mandatorySingleParameters)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">if</span> (result.count(param) != 1)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                std::cerr &lt;&lt; <span class="stringliteral">&quot;Parameter \&#39;--&quot;</span> &lt;&lt; param &lt;&lt; <span class="stringliteral">&quot;\&#39; is required but missing.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> cxxopts::OptionException&amp; e)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        std::cerr &lt;&lt; e.what() &lt;&lt; std::endl &lt;&lt; std::endl;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; e)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Fatal internal error: [&quot;</span> &lt;&lt; e.what() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_quantizer.xhtml#aeff6c00ca10f0433e12ddf17f59425f8">armnnQuantizer::ValidateProvidedFile</a>(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a7d1dcf01fee1566cbab614e2fbd3aebd">m_InputFileName</a>))</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_quantizer.xhtml#a23b67d4cd304c7bde724f50135d90769">ValidateQuantizationScheme</a>(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a39b10d2bffdb22af36545d10bf205c26">m_QuantizationScheme</a>))</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a63a5c903eaabd717af1512ab5125af8d">m_CsvFileName</a> != <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_quantizer.xhtml#aeff6c00ca10f0433e12ddf17f59425f8">armnnQuantizer::ValidateProvidedFile</a>(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a63a5c903eaabd717af1512ab5125af8d">m_CsvFileName</a>))</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            fs::path csvFilePath(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a63a5c903eaabd717af1512ab5125af8d">m_CsvFileName</a>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a7baaa17e2c06d703583ba8da8b53b43c">m_CsvFileDirectory</a> = csvFilePath.parent_path().c_str();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="comment">// If CSV file is defined, create a QuantizationDataSet for specified CSV file.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#ab8c73d68c76881021059a2a06526d0fa">m_QuantizationDataSet</a> = <a class="code" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml">QuantizationDataSet</a>(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a63a5c903eaabd717af1512ab5125af8d">m_CsvFileName</a>);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_quantizer.xhtml#af3f2172356efe007c3be8ffcf3d38fb4">armnnQuantizer::ValidateOutputDirectory</a>(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#aa64986ca8573f32773a8ab4d13c4984d">m_OutputDirectory</a>))</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    std::string output(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#aa64986ca8573f32773a8ab4d13c4984d">m_OutputDirectory</a>);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    output.append(<a class="code" href="classarmnn_quantizer_1_1_command_line_processor.xhtml#adf3d6dfc2019b8ce0c84e3eea7ae845e">m_OutputFileName</a>);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">if</span> (fs::exists(output))</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Output file [&quot;</span> &lt;&lt; output &lt;&lt; <span class="stringliteral">&quot;] already exists&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;} <span class="comment">// namespace armnnQuantizer</span></div><div class="ttc" id="namespacearmnn_quantizer_xhtml_a23b67d4cd304c7bde724f50135d90769"><div class="ttname"><a href="namespacearmnn_quantizer.xhtml#a23b67d4cd304c7bde724f50135d90769">armnnQuantizer::ValidateQuantizationScheme</a></div><div class="ttdeci">bool ValidateQuantizationScheme(const std::string &amp;scheme)</div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml#l00059">CommandLineProcessor.cpp:59</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_quantization_data_set_xhtml"><div class="ttname"><a href="classarmnn_quantizer_1_1_quantization_data_set.xhtml">armnnQuantizer::QuantizationDataSet</a></div><div class="ttdoc">QuantizationDataSet is a structure which is created after parsing a quantization CSV file...</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_data_set_8hpp_source.xhtml#l00018">QuantizationDataSet.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_command_line_processor_xhtml_a63a5c903eaabd717af1512ab5125af8d"><div class="ttname"><a href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a63a5c903eaabd717af1512ab5125af8d">armnnQuantizer::CommandLineProcessor::m_CsvFileName</a></div><div class="ttdeci">std::string m_CsvFileName</div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8hpp_source.xhtml#l00042">CommandLineProcessor.hpp:42</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_command_line_processor_xhtml_a2f7e28f477647e992871d50e7b793221"><div class="ttname"><a href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a2f7e28f477647e992871d50e7b793221">armnnQuantizer::CommandLineProcessor::ProcessCommandLine</a></div><div class="ttdeci">bool ProcessCommandLine(int argc, char *argv[])</div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml#l00084">CommandLineProcessor.cpp:84</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_command_line_processor_xhtml_a8c679cfea9ed505165ba3fd5564f433c"><div class="ttname"><a href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a8c679cfea9ed505165ba3fd5564f433c">armnnQuantizer::CommandLineProcessor::m_PreserveDataType</a></div><div class="ttdeci">bool m_PreserveDataType</div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8hpp_source.xhtml#l00048">CommandLineProcessor.hpp:48</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_command_line_processor_xhtml_ab8c73d68c76881021059a2a06526d0fa"><div class="ttname"><a href="classarmnn_quantizer_1_1_command_line_processor.xhtml#ab8c73d68c76881021059a2a06526d0fa">armnnQuantizer::CommandLineProcessor::m_QuantizationDataSet</a></div><div class="ttdeci">QuantizationDataSet m_QuantizationDataSet</div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8hpp_source.xhtml#l00047">CommandLineProcessor.hpp:47</a></div></div>
<div class="ttc" id="namespacearmnn_quantizer_xhtml_af3f2172356efe007c3be8ffcf3d38fb4"><div class="ttname"><a href="namespacearmnn_quantizer.xhtml#af3f2172356efe007c3be8ffcf3d38fb4">armnnQuantizer::ValidateOutputDirectory</a></div><div class="ttdeci">bool ValidateOutputDirectory(std::string &amp;dir)</div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml#l00014">CommandLineProcessor.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_command_line_processor_xhtml_aa64986ca8573f32773a8ab4d13c4984d"><div class="ttname"><a href="classarmnn_quantizer_1_1_command_line_processor.xhtml#aa64986ca8573f32773a8ab4d13c4984d">armnnQuantizer::CommandLineProcessor::m_OutputDirectory</a></div><div class="ttdeci">std::string m_OutputDirectory</div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8hpp_source.xhtml#l00044">CommandLineProcessor.hpp:44</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_command_line_processor_xhtml_a7d1dcf01fee1566cbab614e2fbd3aebd"><div class="ttname"><a href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a7d1dcf01fee1566cbab614e2fbd3aebd">armnnQuantizer::CommandLineProcessor::m_InputFileName</a></div><div class="ttdeci">std::string m_InputFileName</div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8hpp_source.xhtml#l00041">CommandLineProcessor.hpp:41</a></div></div>
<div class="ttc" id="_filesystem_8hpp_xhtml"><div class="ttname"><a href="_filesystem_8hpp.xhtml">Filesystem.hpp</a></div></div>
<div class="ttc" id="src_2armnn_quantizer_2_command_line_processor_8hpp_xhtml"><div class="ttname"><a href="src_2armnn_quantizer_2_command_line_processor_8hpp.xhtml">CommandLineProcessor.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_quantizer_xhtml_aeff6c00ca10f0433e12ddf17f59425f8"><div class="ttname"><a href="namespacearmnn_quantizer.xhtml#aeff6c00ca10f0433e12ddf17f59425f8">armnnQuantizer::ValidateProvidedFile</a></div><div class="ttdeci">bool ValidateProvidedFile(const std::string &amp;inputFileName)</div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml#l00042">CommandLineProcessor.cpp:42</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_command_line_processor_xhtml_a39b10d2bffdb22af36545d10bf205c26"><div class="ttname"><a href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a39b10d2bffdb22af36545d10bf205c26">armnnQuantizer::CommandLineProcessor::m_QuantizationScheme</a></div><div class="ttdeci">std::string m_QuantizationScheme</div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8hpp_source.xhtml#l00046">CommandLineProcessor.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_quantizer_xhtml"><div class="ttname"><a href="namespacearmnn_quantizer.xhtml">armnnQuantizer</a></div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml#l00011">CommandLineProcessor.cpp:11</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_command_line_processor_xhtml_a7baaa17e2c06d703583ba8da8b53b43c"><div class="ttname"><a href="classarmnn_quantizer_1_1_command_line_processor.xhtml#a7baaa17e2c06d703583ba8da8b53b43c">armnnQuantizer::CommandLineProcessor::m_CsvFileDirectory</a></div><div class="ttdeci">std::string m_CsvFileDirectory</div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8hpp_source.xhtml#l00043">CommandLineProcessor.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_command_line_processor_xhtml_adf3d6dfc2019b8ce0c84e3eea7ae845e"><div class="ttname"><a href="classarmnn_quantizer_1_1_command_line_processor.xhtml#adf3d6dfc2019b8ce0c84e3eea7ae845e">armnnQuantizer::CommandLineProcessor::m_OutputFileName</a></div><div class="ttdeci">std::string m_OutputFileName</div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8hpp_source.xhtml#l00045">CommandLineProcessor.hpp:45</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0de8a5774692585e465aba8075a97653.xhtml">armnnQuantizer</a></li><li class="navelem"><a class="el" href="src_2armnn_quantizer_2_command_line_processor_8cpp.xhtml">CommandLineProcessor.cpp</a></li>
    <li class="footer">Generated on Thu Feb 25 2021 17:27:30 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
