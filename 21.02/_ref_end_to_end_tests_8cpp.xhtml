<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/test/RefEndToEndTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_ref_end_to_end_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">RefEndToEndTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/EndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_activation_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/ActivationEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_arg_min_max_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/ArgMinMaxEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_batch_to_space_nd_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/BatchToSpaceNdEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_comparison_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/ComparisonEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_concat_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/ConcatEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_depth_to_space_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/DepthToSpaceEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_dequantize_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/DequantizeEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_detection_post_process_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/DetectionPostProcessEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_elementwise_unary_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/ElementwiseUnaryEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_fill_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/FillEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_gather_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/GatherEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_instance_normalization_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/InstanceNormalizationEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_log_softmax_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/LogSoftmaxEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_prelu_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/PreluEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_q_lstm_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/QLstmEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_rank_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/RankEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_resize_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/ResizeEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_space_to_depth_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/SpaceToDepthEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_splitter_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/SplitterEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_transpose_convolution2d_end_to_end_test_impl_8hpp_source.xhtml">backendsCommon/test/TransposeConvolution2dEndToEndTestImpl.hpp</a>&gt;</code><br />
<code>#include &lt;boost/test/unit_test.hpp&gt;</code><br />
<code>#include &lt;boost/test/execution_monitor.hpp&gt;</code><br />
</div>
<p><a href="_ref_end_to_end_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a5bc57c51ee78bc9d9996e2124277a9b2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a5bc57c51ee78bc9d9996e2124277a9b2">BOOST_AUTO_TEST_CASE</a> (RefAbsEndToEndTestFloat32)</td></tr>
<tr class="separator:a5bc57c51ee78bc9d9996e2124277a9b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acaa2d9f72bfa417efbf0647069394f11"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#acaa2d9f72bfa417efbf0647069394f11">BOOST_AUTO_TEST_CASE</a> (RefAbsEndToEndTestUint8)</td></tr>
<tr class="separator:acaa2d9f72bfa417efbf0647069394f11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d8afa1729903714ea87f9cd0a1c7c7d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a6d8afa1729903714ea87f9cd0a1c7c7d">BOOST_AUTO_TEST_CASE</a> (RefAbsEndToEndTestInt16)</td></tr>
<tr class="separator:a6d8afa1729903714ea87f9cd0a1c7c7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d2cb37725af540bc1808e0698c82c3f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a5d2cb37725af540bc1808e0698c82c3f">BOOST_AUTO_TEST_CASE</a> (ConstantUsage_Ref_Float32)</td></tr>
<tr class="separator:a5d2cb37725af540bc1808e0698c82c3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a027914ebd3189e36c4dd63fd10c09c92"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a027914ebd3189e36c4dd63fd10c09c92">BOOST_AUTO_TEST_CASE</a> (ConstantUsage_Ref_Uint8)</td></tr>
<tr class="separator:a027914ebd3189e36c4dd63fd10c09c92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04f143f4f19a8bec8de5a0f615aa4379"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a04f143f4f19a8bec8de5a0f615aa4379">BOOST_AUTO_TEST_CASE</a> (Unsigned8)</td></tr>
<tr class="separator:a04f143f4f19a8bec8de5a0f615aa4379"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a208bf4332ec9e631422d1aa0117d6d7c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a208bf4332ec9e631422d1aa0117d6d7c">BOOST_AUTO_TEST_CASE</a> (TrivialAdd)</td></tr>
<tr class="separator:a208bf4332ec9e631422d1aa0117d6d7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1035207a05327abc5f1e58b9654bbac5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a1035207a05327abc5f1e58b9654bbac5">BOOST_AUTO_TEST_CASE</a> (MultipleOutputs)</td></tr>
<tr class="separator:a1035207a05327abc5f1e58b9654bbac5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7200afa8e36a896f0a1fb9fb65f6bfa6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a7200afa8e36a896f0a1fb9fb65f6bfa6">BOOST_AUTO_TEST_CASE</a> (TrivialMin)</td></tr>
<tr class="separator:a7200afa8e36a896f0a1fb9fb65f6bfa6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a029a0743591fc9f1a99b859b9bffd41a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a029a0743591fc9f1a99b859b9bffd41a">BOOST_AUTO_TEST_CASE</a> (RefEqualSimpleEndToEndTest)</td></tr>
<tr class="separator:a029a0743591fc9f1a99b859b9bffd41a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bf1401d5ae22c734b9e3b40d6487410"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a9bf1401d5ae22c734b9e3b40d6487410">BOOST_AUTO_TEST_CASE</a> (RefGreaterSimpleEndToEndTest)</td></tr>
<tr class="separator:a9bf1401d5ae22c734b9e3b40d6487410"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa86090aa5c8406486b200bf4e24ba14"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#afa86090aa5c8406486b200bf4e24ba14">BOOST_AUTO_TEST_CASE</a> (RefEqualSimpleEndToEndUint8Test)</td></tr>
<tr class="separator:afa86090aa5c8406486b200bf4e24ba14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30c48c204bee2f1703229435010f8efc"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a30c48c204bee2f1703229435010f8efc">BOOST_AUTO_TEST_CASE</a> (RefGreaterSimpleEndToEndUint8Test)</td></tr>
<tr class="separator:a30c48c204bee2f1703229435010f8efc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b7d019407ea942767edd1de8abe7189"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a0b7d019407ea942767edd1de8abe7189">BOOST_AUTO_TEST_CASE</a> (RefEqualBroadcastEndToEndTest)</td></tr>
<tr class="separator:a0b7d019407ea942767edd1de8abe7189"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24aee2442732c07107a9bc6c3300ccc6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a24aee2442732c07107a9bc6c3300ccc6">BOOST_AUTO_TEST_CASE</a> (RefGreaterBroadcastEndToEndTest)</td></tr>
<tr class="separator:a24aee2442732c07107a9bc6c3300ccc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f4ef90af3dd93931401ddf4a5bda88a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a3f4ef90af3dd93931401ddf4a5bda88a">BOOST_AUTO_TEST_CASE</a> (RefEqualBroadcastEndToEndUint8Test)</td></tr>
<tr class="separator:a3f4ef90af3dd93931401ddf4a5bda88a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f4e42ececbb767bfc45599472c35954"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a0f4e42ececbb767bfc45599472c35954">BOOST_AUTO_TEST_CASE</a> (RefGreaterBroadcastEndToEndUint8Test)</td></tr>
<tr class="separator:a0f4e42ececbb767bfc45599472c35954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c128158046641407787e6d61bb23ac8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a6c128158046641407787e6d61bb23ac8">BOOST_AUTO_TEST_CASE</a> (RefBatchToSpaceNdEndToEndFloat32NHWCTest)</td></tr>
<tr class="separator:a6c128158046641407787e6d61bb23ac8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74acdc7f85408ebea3a3732aea1a2337"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a74acdc7f85408ebea3a3732aea1a2337">BOOST_AUTO_TEST_CASE</a> (RefBatchToSpaceNdEndToEndUint8NHWCTest)</td></tr>
<tr class="separator:a74acdc7f85408ebea3a3732aea1a2337"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac03d8e759d117535c53b27afc93299d6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ac03d8e759d117535c53b27afc93299d6">BOOST_AUTO_TEST_CASE</a> (RefBatchToSpaceNdEndToEndQSymm16NHWCTest)</td></tr>
<tr class="separator:ac03d8e759d117535c53b27afc93299d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b10559fab8ae45031a42ec972863178"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a0b10559fab8ae45031a42ec972863178">BOOST_AUTO_TEST_CASE</a> (RefBatchToSpaceNdEndToEndFloat32NCHWTest)</td></tr>
<tr class="separator:a0b10559fab8ae45031a42ec972863178"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad90271f3275cbd6c2a367654124e1e4c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ad90271f3275cbd6c2a367654124e1e4c">BOOST_AUTO_TEST_CASE</a> (RefBatchToSpaceNdEndToEndUint8NCHWTest)</td></tr>
<tr class="separator:ad90271f3275cbd6c2a367654124e1e4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac48d73d45754667724f4a3c4cec6614"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#aac48d73d45754667724f4a3c4cec6614">BOOST_AUTO_TEST_CASE</a> (RefBatchToSpaceNdEndToEndQSymm16NCHWTest)</td></tr>
<tr class="separator:aac48d73d45754667724f4a3c4cec6614"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a909144e6fd1a36d8b62ea45f64fd9ed2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a909144e6fd1a36d8b62ea45f64fd9ed2">BOOST_AUTO_TEST_CASE</a> (RefBatchToSpaceNdEndToEndComplexFloat32NHWCTest)</td></tr>
<tr class="separator:a909144e6fd1a36d8b62ea45f64fd9ed2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c1270c756df8aa9ff12131fa7227891"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a4c1270c756df8aa9ff12131fa7227891">BOOST_AUTO_TEST_CASE</a> (RefBatchToSpaceNdEndToEndComplexUint8NHWCTest)</td></tr>
<tr class="separator:a4c1270c756df8aa9ff12131fa7227891"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bff92f8c7975a3f3e1c14a65cd0ac40"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a3bff92f8c7975a3f3e1c14a65cd0ac40">BOOST_AUTO_TEST_CASE</a> (RefBatchToSpaceNdEndToEndComplexQSymm16NHWCTest)</td></tr>
<tr class="separator:a3bff92f8c7975a3f3e1c14a65cd0ac40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bc952f469862338bfb3d92c9225b123"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a1bc952f469862338bfb3d92c9225b123">BOOST_AUTO_TEST_CASE</a> (RefBatchToSpaceNdEndToEndComplexFloat32NCHWTest)</td></tr>
<tr class="separator:a1bc952f469862338bfb3d92c9225b123"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acee0e1d468d7a8f107de69239f7284ad"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#acee0e1d468d7a8f107de69239f7284ad">BOOST_AUTO_TEST_CASE</a> (RefBatchToSpaceNdEndToEndComplexUint8NCHWTest)</td></tr>
<tr class="separator:acee0e1d468d7a8f107de69239f7284ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ec4b692476e7d68a3f6fed2f527d8f9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a5ec4b692476e7d68a3f6fed2f527d8f9">BOOST_AUTO_TEST_CASE</a> (RefBatchToSpaceNdEndToEndComplexQSymm16NCHWTest)</td></tr>
<tr class="separator:a5ec4b692476e7d68a3f6fed2f527d8f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7ac663620865b07a45c57adb628dcf0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ae7ac663620865b07a45c57adb628dcf0">BOOST_AUTO_TEST_CASE</a> (RefConcatEndToEndDim0Test)</td></tr>
<tr class="separator:ae7ac663620865b07a45c57adb628dcf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d3d3379c3bd263b4f60981e050a483c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a7d3d3379c3bd263b4f60981e050a483c">BOOST_AUTO_TEST_CASE</a> (RefConcatEndToEndDim0Uint8Test)</td></tr>
<tr class="separator:a7d3d3379c3bd263b4f60981e050a483c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cc53fc85745d58ff14f192c91753761"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a9cc53fc85745d58ff14f192c91753761">BOOST_AUTO_TEST_CASE</a> (RefConcatEndToEndDim1Test)</td></tr>
<tr class="separator:a9cc53fc85745d58ff14f192c91753761"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeed4bb49ba27ff01066d5e3b16afa56e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#aeed4bb49ba27ff01066d5e3b16afa56e">BOOST_AUTO_TEST_CASE</a> (RefConcatEndToEndDim1Uint8Test)</td></tr>
<tr class="separator:aeed4bb49ba27ff01066d5e3b16afa56e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af49df38f46b900b8f95c5f12cc621dbf"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#af49df38f46b900b8f95c5f12cc621dbf">BOOST_AUTO_TEST_CASE</a> (RefConcatEndToEndDim2Test)</td></tr>
<tr class="separator:af49df38f46b900b8f95c5f12cc621dbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae18dcb96f3b85c57497d1957e4c20c3f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ae18dcb96f3b85c57497d1957e4c20c3f">BOOST_AUTO_TEST_CASE</a> (RefConcatEndToEndDim2Uint8Test)</td></tr>
<tr class="separator:ae18dcb96f3b85c57497d1957e4c20c3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5f83a902019b718f7bcf508a3d5d6bc"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ab5f83a902019b718f7bcf508a3d5d6bc">BOOST_AUTO_TEST_CASE</a> (RefConcatEndToEndDim3Test)</td></tr>
<tr class="separator:ab5f83a902019b718f7bcf508a3d5d6bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a817e1b9a97bc6de7259a07789a42ffb7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a817e1b9a97bc6de7259a07789a42ffb7">BOOST_AUTO_TEST_CASE</a> (RefConcatEndToEndDim3Uint8Test)</td></tr>
<tr class="separator:a817e1b9a97bc6de7259a07789a42ffb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a33eadf125bee8822785a2ab8af1a2f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a1a33eadf125bee8822785a2ab8af1a2f">BOOST_AUTO_TEST_CASE</a> (RefEluEndToEndTestFloat32)</td></tr>
<tr class="separator:a1a33eadf125bee8822785a2ab8af1a2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf3750dee36a67a025fa912a823c319a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#adf3750dee36a67a025fa912a823c319a">BOOST_AUTO_TEST_CASE</a> (RefEluEndToEndTestFloat16)</td></tr>
<tr class="separator:adf3750dee36a67a025fa912a823c319a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a723b0aa6e015dc7ed0c06ecc43b819fd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a723b0aa6e015dc7ed0c06ecc43b819fd">BOOST_AUTO_TEST_CASE</a> (RefEluEndToEndTestBFloat16)</td></tr>
<tr class="separator:a723b0aa6e015dc7ed0c06ecc43b819fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5969e118109c18276e34fcc31669848d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a5969e118109c18276e34fcc31669848d">BOOST_AUTO_TEST_CASE</a> (RefEluEndToEndTestQAsymmS8)</td></tr>
<tr class="separator:a5969e118109c18276e34fcc31669848d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e4fe9e6f8d260ff4a11cbc48a6f7623"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a3e4fe9e6f8d260ff4a11cbc48a6f7623">BOOST_AUTO_TEST_CASE</a> (RefEluEndToEndTestQAsymmU8)</td></tr>
<tr class="separator:a3e4fe9e6f8d260ff4a11cbc48a6f7623"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5159703f1f05f904f59f3ade6d34dd76"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a5159703f1f05f904f59f3ade6d34dd76">BOOST_AUTO_TEST_CASE</a> (RefEluEndToEndTestQSymmS16)</td></tr>
<tr class="separator:a5159703f1f05f904f59f3ade6d34dd76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5907ceefa83504a5ef45d481eda5b74d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a5907ceefa83504a5ef45d481eda5b74d">BOOST_AUTO_TEST_CASE</a> (RefFillEndToEndTest)</td></tr>
<tr class="separator:a5907ceefa83504a5ef45d481eda5b74d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf95ac60128d5ef796ca10235ec4202c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#acf95ac60128d5ef796ca10235ec4202c">BOOST_AUTO_TEST_CASE</a> (RefFillEndToEndTestFloat16)</td></tr>
<tr class="separator:acf95ac60128d5ef796ca10235ec4202c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49a7836c2393e40f7f1ce0e5de8205fd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a49a7836c2393e40f7f1ce0e5de8205fd">BOOST_AUTO_TEST_CASE</a> (RefFillEndToEndTestInt32)</td></tr>
<tr class="separator:a49a7836c2393e40f7f1ce0e5de8205fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afab2cbb78f05fd2d93cff1985536fc10"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#afab2cbb78f05fd2d93cff1985536fc10">BOOST_AUTO_TEST_CASE</a> (RefGatherFloatTest)</td></tr>
<tr class="separator:afab2cbb78f05fd2d93cff1985536fc10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe1ec29ebc9f64ecdc3fc45e4f388af9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#abe1ec29ebc9f64ecdc3fc45e4f388af9">BOOST_AUTO_TEST_CASE</a> (RefGatherUint8Test)</td></tr>
<tr class="separator:abe1ec29ebc9f64ecdc3fc45e4f388af9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2a65c8946fa34ec01f3b5b5d9a54461"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ab2a65c8946fa34ec01f3b5b5d9a54461">BOOST_AUTO_TEST_CASE</a> (RefGatherInt16Test)</td></tr>
<tr class="separator:ab2a65c8946fa34ec01f3b5b5d9a54461"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3ea9559114191d3ae065687a0519915"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#aa3ea9559114191d3ae065687a0519915">BOOST_AUTO_TEST_CASE</a> (RefGatherMultiDimFloatTest)</td></tr>
<tr class="separator:aa3ea9559114191d3ae065687a0519915"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f6a1c790769e5baf641c2fcf22e24cf"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a7f6a1c790769e5baf641c2fcf22e24cf">BOOST_AUTO_TEST_CASE</a> (RefGatherMultiDimUint8Test)</td></tr>
<tr class="separator:a7f6a1c790769e5baf641c2fcf22e24cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8738af8276670cd7ecedb4e1f89cfdbb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a8738af8276670cd7ecedb4e1f89cfdbb">BOOST_AUTO_TEST_CASE</a> (RefGatherMultiDimInt16Test)</td></tr>
<tr class="separator:a8738af8276670cd7ecedb4e1f89cfdbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27a746f7bc22538b810be0d5e945b26a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a27a746f7bc22538b810be0d5e945b26a">BOOST_AUTO_TEST_CASE</a> (DephtToSpaceEndToEndNchwFloat32)</td></tr>
<tr class="separator:a27a746f7bc22538b810be0d5e945b26a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cf4601d23d9558a0c8b9a5a330ae854"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a7cf4601d23d9558a0c8b9a5a330ae854">BOOST_AUTO_TEST_CASE</a> (DephtToSpaceEndToEndNchwFloat16)</td></tr>
<tr class="separator:a7cf4601d23d9558a0c8b9a5a330ae854"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca41e6b9e1bda61b09b635c5857aee91"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#aca41e6b9e1bda61b09b635c5857aee91">BOOST_AUTO_TEST_CASE</a> (DephtToSpaceEndToEndNchwUint8)</td></tr>
<tr class="separator:aca41e6b9e1bda61b09b635c5857aee91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66bf08ef789c18b8a63d0fceaefbeea1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a66bf08ef789c18b8a63d0fceaefbeea1">BOOST_AUTO_TEST_CASE</a> (DephtToSpaceEndToEndNchwInt16)</td></tr>
<tr class="separator:a66bf08ef789c18b8a63d0fceaefbeea1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a138933084e2ddb38faaa03ea6c435365"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a138933084e2ddb38faaa03ea6c435365">BOOST_AUTO_TEST_CASE</a> (DephtToSpaceEndToEndNhwcFloat32)</td></tr>
<tr class="separator:a138933084e2ddb38faaa03ea6c435365"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae15bf71385d1355cc0d85af4d61a008e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ae15bf71385d1355cc0d85af4d61a008e">BOOST_AUTO_TEST_CASE</a> (DephtToSpaceEndToEndNhwcFloat16)</td></tr>
<tr class="separator:ae15bf71385d1355cc0d85af4d61a008e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a015b7b281e1718199b6ad08352840823"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a015b7b281e1718199b6ad08352840823">BOOST_AUTO_TEST_CASE</a> (DephtToSpaceEndToEndNhwcUint8)</td></tr>
<tr class="separator:a015b7b281e1718199b6ad08352840823"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a756295623f8ac16a2beb184a3030e3aa"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a756295623f8ac16a2beb184a3030e3aa">BOOST_AUTO_TEST_CASE</a> (DephtToSpaceEndToEndNhwcInt16)</td></tr>
<tr class="separator:a756295623f8ac16a2beb184a3030e3aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cd60c9b4ecad211eecbf7804799ae95"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a3cd60c9b4ecad211eecbf7804799ae95">BOOST_AUTO_TEST_CASE</a> (DequantizeEndToEndSimpleTest)</td></tr>
<tr class="separator:a3cd60c9b4ecad211eecbf7804799ae95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3804af7f4121ef26a388c1c9f81e06b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ad3804af7f4121ef26a388c1c9f81e06b">BOOST_AUTO_TEST_CASE</a> (DequantizeEndToEndOffsetTest)</td></tr>
<tr class="separator:ad3804af7f4121ef26a388c1c9f81e06b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a0134f563666ab4a3e18c3f0b8f77b1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a2a0134f563666ab4a3e18c3f0b8f77b1">BOOST_AUTO_TEST_CASE</a> (DequantizeEndToEndSimpleInt16Test)</td></tr>
<tr class="separator:a2a0134f563666ab4a3e18c3f0b8f77b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdce0c49644d4d87ac13d29a1faa8cc9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#afdce0c49644d4d87ac13d29a1faa8cc9">BOOST_AUTO_TEST_CASE</a> (DequantizeEndToEndOffsetInt16Test)</td></tr>
<tr class="separator:afdce0c49644d4d87ac13d29a1faa8cc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8ddeab6c1d756ff1b12bd9deb4c879c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ad8ddeab6c1d756ff1b12bd9deb4c879c">BOOST_AUTO_TEST_CASE</a> (RefDetectionPostProcessRegularNmsTest)</td></tr>
<tr class="separator:ad8ddeab6c1d756ff1b12bd9deb4c879c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a469c9be3a505d4ef240b1ae2478c5256"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a> (uint8_t *quant, const float *dequant, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;info)</td></tr>
<tr class="separator:a469c9be3a505d4ef240b1ae2478c5256"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05c90606a76cb31af15b5e7c1fd93abe"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a05c90606a76cb31af15b5e7c1fd93abe">BOOST_AUTO_TEST_CASE</a> (RefDetectionPostProcessRegularNmsUint8Test)</td></tr>
<tr class="separator:a05c90606a76cb31af15b5e7c1fd93abe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae51581ab79ac5c09af9019c0b9aa135f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ae51581ab79ac5c09af9019c0b9aa135f">BOOST_AUTO_TEST_CASE</a> (RefDetectionPostProcessFastNmsTest)</td></tr>
<tr class="separator:ae51581ab79ac5c09af9019c0b9aa135f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ac78dd79f04e09d2a0da373b1a5c1be"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a6ac78dd79f04e09d2a0da373b1a5c1be">BOOST_AUTO_TEST_CASE</a> (RefDetectionPostProcessFastNmsUint8Test)</td></tr>
<tr class="separator:a6ac78dd79f04e09d2a0da373b1a5c1be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a730d4e000e155332026c9303a154c4ab"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a730d4e000e155332026c9303a154c4ab">BOOST_AUTO_TEST_CASE</a> (RefHardSwishEndToEndTestFloat32)</td></tr>
<tr class="separator:a730d4e000e155332026c9303a154c4ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af81e0023fa3624d9d016704c1a4fe336"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#af81e0023fa3624d9d016704c1a4fe336">BOOST_AUTO_TEST_CASE</a> (RefHardSwishEndToEndTestFloat16)</td></tr>
<tr class="separator:af81e0023fa3624d9d016704c1a4fe336"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9676b4ac59da5a13eb80432a751486c3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a9676b4ac59da5a13eb80432a751486c3">BOOST_AUTO_TEST_CASE</a> (RefHardSwishEndToEndTestBFloat16)</td></tr>
<tr class="separator:a9676b4ac59da5a13eb80432a751486c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b6f64d605ce0a621aed93c023b92c3a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a1b6f64d605ce0a621aed93c023b92c3a">BOOST_AUTO_TEST_CASE</a> (RefHardSwishEndToEndTestQAsymmS8)</td></tr>
<tr class="separator:a1b6f64d605ce0a621aed93c023b92c3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae580670fd5c776855545cc271ef90688"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ae580670fd5c776855545cc271ef90688">BOOST_AUTO_TEST_CASE</a> (RefHardSwishEndToEndTestQAsymmU8)</td></tr>
<tr class="separator:ae580670fd5c776855545cc271ef90688"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73400718785944e2487551fa6c035982"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a73400718785944e2487551fa6c035982">BOOST_AUTO_TEST_CASE</a> (RefHardSwishEndToEndTestQSymmS16)</td></tr>
<tr class="separator:a73400718785944e2487551fa6c035982"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a093aa9f5054c2df21df37dccc604c5b0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a093aa9f5054c2df21df37dccc604c5b0">BOOST_AUTO_TEST_CASE</a> (RefLogSoftmaxEndToEndTest)</td></tr>
<tr class="separator:a093aa9f5054c2df21df37dccc604c5b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58d783e6a05d67a07a0a9499ef50fd19"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a58d783e6a05d67a07a0a9499ef50fd19">BOOST_AUTO_TEST_CASE</a> (RefPreluEndToEndTestFloat32)</td></tr>
<tr class="separator:a58d783e6a05d67a07a0a9499ef50fd19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78937c046eab79ebc7bc338147cff2a4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a78937c046eab79ebc7bc338147cff2a4">BOOST_AUTO_TEST_CASE</a> (RefPreluEndToEndTestUint8)</td></tr>
<tr class="separator:a78937c046eab79ebc7bc338147cff2a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bce232785880f4e91eac5ffced0cce6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a8bce232785880f4e91eac5ffced0cce6">BOOST_AUTO_TEST_CASE</a> (RefPreluEndToEndTestQSymm16)</td></tr>
<tr class="separator:a8bce232785880f4e91eac5ffced0cce6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23e155c23a260950db6d840a13421a2e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a23e155c23a260950db6d840a13421a2e">BOOST_AUTO_TEST_CASE</a> (RefSpaceToDepthNhwcEndToEndTest1)</td></tr>
<tr class="separator:a23e155c23a260950db6d840a13421a2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2b0872039df69aa2d84e70c0040008b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ac2b0872039df69aa2d84e70c0040008b">BOOST_AUTO_TEST_CASE</a> (RefSpaceToDepthNchwEndToEndTest1)</td></tr>
<tr class="separator:ac2b0872039df69aa2d84e70c0040008b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a453a3fa1dbcf379339e1f4c03fd7fb1c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a453a3fa1dbcf379339e1f4c03fd7fb1c">BOOST_AUTO_TEST_CASE</a> (RefSpaceToDepthNhwcEndToEndTest2)</td></tr>
<tr class="separator:a453a3fa1dbcf379339e1f4c03fd7fb1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab82e7b2deab17a6c9fa175cad7086c07"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ab82e7b2deab17a6c9fa175cad7086c07">BOOST_AUTO_TEST_CASE</a> (RefSpaceToDepthNchwEndToEndTest2)</td></tr>
<tr class="separator:ab82e7b2deab17a6c9fa175cad7086c07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa25eeef4918e3e9fde41e0187e120cd9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#aa25eeef4918e3e9fde41e0187e120cd9">BOOST_AUTO_TEST_CASE</a> (RefSplitter1dEndToEndTest)</td></tr>
<tr class="separator:aa25eeef4918e3e9fde41e0187e120cd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae253af67b3b5499c432c4643a1c827a0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ae253af67b3b5499c432c4643a1c827a0">BOOST_AUTO_TEST_CASE</a> (RefSplitter1dEndToEndUint8Test)</td></tr>
<tr class="separator:ae253af67b3b5499c432c4643a1c827a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d7a6a40cf58ef7f87631150f36e7458"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a7d7a6a40cf58ef7f87631150f36e7458">BOOST_AUTO_TEST_CASE</a> (RefSplitter2dDim0EndToEndTest)</td></tr>
<tr class="separator:a7d7a6a40cf58ef7f87631150f36e7458"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a499606096416b54a1fe8a0fd8eacde64"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a499606096416b54a1fe8a0fd8eacde64">BOOST_AUTO_TEST_CASE</a> (RefSplitter2dDim1EndToEndTest)</td></tr>
<tr class="separator:a499606096416b54a1fe8a0fd8eacde64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a008549ce65eceef7f041baaf8d6bcbbb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a008549ce65eceef7f041baaf8d6bcbbb">BOOST_AUTO_TEST_CASE</a> (RefSplitter2dDim0EndToEndUint8Test)</td></tr>
<tr class="separator:a008549ce65eceef7f041baaf8d6bcbbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af07fb3bb420de34858559a95830e7e1f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#af07fb3bb420de34858559a95830e7e1f">BOOST_AUTO_TEST_CASE</a> (RefSplitter2dDim1EndToEndUint8Test)</td></tr>
<tr class="separator:af07fb3bb420de34858559a95830e7e1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3490d58c80d2df3f4e5b21eb9b07e155"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a3490d58c80d2df3f4e5b21eb9b07e155">BOOST_AUTO_TEST_CASE</a> (RefSplitter3dDim0EndToEndTest)</td></tr>
<tr class="separator:a3490d58c80d2df3f4e5b21eb9b07e155"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a947708810654d415d5f01e499c2ef6ce"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a947708810654d415d5f01e499c2ef6ce">BOOST_AUTO_TEST_CASE</a> (RefSplitter3dDim1EndToEndTest)</td></tr>
<tr class="separator:a947708810654d415d5f01e499c2ef6ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38ee9b831e5d1b7d59b67a09ec815062"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a38ee9b831e5d1b7d59b67a09ec815062">BOOST_AUTO_TEST_CASE</a> (RefSplitter3dDim2EndToEndTest)</td></tr>
<tr class="separator:a38ee9b831e5d1b7d59b67a09ec815062"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cdc58b5c0b116eeb63d973086077c6e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a7cdc58b5c0b116eeb63d973086077c6e">BOOST_AUTO_TEST_CASE</a> (RefSplitter3dDim0EndToEndUint8Test)</td></tr>
<tr class="separator:a7cdc58b5c0b116eeb63d973086077c6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d1353061bb42d6b133d2b0540bffdd2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a8d1353061bb42d6b133d2b0540bffdd2">BOOST_AUTO_TEST_CASE</a> (RefSplitter3dDim1EndToEndUint8Test)</td></tr>
<tr class="separator:a8d1353061bb42d6b133d2b0540bffdd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a863e1cbe8981e4a018cb0d9b8381c96e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a863e1cbe8981e4a018cb0d9b8381c96e">BOOST_AUTO_TEST_CASE</a> (RefSplitter3dDim2EndToEndUint8Test)</td></tr>
<tr class="separator:a863e1cbe8981e4a018cb0d9b8381c96e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71b7c346ef7ec574fc4510e062e549bf"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a71b7c346ef7ec574fc4510e062e549bf">BOOST_AUTO_TEST_CASE</a> (RefSplitter4dDim0EndToEndTest)</td></tr>
<tr class="separator:a71b7c346ef7ec574fc4510e062e549bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54653770541b1193ca57c2b4ee0d30f2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a54653770541b1193ca57c2b4ee0d30f2">BOOST_AUTO_TEST_CASE</a> (RefSplitter4dDim1EndToEndTest)</td></tr>
<tr class="separator:a54653770541b1193ca57c2b4ee0d30f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a793e1c99414aa55a6c6cbb01f9e7fdf4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a793e1c99414aa55a6c6cbb01f9e7fdf4">BOOST_AUTO_TEST_CASE</a> (RefSplitter4dDim2EndToEndTest)</td></tr>
<tr class="separator:a793e1c99414aa55a6c6cbb01f9e7fdf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19ffa474b62942e72169c10695a44fa1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a19ffa474b62942e72169c10695a44fa1">BOOST_AUTO_TEST_CASE</a> (RefSplitter4dDim3EndToEndTest)</td></tr>
<tr class="separator:a19ffa474b62942e72169c10695a44fa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1dada1db02d355b0a232ec28b1c5a2a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ac1dada1db02d355b0a232ec28b1c5a2a">BOOST_AUTO_TEST_CASE</a> (RefSplitter4dDim0EndToEndUint8Test)</td></tr>
<tr class="separator:ac1dada1db02d355b0a232ec28b1c5a2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e68beafc30b9bdcce541915905b1d38"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a7e68beafc30b9bdcce541915905b1d38">BOOST_AUTO_TEST_CASE</a> (RefSplitter4dDim1EndToEndUint8Test)</td></tr>
<tr class="separator:a7e68beafc30b9bdcce541915905b1d38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8129f418288208944ad79bf08405db9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ac8129f418288208944ad79bf08405db9">BOOST_AUTO_TEST_CASE</a> (RefSplitter4dDim2EndToEndUint8Test)</td></tr>
<tr class="separator:ac8129f418288208944ad79bf08405db9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af45bffc90ca70067148a288cb573f2ac"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#af45bffc90ca70067148a288cb573f2ac">BOOST_AUTO_TEST_CASE</a> (RefSplitter4dDim3EndToEndUint8Test)</td></tr>
<tr class="separator:af45bffc90ca70067148a288cb573f2ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab66cbf20810376f197978b0e721b952e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ab66cbf20810376f197978b0e721b952e">BOOST_AUTO_TEST_CASE</a> (RefTransposeConvolution2dEndToEndFloatNchwTest)</td></tr>
<tr class="separator:ab66cbf20810376f197978b0e721b952e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1b05c3cfca6479898a76437c7d99aa1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ab1b05c3cfca6479898a76437c7d99aa1">BOOST_AUTO_TEST_CASE</a> (RefTransposeConvolution2dEndToEndUint8NchwTest)</td></tr>
<tr class="separator:ab1b05c3cfca6479898a76437c7d99aa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a7217701a4ca670dc5cb24e059c03f2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a7a7217701a4ca670dc5cb24e059c03f2">BOOST_AUTO_TEST_CASE</a> (RefTransposeConvolution2dEndToEndInt16NchwTest)</td></tr>
<tr class="separator:a7a7217701a4ca670dc5cb24e059c03f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0762fb38d5ffc7ec79cb04f9e60e44a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ac0762fb38d5ffc7ec79cb04f9e60e44a">BOOST_AUTO_TEST_CASE</a> (RefTransposeConvolution2dEndToEndFloatNhwcTest)</td></tr>
<tr class="separator:ac0762fb38d5ffc7ec79cb04f9e60e44a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1dde423645a7c85a87763536f7c70af"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ad1dde423645a7c85a87763536f7c70af">BOOST_AUTO_TEST_CASE</a> (RefTransposeConvolution2dEndToEndUint8NhwcTest)</td></tr>
<tr class="separator:ad1dde423645a7c85a87763536f7c70af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a816bfdfbd2b09903483c141c54a2f467"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a816bfdfbd2b09903483c141c54a2f467">BOOST_AUTO_TEST_CASE</a> (RefTransposeConvolution2dEndToEndInt16NhwcTest)</td></tr>
<tr class="separator:a816bfdfbd2b09903483c141c54a2f467"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11227ccc009ce7b623e63dce8f067348"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a11227ccc009ce7b623e63dce8f067348">BOOST_AUTO_TEST_CASE</a> (RefResizeBilinearEndToEndFloatNchwTest)</td></tr>
<tr class="separator:a11227ccc009ce7b623e63dce8f067348"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa14e63bf4340ed08a90ee2b51cf2219"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#aaa14e63bf4340ed08a90ee2b51cf2219">BOOST_AUTO_TEST_CASE</a> (RefResizeBilinearEndToEndUint8NchwTest)</td></tr>
<tr class="separator:aaa14e63bf4340ed08a90ee2b51cf2219"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7786f697f871a6855d7ad4ed2a557009"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a7786f697f871a6855d7ad4ed2a557009">BOOST_AUTO_TEST_CASE</a> (RefResizeBilinearEndToEndInt16NchwTest)</td></tr>
<tr class="separator:a7786f697f871a6855d7ad4ed2a557009"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20da73ec01e52fee47424e37a861e6c4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a20da73ec01e52fee47424e37a861e6c4">BOOST_AUTO_TEST_CASE</a> (RefResizeBilinearEndToEndFloatNhwcTest)</td></tr>
<tr class="separator:a20da73ec01e52fee47424e37a861e6c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3b019cf07756bdc70e2f82713954e28"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ad3b019cf07756bdc70e2f82713954e28">BOOST_AUTO_TEST_CASE</a> (RefResizeBilinearEndToEndUint8NhwcTest)</td></tr>
<tr class="separator:ad3b019cf07756bdc70e2f82713954e28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba57d7a0dde8b9460219637ff85509a9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#aba57d7a0dde8b9460219637ff85509a9">BOOST_AUTO_TEST_CASE</a> (RefResizeBilinearEndToEndInt16NhwcTest)</td></tr>
<tr class="separator:aba57d7a0dde8b9460219637ff85509a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69cb32513a6889642cef81ae701f55e9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a69cb32513a6889642cef81ae701f55e9">BOOST_AUTO_TEST_CASE</a> (RefResizeNearestNeighborEndToEndFloatNchwTest)</td></tr>
<tr class="separator:a69cb32513a6889642cef81ae701f55e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0926006a74e888540b1319cdc07ee40"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ad0926006a74e888540b1319cdc07ee40">BOOST_AUTO_TEST_CASE</a> (RefResizeNearestNeighborEndToEndUint8NchwTest)</td></tr>
<tr class="separator:ad0926006a74e888540b1319cdc07ee40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae5029a36eaced664906af2415809f2d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#aae5029a36eaced664906af2415809f2d">BOOST_AUTO_TEST_CASE</a> (RefResizeNearestNeighborEndToEndInt16NchwTest)</td></tr>
<tr class="separator:aae5029a36eaced664906af2415809f2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8da7e1a768667e22c01bc0df0f13b861"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a8da7e1a768667e22c01bc0df0f13b861">BOOST_AUTO_TEST_CASE</a> (RefResizeNearestNeighborEndToEndFloatNhwcTest)</td></tr>
<tr class="separator:a8da7e1a768667e22c01bc0df0f13b861"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b1f658104de9557ad4d5941a0986f23"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a5b1f658104de9557ad4d5941a0986f23">BOOST_AUTO_TEST_CASE</a> (RefResizeNearestNeighborEndToEndUint8NhwcTest)</td></tr>
<tr class="separator:a5b1f658104de9557ad4d5941a0986f23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9496cb5cb8869f77029cff8f7eba77da"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a9496cb5cb8869f77029cff8f7eba77da">BOOST_AUTO_TEST_CASE</a> (RefResizeNearestNeighborEndToEndInt16NhwcTest)</td></tr>
<tr class="separator:a9496cb5cb8869f77029cff8f7eba77da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ca5c032322b07b3f65ae5dfec057536"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a8ca5c032322b07b3f65ae5dfec057536">BOOST_AUTO_TEST_CASE</a> (RefInstanceNormalizationNhwcEndToEndTest1)</td></tr>
<tr class="separator:a8ca5c032322b07b3f65ae5dfec057536"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dbcbb19c9b40731db824d1d9af7bcb1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a1dbcbb19c9b40731db824d1d9af7bcb1">BOOST_AUTO_TEST_CASE</a> (RefInstanceNormalizationNchwEndToEndTest1)</td></tr>
<tr class="separator:a1dbcbb19c9b40731db824d1d9af7bcb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab235089e60220601324e43c8151911ae"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ab235089e60220601324e43c8151911ae">BOOST_AUTO_TEST_CASE</a> (RefInstanceNormalizationNhwcEndToEndTest2)</td></tr>
<tr class="separator:ab235089e60220601324e43c8151911ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa25843e91bc4a69b2e6ce11194b1b4a6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#aa25843e91bc4a69b2e6ce11194b1b4a6">BOOST_AUTO_TEST_CASE</a> (RefInstanceNormalizationNchwEndToEndTest2)</td></tr>
<tr class="separator:aa25843e91bc4a69b2e6ce11194b1b4a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74b95c11545d2107d60b3b41f21ed98c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a74b95c11545d2107d60b3b41f21ed98c">BOOST_AUTO_TEST_CASE</a> (RefArgMaxSimpleTest)</td></tr>
<tr class="separator:a74b95c11545d2107d60b3b41f21ed98c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a890d1f63c8c5e2da3c30956b9f640bcf"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a890d1f63c8c5e2da3c30956b9f640bcf">BOOST_AUTO_TEST_CASE</a> (RefArgMaxSimpleUint8Test)</td></tr>
<tr class="separator:a890d1f63c8c5e2da3c30956b9f640bcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a128f2a74dbf3e3222a165d238be73a56"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a128f2a74dbf3e3222a165d238be73a56">BOOST_AUTO_TEST_CASE</a> (RefArgMinSimpleTest)</td></tr>
<tr class="separator:a128f2a74dbf3e3222a165d238be73a56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7856bdf65a17783ac5a15005d440056b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a7856bdf65a17783ac5a15005d440056b">BOOST_AUTO_TEST_CASE</a> (RefArgMinSimpleUint8Test)</td></tr>
<tr class="separator:a7856bdf65a17783ac5a15005d440056b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8774d0a402fc4f5c6bcfc2db7077430"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ac8774d0a402fc4f5c6bcfc2db7077430">BOOST_AUTO_TEST_CASE</a> (RefArgMaxAxis0Test)</td></tr>
<tr class="separator:ac8774d0a402fc4f5c6bcfc2db7077430"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bf7a4293ca44c420bbe00003cd9ae42"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a9bf7a4293ca44c420bbe00003cd9ae42">BOOST_AUTO_TEST_CASE</a> (RefArgMaxAxis0Uint8Test)</td></tr>
<tr class="separator:a9bf7a4293ca44c420bbe00003cd9ae42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1ea411dbb68d7f67873d4fde67622bb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#af1ea411dbb68d7f67873d4fde67622bb">BOOST_AUTO_TEST_CASE</a> (RefArgMinAxis0Test)</td></tr>
<tr class="separator:af1ea411dbb68d7f67873d4fde67622bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8614a76c6443612ab91b0a1fc40f28dd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a8614a76c6443612ab91b0a1fc40f28dd">BOOST_AUTO_TEST_CASE</a> (RefArgMinAxis0Uint8Test)</td></tr>
<tr class="separator:a8614a76c6443612ab91b0a1fc40f28dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28fd650c6c2cb71d12e499bda7f46e24"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a28fd650c6c2cb71d12e499bda7f46e24">BOOST_AUTO_TEST_CASE</a> (RefArgMaxAxis1Test)</td></tr>
<tr class="separator:a28fd650c6c2cb71d12e499bda7f46e24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4643532d13d1859ef897ed39a2f4114a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a4643532d13d1859ef897ed39a2f4114a">BOOST_AUTO_TEST_CASE</a> (RefArgMaxAxis1Uint8Test)</td></tr>
<tr class="separator:a4643532d13d1859ef897ed39a2f4114a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44eeba8990b39109f92bde90d69737ff"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a44eeba8990b39109f92bde90d69737ff">BOOST_AUTO_TEST_CASE</a> (RefArgMinAxis1Test)</td></tr>
<tr class="separator:a44eeba8990b39109f92bde90d69737ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae345064d1963d7b040e2a6e0b4d55603"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ae345064d1963d7b040e2a6e0b4d55603">BOOST_AUTO_TEST_CASE</a> (RefArgMinAxis1Uint8Test)</td></tr>
<tr class="separator:ae345064d1963d7b040e2a6e0b4d55603"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b232949a5af2ff1d1ec78a3761cf0a2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a5b232949a5af2ff1d1ec78a3761cf0a2">BOOST_AUTO_TEST_CASE</a> (RefArgMaxAxis2Test)</td></tr>
<tr class="separator:a5b232949a5af2ff1d1ec78a3761cf0a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73c069fa50d213d4801adb9ae3855b43"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a73c069fa50d213d4801adb9ae3855b43">BOOST_AUTO_TEST_CASE</a> (RefArgMaxAxis2Uint8Test)</td></tr>
<tr class="separator:a73c069fa50d213d4801adb9ae3855b43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8be62341cba28a38ac0b0a7247e2f389"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a8be62341cba28a38ac0b0a7247e2f389">BOOST_AUTO_TEST_CASE</a> (RefArgMinAxis2Test)</td></tr>
<tr class="separator:a8be62341cba28a38ac0b0a7247e2f389"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c7774d6c34d36651f867fac2e915c35"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a0c7774d6c34d36651f867fac2e915c35">BOOST_AUTO_TEST_CASE</a> (RefArgMinAxis2Uint8Test)</td></tr>
<tr class="separator:a0c7774d6c34d36651f867fac2e915c35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3692b635b95183ab2ee29a60b7276b79"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a3692b635b95183ab2ee29a60b7276b79">BOOST_AUTO_TEST_CASE</a> (RefArgMaxAxis3Test)</td></tr>
<tr class="separator:a3692b635b95183ab2ee29a60b7276b79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a2228c99a64294a73ff81d29750e432"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a4a2228c99a64294a73ff81d29750e432">BOOST_AUTO_TEST_CASE</a> (RefArgMaxAxis3Uint8Test)</td></tr>
<tr class="separator:a4a2228c99a64294a73ff81d29750e432"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dc08ccb11f05bf8ed0e8be48ba0ce6a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a6dc08ccb11f05bf8ed0e8be48ba0ce6a">BOOST_AUTO_TEST_CASE</a> (RefArgMinAxis3Test)</td></tr>
<tr class="separator:a6dc08ccb11f05bf8ed0e8be48ba0ce6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae70a7e422d253964ab00af3e33624030"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ae70a7e422d253964ab00af3e33624030">BOOST_AUTO_TEST_CASE</a> (RefArgMinAxis3Uint8Test)</td></tr>
<tr class="separator:ae70a7e422d253964ab00af3e33624030"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cf796a35b6607d2b4df877114cc7237"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a6cf796a35b6607d2b4df877114cc7237">BOOST_AUTO_TEST_CASE</a> (RefQLstmEndToEndTest)</td></tr>
<tr class="separator:a6cf796a35b6607d2b4df877114cc7237"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5ebc9b9e21c5ed38b2ca6bbe87e0d80"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#af5ebc9b9e21c5ed38b2ca6bbe87e0d80">BOOST_AUTO_TEST_CASE</a> (RefRankEndToEndTest)</td></tr>
<tr class="separator:af5ebc9b9e21c5ed38b2ca6bbe87e0d80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abecb64a3e3a053b150624146754cc2b3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#abecb64a3e3a053b150624146754cc2b3">BOOST_AUTO_TEST_CASE</a> (RefRankEndToEndTestFloat16)</td></tr>
<tr class="separator:abecb64a3e3a053b150624146754cc2b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af24c200e2ea073d403468ee00fa261ad"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#af24c200e2ea073d403468ee00fa261ad">BOOST_AUTO_TEST_CASE</a> (RefRankEndToEndTestInt32)</td></tr>
<tr class="separator:af24c200e2ea073d403468ee00fa261ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a291ef59b0f02c19ad84c1d49bfca7088"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a291ef59b0f02c19ad84c1d49bfca7088">BOOST_AUTO_TEST_CASE</a> (RefRankEndToEndTestQAsymmS8)</td></tr>
<tr class="separator:a291ef59b0f02c19ad84c1d49bfca7088"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9505aeb92a67c221d4364222e9a0495"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ad9505aeb92a67c221d4364222e9a0495">BOOST_AUTO_TEST_CASE</a> (RefRankEndToEndTestQSymmS16)</td></tr>
<tr class="separator:ad9505aeb92a67c221d4364222e9a0495"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a569244c0d330e9beb6cce57879d01575"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a569244c0d330e9beb6cce57879d01575">BOOST_AUTO_TEST_CASE</a> (RefRankEndToEndTestQSymmS8)</td></tr>
<tr class="separator:a569244c0d330e9beb6cce57879d01575"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7b4d7e29c75578bf87a961f4f592f37"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#aa7b4d7e29c75578bf87a961f4f592f37">BOOST_AUTO_TEST_CASE</a> (RefImportNonAlignedPointerTest)</td></tr>
<tr class="separator:aa7b4d7e29c75578bf87a961f4f592f37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e166cd4f3aea8f88378765974e4a2b3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a5e166cd4f3aea8f88378765974e4a2b3">BOOST_AUTO_TEST_CASE</a> (RefExportNonAlignedPointerTest)</td></tr>
<tr class="separator:a5e166cd4f3aea8f88378765974e4a2b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3dbdea5e19933779c373e68e368b7d0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ab3dbdea5e19933779c373e68e368b7d0">BOOST_AUTO_TEST_CASE</a> (RefImportAlignedPointerTest)</td></tr>
<tr class="separator:ab3dbdea5e19933779c373e68e368b7d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cb6bf820cbcf14dc77dbda00bc553da"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a4cb6bf820cbcf14dc77dbda00bc553da">BOOST_AUTO_TEST_CASE</a> (RefImportOnlyWorkload)</td></tr>
<tr class="separator:a4cb6bf820cbcf14dc77dbda00bc553da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd24ed499b36d27aa05702ec8e37c68b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#afd24ed499b36d27aa05702ec8e37c68b">BOOST_AUTO_TEST_CASE</a> (RefExportOnlyWorkload)</td></tr>
<tr class="separator:afd24ed499b36d27aa05702ec8e37c68b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11a7383985e0e73ce0d936dbc283bb3e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a11a7383985e0e73ce0d936dbc283bb3e">BOOST_AUTO_TEST_CASE</a> (RefImportAndExportWorkload)</td></tr>
<tr class="separator:a11a7383985e0e73ce0d936dbc283bb3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c8e7e8d6441953ffabeb861a774cea7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a8c8e7e8d6441953ffabeb861a774cea7">BOOST_AUTO_TEST_CASE</a> (RefExportOutputWithSeveralOutputSlotConnectionsTest)</td></tr>
<tr class="separator:a8c8e7e8d6441953ffabeb861a774cea7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e5aee711a7215072482614a929f34a8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#a4e5aee711a7215072482614a929f34a8">BOOST_AUTO_TEST_CASE</a> (RefStridedSliceInvalidSliceEndToEndTest)</td></tr>
<tr class="separator:a4e5aee711a7215072482614a929f34a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:ab59caffe2ee6be46c08766c055420f17"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a> = {<a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a>}</td></tr>
<tr class="separator:ab59caffe2ee6be46c08766c055420f17"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a5bc57c51ee78bc9d9996e2124277a9b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5bc57c51ee78bc9d9996e2124277a9b2">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[1/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefAbsEndToEndTestFloat32&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    std::vector&lt;float&gt; expectedOutput =</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        1.f, 1.f, 1.f, 1.f, 5.f, 5.f, 5.f, 5.f,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        3.f, 3.f, 3.f, 3.f, 4.f, 4.f, 4.f, 4.f</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    };</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    ElementwiseUnarySimpleEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                                             UnaryOperation::Abs,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                                             expectedOutput);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acaa2d9f72bfa417efbf0647069394f11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acaa2d9f72bfa417efbf0647069394f11">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[2/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefAbsEndToEndTestUint8&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00050">50</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// Note the expected output will be implicitly quantized by the below test function</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    std::vector&lt;float&gt; expectedOutput =</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        1.f, 1.f, 1.f, 1.f, 5.f, 5.f, 5.f, 5.f,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        3.f, 3.f, 3.f, 3.f, 4.f, 4.f, 4.f, 4.f</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    };</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    ElementwiseUnarySimpleEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                                                                     UnaryOperation::Abs,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                                                     expectedOutput);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6d8afa1729903714ea87f9cd0a1c7c7d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d8afa1729903714ea87f9cd0a1c7c7d">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[3/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefAbsEndToEndTestInt16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00064">64</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// Note the expected output will be implicitly quantized by the below test function</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    std::vector&lt;float&gt; expectedOutput =</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        1.f, 1.f, 1.f, 1.f, 5.f, 5.f, 5.f, 5.f,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        3.f, 3.f, 3.f, 3.f, 4.f, 4.f, 4.f, 4.f</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    };</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    ElementwiseUnarySimpleEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                                                     UnaryOperation::Abs,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                                                     expectedOutput);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5d2cb37725af540bc1808e0698c82c3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d2cb37725af540bc1808e0698c82c3f">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[4/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">ConstantUsage_Ref_Float32&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00079">79</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    BOOST_TEST(ConstantUsageFloat32Test(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a027914ebd3189e36c4dd63fd10c09c92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a027914ebd3189e36c4dd63fd10c09c92">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[5/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">ConstantUsage_Ref_Uint8&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    BOOST_TEST(ConstantUsageUint8Test(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a04f143f4f19a8bec8de5a0f615aa4379"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04f143f4f19a8bec8de5a0f615aa4379">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[6/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">Unsigned8&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00089">89</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00037">IRuntime::Create()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00510">INetwork::Create()</a>, <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01502">armnn::Optimize()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00480">TensorInfo::SetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00464">TensorInfo::SetQuantizationScale()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, and <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Success</a>.</p>
<div class="fragment"><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// Create runtime in which test will run</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(options));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// Builds up the structure of the network.</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> net(<a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input = net-&gt;AddInputLayer(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* softmax = net-&gt;AddSoftmaxLayer(<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a>(), <span class="stringliteral">&quot;softmax&quot;</span>);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output  = net-&gt;AddOutputLayer(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(softmax-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    softmax-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">// Sets the tensors in the network.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({1, 5}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    inputTensorInfo.SetQuantizationOffset(100);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    inputTensorInfo.SetQuantizationScale(10000.0f);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(inputTensorInfo);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputTensorInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({1, 5}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    outputTensorInfo.SetQuantizationOffset(0);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    outputTensorInfo.SetQuantizationScale(1.0f/255.0f);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    softmax-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(outputTensorInfo);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// optimize the network</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*net, <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// Loads it into the runtime.</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> netId;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a> = runtime-&gt;LoadNetwork(netId, std::move(optNet));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    BOOST_TEST(error == <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Status::Success</a>);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// Creates structures for input &amp; output.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    std::vector&lt;uint8_t&gt; inputData</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        1, 10, 3, 200, 5 <span class="comment">// Some inputs - one of which is sufficiently larger than the others to saturate softmax.</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    };</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    std::vector&lt;uint8_t&gt; outputData(5);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        {0, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 0), inputData.data())}</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    };</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        {0, <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(runtime-&gt;GetOutputTensorInfo(netId, 0), outputData.data())}</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    };</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// Does the inference.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// Checks the results.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    BOOST_TEST(outputData[0] == 0);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    BOOST_TEST(outputData[1] == 0);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    BOOST_TEST(outputData[2] == 0);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    BOOST_TEST(outputData[3] == 255); <span class="comment">// softmax has been saturated.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    BOOST_TEST(outputData[4] == 0);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00037">Runtime.cpp:37</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00062">INetwork.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00026">IRuntime.hpp:26</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00340">Tensor.hpp:340</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__software__tools_8dox_source.xhtml#l00006">01_00_software_tools.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::BoostLogSeverityMapping::error</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00306">Tensor.hpp:306</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01502">Network.cpp:1502</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00314">Tensor.hpp:314</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00341">Tensor.hpp:341</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00174">INetwork.hpp:174</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00043">IRuntime.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00173">INetwork.hpp:173</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00510">Network.cpp:510</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a></div><div class="ttdoc">A SoftmaxDescriptor for the SoftmaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00139">Descriptors.hpp:139</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a208bf4332ec9e631422d1aa0117d6d7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a208bf4332ec9e631422d1aa0117d6d7c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[7/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TrivialAdd&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00153">153</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00037">IRuntime::Create()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00510">INetwork::Create()</a>, <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01502">armnn::Optimize()</a>, and <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// This test was designed to match &quot;AddTwo&quot; in android nn/runtime/test/TestTrivialModel.cpp.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// Create runtime in which test will run</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(options));</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">// Builds up the structure of the network.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> net(<a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>());</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input1 = net-&gt;AddInputLayer(0);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input2 = net-&gt;AddInputLayer(1);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* add    = net-&gt;AddAdditionLayer();</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output = net-&gt;AddOutputLayer(0);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    input2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="comment">// Sets the tensors in the network.</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tensorInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({3, 4}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(tensorInfo);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    input2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(tensorInfo);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(tensorInfo);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// optimize the network</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*net, <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">// Loads it into the runtime.</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> netId;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    runtime-&gt;LoadNetwork(netId, std::move(optNet));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// Creates structures for input &amp; output - matching android nn test.</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    std::vector&lt;float&gt; input1Data</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        1.f, 2.f, 3.f, 4.f, 5.f, 6.f, 7.f, 8.f, 9.f, 10.f, 11.f, 12.f</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    };</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    std::vector&lt;float&gt; input2Data</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    {</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        100.f, 200.f, 300.f, 400.f, 500.f, 600.f, 700.f, 800.f, 900.f, 1000.f, 1100.f, 1200.f</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    };</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    std::vector&lt;float&gt; outputData(12);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensors</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        {0,<a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 0), input1Data.data())},</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        {1,<a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 0), input2Data.data())}</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    };</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        {0,<a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(runtime-&gt;GetOutputTensorInfo(netId, 0), outputData.data())}</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    };</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="comment">// Does the inference.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="comment">// Checks the results</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    BOOST_TEST(outputData[0] == 101);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    BOOST_TEST(outputData[1] == 202);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    BOOST_TEST(outputData[2] == 303);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    BOOST_TEST(outputData[3] == 404);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    BOOST_TEST(outputData[4] == 505);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    BOOST_TEST(outputData[5] == 606);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    BOOST_TEST(outputData[6] == 707);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    BOOST_TEST(outputData[7] == 808);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    BOOST_TEST(outputData[8] == 909);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    BOOST_TEST(outputData[9] == 1010);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    BOOST_TEST(outputData[10] == 1111);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    BOOST_TEST(outputData[11] == 1212);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00037">Runtime.cpp:37</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00062">INetwork.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00026">IRuntime.hpp:26</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00340">Tensor.hpp:340</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__software__tools_8dox_source.xhtml#l00006">01_00_software_tools.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00306">Tensor.hpp:306</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01502">Network.cpp:1502</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00314">Tensor.hpp:314</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00341">Tensor.hpp:341</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00174">INetwork.hpp:174</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00043">IRuntime.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00173">INetwork.hpp:173</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00510">Network.cpp:510</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1035207a05327abc5f1e58b9654bbac5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1035207a05327abc5f1e58b9654bbac5">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[8/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">MultipleOutputs&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00227">227</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::BoundedReLu</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00037">IRuntime::Create()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00510">INetwork::Create()</a>, <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00050">ActivationDescriptor::m_A</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00052">ActivationDescriptor::m_B</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00048">ActivationDescriptor::m_Function</a>, <a class="el" href="_network_8cpp_source.xhtml#l01502">armnn::Optimize()</a>, and <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;{</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// Create runtime in which test will run</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a>  runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(options));</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="comment">// Builds up the structure of the network.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net(<a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>());</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input = net-&gt;AddInputLayer(0);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// ReLu1</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> activation1Descriptor;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    activation1Descriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">ActivationFunction::BoundedReLu</a>;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    activation1Descriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a> = 1.f;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    activation1Descriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">m_B</a> = -1.f;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* activation1 = net-&gt;AddActivationLayer(activation1Descriptor);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// ReLu6</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> activation2Descriptor;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    activation2Descriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">ActivationFunction::BoundedReLu</a>;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    activation2Descriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a> = 6.0f;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* activation2 = net-&gt;AddActivationLayer(activation2Descriptor);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// BoundedReLu(min=2, max=5)</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> activation3Descriptor;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    activation3Descriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">ActivationFunction::BoundedReLu</a>;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    activation3Descriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a> = 5.0f;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    activation3Descriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">m_B</a> = 2.0f;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* activation3 = net-&gt;AddActivationLayer(activation3Descriptor);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output1 = net-&gt;AddOutputLayer(0);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output2 = net-&gt;AddOutputLayer(1);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output3 = net-&gt;AddOutputLayer(2);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(activation1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(activation2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(activation3-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    activation1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    activation2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    activation3-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output3-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="comment">// Sets the tensors in the network.</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tensorInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({ 10 }), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(tensorInfo);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    activation1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(tensorInfo);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    activation2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(tensorInfo);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    activation3-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(tensorInfo);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="comment">// optimize the network</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*net, <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="comment">// Loads it into the runtime.</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> netId;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    runtime-&gt;LoadNetwork(netId, std::move(optNet));</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="comment">// Creates structures for input &amp; output.</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; inputData{ 3.f, 5.f, 2.f, 3.f, 7.f, 0.f, -2.f, -1.f, 3.f, 3.f };</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    std::vector&lt;float&gt; output1Data(inputData.size());</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    std::vector&lt;float&gt; output2Data(inputData.size());</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    std::vector&lt;float&gt; output3Data(inputData.size());</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensors</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    {</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        {0,<a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 0), inputData.data())}</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    };</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        {0,<a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(runtime-&gt;GetOutputTensorInfo(netId, 0), output1Data.data())},</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        {1,<a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(runtime-&gt;GetOutputTensorInfo(netId, 1), output2Data.data())},</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        {2,<a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(runtime-&gt;GetOutputTensorInfo(netId, 2), output3Data.data())}</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    };</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">// Does the inference.</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="comment">// Checks the results.</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    BOOST_TEST(output1Data == std::vector&lt;float&gt;({ 1.f, 1.f, 1.f, 1.f, 1.f, 0.f, -1.f, -1.f, 1.f, 1.f })); <span class="comment">// ReLu1</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    BOOST_TEST(output2Data == std::vector&lt;float&gt;({ 3.f, 5.f, 2.f, 3.f, 6.f, 0.f, 0.f, 0.f, 3.f, 3.f })); <span class="comment">// ReLu6</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    BOOST_TEST(output3Data == std::vector&lt;float&gt;({ 3.f, 5.f, 2.f, 3.f, 5.f, 2.f, 2.f, 2.f, 3.f, 3.f })); <span class="comment">// [2, 5]</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00037">Runtime.cpp:37</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00062">INetwork.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00026">IRuntime.hpp:26</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00340">Tensor.hpp:340</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__software__tools_8dox_source.xhtml#l00006">01_00_software_tools.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00306">Tensor.hpp:306</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01502">Network.cpp:1502</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00314">Tensor.hpp:314</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00341">Tensor.hpp:341</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00174">INetwork.hpp:174</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00025">Descriptors.hpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a></div><div class="ttdoc">min(a, max(b, input)) ReLu1 &amp; ReLu6. </div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00043">IRuntime.hpp:43</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a017b2990003a014234f13e999dc7c689"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">armnn::ActivationDescriptor::m_A</a></div><div class="ttdeci">float m_A</div><div class="ttdoc">Alpha upper bound value used by the activation functions. (BoundedReLu, Linear, TanH, Elu). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00050">Descriptors.hpp:50</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00173">INetwork.hpp:173</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00510">Network.cpp:510</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a28c4c9cb15f6be3499abbc46b356060b"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">armnn::ActivationDescriptor::m_B</a></div><div class="ttdeci">float m_B</div><div class="ttdoc">Beta lower bound value used by the activation functions. (BoundedReLu, Linear, TanH). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00052">Descriptors.hpp:52</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu, LeakyReLu, Abs, Sqrt, Square, Elu). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00048">Descriptors.hpp:48</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7200afa8e36a896f0a1fb9fb65f6bfa6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7200afa8e36a896f0a1fb9fb65f6bfa6">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[9/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TrivialMin&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00313">313</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00037">IRuntime::Create()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00510">INetwork::Create()</a>, <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01502">armnn::Optimize()</a>, and <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="comment">// Create runtime in which test will run</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(options));</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="comment">// Builds up the structure of the network.</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> net(<a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>());</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input1 = net-&gt;AddInputLayer(0);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input2 = net-&gt;AddInputLayer(1);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* min    = net-&gt;AddMinimumLayer();</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output = net-&gt;AddOutputLayer(0);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(min-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    input2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(min-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    min-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="comment">// Sets the tensors in the network.</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tensorInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({1, 1, 1, 4}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(tensorInfo);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    input2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(tensorInfo);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    min-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(tensorInfo);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="comment">// optimize the network</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*net, <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="comment">// Loads it into the runtime.</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> netId;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    runtime-&gt;LoadNetwork(netId, std::move(optNet));</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="comment">// Creates structures for input &amp; output - matching android nn test.</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    std::vector&lt;float&gt; input1Data</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        {</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            1.0f, 2.0f, 3.0f, 4.0f</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        };</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    std::vector&lt;float&gt; input2Data</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        {</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            2.0f, 1.0f, 5.0f, 2.0f</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        };</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    std::vector&lt;float&gt; outputData(4);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensors</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        {</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            {0,<a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 0), input1Data.data())},</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            {1,<a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 0), input2Data.data())}</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        };</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            {0,<a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(runtime-&gt;GetOutputTensorInfo(netId, 0), outputData.data())}</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        };</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="comment">// Does the inference.</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="comment">// Checks the results</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    BOOST_TEST(outputData[0] == 1);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    BOOST_TEST(outputData[1] == 1);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    BOOST_TEST(outputData[2] == 3);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    BOOST_TEST(outputData[3] == 2);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00037">Runtime.cpp:37</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00062">INetwork.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00026">IRuntime.hpp:26</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00340">Tensor.hpp:340</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__software__tools_8dox_source.xhtml#l00006">01_00_software_tools.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00306">Tensor.hpp:306</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01502">Network.cpp:1502</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00314">Tensor.hpp:314</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00341">Tensor.hpp:341</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00174">INetwork.hpp:174</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00043">IRuntime.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00173">INetwork.hpp:173</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00510">Network.cpp:510</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a029a0743591fc9f1a99b859b9bffd41a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a029a0743591fc9f1a99b859b9bffd41a">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[10/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefEqualSimpleEndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00377">377</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">armnn::Equal</a>.</p>
<div class="fragment"><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;{</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint8_t&gt; expectedOutput({ 1, 1, 1, 1,  0, 0, 0, 0,</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                                0, 0, 0, 0,  1, 1, 1, 1 });</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    ComparisonSimpleEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                                                       ComparisonOperation::Equal,</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                                                       expectedOutput);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9bf1401d5ae22c734b9e3b40d6487410"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9bf1401d5ae22c734b9e3b40d6487410">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[11/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefGreaterSimpleEndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00387">387</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::Greater</a>.</p>
<div class="fragment"><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;{</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint8_t&gt; expectedOutput({ 0, 0, 0, 0,  1, 1, 1, 1,</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                                0, 0, 0, 0,  0, 0, 0, 0 });</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    ComparisonSimpleEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                                       ComparisonOperation::Greater,</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                                       expectedOutput);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afa86090aa5c8406486b200bf4e24ba14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa86090aa5c8406486b200bf4e24ba14">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[12/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefEqualSimpleEndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00397">397</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">armnn::Equal</a>.</p>
<div class="fragment"><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;{</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint8_t&gt; expectedOutput({ 1, 1, 1, 1,  0, 0, 0, 0,</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                                0, 0, 0, 0,  1, 1, 1, 1 });</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    ComparisonSimpleEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                                               ComparisonOperation::Equal,</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                                               expectedOutput);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a30c48c204bee2f1703229435010f8efc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30c48c204bee2f1703229435010f8efc">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[13/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefGreaterSimpleEndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00407">407</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::Greater</a>.</p>
<div class="fragment"><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint8_t&gt; expectedOutput({ 0, 0, 0, 0,  1, 1, 1, 1,</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                                                0, 0, 0, 0,  0, 0, 0, 0 });</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    ComparisonSimpleEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                                               ComparisonOperation::Greater,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                                               expectedOutput);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0b7d019407ea942767edd1de8abe7189"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b7d019407ea942767edd1de8abe7189">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[14/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefEqualBroadcastEndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00417">417</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">armnn::Equal</a>.</p>
<div class="fragment"><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;{</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint8_t&gt; expectedOutput({ 1, 0, 1, 1, 0, 0,</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                                0, 0, 0, 0, 0, 0 });</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    ComparisonBroadcastEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                                          ComparisonOperation::Equal,</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                                                          expectedOutput);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a24aee2442732c07107a9bc6c3300ccc6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24aee2442732c07107a9bc6c3300ccc6">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[15/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefGreaterBroadcastEndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00427">427</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::Greater</a>.</p>
<div class="fragment"><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;{</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint8_t&gt; expectedOutput({ 0, 1, 0, 0, 0, 1,</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                                1, 1, 1, 1, 1, 1 });</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    ComparisonBroadcastEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                                          ComparisonOperation::Greater,</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                                                          expectedOutput);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3f4ef90af3dd93931401ddf4a5bda88a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f4ef90af3dd93931401ddf4a5bda88a">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[16/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefEqualBroadcastEndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00437">437</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">armnn::Equal</a>.</p>
<div class="fragment"><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;{</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint8_t &gt; expectedOutput({ 1, 0, 1, 1, 0, 0,</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                                                 0, 0, 0, 0, 0, 0 });</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    ComparisonBroadcastEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                                                                  ComparisonOperation::Equal,</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                                                  expectedOutput);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0f4e42ececbb767bfc45599472c35954"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f4e42ececbb767bfc45599472c35954">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[17/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefGreaterBroadcastEndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00447">447</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::Greater</a>.</p>
<div class="fragment"><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;{</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint8_t&gt; expectedOutput({ 0, 1, 0, 0, 0, 1,</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                                1, 1, 1, 1, 1, 1 });</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    ComparisonBroadcastEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                                                                  ComparisonOperation::Greater,</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                                                  expectedOutput);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6c128158046641407787e6d61bb23ac8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c128158046641407787e6d61bb23ac8">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[18/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefBatchToSpaceNdEndToEndFloat32NHWCTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00457">457</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;{</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    BatchToSpaceNdEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a74acdc7f85408ebea3a3732aea1a2337"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74acdc7f85408ebea3a3732aea1a2337">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[19/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefBatchToSpaceNdEndToEndUint8NHWCTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00462">462</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;{</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    BatchToSpaceNdEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac03d8e759d117535c53b27afc93299d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac03d8e759d117535c53b27afc93299d6">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[20/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefBatchToSpaceNdEndToEndQSymm16NHWCTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00467">467</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;{</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    BatchToSpaceNdEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0b10559fab8ae45031a42ec972863178"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b10559fab8ae45031a42ec972863178">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[21/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefBatchToSpaceNdEndToEndFloat32NCHWTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00472">472</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;{</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    BatchToSpaceNdEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad90271f3275cbd6c2a367654124e1e4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad90271f3275cbd6c2a367654124e1e4c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[22/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefBatchToSpaceNdEndToEndUint8NCHWTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00477">477</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;{</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    BatchToSpaceNdEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aac48d73d45754667724f4a3c4cec6614"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac48d73d45754667724f4a3c4cec6614">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[23/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefBatchToSpaceNdEndToEndQSymm16NCHWTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00482">482</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;{</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    BatchToSpaceNdEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a909144e6fd1a36d8b62ea45f64fd9ed2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a909144e6fd1a36d8b62ea45f64fd9ed2">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[24/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefBatchToSpaceNdEndToEndComplexFloat32NHWCTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00487">487</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;{</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    BatchToSpaceNdComplexEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4c1270c756df8aa9ff12131fa7227891"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c1270c756df8aa9ff12131fa7227891">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[25/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefBatchToSpaceNdEndToEndComplexUint8NHWCTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00492">492</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;{</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    BatchToSpaceNdComplexEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3bff92f8c7975a3f3e1c14a65cd0ac40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3bff92f8c7975a3f3e1c14a65cd0ac40">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[26/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefBatchToSpaceNdEndToEndComplexQSymm16NHWCTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00497">497</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;{</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    BatchToSpaceNdComplexEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1bc952f469862338bfb3d92c9225b123"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bc952f469862338bfb3d92c9225b123">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[27/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefBatchToSpaceNdEndToEndComplexFloat32NCHWTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00502">502</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;{</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    BatchToSpaceNdComplexEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acee0e1d468d7a8f107de69239f7284ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acee0e1d468d7a8f107de69239f7284ad">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[28/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefBatchToSpaceNdEndToEndComplexUint8NCHWTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00507">507</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;{</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    BatchToSpaceNdComplexEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5ec4b692476e7d68a3f6fed2f527d8f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ec4b692476e7d68a3f6fed2f527d8f9">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[29/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefBatchToSpaceNdEndToEndComplexQSymm16NCHWTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00512">512</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;{</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    BatchToSpaceNdComplexEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae7ac663620865b07a45c57adb628dcf0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7ac663620865b07a45c57adb628dcf0">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[30/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefConcatEndToEndDim0Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00517">517</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;{</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    ConcatDim0EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7d3d3379c3bd263b4f60981e050a483c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d3d3379c3bd263b4f60981e050a483c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[31/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefConcatEndToEndDim0Uint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00522">522</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;{</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    ConcatDim0EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9cc53fc85745d58ff14f192c91753761"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9cc53fc85745d58ff14f192c91753761">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[32/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefConcatEndToEndDim1Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00527">527</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;{</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    ConcatDim1EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aeed4bb49ba27ff01066d5e3b16afa56e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeed4bb49ba27ff01066d5e3b16afa56e">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[33/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefConcatEndToEndDim1Uint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00532">532</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;{</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    ConcatDim1EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af49df38f46b900b8f95c5f12cc621dbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af49df38f46b900b8f95c5f12cc621dbf">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[34/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefConcatEndToEndDim2Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00537">537</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;{</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    ConcatDim2EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae18dcb96f3b85c57497d1957e4c20c3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae18dcb96f3b85c57497d1957e4c20c3f">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[35/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefConcatEndToEndDim2Uint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00542">542</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;{</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    ConcatDim2EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab5f83a902019b718f7bcf508a3d5d6bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5f83a902019b718f7bcf508a3d5d6bc">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[36/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefConcatEndToEndDim3Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00547">547</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;{</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    ConcatDim3EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a817e1b9a97bc6de7259a07789a42ffb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a817e1b9a97bc6de7259a07789a42ffb7">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[37/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefConcatEndToEndDim3Uint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00552">552</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;{</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    ConcatDim3EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1a33eadf125bee8822785a2ab8af1a2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a33eadf125bee8822785a2ab8af1a2f">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[38/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefEluEndToEndTestFloat32&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00557">557</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;{</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    EluEndToEndTest&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adf3750dee36a67a025fa912a823c319a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf3750dee36a67a025fa912a823c319a">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[39/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefEluEndToEndTestFloat16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00562">562</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;{</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    EluEndToEndTest&lt;armnn::DataType::Float16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a723b0aa6e015dc7ed0c06ecc43b819fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a723b0aa6e015dc7ed0c06ecc43b819fd">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[40/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefEluEndToEndTestBFloat16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00567">567</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;{</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    EluEndToEndTest&lt;armnn::DataType::BFloat16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5969e118109c18276e34fcc31669848d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5969e118109c18276e34fcc31669848d">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[41/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefEluEndToEndTestQAsymmS8&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00572">572</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;{</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    EluEndToEndTest&lt;armnn::DataType::QAsymmS8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3e4fe9e6f8d260ff4a11cbc48a6f7623"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e4fe9e6f8d260ff4a11cbc48a6f7623">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[42/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefEluEndToEndTestQAsymmU8&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00577">577</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;{</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    EluEndToEndTest&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5159703f1f05f904f59f3ade6d34dd76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5159703f1f05f904f59f3ade6d34dd76">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[43/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefEluEndToEndTestQSymmS16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00582">582</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;{</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    EluEndToEndTest&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5907ceefa83504a5ef45d481eda5b74d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5907ceefa83504a5ef45d481eda5b74d">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[44/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefFillEndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00587">587</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;{</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    FillEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acf95ac60128d5ef796ca10235ec4202c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf95ac60128d5ef796ca10235ec4202c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[45/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefFillEndToEndTestFloat16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00592">592</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;{</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    FillEndToEnd&lt;armnn::DataType::Float16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a49a7836c2393e40f7f1ce0e5de8205fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49a7836c2393e40f7f1ce0e5de8205fd">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[46/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefFillEndToEndTestInt32&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00597">597</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;{</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    FillEndToEnd&lt;armnn::DataType::Signed32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afab2cbb78f05fd2d93cff1985536fc10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afab2cbb78f05fd2d93cff1985536fc10">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[47/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefGatherFloatTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00602">602</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;{</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    GatherEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abe1ec29ebc9f64ecdc3fc45e4f388af9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe1ec29ebc9f64ecdc3fc45e4f388af9">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[48/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefGatherUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00607">607</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;{</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    GatherEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab2a65c8946fa34ec01f3b5b5d9a54461"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2a65c8946fa34ec01f3b5b5d9a54461">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[49/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefGatherInt16Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00612">612</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;{</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    GatherEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa3ea9559114191d3ae065687a0519915"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3ea9559114191d3ae065687a0519915">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[50/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefGatherMultiDimFloatTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00617">617</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;{</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    GatherMultiDimEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7f6a1c790769e5baf641c2fcf22e24cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f6a1c790769e5baf641c2fcf22e24cf">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[51/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefGatherMultiDimUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00622">622</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;{</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    GatherMultiDimEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8738af8276670cd7ecedb4e1f89cfdbb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8738af8276670cd7ecedb4e1f89cfdbb">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[52/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefGatherMultiDimInt16Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00627">627</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;{</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    GatherMultiDimEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a27a746f7bc22538b810be0d5e945b26a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27a746f7bc22538b810be0d5e945b26a">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[53/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">DephtToSpaceEndToEndNchwFloat32&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00633">633</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;{</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7cf4601d23d9558a0c8b9a5a330ae854"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cf4601d23d9558a0c8b9a5a330ae854">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[54/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">DephtToSpaceEndToEndNchwFloat16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00638">638</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;{</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::Float16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aca41e6b9e1bda61b09b635c5857aee91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca41e6b9e1bda61b09b635c5857aee91">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[55/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">DephtToSpaceEndToEndNchwUint8&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00643">643</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;{</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a66bf08ef789c18b8a63d0fceaefbeea1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66bf08ef789c18b8a63d0fceaefbeea1">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[56/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">DephtToSpaceEndToEndNchwInt16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00648">648</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;{</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a138933084e2ddb38faaa03ea6c435365"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a138933084e2ddb38faaa03ea6c435365">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[57/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">DephtToSpaceEndToEndNhwcFloat32&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00653">653</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;{</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae15bf71385d1355cc0d85af4d61a008e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae15bf71385d1355cc0d85af4d61a008e">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[58/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">DephtToSpaceEndToEndNhwcFloat16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00658">658</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;{</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::Float16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a015b7b281e1718199b6ad08352840823"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a015b7b281e1718199b6ad08352840823">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[59/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">DephtToSpaceEndToEndNhwcUint8&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00663">663</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;{</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a756295623f8ac16a2beb184a3030e3aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a756295623f8ac16a2beb184a3030e3aa">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[60/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">DephtToSpaceEndToEndNhwcInt16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00668">668</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;{</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3cd60c9b4ecad211eecbf7804799ae95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3cd60c9b4ecad211eecbf7804799ae95">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[61/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">DequantizeEndToEndSimpleTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00674">674</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;{</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    DequantizeEndToEndSimple&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad3804af7f4121ef26a388c1c9f81e06b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3804af7f4121ef26a388c1c9f81e06b">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[62/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">DequantizeEndToEndOffsetTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00679">679</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;{</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    DequantizeEndToEndOffset&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2a0134f563666ab4a3e18c3f0b8f77b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a0134f563666ab4a3e18c3f0b8f77b1">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[63/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">DequantizeEndToEndSimpleInt16Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00684">684</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;{</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    DequantizeEndToEndSimple&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afdce0c49644d4d87ac13d29a1faa8cc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afdce0c49644d4d87ac13d29a1faa8cc9">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[64/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">DequantizeEndToEndOffsetInt16Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00689">689</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;{</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    DequantizeEndToEndOffset&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad8ddeab6c1d756ff1b12bd9deb4c879c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8ddeab6c1d756ff1b12bd9deb4c879c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[65/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefDetectionPostProcessRegularNmsTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00694">694</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings()</a>, <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores()</a>.</p>
<div class="fragment"><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;{</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>({</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        0.0f, -1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    });</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>({</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        0.0f, 0.9f, 0.8f,</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        0.0f, 0.75f, 0.72f,</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        0.0f, 0.6f, 0.5f,</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        0.0f, 0.93f, 0.95f,</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        0.0f, 0.5f, 0.4f,</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        0.0f, 0.3f, 0.2f</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    });</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>({</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        0.5f, 100.5f, 1.0f, 1.0f</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    });</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    DetectionPostProcessRegularNmsEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>);</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ada422a73ac4e68bcb1b1b1f0b44028d9"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a></div><div class="ttdeci">std::vector&lt; float &gt; boxEncodings({ 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f })</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a0348e6bb67ace72535bd105219bb6237"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a></div><div class="ttdeci">std::vector&lt; float &gt; scores({ 0.0f, 0.9f, 0.8f, 0.0f, 0.75f, 0.72f, 0.0f, 0.6f, 0.5f, 0.0f, 0.93f, 0.95f, 0.0f, 0.5f, 0.4f, 0.0f, 0.3f, 0.2f })</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ac0981848e4ae57729f14f72bd4caa9f8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a></div><div class="ttdeci">std::vector&lt; float &gt; anchors({ 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 100.5f, 1.0f, 1.0f })</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a05c90606a76cb31af15b5e7c1fd93abe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05c90606a76cb31af15b5e7c1fd93abe">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[66/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefDetectionPostProcessRegularNmsUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00731">731</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings()</a>, <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores()</a>, <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00723">QuantizeData()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00480">TensorInfo::SetQuantizationOffset()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00464">TensorInfo::SetQuantizationScale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;{</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> boxEncodingsInfo({ 1, 6, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>({ 1, 6, 3 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>({ 6, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    boxEncodingsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(1.0f);</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    boxEncodingsInfo.SetQuantizationOffset(1);</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.01f);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(0);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.5f);</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(0);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>({</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;        0.0f, -1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    });</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>({</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;        0.0f, 0.9f, 0.8f,</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        0.0f, 0.75f, 0.72f,</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        0.0f, 0.6f, 0.5f,</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        0.0f, 0.93f, 0.95f,</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;        0.0f, 0.5f, 0.4f,</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        0.0f, 0.3f, 0.2f</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    });</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>({</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        0.5f, 100.5f, 1.0f, 1.0f</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    });</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>.size(), 0);</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>.size(), 0);</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>.size(), 0);</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>.data(), boxEncodingsInfo);</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>);</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>);</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    DetectionPostProcessRegularNmsEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a>,</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                                                                             <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a>,</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                                                                             1.0f, 1, 0.01f, 0, 0.5f, 0);</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a358cb7cd3c0647b25be049fd734b8c22"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a></div><div class="ttdeci">armnn::TensorInfo anchorsInfo({ 6, 4 }, armnn::DataType::Float32)</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ada422a73ac4e68bcb1b1b1f0b44028d9"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a></div><div class="ttdeci">std::vector&lt; float &gt; boxEncodings({ 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f })</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a99e26266538c44c9eb1d28f5095b79d8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; qBoxEncodings(boxEncodings.size(), 0)</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00464">Tensor.cpp:464</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a9d5b9e392c2744826c8bb8df575975f1"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; qAnchors(anchors.size(), 0)</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a0348e6bb67ace72535bd105219bb6237"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a></div><div class="ttdeci">std::vector&lt; float &gt; scores({ 0.0f, 0.9f, 0.8f, 0.0f, 0.75f, 0.72f, 0.0f, 0.6f, 0.5f, 0.0f, 0.93f, 0.95f, 0.0f, 0.5f, 0.4f, 0.0f, 0.3f, 0.2f })</div></div>
<div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_a469c9be3a505d4ef240b1ae2478c5256"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a></div><div class="ttdeci">void QuantizeData(uint8_t *quant, const float *dequant, const TensorInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00723">RefEndToEndTests.cpp:723</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ad16c7915847aa89511b528d543e66fb2"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; qScores(scores.size(), 0)</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a64c1dd1b6dd60be9f4a16db9c8f427a5"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a></div><div class="ttdeci">armnn::TensorInfo scoresInfo({ 1, 6, 3 }, armnn::DataType::Float32)</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00480">Tensor.cpp:480</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ac0981848e4ae57729f14f72bd4caa9f8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a></div><div class="ttdeci">std::vector&lt; float &gt; anchors({ 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 100.5f, 1.0f, 1.0f })</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae51581ab79ac5c09af9019c0b9aa135f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae51581ab79ac5c09af9019c0b9aa135f">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[67/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefDetectionPostProcessFastNmsTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00780">780</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings()</a>, <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores()</a>.</p>
<div class="fragment"><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;{</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>({</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        0.0f, -1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    });</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>({</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        0.0f, 0.9f, 0.8f,</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        0.0f, 0.75f, 0.72f,</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        0.0f, 0.6f, 0.5f,</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        0.0f, 0.93f, 0.95f,</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        0.0f, 0.5f, 0.4f,</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        0.0f, 0.3f, 0.2f</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    });</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>({</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        0.5f, 100.5f, 1.0f, 1.0f</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    });</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    DetectionPostProcessFastNmsEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>);</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ada422a73ac4e68bcb1b1b1f0b44028d9"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a></div><div class="ttdeci">std::vector&lt; float &gt; boxEncodings({ 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f })</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a0348e6bb67ace72535bd105219bb6237"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a></div><div class="ttdeci">std::vector&lt; float &gt; scores({ 0.0f, 0.9f, 0.8f, 0.0f, 0.75f, 0.72f, 0.0f, 0.6f, 0.5f, 0.0f, 0.93f, 0.95f, 0.0f, 0.5f, 0.4f, 0.0f, 0.3f, 0.2f })</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ac0981848e4ae57729f14f72bd4caa9f8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a></div><div class="ttdeci">std::vector&lt; float &gt; anchors({ 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 100.5f, 1.0f, 1.0f })</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6ac78dd79f04e09d2a0da373b1a5c1be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ac78dd79f04e09d2a0da373b1a5c1be">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[68/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefDetectionPostProcessFastNmsUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00809">809</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings()</a>, <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores()</a>, <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00723">QuantizeData()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00480">TensorInfo::SetQuantizationOffset()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00464">TensorInfo::SetQuantizationScale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;{</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> boxEncodingsInfo({ 1, 6, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>({ 1, 6, 3 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>({ 6, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    boxEncodingsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(1.0f);</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    boxEncodingsInfo.SetQuantizationOffset(1);</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.01f);</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(0);</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.5f);</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(0);</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>({</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        0.0f, -1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    });</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>({</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        0.0f, 0.9f, 0.8f,</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        0.0f, 0.75f, 0.72f,</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        0.0f, 0.6f, 0.5f,</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        0.0f, 0.93f, 0.95f,</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;        0.0f, 0.5f, 0.4f,</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;        0.0f, 0.3f, 0.2f</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    });</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>({</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;        0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;        0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;        0.5f, 100.5f, 1.0f, 1.0f</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    });</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>.size(), 0);</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>.size(), 0);</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>.size(), 0);</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>.data(), boxEncodingsInfo);</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>);</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>);</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    DetectionPostProcessFastNmsEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a>,</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                                                                          <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a>,</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                                                                          1.0f, 1, 0.01f, 0, 0.5f, 0);</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a358cb7cd3c0647b25be049fd734b8c22"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a></div><div class="ttdeci">armnn::TensorInfo anchorsInfo({ 6, 4 }, armnn::DataType::Float32)</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ada422a73ac4e68bcb1b1b1f0b44028d9"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a></div><div class="ttdeci">std::vector&lt; float &gt; boxEncodings({ 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f })</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a99e26266538c44c9eb1d28f5095b79d8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; qBoxEncodings(boxEncodings.size(), 0)</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00464">Tensor.cpp:464</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a9d5b9e392c2744826c8bb8df575975f1"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; qAnchors(anchors.size(), 0)</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a0348e6bb67ace72535bd105219bb6237"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a></div><div class="ttdeci">std::vector&lt; float &gt; scores({ 0.0f, 0.9f, 0.8f, 0.0f, 0.75f, 0.72f, 0.0f, 0.6f, 0.5f, 0.0f, 0.93f, 0.95f, 0.0f, 0.5f, 0.4f, 0.0f, 0.3f, 0.2f })</div></div>
<div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_a469c9be3a505d4ef240b1ae2478c5256"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a></div><div class="ttdeci">void QuantizeData(uint8_t *quant, const float *dequant, const TensorInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00723">RefEndToEndTests.cpp:723</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ad16c7915847aa89511b528d543e66fb2"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; qScores(scores.size(), 0)</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a64c1dd1b6dd60be9f4a16db9c8f427a5"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a></div><div class="ttdeci">armnn::TensorInfo scoresInfo({ 1, 6, 3 }, armnn::DataType::Float32)</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00480">Tensor.cpp:480</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ac0981848e4ae57729f14f72bd4caa9f8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a></div><div class="ttdeci">std::vector&lt; float &gt; anchors({ 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 100.5f, 1.0f, 1.0f })</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a730d4e000e155332026c9303a154c4ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a730d4e000e155332026c9303a154c4ab">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[69/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefHardSwishEndToEndTestFloat32&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00859">859</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;{</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    HardSwishEndToEndTest&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af81e0023fa3624d9d016704c1a4fe336"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af81e0023fa3624d9d016704c1a4fe336">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[70/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefHardSwishEndToEndTestFloat16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00864">864</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;{</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    HardSwishEndToEndTest&lt;armnn::DataType::Float16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9676b4ac59da5a13eb80432a751486c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9676b4ac59da5a13eb80432a751486c3">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[71/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefHardSwishEndToEndTestBFloat16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00869">869</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;{</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;HardSwishEndToEndTest&lt;armnn::DataType::BFloat16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1b6f64d605ce0a621aed93c023b92c3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b6f64d605ce0a621aed93c023b92c3a">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[72/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefHardSwishEndToEndTestQAsymmS8&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00874">874</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;{</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    HardSwishEndToEndTest&lt;armnn::DataType::QAsymmS8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae580670fd5c776855545cc271ef90688"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae580670fd5c776855545cc271ef90688">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[73/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefHardSwishEndToEndTestQAsymmU8&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00879">879</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;{</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    HardSwishEndToEndTest&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a73400718785944e2487551fa6c035982"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73400718785944e2487551fa6c035982">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[74/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefHardSwishEndToEndTestQSymmS16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00884">884</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;{</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    HardSwishEndToEndTest&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a093aa9f5054c2df21df37dccc604c5b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a093aa9f5054c2df21df37dccc604c5b0">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[75/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefLogSoftmaxEndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00890">890</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="_log_softmax_end_to_end_test_impl_8cpp_source.xhtml#l00076">LogSoftmaxEndToEndTest()</a>.</p>
<div class="fragment"><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;{</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <a class="code" href="_log_softmax_end_to_end_test_impl_8cpp.xhtml#ae25266b3210c32d9e1a665b6d59a4c78">LogSoftmaxEndToEndTest</a>(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="_log_softmax_end_to_end_test_impl_8cpp_xhtml_ae25266b3210c32d9e1a665b6d59a4c78"><div class="ttname"><a href="_log_softmax_end_to_end_test_impl_8cpp.xhtml#ae25266b3210c32d9e1a665b6d59a4c78">LogSoftmaxEndToEndTest</a></div><div class="ttdeci">void LogSoftmaxEndToEndTest(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_log_softmax_end_to_end_test_impl_8cpp_source.xhtml#l00076">LogSoftmaxEndToEndTestImpl.cpp:76</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a58d783e6a05d67a07a0a9499ef50fd19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58d783e6a05d67a07a0a9499ef50fd19">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[76/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefPreluEndToEndTestFloat32&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00895">895</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;{</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    PreluEndToEndNegativeTest&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a78937c046eab79ebc7bc338147cff2a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78937c046eab79ebc7bc338147cff2a4">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[77/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefPreluEndToEndTestUint8&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00900">900</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;{</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    PreluEndToEndPositiveTest&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8bce232785880f4e91eac5ffced0cce6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8bce232785880f4e91eac5ffced0cce6">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[78/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefPreluEndToEndTestQSymm16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00905">905</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;{</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    PreluEndToEndPositiveTest&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a23e155c23a260950db6d840a13421a2e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23e155c23a260950db6d840a13421a2e">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[79/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSpaceToDepthNhwcEndToEndTest1&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00910">910</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="_space_to_depth_end_to_end_test_impl_8cpp_source.xhtml#l00098">SpaceToDepthNhwcEndToEndTest1()</a>.</p>
<div class="fragment"><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;{</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <a class="code" href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#ae2aeba7e1195292ca5a000a81c145629">SpaceToDepthNhwcEndToEndTest1</a>(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="_space_to_depth_end_to_end_test_impl_8cpp_xhtml_ae2aeba7e1195292ca5a000a81c145629"><div class="ttname"><a href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#ae2aeba7e1195292ca5a000a81c145629">SpaceToDepthNhwcEndToEndTest1</a></div><div class="ttdeci">void SpaceToDepthNhwcEndToEndTest1(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_space_to_depth_end_to_end_test_impl_8cpp_source.xhtml#l00098">SpaceToDepthEndToEndTestImpl.cpp:98</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac2b0872039df69aa2d84e70c0040008b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2b0872039df69aa2d84e70c0040008b">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[80/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSpaceToDepthNchwEndToEndTest1&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00915">915</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="_space_to_depth_end_to_end_test_impl_8cpp_source.xhtml#l00129">SpaceToDepthNchwEndToEndTest1()</a>.</p>
<div class="fragment"><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;{</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    <a class="code" href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#aa539d7b30c0a8064ab301a61c5a90fed">SpaceToDepthNchwEndToEndTest1</a>(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;}</div><div class="ttc" id="_space_to_depth_end_to_end_test_impl_8cpp_xhtml_aa539d7b30c0a8064ab301a61c5a90fed"><div class="ttname"><a href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#aa539d7b30c0a8064ab301a61c5a90fed">SpaceToDepthNchwEndToEndTest1</a></div><div class="ttdeci">void SpaceToDepthNchwEndToEndTest1(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_space_to_depth_end_to_end_test_impl_8cpp_source.xhtml#l00129">SpaceToDepthEndToEndTestImpl.cpp:129</a></div></div>
<div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a453a3fa1dbcf379339e1f4c03fd7fb1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a453a3fa1dbcf379339e1f4c03fd7fb1c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[81/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSpaceToDepthNhwcEndToEndTest2&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00921">921</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="_space_to_depth_end_to_end_test_impl_8cpp_source.xhtml#l00160">SpaceToDepthNhwcEndToEndTest2()</a>.</p>
<div class="fragment"><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;{</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    <a class="code" href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#a2da64f8783ac838e5c4aa76c0d2de8cb">SpaceToDepthNhwcEndToEndTest2</a>(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="_space_to_depth_end_to_end_test_impl_8cpp_xhtml_a2da64f8783ac838e5c4aa76c0d2de8cb"><div class="ttname"><a href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#a2da64f8783ac838e5c4aa76c0d2de8cb">SpaceToDepthNhwcEndToEndTest2</a></div><div class="ttdeci">void SpaceToDepthNhwcEndToEndTest2(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_space_to_depth_end_to_end_test_impl_8cpp_source.xhtml#l00160">SpaceToDepthEndToEndTestImpl.cpp:160</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab82e7b2deab17a6c9fa175cad7086c07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab82e7b2deab17a6c9fa175cad7086c07">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[82/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSpaceToDepthNchwEndToEndTest2&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00926">926</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="_space_to_depth_end_to_end_test_impl_8cpp_source.xhtml#l00191">SpaceToDepthNchwEndToEndTest2()</a>.</p>
<div class="fragment"><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;{</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    <a class="code" href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#a00fc587ab0be7b4d988fcc1a9bdf5355">SpaceToDepthNchwEndToEndTest2</a>(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="_space_to_depth_end_to_end_test_impl_8cpp_xhtml_a00fc587ab0be7b4d988fcc1a9bdf5355"><div class="ttname"><a href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#a00fc587ab0be7b4d988fcc1a9bdf5355">SpaceToDepthNchwEndToEndTest2</a></div><div class="ttdeci">void SpaceToDepthNchwEndToEndTest2(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_space_to_depth_end_to_end_test_impl_8cpp_source.xhtml#l00191">SpaceToDepthEndToEndTestImpl.cpp:191</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa25eeef4918e3e9fde41e0187e120cd9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa25eeef4918e3e9fde41e0187e120cd9">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[83/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter1dEndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00931">931</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;{</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    Splitter1dEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae253af67b3b5499c432c4643a1c827a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae253af67b3b5499c432c4643a1c827a0">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[84/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter1dEndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00936">936</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;{</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;    Splitter1dEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7d7a6a40cf58ef7f87631150f36e7458"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d7a6a40cf58ef7f87631150f36e7458">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[85/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter2dDim0EndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00941">941</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;{</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    Splitter2dDim0EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a499606096416b54a1fe8a0fd8eacde64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a499606096416b54a1fe8a0fd8eacde64">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[86/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter2dDim1EndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00946">946</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;{</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    Splitter2dDim1EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a008549ce65eceef7f041baaf8d6bcbbb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a008549ce65eceef7f041baaf8d6bcbbb">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[87/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter2dDim0EndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00951">951</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;{</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    Splitter2dDim0EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af07fb3bb420de34858559a95830e7e1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af07fb3bb420de34858559a95830e7e1f">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[88/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter2dDim1EndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00956">956</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;{</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    Splitter2dDim1EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3490d58c80d2df3f4e5b21eb9b07e155"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3490d58c80d2df3f4e5b21eb9b07e155">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[89/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter3dDim0EndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00961">961</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;{</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    Splitter3dDim0EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a947708810654d415d5f01e499c2ef6ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a947708810654d415d5f01e499c2ef6ce">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[90/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter3dDim1EndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00966">966</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;{</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    Splitter3dDim1EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a38ee9b831e5d1b7d59b67a09ec815062"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38ee9b831e5d1b7d59b67a09ec815062">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[91/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter3dDim2EndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00971">971</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;{</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    Splitter3dDim2EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7cdc58b5c0b116eeb63d973086077c6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cdc58b5c0b116eeb63d973086077c6e">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[92/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter3dDim0EndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00976">976</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;{</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    Splitter3dDim0EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8d1353061bb42d6b133d2b0540bffdd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d1353061bb42d6b133d2b0540bffdd2">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[93/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter3dDim1EndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00981">981</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;{</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    Splitter3dDim1EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a863e1cbe8981e4a018cb0d9b8381c96e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a863e1cbe8981e4a018cb0d9b8381c96e">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[94/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter3dDim2EndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00986">986</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;{</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    Splitter3dDim2EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a71b7c346ef7ec574fc4510e062e549bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71b7c346ef7ec574fc4510e062e549bf">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[95/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter4dDim0EndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00991">991</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;{</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    Splitter4dDim0EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a54653770541b1193ca57c2b4ee0d30f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54653770541b1193ca57c2b4ee0d30f2">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[96/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter4dDim1EndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00996">996</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;{</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    Splitter4dDim1EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a793e1c99414aa55a6c6cbb01f9e7fdf4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a793e1c99414aa55a6c6cbb01f9e7fdf4">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[97/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter4dDim2EndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01001">1001</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;{</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    Splitter4dDim2EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a19ffa474b62942e72169c10695a44fa1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19ffa474b62942e72169c10695a44fa1">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[98/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter4dDim3EndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01006">1006</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;{</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    Splitter4dDim3EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac1dada1db02d355b0a232ec28b1c5a2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1dada1db02d355b0a232ec28b1c5a2a">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[99/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter4dDim0EndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01011">1011</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;{</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    Splitter4dDim0EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7e68beafc30b9bdcce541915905b1d38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e68beafc30b9bdcce541915905b1d38">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[100/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter4dDim1EndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01016">1016</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;{</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    Splitter4dDim1EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac8129f418288208944ad79bf08405db9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8129f418288208944ad79bf08405db9">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[101/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter4dDim2EndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01021">1021</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;{</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    Splitter4dDim2EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af45bffc90ca70067148a288cb573f2ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af45bffc90ca70067148a288cb573f2ac">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[102/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefSplitter4dDim3EndToEndUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01026">1026</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;{</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    Splitter4dDim3EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab66cbf20810376f197978b0e721b952e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab66cbf20810376f197978b0e721b952e">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[103/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefTransposeConvolution2dEndToEndFloatNchwTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01032">1032</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;{</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    TransposeConvolution2dEndToEnd&lt;armnn::DataType::Float32, armnn::DataType::Float32&gt;(</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;        <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab1b05c3cfca6479898a76437c7d99aa1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1b05c3cfca6479898a76437c7d99aa1">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[104/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefTransposeConvolution2dEndToEndUint8NchwTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01038">1038</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;{</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    TransposeConvolution2dEndToEnd&lt;armnn::DataType::QAsymmU8, armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;        <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7a7217701a4ca670dc5cb24e059c03f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a7217701a4ca670dc5cb24e059c03f2">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[105/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefTransposeConvolution2dEndToEndInt16NchwTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01044">1044</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;{</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;    TransposeConvolution2dEndToEnd&lt;armnn::DataType::QSymmS16, armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;        <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac0762fb38d5ffc7ec79cb04f9e60e44a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0762fb38d5ffc7ec79cb04f9e60e44a">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[106/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefTransposeConvolution2dEndToEndFloatNhwcTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01050">1050</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;{</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;    TransposeConvolution2dEndToEnd&lt;armnn::DataType::Float32, armnn::DataType::Float32&gt;(</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;        <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad1dde423645a7c85a87763536f7c70af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1dde423645a7c85a87763536f7c70af">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[107/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefTransposeConvolution2dEndToEndUint8NhwcTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01056">1056</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;{</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    TransposeConvolution2dEndToEnd&lt;armnn::DataType::QAsymmU8, armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;        <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a816bfdfbd2b09903483c141c54a2f467"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a816bfdfbd2b09903483c141c54a2f467">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[108/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefTransposeConvolution2dEndToEndInt16NhwcTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01062">1062</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;{</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;    TransposeConvolution2dEndToEnd&lt;armnn::DataType::QSymmS16, armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;        <a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a11227ccc009ce7b623e63dce8f067348"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11227ccc009ce7b623e63dce8f067348">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[109/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefResizeBilinearEndToEndFloatNchwTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01069">1069</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;{</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    ResizeBilinearEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaa14e63bf4340ed08a90ee2b51cf2219"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa14e63bf4340ed08a90ee2b51cf2219">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[110/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefResizeBilinearEndToEndUint8NchwTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01074">1074</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;{</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;    ResizeBilinearEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7786f697f871a6855d7ad4ed2a557009"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7786f697f871a6855d7ad4ed2a557009">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[111/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefResizeBilinearEndToEndInt16NchwTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01079">1079</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;{</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    ResizeBilinearEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a20da73ec01e52fee47424e37a861e6c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20da73ec01e52fee47424e37a861e6c4">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[112/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefResizeBilinearEndToEndFloatNhwcTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01084">1084</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;{</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;    ResizeBilinearEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad3b019cf07756bdc70e2f82713954e28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3b019cf07756bdc70e2f82713954e28">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[113/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefResizeBilinearEndToEndUint8NhwcTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01089">1089</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;{</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    ResizeBilinearEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aba57d7a0dde8b9460219637ff85509a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba57d7a0dde8b9460219637ff85509a9">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[114/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefResizeBilinearEndToEndInt16NhwcTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01094">1094</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;{</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;    ResizeBilinearEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a69cb32513a6889642cef81ae701f55e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69cb32513a6889642cef81ae701f55e9">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[115/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefResizeNearestNeighborEndToEndFloatNchwTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01100">1100</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;{</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    ResizeNearestNeighborEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad0926006a74e888540b1319cdc07ee40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0926006a74e888540b1319cdc07ee40">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[116/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefResizeNearestNeighborEndToEndUint8NchwTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01105">1105</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;{</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;    ResizeNearestNeighborEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aae5029a36eaced664906af2415809f2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae5029a36eaced664906af2415809f2d">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[117/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefResizeNearestNeighborEndToEndInt16NchwTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01110">1110</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;{</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    ResizeNearestNeighborEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8da7e1a768667e22c01bc0df0f13b861"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8da7e1a768667e22c01bc0df0f13b861">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[118/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefResizeNearestNeighborEndToEndFloatNhwcTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01115">1115</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;{</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;    ResizeNearestNeighborEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5b1f658104de9557ad4d5941a0986f23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b1f658104de9557ad4d5941a0986f23">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[119/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefResizeNearestNeighborEndToEndUint8NhwcTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01120">1120</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;{</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    ResizeNearestNeighborEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9496cb5cb8869f77029cff8f7eba77da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9496cb5cb8869f77029cff8f7eba77da">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[120/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefResizeNearestNeighborEndToEndInt16NhwcTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01125">1125</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;{</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    ResizeNearestNeighborEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8ca5c032322b07b3f65ae5dfec057536"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ca5c032322b07b3f65ae5dfec057536">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[121/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefInstanceNormalizationNhwcEndToEndTest1&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01131">1131</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00098">InstanceNormalizationNhwcEndToEndTest1()</a>.</p>
<div class="fragment"><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;{</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;    <a class="code" href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#ae0bf53a96bad08ac5218f3c3747e5bed">InstanceNormalizationNhwcEndToEndTest1</a>(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;}</div><div class="ttc" id="_instance_normalization_end_to_end_test_impl_8cpp_xhtml_ae0bf53a96bad08ac5218f3c3747e5bed"><div class="ttname"><a href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#ae0bf53a96bad08ac5218f3c3747e5bed">InstanceNormalizationNhwcEndToEndTest1</a></div><div class="ttdeci">void InstanceNormalizationNhwcEndToEndTest1(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00098">InstanceNormalizationEndToEndTestImpl.cpp:98</a></div></div>
<div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1dbcbb19c9b40731db824d1d9af7bcb1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1dbcbb19c9b40731db824d1d9af7bcb1">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[122/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefInstanceNormalizationNchwEndToEndTest1&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01136">1136</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00168">InstanceNormalizationNchwEndToEndTest1()</a>.</p>
<div class="fragment"><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;{</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    <a class="code" href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#a120f2896c50cfa77409d16ef6b1628eb">InstanceNormalizationNchwEndToEndTest1</a>(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="_instance_normalization_end_to_end_test_impl_8cpp_xhtml_a120f2896c50cfa77409d16ef6b1628eb"><div class="ttname"><a href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#a120f2896c50cfa77409d16ef6b1628eb">InstanceNormalizationNchwEndToEndTest1</a></div><div class="ttdeci">void InstanceNormalizationNchwEndToEndTest1(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00168">InstanceNormalizationEndToEndTestImpl.cpp:168</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab235089e60220601324e43c8151911ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab235089e60220601324e43c8151911ae">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[123/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefInstanceNormalizationNhwcEndToEndTest2&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01141">1141</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00239">InstanceNormalizationNhwcEndToEndTest2()</a>.</p>
<div class="fragment"><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;{</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    <a class="code" href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#a891c49c919ac2d170b7aa99e23e8871b">InstanceNormalizationNhwcEndToEndTest2</a>(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="_instance_normalization_end_to_end_test_impl_8cpp_xhtml_a891c49c919ac2d170b7aa99e23e8871b"><div class="ttname"><a href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#a891c49c919ac2d170b7aa99e23e8871b">InstanceNormalizationNhwcEndToEndTest2</a></div><div class="ttdeci">void InstanceNormalizationNhwcEndToEndTest2(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00239">InstanceNormalizationEndToEndTestImpl.cpp:239</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa25843e91bc4a69b2e6ce11194b1b4a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa25843e91bc4a69b2e6ce11194b1b4a6">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[124/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefInstanceNormalizationNchwEndToEndTest2&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01146">1146</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00310">InstanceNormalizationNchwEndToEndTest2()</a>.</p>
<div class="fragment"><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;{</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    <a class="code" href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#a3e262db2d488773b8824f73c4f6ab145">InstanceNormalizationNchwEndToEndTest2</a>(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="_instance_normalization_end_to_end_test_impl_8cpp_xhtml_a3e262db2d488773b8824f73c4f6ab145"><div class="ttname"><a href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#a3e262db2d488773b8824f73c4f6ab145">InstanceNormalizationNchwEndToEndTest2</a></div><div class="ttdeci">void InstanceNormalizationNchwEndToEndTest2(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00310">InstanceNormalizationEndToEndTestImpl.cpp:310</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a74b95c11545d2107d60b3b41f21ed98c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74b95c11545d2107d60b3b41f21ed98c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[125/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMaxSimpleTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01152">1152</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;{</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    ArgMaxEndToEndSimple&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a890d1f63c8c5e2da3c30956b9f640bcf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a890d1f63c8c5e2da3c30956b9f640bcf">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[126/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMaxSimpleUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01157">1157</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;{</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;    ArgMaxEndToEndSimple&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a128f2a74dbf3e3222a165d238be73a56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a128f2a74dbf3e3222a165d238be73a56">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[127/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMinSimpleTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01162">1162</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;{</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;    ArgMinEndToEndSimple&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7856bdf65a17783ac5a15005d440056b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7856bdf65a17783ac5a15005d440056b">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[128/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMinSimpleUint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01167">1167</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;{</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    ArgMinEndToEndSimple&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac8774d0a402fc4f5c6bcfc2db7077430"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8774d0a402fc4f5c6bcfc2db7077430">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[129/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMaxAxis0Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01172">1172</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;{</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;    ArgMaxAxis0EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9bf7a4293ca44c420bbe00003cd9ae42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9bf7a4293ca44c420bbe00003cd9ae42">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[130/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMaxAxis0Uint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01177">1177</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;{</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    ArgMaxAxis0EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af1ea411dbb68d7f67873d4fde67622bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1ea411dbb68d7f67873d4fde67622bb">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[131/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMinAxis0Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01182">1182</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;{</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;    ArgMinAxis0EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8614a76c6443612ab91b0a1fc40f28dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8614a76c6443612ab91b0a1fc40f28dd">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[132/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMinAxis0Uint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01187">1187</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;{</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    ArgMinAxis0EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a28fd650c6c2cb71d12e499bda7f46e24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28fd650c6c2cb71d12e499bda7f46e24">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[133/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMaxAxis1Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01193">1193</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;{</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    ArgMaxAxis1EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4643532d13d1859ef897ed39a2f4114a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4643532d13d1859ef897ed39a2f4114a">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[134/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMaxAxis1Uint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01198">1198</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;{</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    ArgMaxAxis1EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a44eeba8990b39109f92bde90d69737ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44eeba8990b39109f92bde90d69737ff">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[135/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMinAxis1Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01203">1203</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;{</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;    ArgMinAxis1EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae345064d1963d7b040e2a6e0b4d55603"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae345064d1963d7b040e2a6e0b4d55603">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[136/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMinAxis1Uint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01208">1208</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;{</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    ArgMinAxis1EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5b232949a5af2ff1d1ec78a3761cf0a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b232949a5af2ff1d1ec78a3761cf0a2">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[137/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMaxAxis2Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01214">1214</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;{</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    ArgMaxAxis2EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a73c069fa50d213d4801adb9ae3855b43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73c069fa50d213d4801adb9ae3855b43">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[138/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMaxAxis2Uint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01219">1219</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;{</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    ArgMaxAxis2EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8be62341cba28a38ac0b0a7247e2f389"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8be62341cba28a38ac0b0a7247e2f389">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[139/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMinAxis2Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01224">1224</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;{</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    ArgMinAxis2EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0c7774d6c34d36651f867fac2e915c35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c7774d6c34d36651f867fac2e915c35">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[140/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMinAxis2Uint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01229">1229</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;{</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;    ArgMinAxis2EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3692b635b95183ab2ee29a60b7276b79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3692b635b95183ab2ee29a60b7276b79">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[141/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMaxAxis3Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01235">1235</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;{</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;    ArgMaxAxis3EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4a2228c99a64294a73ff81d29750e432"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a2228c99a64294a73ff81d29750e432">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[142/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMaxAxis3Uint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01240">1240</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;{</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    ArgMaxAxis3EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6dc08ccb11f05bf8ed0e8be48ba0ce6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dc08ccb11f05bf8ed0e8be48ba0ce6a">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[143/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMinAxis3Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01245">1245</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;{</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    ArgMinAxis3EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae70a7e422d253964ab00af3e33624030"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae70a7e422d253964ab00af3e33624030">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[144/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefArgMinAxis3Uint8Test&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01250">1250</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;{</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    ArgMinAxis3EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6cf796a35b6607d2b4df877114cc7237"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6cf796a35b6607d2b4df877114cc7237">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[145/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefQLstmEndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01256">1256</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>, and <a class="el" href="_q_lstm_end_to_end_test_impl_8cpp_source.xhtml#l00036">QLstmEndToEnd()</a>.</p>
<div class="fragment"><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;{</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    <a class="code" href="_q_lstm_end_to_end_test_impl_8cpp.xhtml#a171b68282d4a922144ae3a6b0a27db17">QLstmEndToEnd</a>(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
<div class="ttc" id="_q_lstm_end_to_end_test_impl_8cpp_xhtml_a171b68282d4a922144ae3a6b0a27db17"><div class="ttname"><a href="_q_lstm_end_to_end_test_impl_8cpp.xhtml#a171b68282d4a922144ae3a6b0a27db17">QLstmEndToEnd</a></div><div class="ttdeci">void QLstmEndToEnd(const std::vector&lt; armnn::BackendId &gt; &amp;backends)</div><div class="ttdef"><b>Definition:</b> <a href="_q_lstm_end_to_end_test_impl_8cpp_source.xhtml#l00036">QLstmEndToEndTestImpl.cpp:36</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af5ebc9b9e21c5ed38b2ca6bbe87e0d80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5ebc9b9e21c5ed38b2ca6bbe87e0d80">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[146/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefRankEndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01261">1261</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;{</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    RankEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abecb64a3e3a053b150624146754cc2b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abecb64a3e3a053b150624146754cc2b3">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[147/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefRankEndToEndTestFloat16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01266">1266</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;{</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    RankEndToEnd&lt;armnn::DataType::Float16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af24c200e2ea073d403468ee00fa261ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af24c200e2ea073d403468ee00fa261ad">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[148/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefRankEndToEndTestInt32&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01271">1271</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;{</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    RankEndToEnd&lt;armnn::DataType::Signed32&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a291ef59b0f02c19ad84c1d49bfca7088"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a291ef59b0f02c19ad84c1d49bfca7088">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[149/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefRankEndToEndTestQAsymmS8&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01276">1276</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;{</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    RankEndToEnd&lt;armnn::DataType::QAsymmS8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad9505aeb92a67c221d4364222e9a0495"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9505aeb92a67c221d4364222e9a0495">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[150/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefRankEndToEndTestQSymmS16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01281">1281</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;{</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    RankEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a569244c0d330e9beb6cce57879d01575"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a569244c0d330e9beb6cce57879d01575">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[151/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefRankEndToEndTestQSymmS8&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01286">1286</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;{</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;    RankEndToEnd&lt;armnn::DataType::QSymmS8&gt;(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa7b4d7e29c75578bf87a961f4f592f37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7b4d7e29c75578bf87a961f4f592f37">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[152/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefImportNonAlignedPointerTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01293">1293</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;{</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;    ImportNonAlignedInputPointerTest(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5e166cd4f3aea8f88378765974e4a2b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e166cd4f3aea8f88378765974e4a2b3">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[153/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefExportNonAlignedPointerTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01298">1298</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;{</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    ExportNonAlignedOutputPointerTest(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab3dbdea5e19933779c373e68e368b7d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3dbdea5e19933779c373e68e368b7d0">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[154/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefImportAlignedPointerTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01303">1303</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;{</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    ImportAlignedPointerTest(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4cb6bf820cbcf14dc77dbda00bc553da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cb6bf820cbcf14dc77dbda00bc553da">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[155/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefImportOnlyWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01308">1308</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;{</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;    ImportOnlyWorkload(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afd24ed499b36d27aa05702ec8e37c68b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd24ed499b36d27aa05702ec8e37c68b">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[156/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefExportOnlyWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01313">1313</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;{</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;    ExportOnlyWorkload(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a11a7383985e0e73ce0d936dbc283bb3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11a7383985e0e73ce0d936dbc283bb3e">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[157/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefImportAndExportWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01318">1318</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;{</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    ImportAndExportWorkload(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8c8e7e8d6441953ffabeb861a774cea7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c8e7e8d6441953ffabeb861a774cea7">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[158/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefExportOutputWithSeveralOutputSlotConnectionsTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01323">1323</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;{</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;    ExportOutputWithSeveralOutputSlotConnectionsTest(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4e5aee711a7215072482614a929f34a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e5aee711a7215072482614a929f34a8">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[159/159]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefStridedSliceInvalidSliceEndToEndTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l01328">1328</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>, and <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">defaultBackends</a>.</p>
<div class="fragment"><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;{</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    StridedSliceInvalidSliceEndToEndTest(<a class="code" href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;}</div><div class="ttc" id="_ref_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_ref_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">RefEndToEndTests.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a469c9be3a505d4ef240b1ae2478c5256"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a469c9be3a505d4ef240b1ae2478c5256">&#9670;&nbsp;</a></span>QuantizeData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void QuantizeData </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>quant</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>dequant</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00723">723</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00192">TensorInfo::GetNumElements()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00469">TensorInfo::GetQuantizationOffset()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00452">TensorInfo::GetQuantizationScale()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00731">BOOST_AUTO_TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;{</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>(); i++)</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    {</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        quant[i] = armnn::Quantize&lt;uint8_t&gt;(dequant[i], info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a>(), info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>());</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    }</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a770b51078da02f44a819e9f95d8058b5"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">armnn::TensorInfo::GetQuantizationOffset</a></div><div class="ttdeci">int32_t GetQuantizationOffset() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00469">Tensor.cpp:469</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a047ca888c43bd7fb5702853bf72410d0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">armnn::TensorInfo::GetQuantizationScale</a></div><div class="ttdeci">float GetQuantizationScale() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00452">Tensor.cpp:452</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00192">Tensor.hpp:192</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="ab59caffe2ee6be46c08766c055420f17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab59caffe2ee6be46c08766c055420f17">&#9670;&nbsp;</a></span>defaultBackends</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a>&gt; defaultBackends = {<a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a>}</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml">RefEndToEndTests.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_end_to_end_tests_8cpp_source.xhtml#l00037">BOOST_AUTO_TEST_CASE()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="dir_820f114a135ae891c13c0cafd2ecf138.xhtml">test</a></li><li class="navelem"><a class="el" href="_ref_end_to_end_tests_8cpp.xhtml">RefEndToEndTests.cpp</a></li>
    <li class="footer">Generated on Fri Mar 19 2021 15:26:07 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
