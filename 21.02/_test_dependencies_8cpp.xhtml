<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnTfParser/test/TestDependencies.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_test_dependencies_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">TestDependencies.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;boost/test/unit_test.hpp&gt;</code><br />
<code>#include &quot;<a class="el" href="_i_tf_parser_8hpp_source.xhtml">armnnTfParser/ITfParser.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>&quot;</code><br />
</div>
<p><a href="_test_dependencies_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a64c9c9e6a66e55bcb1deecfff7793fd1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_test_dependencies_8cpp.xhtml#a64c9c9e6a66e55bcb1deecfff7793fd1">BOOST_FIXTURE_TEST_CASE</a> (RediscoveredDependencies, RediscoveredDependenciesFixture)</td></tr>
<tr class="separator:a64c9c9e6a66e55bcb1deecfff7793fd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdf3505a3289794a0c15d764343bfa2f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_test_dependencies_8cpp.xhtml#afdf3505a3289794a0c15d764343bfa2f">BOOST_AUTO_TEST_CASE</a> (SimpleCycle)</td></tr>
<tr class="separator:afdf3505a3289794a0c15d764343bfa2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a549bbef9e3ef8485b3936026f9b1c586"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_test_dependencies_8cpp.xhtml#a549bbef9e3ef8485b3936026f9b1c586">BOOST_AUTO_TEST_CASE</a> (SingleNodeCycle)</td></tr>
<tr class="separator:a549bbef9e3ef8485b3936026f9b1c586"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c5f97c76a7b00b63d915315583a9634"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_test_dependencies_8cpp.xhtml#a8c5f97c76a7b00b63d915315583a9634">BOOST_AUTO_TEST_CASE</a> (ComplexCycle)</td></tr>
<tr class="separator:a8c5f97c76a7b00b63d915315583a9634"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22ab2542baa07554aea2836269a428b5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_test_dependencies_8cpp.xhtml#a22ab2542baa07554aea2836269a428b5">BOOST_AUTO_TEST_CASE</a> (InvalidInput)</td></tr>
<tr class="separator:a22ab2542baa07554aea2836269a428b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="afdf3505a3289794a0c15d764343bfa2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afdf3505a3289794a0c15d764343bfa2f">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">SimpleCycle&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_dependencies_8cpp_source.xhtml#l00124">124</a> of file <a class="el" href="_test_dependencies_8cpp_source.xhtml">TestDependencies.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_parser_8cpp_source.xhtml#l00048">ITfParser::Create()</a>.</p>
<div class="fragment"><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* prototext = R<span class="stringliteral">&quot;(</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="stringliteral">node {</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="stringliteral">  name: &quot;r1&quot;</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="stringliteral">  op: &quot;Relu&quot;</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="stringliteral">  input: &quot;r2&quot;</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="stringliteral">  attr {</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="stringliteral">    key: &quot;T&quot;</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="stringliteral">    value {</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="stringliteral">      type: DT_FLOAT</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="stringliteral">    }</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="stringliteral">  }</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="stringliteral">}</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="stringliteral">node {</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="stringliteral">  name: &quot;r2&quot;</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="stringliteral">  op: &quot;Relu&quot;</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="stringliteral">  input: &quot;r1&quot;</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="stringliteral">  attr {</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="stringliteral">    key: &quot;T&quot;</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="stringliteral">    value {</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="stringliteral">      type: DT_FLOAT</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="stringliteral">    }</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="stringliteral">  }</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="stringliteral">}</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="stringliteral">    )&quot;;</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="stringliteral">    <a class="code" href="namespacearmnn_tf_parser.xhtml#af7cec8b9a69e02f18a5de38502675d94">armnnTfParser::ITfParserPtr</a> parser = <a class="code" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml#a6abaf60481f0791c686ed3b97818bd0c">armnnTfParser::ITfParser::Create</a>();</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="stringliteral">    BOOST_CHECK_THROW(parser-&gt;CreateNetworkFromString(prototext, {}, { </span><span class="stringliteral">&quot;r2&quot;</span> }), <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div><div class="ttc" id="namespacearmnn_tf_parser_xhtml_af7cec8b9a69e02f18a5de38502675d94"><div class="ttname"><a href="namespacearmnn_tf_parser.xhtml#af7cec8b9a69e02f18a5de38502675d94">armnnTfParser::ITfParserPtr</a></div><div class="ttdeci">std::unique_ptr&lt; ITfParser, void(*)(ITfParser *parser)&gt; ITfParserPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_tf_parser_8hpp_source.xhtml#l00022">ITfParser.hpp:22</a></div></div>
<div class="ttc" id="classarmnn_tf_parser_1_1_i_tf_parser_xhtml_a6abaf60481f0791c686ed3b97818bd0c"><div class="ttname"><a href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml#a6abaf60481f0791c686ed3b97818bd0c">armnnTfParser::ITfParser::Create</a></div><div class="ttdeci">static ITfParserPtr Create()</div><div class="ttdef"><b>Definition:</b> <a href="_tf_parser_8cpp_source.xhtml#l00048">TfParser.cpp:48</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a549bbef9e3ef8485b3936026f9b1c586"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a549bbef9e3ef8485b3936026f9b1c586">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">SingleNodeCycle&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_dependencies_8cpp_source.xhtml#l00155">155</a> of file <a class="el" href="_test_dependencies_8cpp_source.xhtml">TestDependencies.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_parser_8cpp_source.xhtml#l00048">ITfParser::Create()</a>.</p>
<div class="fragment"><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* prototext = R<span class="stringliteral">&quot;(</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="stringliteral">node {</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="stringliteral">  name: &quot;r1&quot;</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="stringliteral">  op: &quot;Relu&quot;</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="stringliteral">  input: &quot;r1&quot;</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="stringliteral">  attr {</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="stringliteral">    key: &quot;T&quot;</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="stringliteral">    value {</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="stringliteral">      type: DT_FLOAT</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="stringliteral">    }</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="stringliteral">  }</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="stringliteral">}</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="stringliteral">    )&quot;;</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="stringliteral">    <a class="code" href="namespacearmnn_tf_parser.xhtml#af7cec8b9a69e02f18a5de38502675d94">armnnTfParser::ITfParserPtr</a> parser = <a class="code" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml#a6abaf60481f0791c686ed3b97818bd0c">armnnTfParser::ITfParser::Create</a>();</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="stringliteral">    BOOST_CHECK_THROW(parser-&gt;CreateNetworkFromString(prototext, {}, { </span><span class="stringliteral">&quot;r1&quot;</span> }), <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div><div class="ttc" id="namespacearmnn_tf_parser_xhtml_af7cec8b9a69e02f18a5de38502675d94"><div class="ttname"><a href="namespacearmnn_tf_parser.xhtml#af7cec8b9a69e02f18a5de38502675d94">armnnTfParser::ITfParserPtr</a></div><div class="ttdeci">std::unique_ptr&lt; ITfParser, void(*)(ITfParser *parser)&gt; ITfParserPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_tf_parser_8hpp_source.xhtml#l00022">ITfParser.hpp:22</a></div></div>
<div class="ttc" id="classarmnn_tf_parser_1_1_i_tf_parser_xhtml_a6abaf60481f0791c686ed3b97818bd0c"><div class="ttname"><a href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml#a6abaf60481f0791c686ed3b97818bd0c">armnnTfParser::ITfParser::Create</a></div><div class="ttdeci">static ITfParserPtr Create()</div><div class="ttdef"><b>Definition:</b> <a href="_tf_parser_8cpp_source.xhtml#l00048">TfParser.cpp:48</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8c5f97c76a7b00b63d915315583a9634"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c5f97c76a7b00b63d915315583a9634">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">ComplexCycle&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_dependencies_8cpp_source.xhtml#l00185">185</a> of file <a class="el" href="_test_dependencies_8cpp_source.xhtml">TestDependencies.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_parser_8cpp_source.xhtml#l00048">ITfParser::Create()</a>.</p>
<div class="fragment"><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;{</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">// Input = tf.placeholder(tf.float32, 1, &quot;input&quot;)</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// Add2 = tf.nn.relu(input, add1, &quot;add2&quot;) // This line won&#39;t actually run in TF, because add1 is not yet defined</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">// Relu1 = tf.nn.relu(relu0, &quot;relu1&quot;)</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// Relu2 = tf.nn.relu(relu0, &quot;relu2&quot;)</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">// Relu3 = tf.nn.relu(relu2, &quot;relu3&quot;)</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// Add1 = tf.add(relu1, relu3, &quot;add1&quot;)</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* prototext = R<span class="stringliteral">&quot;(</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="stringliteral">        node {</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="stringliteral">            name: &quot;input&quot;</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="stringliteral">            op: &quot;Placeholder&quot;</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="stringliteral">            attr {</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="stringliteral">            key: &quot;dtype&quot;</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="stringliteral">            value {</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="stringliteral">                type: DT_FLOAT</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="stringliteral">            attr {</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="stringliteral">            key: &quot;shape&quot;</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="stringliteral">            value {</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="stringliteral">                shape {</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="stringliteral">                dim {</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="stringliteral">                    size: 1</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="stringliteral">                }</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="stringliteral">        }</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="stringliteral">        node {</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="stringliteral">            name: &quot;add2&quot;</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="stringliteral">            op: &quot;Add&quot;</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="stringliteral">            input: &quot;input&quot;</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="stringliteral">            input: &quot;add1&quot;</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="stringliteral">            attr {</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="stringliteral">            key: &quot;T&quot;</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="stringliteral">            value {</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="stringliteral">                type: DT_FLOAT</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="stringliteral">        }</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="stringliteral">        node {</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="stringliteral">            name: &quot;relu1&quot;</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="stringliteral">            op: &quot;Relu&quot;</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="stringliteral">            input: &quot;add2&quot;</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="stringliteral">            attr {</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="stringliteral">            key: &quot;T&quot;</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="stringliteral">            value {</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="stringliteral">                type: DT_FLOAT</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="stringliteral">        }</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="stringliteral">        node {</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="stringliteral">            name: &quot;relu2&quot;</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="stringliteral">            op: &quot;Relu&quot;</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="stringliteral">            input: &quot;add2&quot;</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="stringliteral">            attr {</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="stringliteral">            key: &quot;T&quot;</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="stringliteral">            value {</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="stringliteral">                type: DT_FLOAT</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="stringliteral">        }</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="stringliteral">        node {</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="stringliteral">            name: &quot;relu3&quot;</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="stringliteral">            op: &quot;Relu&quot;</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="stringliteral">            input: &quot;relu2&quot;</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="stringliteral">            attr {</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="stringliteral">            key: &quot;T&quot;</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="stringliteral">            value {</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="stringliteral">                type: DT_FLOAT</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="stringliteral">        }</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="stringliteral">        node {</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="stringliteral">            name: &quot;add1&quot;</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="stringliteral">            op: &quot;Add&quot;</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="stringliteral">            input: &quot;relu1&quot;</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="stringliteral">            input: &quot;relu3&quot;</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="stringliteral">            attr {</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="stringliteral">            key: &quot;T&quot;</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="stringliteral">            value {</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="stringliteral">                type: DT_FLOAT</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="stringliteral">            }</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="stringliteral">        }</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="stringliteral">    )&quot;;</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="stringliteral">    <a class="code" href="namespacearmnn_tf_parser.xhtml#af7cec8b9a69e02f18a5de38502675d94">armnnTfParser::ITfParserPtr</a> parser = <a class="code" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml#a6abaf60481f0791c686ed3b97818bd0c">armnnTfParser::ITfParser::Create</a>();</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="stringliteral">    BOOST_CHECK_THROW(parser-&gt;CreateNetworkFromString(prototext, {}, { </span><span class="stringliteral">&quot;add1&quot;</span> }), <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;}</div><div class="ttc" id="namespacearmnn_tf_parser_xhtml_af7cec8b9a69e02f18a5de38502675d94"><div class="ttname"><a href="namespacearmnn_tf_parser.xhtml#af7cec8b9a69e02f18a5de38502675d94">armnnTfParser::ITfParserPtr</a></div><div class="ttdeci">std::unique_ptr&lt; ITfParser, void(*)(ITfParser *parser)&gt; ITfParserPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_tf_parser_8hpp_source.xhtml#l00022">ITfParser.hpp:22</a></div></div>
<div class="ttc" id="classarmnn_tf_parser_1_1_i_tf_parser_xhtml_a6abaf60481f0791c686ed3b97818bd0c"><div class="ttname"><a href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml#a6abaf60481f0791c686ed3b97818bd0c">armnnTfParser::ITfParser::Create</a></div><div class="ttdeci">static ITfParserPtr Create()</div><div class="ttdef"><b>Definition:</b> <a href="_tf_parser_8cpp_source.xhtml#l00048">TfParser.cpp:48</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a22ab2542baa07554aea2836269a428b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22ab2542baa07554aea2836269a428b5">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">InvalidInput&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_dependencies_8cpp_source.xhtml#l00277">277</a> of file <a class="el" href="_test_dependencies_8cpp_source.xhtml">TestDependencies.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>, and <a class="el" href="_tf_parser_8cpp_source.xhtml#l00048">ITfParser::Create()</a>.</p>
<div class="fragment"><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;{</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* prototext = R<span class="stringliteral">&quot;(</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="stringliteral">node {</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="stringliteral">  name: &quot;r1&quot;</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="stringliteral">  op: &quot;Relu&quot;</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="stringliteral">  input: &quot;a-node-that-does-not-exist&quot;</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="stringliteral">  attr {</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="stringliteral">    key: &quot;T&quot;</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="stringliteral">    value {</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="stringliteral">      type: DT_FLOAT</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="stringliteral">    }</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="stringliteral">  }</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="stringliteral">}</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="stringliteral">    )&quot;;</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="stringliteral">    <a class="code" href="namespacearmnn_tf_parser.xhtml#af7cec8b9a69e02f18a5de38502675d94">armnnTfParser::ITfParserPtr</a> parser = <a class="code" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml#a6abaf60481f0791c686ed3b97818bd0c">armnnTfParser::ITfParser::Create</a>();</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="stringliteral">    BOOST_CHECK_THROW(parser-&gt;CreateNetworkFromString(prototext, {}, { </span><span class="stringliteral">&quot;r1&quot;</span> }), <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;}</div><div class="ttc" id="namespacearmnn_tf_parser_xhtml_af7cec8b9a69e02f18a5de38502675d94"><div class="ttname"><a href="namespacearmnn_tf_parser.xhtml#af7cec8b9a69e02f18a5de38502675d94">armnnTfParser::ITfParserPtr</a></div><div class="ttdeci">std::unique_ptr&lt; ITfParser, void(*)(ITfParser *parser)&gt; ITfParserPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_tf_parser_8hpp_source.xhtml#l00022">ITfParser.hpp:22</a></div></div>
<div class="ttc" id="classarmnn_tf_parser_1_1_i_tf_parser_xhtml_a6abaf60481f0791c686ed3b97818bd0c"><div class="ttname"><a href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml#a6abaf60481f0791c686ed3b97818bd0c">armnnTfParser::ITfParser::Create</a></div><div class="ttdeci">static ITfParserPtr Create()</div><div class="ttdef"><b>Definition:</b> <a href="_tf_parser_8cpp_source.xhtml#l00048">TfParser.cpp:48</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a64c9c9e6a66e55bcb1deecfff7793fd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64c9c9e6a66e55bcb1deecfff7793fd1">&#9670;&nbsp;</a></span>BOOST_FIXTURE_TEST_CASE()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_FIXTURE_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RediscoveredDependencies&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">RediscoveredDependenciesFixture&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_dependencies_8cpp_source.xhtml#l00117">117</a> of file <a class="el" href="_test_dependencies_8cpp_source.xhtml">TestDependencies.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    RunTest&lt;1&gt;({1}, {2});</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_50aba35e23cba3c8856f8642cc06d5dc.xhtml">armnnTfParser</a></li><li class="navelem"><a class="el" href="dir_4ccaefd65a1feacebd3c00536508ef51.xhtml">test</a></li><li class="navelem"><a class="el" href="_test_dependencies_8cpp.xhtml">TestDependencies.cpp</a></li>
    <li class="footer">Generated on Fri Mar 19 2021 15:26:06 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
