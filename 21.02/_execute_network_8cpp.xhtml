<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/ExecuteNetwork/ExecuteNetwork.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_execute_network_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ExecuteNetwork.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_network_execution_utils_8hpp_source.xhtml">NetworkExecutionUtils/NetworkExecutionUtils.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_execute_network_program_options_8hpp_source.xhtml">ExecuteNetworkProgramOptions.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_logging_8hpp_source.xhtml">armnn/Logging.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_filesystem_8hpp_source.xhtml">Filesystem.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_inference_test_8hpp_source.xhtml">InferenceTest.hpp</a>&gt;</code><br />
<code>#include &lt;future&gt;</code><br />
</div>
<p><a href="_execute_network_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:afc1c3398fd2de1051edf23a171cfa01b"><td class="memTemplParams" colspan="2">template&lt;typename TParser , typename TDataType &gt; </td></tr>
<tr class="memitem:afc1c3398fd2de1051edf23a171cfa01b"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_execute_network_8cpp.xhtml#afc1c3398fd2de1051edf23a171cfa01b">MainImpl</a> (const <a class="el" href="struct_execute_network_params.xhtml">ExecuteNetworkParams</a> &amp;params, const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> &gt; &amp;runtime=nullptr)</td></tr>
<tr class="separator:afc1c3398fd2de1051edf23a171cfa01b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0f2228420376f4db7e1274f2b41667c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_8cpp.xhtml#ac0f2228420376f4db7e1274f2b41667c">main</a> (int argc, const char *argv[])</td></tr>
<tr class="separator:ac0f2228420376f4db7e1274f2b41667c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ac0f2228420376f4db7e1274f2b41667c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0f2228420376f4db7e1274f2b41667c">&#9670;&nbsp;</a></span>main()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int main </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_8cpp_source.xhtml#l00448">448</a> of file <a class="el" href="_execute_network_8cpp_source.xhtml">ExecuteNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00202">ARMNN_LOG</a>, <a class="el" href="_utils_8cpp_source.xhtml#l00018">armnn::ConfigureLogging()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00037">IRuntime::Create()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::Debug</a>, <a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::Info</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00028">ExecuteNetworkParams::m_EnableDelegate</a>, <a class="el" href="_execute_network_program_options_8hpp_source.xhtml#l00044">ProgramOptions::m_ExNetParams</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00035">ExecuteNetworkParams::m_ModelFormat</a>, and <a class="el" href="_execute_network_program_options_8hpp_source.xhtml#l00045">ProgramOptions::m_RuntimeOptions</a>.</p>
<div class="fragment"><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;{</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="comment">// Configures logging for both the ARMNN library and this test program.</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="preprocessor">    #ifdef NDEBUG</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3d">armnn::LogSeverity</a> level = <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::LogSeverity::Info</a>;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="preprocessor">    #else</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3d">armnn::LogSeverity</a> level = <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::LogSeverity::Debug</a>;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa59f7a819c3e29d10ffc41e5c0616872">armnn::ConfigureLogging</a>(<span class="keyword">true</span>, <span class="keyword">true</span>, level);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="comment">// Get ExecuteNetwork parameters and runtime options from command line</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <a class="code" href="struct_program_options.xhtml">ProgramOptions</a> <a class="code" href="struct_program_options.xhtml">ProgramOptions</a>(argc, argv);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="comment">// Create runtime</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    std::shared_ptr&lt;armnn::IRuntime&gt; runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(<a class="code" href="struct_program_options.xhtml">ProgramOptions</a>.<a class="code" href="struct_program_options.xhtml#a521b82f1467d6ede7a11db36f4d0823d">m_RuntimeOptions</a>));</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    std::string modelFormat = <a class="code" href="struct_program_options.xhtml">ProgramOptions</a>.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>.<a class="code" href="struct_execute_network_params.xhtml#a86800ee44cdb3d1bfd169ec4200212d2">m_ModelFormat</a>;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="comment">// Forward to implementation based on the parser type</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;armnn&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    {</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="preprocessor">    #if defined(ARMNN_SERIALIZER)</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <span class="keywordflow">return</span> MainImpl&lt;armnnDeserializer::IDeserializer, float&gt;(<a class="code" href="struct_program_options.xhtml">ProgramOptions</a>.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>, runtime);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="preprocessor">    #else</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with serialization support.&quot;</span>;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    }</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;caffe&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    {</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="preprocessor">    #if defined(ARMNN_CAFFE_PARSER)</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <span class="keywordflow">return</span> MainImpl&lt;armnnCaffeParser::ICaffeParser, float&gt;(<a class="code" href="struct_program_options.xhtml">ProgramOptions</a>.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>, runtime);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="preprocessor">    #else</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with Caffe parser support.&quot;</span>;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    }</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;onnx&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="preprocessor">    #if defined(ARMNN_ONNX_PARSER)</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        <span class="keywordflow">return</span> MainImpl&lt;armnnOnnxParser::IOnnxParser, float&gt;(<a class="code" href="struct_program_options.xhtml">ProgramOptions</a>.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>, runtime);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="preprocessor">    #else</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with Onnx parser support.&quot;</span>;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    }</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;tensorflow&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    {</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="preprocessor">    #if defined(ARMNN_TF_PARSER)</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        <span class="keywordflow">return</span> MainImpl&lt;armnnTfParser::ITfParser, float&gt;(<a class="code" href="struct_program_options.xhtml">ProgramOptions</a>.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>, runtime);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="preprocessor">    #else</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with Tensorflow parser support.&quot;</span>;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    }</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(modelFormat.find(<span class="stringliteral">&quot;tflite&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    {</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="struct_program_options.xhtml">ProgramOptions</a>.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>.<a class="code" href="struct_execute_network_params.xhtml#ad9e5bfa84cf85e3ddf24ae6cb124d3d4">m_EnableDelegate</a>)</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        {</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="preprocessor">        #if defined(ARMNN_TF_LITE_DELEGATE)</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            <span class="keywordflow">return</span> TfLiteDelegateMainImpl(<a class="code" href="struct_program_options.xhtml">ProgramOptions</a>.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>, runtime);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="preprocessor">        #else</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with Arm NN Tensorflow-Lite delegate support.&quot;</span>;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="preprocessor">        #endif</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        }</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="preprocessor">    #if defined(ARMNN_TF_LITE_PARSER)</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <span class="keywordflow">return</span> MainImpl&lt;armnnTfLiteParser::ITfLiteParser, float&gt;(<a class="code" href="struct_program_options.xhtml">ProgramOptions</a>.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>, runtime);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="preprocessor">    #else</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with Tensorflow-Lite parser support.&quot;</span>;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    }</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    {</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Unknown model format: &#39;&quot;</span> &lt;&lt; modelFormat</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                         &lt;&lt; <span class="stringliteral">&quot;&#39;. Please include &#39;caffe&#39;, &#39;tensorflow&#39;, &#39;tflite&#39; or &#39;onnx&#39;&quot;</span>;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    }</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;}</div><div class="ttc" id="struct_program_options_xhtml_a85f77fe8adc087571402b9e204ad77dd"><div class="ttname"><a href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">ProgramOptions::m_ExNetParams</a></div><div class="ttdeci">ExecuteNetworkParams m_ExNetParams</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_program_options_8hpp_source.xhtml#l00044">ExecuteNetworkProgramOptions.hpp:44</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00037">Runtime.cpp:37</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa59f7a819c3e29d10ffc41e5c0616872"><div class="ttname"><a href="namespacearmnn.xhtml#aa59f7a819c3e29d10ffc41e5c0616872">armnn::ConfigureLogging</a></div><div class="ttdeci">void ConfigureLogging(bool printToStandardOutput, bool printToDebugOutput, LogSeverity severity)</div><div class="ttdoc">Configures the logging behaviour of the ARMNN library. </div><div class="ttdef"><b>Definition:</b> <a href="_utils_8cpp_source.xhtml#l00018">Utils.cpp:18</a></div></div>
<div class="ttc" id="struct_program_options_xhtml_a521b82f1467d6ede7a11db36f4d0823d"><div class="ttname"><a href="struct_program_options.xhtml#a521b82f1467d6ede7a11db36f4d0823d">ProgramOptions::m_RuntimeOptions</a></div><div class="ttdeci">armnn::IRuntime::CreationOptions m_RuntimeOptions</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_program_options_8hpp_source.xhtml#l00045">ExecuteNetworkProgramOptions.hpp:45</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00202">Logging.hpp:202</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875"><div class="ttname"><a href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::LogSeverity::Info</a></div></div>
<div class="ttc" id="struct_program_options_xhtml"><div class="ttname"><a href="struct_program_options.xhtml">ProgramOptions</a></div><div class="ttdoc">Holds and parses program options for the ExecuteNetwork application. </div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_program_options_8hpp_source.xhtml#l00021">ExecuteNetworkProgramOptions.hpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a93a3ba385cad27c4774e5fe64c025d3d"><div class="ttname"><a href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3d">armnn::LogSeverity</a></div><div class="ttdeci">LogSeverity</div><div class="ttdef"><b>Definition:</b> <a href="_utils_8hpp_source.xhtml#l00013">Utils.hpp:13</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a86800ee44cdb3d1bfd169ec4200212d2"><div class="ttname"><a href="struct_execute_network_params.xhtml#a86800ee44cdb3d1bfd169ec4200212d2">ExecuteNetworkParams::m_ModelFormat</a></div><div class="ttdeci">std::string m_ModelFormat</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00035">ExecuteNetworkParams.hpp:35</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::LayerType::Debug</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ad9e5bfa84cf85e3ddf24ae6cb124d3d4"><div class="ttname"><a href="struct_execute_network_params.xhtml#ad9e5bfa84cf85e3ddf24ae6cb124d3d4">ExecuteNetworkParams::m_EnableDelegate</a></div><div class="ttdeci">bool m_EnableDelegate</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00028">ExecuteNetworkParams.hpp:28</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afc1c3398fd2de1051edf23a171cfa01b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc1c3398fd2de1051edf23a171cfa01b">&#9670;&nbsp;</a></span>MainImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int MainImpl </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="struct_execute_network_params.xhtml">ExecuteNetworkParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>runtime</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_8cpp_source.xhtml#l00289">289</a> of file <a class="el" href="_execute_network_8cpp_source.xhtml">ExecuteNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00202">ARMNN_LOG</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00599">InferenceModel&lt; IParser, TDataType &gt;::GetInputQuantizationParams()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00505">InferenceModel&lt; IParser, TDataType &gt;::GetInputSize()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00587">InferenceModel&lt; IParser, TDataType &gt;::GetOutputBindingInfos()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00511">InferenceModel&lt; IParser, TDataType &gt;::GetOutputSize()</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00017">ExecuteNetworkParams::m_CachedNetworkFilePath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00101">Params::m_CachedNetworkFilePath</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00018">ExecuteNetworkParams::m_ComputeDevices</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00089">Params::m_ComputeDevices</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00019">ExecuteNetworkParams::m_DequantizeOutput</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00020">ExecuteNetworkParams::m_DynamicBackendsPath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00090">Params::m_DynamicBackendsPath</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00021">ExecuteNetworkParams::m_EnableBf16TurboMode</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00095">Params::m_EnableBf16TurboMode</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00022">ExecuteNetworkParams::m_EnableFastMath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00099">Params::m_EnableFastMath</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00023">ExecuteNetworkParams::m_EnableFp16TurboMode</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00094">Params::m_EnableFp16TurboMode</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00024">ExecuteNetworkParams::m_EnableLayerDetails</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00025">ExecuteNetworkParams::m_EnableProfiling</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00026">ExecuteNetworkParams::m_GenerateTensorData</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00027">ExecuteNetworkParams::m_InferOutputShape</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00098">Params::m_InferOutputShape</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00086">Params::m_InputBindings</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00029">ExecuteNetworkParams::m_InputNames</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00087">Params::m_InputShapes</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00030">ExecuteNetworkParams::m_InputTensorDataFilePaths</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00031">ExecuteNetworkParams::m_InputTensorShapes</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00032">ExecuteNetworkParams::m_InputTypes</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00033">ExecuteNetworkParams::m_IsModelBinary</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00092">Params::m_IsModelBinary</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00034">ExecuteNetworkParams::m_Iterations</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00049">ExecuteNetworkParams::m_MLGOTuningFilePath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00103">Params::m_MLGOTuningFilePath</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00036">ExecuteNetworkParams::m_ModelPath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00085">Params::m_ModelPath</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00037">ExecuteNetworkParams::m_NumberOfThreads</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00102">Params::m_NumberOfThreads</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00088">Params::m_OutputBindings</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00038">ExecuteNetworkParams::m_OutputNames</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00039">ExecuteNetworkParams::m_OutputTensorFiles</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00040">ExecuteNetworkParams::m_OutputTypes</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00041">ExecuteNetworkParams::m_ParseUnsupported</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00097">Params::m_ParseUnsupported</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00042">ExecuteNetworkParams::m_PrintIntermediate</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00096">Params::m_PrintIntermediateLayers</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00043">ExecuteNetworkParams::m_QuantizeInput</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00044">ExecuteNetworkParams::m_SaveCachedNetwork</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00100">Params::m_SaveCachedNetwork</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00045">ExecuteNetworkParams::m_SubgraphId</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00091">Params::m_SubgraphId</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00046">ExecuteNetworkParams::m_ThresholdTime</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00093">Params::m_VisualizePostOptimizationModel</a>, <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00176">PopulateTensorWithData()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00517">InferenceModel&lt; IParser, TDataType &gt;::Run()</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>
<div class="fragment"><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">using</span> <a class="code" href="_model_accuracy_checker_test_8cpp.xhtml#acf933608643ce27b3c68e3431d047d0a">TContainer</a> = mapbox::util::variant&lt;std::vector&lt;float&gt;, std::vector&lt;int&gt;, std::vector&lt;unsigned char&gt;&gt;;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    std::vector&lt;TContainer&gt; inputDataContainers;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="comment">// Creates an InferenceModel, which will parse the model and load it into an IRuntime.</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keyword">typename</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModel&lt;TParser, TDataType&gt;::Params</a> inferenceModelParams;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>                      = params.<a class="code" href="struct_execute_network_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a>                  = params.<a class="code" href="struct_execute_network_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a>;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">m_ComputeDevices</a>                 = params.<a class="code" href="struct_execute_network_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">m_ComputeDevices</a>;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>            = params.<a class="code" href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#acde2af8cbbd224a9f94e509ca538a775">m_PrintIntermediateLayers</a>        = params.<a class="code" href="struct_execute_network_params.xhtml#a5acc5b4076604db15ee13ee19fa623c4">m_PrintIntermediate</a>;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aaae50a6c0f73e4c210c2e4331c439482">m_VisualizePostOptimizationModel</a> = params.<a class="code" href="struct_execute_network_params.xhtml#a7efc68309e76bfefbfa16fe94501b060">m_EnableLayerDetails</a>;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">m_ParseUnsupported</a>               = params.<a class="code" href="struct_execute_network_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">m_ParseUnsupported</a>;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">m_InferOutputShape</a>               = params.<a class="code" href="struct_execute_network_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">m_InferOutputShape</a>;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a66f9597b152215daba3211379dad63d3">m_EnableFastMath</a>                 = params.<a class="code" href="struct_execute_network_params.xhtml#a66f9597b152215daba3211379dad63d3">m_EnableFastMath</a>;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a9a04b8c7f19a84f63125edec509b6d53">m_SaveCachedNetwork</a>              = params.<a class="code" href="struct_execute_network_params.xhtml#a9a04b8c7f19a84f63125edec509b6d53">m_SaveCachedNetwork</a>;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a9f8881646a38f828f92d3354930c4165">m_CachedNetworkFilePath</a>          = params.<a class="code" href="struct_execute_network_params.xhtml#a9f8881646a38f828f92d3354930c4165">m_CachedNetworkFilePath</a>;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#adc650e032e7fce99f15e2bf903e7167b">m_NumberOfThreads</a>                = params.<a class="code" href="struct_execute_network_params.xhtml#adc650e032e7fce99f15e2bf903e7167b">m_NumberOfThreads</a>;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ac609a217f4de4c647422dbb358a5f2ef">m_MLGOTuningFilePath</a>             = params.<a class="code" href="struct_execute_network_params.xhtml#ac609a217f4de4c647422dbb358a5f2ef">m_MLGOTuningFilePath</a>;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> std::string&amp; inputName: params.<a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a>)</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        {</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>.push_back(inputName);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>.size(); ++i)</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        {</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">m_InputShapes</a>.push_back(*params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>[i]);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        }</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> std::string&amp; outputName: params.<a class="code" href="struct_execute_network_params.xhtml#a982d4141ecde3eb220a136610d853df2">m_OutputNames</a>)</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>.push_back(outputName);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d4582aa74998c397bd064ae73745b62">m_SubgraphId</a>          = params.<a class="code" href="struct_execute_network_params.xhtml#a2d4582aa74998c397bd064ae73745b62">m_SubgraphId</a>;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a513151623e8d448951a0b94ad1946fbe">m_EnableFp16TurboMode</a> = params.<a class="code" href="struct_execute_network_params.xhtml#a513151623e8d448951a0b94ad1946fbe">m_EnableFp16TurboMode</a>;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a0b99050baebe1d169392461b3a9be08d">m_EnableBf16TurboMode</a> = params.<a class="code" href="struct_execute_network_params.xhtml#a0b99050baebe1d169392461b3a9be08d">m_EnableBf16TurboMode</a>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <a class="code" href="class_inference_model.xhtml">InferenceModel&lt;TParser, TDataType&gt;</a> model(inferenceModelParams,</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                                                 params.<a class="code" href="struct_execute_network_params.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>,</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                                                 params.<a class="code" href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>,</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                                 runtime);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> numInputs = inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>.size();</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numInputs; ++i)</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        {</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;QuantizationParams&gt;</a> qParams = params.<a class="code" href="struct_execute_network_params.xhtml#a077f6963fc555d9d42f98cf9ed3e7e03">m_QuantizeInput</a> ?</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                                                          armnn::MakeOptional&lt;QuantizationParams&gt;(</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                                                  model.GetInputQuantizationParams()) :</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                                          <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>();</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&gt;</a> dataFile = params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a> ?</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                                    <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>() :</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                                    <a class="code" href="namespacearmnn.xhtml">armnn</a>::<a class="code" href="namespacearmnn.xhtml#a77780137c47f528921f6537447060f05">MakeOptional</a>&lt;<a class="code" href="namespacestd.xhtml">std</a>::string&gt;(</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                                            params.m_InputTensorDataFilePaths[i]);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numElements = model.GetInputSize(i);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>.size() &gt; i &amp;&amp; params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>[i])</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            {</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                <span class="comment">// If the user has provided a tensor shape for the current input,</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                <span class="comment">// override numElements</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                numElements = params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>[i]-&gt;GetNumElements();</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            <a class="code" href="_model_accuracy_checker_test_8cpp.xhtml#acf933608643ce27b3c68e3431d047d0a">TContainer</a> tensorData;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <a class="code" href="_network_execution_utils_8cpp.xhtml#adb958be77ea4f3663e50db710f1edbba">PopulateTensorWithData</a>(tensorData,</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                   numElements,</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                                   params.<a class="code" href="struct_execute_network_params.xhtml#acc7592cbdfe2e70cbc3794fb1e7eaeb9">m_InputTypes</a>[i],</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                   qParams,</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                   dataFile);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            inputDataContainers.push_back(tensorData);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        }</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> numOutputs = inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>.size();</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        std::vector&lt;TContainer&gt; outputDataContainers;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numOutputs; ++i)</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        {</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;float&quot;</span>) == 0)</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            {</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                outputDataContainers.push_back(std::vector&lt;float&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            }</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;int&quot;</span>) == 0)</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            {</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                outputDataContainers.push_back(std::vector&lt;int&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            }</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;qasymm8&quot;</span>) == 0)</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            {</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                outputDataContainers.push_back(std::vector&lt;uint8_t&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            }</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            {</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Unsupported tensor data type \&quot;&quot;</span> &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\&quot;. &quot;</span>;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            }</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        }</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> x = 0; x &lt; params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>; x++)</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        {</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            <span class="comment">// model.Run returns the inference time elapsed in EnqueueWorkload (in milliseconds)</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <span class="keyword">auto</span> inference_duration = model.Run(inputDataContainers, outputDataContainers);</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a>)</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            {</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;The input data was generated, note that the output will not be useful&quot;</span>;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            <span class="comment">// Print output tensors</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>&amp; infosOut = model.GetOutputBindingInfos();</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numOutputs; i++)</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; infoOut = infosOut[i].second;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                <span class="keyword">auto</span> outputTensorFile = params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.empty() ? <span class="stringliteral">&quot;&quot;</span> : params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>[i];</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                <a class="code" href="struct_tensor_printer.xhtml">TensorPrinter</a> printer(inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[i],</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                                      infoOut,</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                                      outputTensorFile,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                      params.<a class="code" href="struct_execute_network_params.xhtml#a85929a48c5e7b16af8f5bc637e45a37f">m_DequantizeOutput</a>);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                mapbox::util::apply_visitor(printer, outputDataContainers[i]);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            }</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;\nInference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                            &lt;&lt; std::fixed &lt;&lt; inference_duration.count() &lt;&lt; <span class="stringliteral">&quot; ms\n&quot;</span>;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            <span class="comment">// If thresholdTime == 0.0 (default), then it hasn&#39;t been supplied at command line</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a> != 0.0)</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            {</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Threshold time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                                &lt;&lt; std::fixed &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a> &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span>;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                <span class="keyword">auto</span> thresholdMinusInference = params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a> - inference_duration.count();</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Threshold time - Inference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                &lt;&lt; std::fixed &lt;&lt; thresholdMinusInference &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                <span class="keywordflow">if</span> (thresholdMinusInference &lt; 0)</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                {</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                    std::string errorMessage = <span class="stringliteral">&quot;Elapsed inference time is greater than provided threshold time.&quot;</span>;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; errorMessage;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                }</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            }</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        }</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    }</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>&amp; e)</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    {</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Armnn Error: &quot;</span> &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    }</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">return</span> EXIT_SUCCESS;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;}</div><div class="ttc" id="struct_execute_network_params_xhtml_acc7592cbdfe2e70cbc3794fb1e7eaeb9"><div class="ttname"><a href="struct_execute_network_params.xhtml#acc7592cbdfe2e70cbc3794fb1e7eaeb9">ExecuteNetworkParams::m_InputTypes</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputTypes</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00032">ExecuteNetworkParams.hpp:32</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a4fa312cf0d60fbd3988a7c76ab8e2980"><div class="ttname"><a href="struct_execute_network_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">ExecuteNetworkParams::m_ModelPath</a></div><div class="ttdeci">std::string m_ModelPath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00036">ExecuteNetworkParams.hpp:36</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a85929a48c5e7b16af8f5bc637e45a37f"><div class="ttname"><a href="struct_execute_network_params.xhtml#a85929a48c5e7b16af8f5bc637e45a37f">ExecuteNetworkParams::m_DequantizeOutput</a></div><div class="ttdeci">bool m_DequantizeOutput</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00019">ExecuteNetworkParams.hpp:19</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ac609a217f4de4c647422dbb358a5f2ef"><div class="ttname"><a href="struct_execute_network_params.xhtml#ac609a217f4de4c647422dbb358a5f2ef">ExecuteNetworkParams::m_MLGOTuningFilePath</a></div><div class="ttdeci">std::string m_MLGOTuningFilePath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00049">ExecuteNetworkParams.hpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a091cda9098c6f03f91f477a22327892d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">ExecuteNetworkParams::m_InputTensorShapes</a></div><div class="ttdeci">std::vector&lt; TensorShapePtr &gt; m_InputTensorShapes</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00031">ExecuteNetworkParams.hpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a513151623e8d448951a0b94ad1946fbe"><div class="ttname"><a href="struct_execute_network_params.xhtml#a513151623e8d448951a0b94ad1946fbe">ExecuteNetworkParams::m_EnableFp16TurboMode</a></div><div class="ttdeci">bool m_EnableFp16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00023">ExecuteNetworkParams.hpp:23</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">ExecuteNetworkParams::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00020">ExecuteNetworkParams.hpp:20</a></div></div>
<div class="ttc" id="_model_accuracy_checker_test_8cpp_xhtml_acf933608643ce27b3c68e3431d047d0a"><div class="ttname"><a href="_model_accuracy_checker_test_8cpp.xhtml#acf933608643ce27b3c68e3431d047d0a">TContainer</a></div><div class="ttdeci">mapbox::util::variant&lt; std::vector&lt; float &gt;, std::vector&lt; int &gt;, std::vector&lt; unsigned char &gt; &gt; TContainer</div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_checker_test_8cpp_source.xhtml#l00055">ModelAccuracyCheckerTest.cpp:55</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">InferenceModelInternal::Params::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00090">InferenceModel.hpp:90</a></div></div>
<div class="ttc" id="class_inference_model_xhtml"><div class="ttname"><a href="class_inference_model.xhtml">InferenceModel</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00332">InferenceModel.hpp:332</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml_abf843cbb29dec939d0731e491bab6f70"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">armnn::Exception::what</a></div><div class="ttdeci">virtual const char * what() const noexcept override</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00032">Exceptions.cpp:32</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00202">Logging.hpp:202</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a513151623e8d448951a0b94ad1946fbe"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a513151623e8d448951a0b94ad1946fbe">InferenceModelInternal::Params::m_EnableFp16TurboMode</a></div><div class="ttdeci">bool m_EnableFp16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00094">InferenceModel.hpp:94</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a5acc5b4076604db15ee13ee19fa623c4"><div class="ttname"><a href="struct_execute_network_params.xhtml#a5acc5b4076604db15ee13ee19fa623c4">ExecuteNetworkParams::m_PrintIntermediate</a></div><div class="ttdeci">bool m_PrintIntermediate</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00042">ExecuteNetworkParams.hpp:42</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_adb958be77ea4f3663e50db710f1edbba"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#adb958be77ea4f3663e50db710f1edbba">PopulateTensorWithData</a></div><div class="ttdeci">void PopulateTensorWithData(TContainer &amp;tensorData, unsigned int numElements, const std::string &amp;dataTypeStr, const armnn::Optional&lt; QuantizationParams &gt; &amp;qParams, const armnn::Optional&lt; std::string &gt; &amp;dataFile)</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00176">NetworkExecutionUtils.cpp:176</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a982d4141ecde3eb220a136610d853df2"><div class="ttname"><a href="struct_execute_network_params.xhtml#a982d4141ecde3eb220a136610d853df2">ExecuteNetworkParams::m_OutputNames</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputNames</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00038">ExecuteNetworkParams.hpp:38</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__software__tools_8dox_source.xhtml#l00006">01_00_software_tools.dox:6</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a5c7f0c083da98e7b6e9ba79d2fcd985d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">ExecuteNetworkParams::m_ParseUnsupported</a></div><div class="ttdeci">bool m_ParseUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00041">ExecuteNetworkParams.hpp:41</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a74d346297c55b516908c541030adc88d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">ExecuteNetworkParams::m_OutputTensorFiles</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputTensorFiles</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00039">ExecuteNetworkParams.hpp:39</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a9a04b8c7f19a84f63125edec509b6d53"><div class="ttname"><a href="struct_execute_network_params.xhtml#a9a04b8c7f19a84f63125edec509b6d53">ExecuteNetworkParams::m_SaveCachedNetwork</a></div><div class="ttdeci">bool m_SaveCachedNetwork</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00044">ExecuteNetworkParams.hpp:44</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_aaae50a6c0f73e4c210c2e4331c439482"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#aaae50a6c0f73e4c210c2e4331c439482">InferenceModelInternal::Params::m_VisualizePostOptimizationModel</a></div><div class="ttdeci">bool m_VisualizePostOptimizationModel</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00093">InferenceModel.hpp:93</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a66f9597b152215daba3211379dad63d3"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a66f9597b152215daba3211379dad63d3">InferenceModelInternal::Params::m_EnableFastMath</a></div><div class="ttdeci">bool m_EnableFastMath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00099">InferenceModel.hpp:99</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a9f8881646a38f828f92d3354930c4165"><div class="ttname"><a href="struct_execute_network_params.xhtml#a9f8881646a38f828f92d3354930c4165">ExecuteNetworkParams::m_CachedNetworkFilePath</a></div><div class="ttdeci">std::string m_CachedNetworkFilePath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00017">ExecuteNetworkParams.hpp:17</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a2d4582aa74998c397bd064ae73745b62"><div class="ttname"><a href="struct_execute_network_params.xhtml#a2d4582aa74998c397bd064ae73745b62">ExecuteNetworkParams::m_SubgraphId</a></div><div class="ttdeci">size_t m_SubgraphId</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00045">ExecuteNetworkParams.hpp:45</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a0b99050baebe1d169392461b3a9be08d"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a0b99050baebe1d169392461b3a9be08d">InferenceModelInternal::Params::m_EnableBf16TurboMode</a></div><div class="ttdeci">bool m_EnableBf16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00095">InferenceModel.hpp:95</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_aad2ac35d4cb83ee4da9fad5fbcb907e0"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">InferenceModelInternal::Params::m_InputBindings</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputBindings</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00086">InferenceModel.hpp:86</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a2d54e6252c1c9a0e29f7706ba03b2b74"><div class="ttname"><a href="struct_execute_network_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">ExecuteNetworkParams::m_ComputeDevices</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; m_ComputeDevices</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00018">ExecuteNetworkParams.hpp:18</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a810addfa426b5ac1476035dedee7cda5"><div class="ttname"><a href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">ExecuteNetworkParams::m_OutputTypes</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputTypes</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00040">ExecuteNetworkParams.hpp:40</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a6bf2f586c403977d31c7d32d371918cf"><div class="ttname"><a href="struct_execute_network_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">ExecuteNetworkParams::m_IsModelBinary</a></div><div class="ttdeci">bool m_IsModelBinary</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00033">ExecuteNetworkParams.hpp:33</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ad69aa6b4967ce55ee4a915c52c71bf2e"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">InferenceModelInternal::Params::m_InputShapes</a></div><div class="ttdeci">std::vector&lt; armnn::TensorShape &gt; m_InputShapes</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00087">InferenceModel.hpp:87</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00147">BackendId.hpp:147</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a9a04b8c7f19a84f63125edec509b6d53"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a9a04b8c7f19a84f63125edec509b6d53">InferenceModelInternal::Params::m_SaveCachedNetwork</a></div><div class="ttdeci">bool m_SaveCachedNetwork</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00100">InferenceModel.hpp:100</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a6e4eff6a5f40cb026ea76d3c13c96341"><div class="ttname"><a href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">ExecuteNetworkParams::m_Iterations</a></div><div class="ttdeci">size_t m_Iterations</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00034">ExecuteNetworkParams.hpp:34</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a99c7360a4d4b248b3f10607bc5d2fe7b"><div class="ttname"><a href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">ExecuteNetworkParams::m_GenerateTensorData</a></div><div class="ttdeci">bool m_GenerateTensorData</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00026">ExecuteNetworkParams.hpp:26</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_abeacb4ed1ca9256ee0e8aea73185a0cc"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">InferenceModelInternal::Params::m_OutputBindings</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputBindings</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00088">InferenceModel.hpp:88</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a2d54e6252c1c9a0e29f7706ba03b2b74"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">InferenceModelInternal::Params::m_ComputeDevices</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; m_ComputeDevices</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00089">InferenceModel.hpp:89</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_adc650e032e7fce99f15e2bf903e7167b"><div class="ttname"><a href="struct_execute_network_params.xhtml#adc650e032e7fce99f15e2bf903e7167b">ExecuteNetworkParams::m_NumberOfThreads</a></div><div class="ttdeci">unsigned int m_NumberOfThreads</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00037">ExecuteNetworkParams.hpp:37</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a318999172ae5197f56326b12d29104b7"><div class="ttname"><a href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">ExecuteNetworkParams::m_ThresholdTime</a></div><div class="ttdeci">double m_ThresholdTime</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00046">ExecuteNetworkParams.hpp:46</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_aaf3c7f286030842a31025309ab6a8329"><div class="ttname"><a href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">ExecuteNetworkParams::m_InputNames</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputNames</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00029">ExecuteNetworkParams.hpp:29</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a5c7f0c083da98e7b6e9ba79d2fcd985d"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">InferenceModelInternal::Params::m_ParseUnsupported</a></div><div class="ttdeci">bool m_ParseUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00097">InferenceModel.hpp:97</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a66f9597b152215daba3211379dad63d3"><div class="ttname"><a href="struct_execute_network_params.xhtml#a66f9597b152215daba3211379dad63d3">ExecuteNetworkParams::m_EnableFastMath</a></div><div class="ttdeci">bool m_EnableFastMath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00022">ExecuteNetworkParams.hpp:22</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a0b99050baebe1d169392461b3a9be08d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a0b99050baebe1d169392461b3a9be08d">ExecuteNetworkParams::m_EnableBf16TurboMode</a></div><div class="ttdeci">bool m_EnableBf16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00021">ExecuteNetworkParams.hpp:21</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a2a245a63e87f363df491ad8c35be54c5"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">InferenceModelInternal::Params::m_InferOutputShape</a></div><div class="ttdeci">bool m_InferOutputShape</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00098">InferenceModel.hpp:98</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_acde2af8cbbd224a9f94e509ca538a775"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#acde2af8cbbd224a9f94e509ca538a775">InferenceModelInternal::Params::m_PrintIntermediateLayers</a></div><div class="ttdeci">bool m_PrintIntermediateLayers</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00096">InferenceModel.hpp:96</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a9f8881646a38f828f92d3354930c4165"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a9f8881646a38f828f92d3354930c4165">InferenceModelInternal::Params::m_CachedNetworkFilePath</a></div><div class="ttdeci">std::string m_CachedNetworkFilePath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00101">InferenceModel.hpp:101</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a7efc68309e76bfefbfa16fe94501b060"><div class="ttname"><a href="struct_execute_network_params.xhtml#a7efc68309e76bfefbfa16fe94501b060">ExecuteNetworkParams::m_EnableLayerDetails</a></div><div class="ttdeci">bool m_EnableLayerDetails</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00024">ExecuteNetworkParams.hpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ac609a217f4de4c647422dbb358a5f2ef"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ac609a217f4de4c647422dbb358a5f2ef">InferenceModelInternal::Params::m_MLGOTuningFilePath</a></div><div class="ttdeci">std::string m_MLGOTuningFilePath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00103">InferenceModel.hpp:103</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a77780137c47f528921f6537447060f05"><div class="ttname"><a href="namespacearmnn.xhtml#a77780137c47f528921f6537447060f05">armnn::MakeOptional</a></div><div class="ttdeci">Optional&lt; T &gt; MakeOptional(Args &amp;&amp;... args)</div><div class="ttdoc">Utility template that constructs an object of type T in-place and wraps it inside an Optional&lt;T&gt; obje...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00305">Optional.hpp:305</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_adc650e032e7fce99f15e2bf903e7167b"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#adc650e032e7fce99f15e2bf903e7167b">InferenceModelInternal::Params::m_NumberOfThreads</a></div><div class="ttdeci">unsigned int m_NumberOfThreads</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00102">InferenceModel.hpp:102</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a4fa312cf0d60fbd3988a7c76ab8e2980"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">InferenceModelInternal::Params::m_ModelPath</a></div><div class="ttdeci">std::string m_ModelPath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00085">InferenceModel.hpp:85</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a6bf2f586c403977d31c7d32d371918cf"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">InferenceModelInternal::Params::m_IsModelBinary</a></div><div class="ttdeci">bool m_IsModelBinary</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00092">InferenceModel.hpp:92</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a2d4582aa74998c397bd064ae73745b62"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a2d4582aa74998c397bd064ae73745b62">InferenceModelInternal::Params::m_SubgraphId</a></div><div class="ttdeci">size_t m_SubgraphId</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00091">InferenceModel.hpp:91</a></div></div>
<div class="ttc" id="struct_tensor_printer_xhtml"><div class="ttname"><a href="struct_tensor_printer.xhtml">TensorPrinter</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00024">NetworkExecutionUtils.hpp:24</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a077f6963fc555d9d42f98cf9ed3e7e03"><div class="ttname"><a href="struct_execute_network_params.xhtml#a077f6963fc555d9d42f98cf9ed3e7e03">ExecuteNetworkParams::m_QuantizeInput</a></div><div class="ttdeci">bool m_QuantizeInput</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00043">ExecuteNetworkParams.hpp:43</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00083">InferenceModel.hpp:83</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a2a245a63e87f363df491ad8c35be54c5"><div class="ttname"><a href="struct_execute_network_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">ExecuteNetworkParams::m_InferOutputShape</a></div><div class="ttdeci">bool m_InferOutputShape</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00027">ExecuteNetworkParams.hpp:27</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="struct_execute_network_params.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">ExecuteNetworkParams::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00025">ExecuteNetworkParams.hpp:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_3502d64799b714c597b8fa7662494b65.xhtml">ExecuteNetwork</a></li><li class="navelem"><a class="el" href="_execute_network_8cpp.xhtml">ExecuteNetwork.cpp</a></li>
    <li class="footer">Generated on Thu Feb 25 2021 17:27:56 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
