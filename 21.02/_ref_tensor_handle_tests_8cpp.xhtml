<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/test/RefTensorHandleTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_ref_tensor_handle_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">RefTensorHandleTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="_ref_tensor_handle_8hpp_source.xhtml">reference/RefTensorHandle.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_ref_tensor_handle_factory_8hpp_source.xhtml">reference/RefTensorHandleFactory.hpp</a>&gt;</code><br />
<code>#include &lt;boost/test/unit_test.hpp&gt;</code><br />
</div>
<p><a href="_ref_tensor_handle_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a647dee5f41c50b98919f2c0b4465262f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_tensor_handle_tests_8cpp.xhtml#a647dee5f41c50b98919f2c0b4465262f">BOOST_AUTO_TEST_CASE</a> (AcquireAndRelease)</td></tr>
<tr class="separator:a647dee5f41c50b98919f2c0b4465262f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6c4edca11ec449b198706b07f9eff92"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_tensor_handle_tests_8cpp.xhtml#ab6c4edca11ec449b198706b07f9eff92">BOOST_AUTO_TEST_CASE</a> (RefTensorHandleFactoryMemoryManaged)</td></tr>
<tr class="separator:ab6c4edca11ec449b198706b07f9eff92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad837a5e64b1dd68b93387c747ae07b52"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_tensor_handle_tests_8cpp.xhtml#ad837a5e64b1dd68b93387c747ae07b52">BOOST_AUTO_TEST_CASE</a> (RefTensorHandleFactoryImport)</td></tr>
<tr class="separator:ad837a5e64b1dd68b93387c747ae07b52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37d7a63e7f36891bfad4ba7a2a37fb44"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_tensor_handle_tests_8cpp.xhtml#a37d7a63e7f36891bfad4ba7a2a37fb44">BOOST_AUTO_TEST_CASE</a> (RefTensorHandleImport)</td></tr>
<tr class="separator:a37d7a63e7f36891bfad4ba7a2a37fb44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a607dc988355e77983d971e8491929fa2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_tensor_handle_tests_8cpp.xhtml#a607dc988355e77983d971e8491929fa2">BOOST_AUTO_TEST_CASE</a> (RefTensorHandleGetCapabilities)</td></tr>
<tr class="separator:a607dc988355e77983d971e8491929fa2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5498557f0aca1731f13a086f35768c6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_tensor_handle_tests_8cpp.xhtml#ac5498557f0aca1731f13a086f35768c6">BOOST_AUTO_TEST_CASE</a> (RefTensorHandleSupportsInPlaceComputation)</td></tr>
<tr class="separator:ac5498557f0aca1731f13a086f35768c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac36c4ff56b84c0682bc93d747b127983"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_tensor_handle_tests_8cpp.xhtml#ac36c4ff56b84c0682bc93d747b127983">BOOST_AUTO_TEST_CASE</a> (CheckSourceType)</td></tr>
<tr class="separator:ac36c4ff56b84c0682bc93d747b127983"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2d70b82fa31164a8dd917932a406463"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_tensor_handle_tests_8cpp.xhtml#aa2d70b82fa31164a8dd917932a406463">BOOST_AUTO_TEST_CASE</a> (ReusePointer)</td></tr>
<tr class="separator:aa2d70b82fa31164a8dd917932a406463"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b3429b1e6cbffa9647b5488af797d0d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_tensor_handle_tests_8cpp.xhtml#a7b3429b1e6cbffa9647b5488af797d0d">BOOST_AUTO_TEST_CASE</a> (MisalignedPointer)</td></tr>
<tr class="separator:a7b3429b1e6cbffa9647b5488af797d0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a647dee5f41c50b98919f2c0b4465262f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a647dee5f41c50b98919f2c0b4465262f">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[1/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">AcquireAndRelease&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml#l00013">13</a> of file <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml">RefTensorHandleTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>
<div class="fragment"><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    std::shared_ptr&lt;RefMemoryManager&gt; memoryManager = std::make_shared&lt;RefMemoryManager&gt;();</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>({ 1, 1, 1, 1 }, DataType::Float32);</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <a class="code" href="classarmnn_1_1_ref_tensor_handle.xhtml">RefTensorHandle</a> handle(info, memoryManager);</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    handle.Manage();</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    handle.Allocate();</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    memoryManager-&gt;Acquire();</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    {</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <span class="keywordtype">float</span>* buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span>*<span class="keyword">&gt;</span>(handle.Map());</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        BOOST_CHECK(buffer != <span class="keyword">nullptr</span>); <span class="comment">// Yields a valid pointer</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        buffer[0] = 2.5f;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        BOOST_CHECK(buffer[0] == 2.5f); <span class="comment">// Memory is writable and readable</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    }</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    memoryManager-&gt;Release();</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    memoryManager-&gt;Acquire();</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordtype">float</span>* buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span>*<span class="keyword">&gt;</span>(handle.Map());</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        BOOST_CHECK(buffer != <span class="keyword">nullptr</span>); <span class="comment">// Yields a valid pointer</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        buffer[0] = 3.5f;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        BOOST_CHECK(buffer[0] == 3.5f); <span class="comment">// Memory is writable and readable</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    memoryManager-&gt;Release();</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_ref_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_ref_tensor_handle.xhtml">armnn::RefTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_ref_tensor_handle_8hpp_source.xhtml#l00015">RefTensorHandle.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab6c4edca11ec449b198706b07f9eff92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6c4edca11ec449b198706b07f9eff92">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[2/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefTensorHandleFactoryMemoryManaged&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml">RefTensorHandleTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="namespacearmnn.xhtml#a0fc99721e27eb20ecd0ea85a3cc8b488a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    std::shared_ptr&lt;RefMemoryManager&gt; memoryManager = std::make_shared&lt;RefMemoryManager&gt;();</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="classarmnn_1_1_ref_tensor_handle_factory.xhtml">RefTensorHandleFactory</a> handleFactory(memoryManager);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>({ 1, 1, 2, 1 }, DataType::Float32);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="comment">// create TensorHandle with memory managed</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">auto</span> handle = handleFactory.CreateTensorHandle(info, <span class="keyword">true</span>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    handle-&gt;Manage();</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    handle-&gt;Allocate();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    memoryManager-&gt;Acquire();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordtype">float</span>* buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span>*<span class="keyword">&gt;</span>(handle-&gt;Map());</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        BOOST_CHECK(buffer != <span class="keyword">nullptr</span>); <span class="comment">// Yields a valid pointer</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        buffer[0] = 1.5f;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        buffer[1] = 2.5f;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        BOOST_CHECK(buffer[0] == 1.5f); <span class="comment">// Memory is writable and readable</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        BOOST_CHECK(buffer[1] == 2.5f); <span class="comment">// Memory is writable and readable</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    memoryManager-&gt;Release();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    memoryManager-&gt;Acquire();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordtype">float</span>* buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span>*<span class="keyword">&gt;</span>(handle-&gt;Map());</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        BOOST_CHECK(buffer != <span class="keyword">nullptr</span>); <span class="comment">// Yields a valid pointer</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        buffer[0] = 3.5f;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        buffer[1] = 4.5f;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        BOOST_CHECK(buffer[0] == 3.5f); <span class="comment">// Memory is writable and readable</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        BOOST_CHECK(buffer[1] == 4.5f); <span class="comment">// Memory is writable and readable</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    memoryManager-&gt;Release();</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordtype">float</span> testPtr[2] = { 2.5f, 5.5f };</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">// Cannot import as import is disabled</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    BOOST_CHECK(!handle-&gt;Import(static_cast&lt;void*&gt;(testPtr), MemorySource::Malloc));</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_tensor_handle_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_ref_tensor_handle_factory.xhtml">armnn::RefTensorHandleFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_ref_tensor_handle_factory_8hpp_source.xhtml#l00017">RefTensorHandleFactory.hpp:17</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad837a5e64b1dd68b93387c747ae07b52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad837a5e64b1dd68b93387c747ae07b52">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[3/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefTensorHandleFactoryImport&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml#l00087">87</a> of file <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml">RefTensorHandleTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="namespacearmnn.xhtml#a0fc99721e27eb20ecd0ea85a3cc8b488a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    std::shared_ptr&lt;RefMemoryManager&gt; memoryManager = std::make_shared&lt;RefMemoryManager&gt;();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="classarmnn_1_1_ref_tensor_handle_factory.xhtml">RefTensorHandleFactory</a> handleFactory(memoryManager);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>({ 1, 1, 2, 1 }, DataType::Float32);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// create TensorHandle without memory managed</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">auto</span> handle = handleFactory.CreateTensorHandle(info, <span class="keyword">false</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    handle-&gt;Manage();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    handle-&gt;Allocate();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    memoryManager-&gt;Acquire();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// No buffer allocated when import is enabled</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    BOOST_CHECK_THROW(handle-&gt;Map(), <a class="code" href="classarmnn_1_1_null_pointer_exception.xhtml">armnn::NullPointerException</a>);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordtype">float</span> testPtr[2] = { 2.5f, 5.5f };</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="comment">// Correctly import</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    BOOST_CHECK(handle-&gt;Import(static_cast&lt;void*&gt;(testPtr), MemorySource::Malloc));</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordtype">float</span>* buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span>*<span class="keyword">&gt;</span>(handle-&gt;Map());</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    BOOST_CHECK(buffer != <span class="keyword">nullptr</span>); <span class="comment">// Yields a valid pointer after import</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    BOOST_CHECK(buffer == testPtr); <span class="comment">// buffer is pointing to testPtr</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// Memory is writable and readable with correct value</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    BOOST_CHECK(buffer[0] == 2.5f);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    BOOST_CHECK(buffer[1] == 5.5f);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    buffer[0] = 3.5f;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    buffer[1] = 10.0f;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    BOOST_CHECK(buffer[0] == 3.5f);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    BOOST_CHECK(buffer[1] == 10.0f);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    memoryManager-&gt;Release();</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_null_pointer_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_null_pointer_exception.xhtml">armnn::NullPointerException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00152">Exceptions.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_tensor_handle_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_ref_tensor_handle_factory.xhtml">armnn::RefTensorHandleFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_ref_tensor_handle_factory_8hpp_source.xhtml#l00017">RefTensorHandleFactory.hpp:17</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a37d7a63e7f36891bfad4ba7a2a37fb44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37d7a63e7f36891bfad4ba7a2a37fb44">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[4/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefTensorHandleImport&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml#l00118">118</a> of file <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml">RefTensorHandleTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="namespacearmnn.xhtml#a0fc99721e27eb20ecd0ea85a3cc8b488a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>.</p>
<div class="fragment"><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>({ 1, 1, 2, 1 }, DataType::Float32);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="classarmnn_1_1_ref_tensor_handle.xhtml">RefTensorHandle</a> handle(info, static_cast&lt;unsigned int&gt;(MemorySource::Malloc));</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    handle.Manage();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    handle.Allocate();</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// No buffer allocated when import is enabled</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    BOOST_CHECK_THROW(handle.Map(), <a class="code" href="classarmnn_1_1_null_pointer_exception.xhtml">armnn::NullPointerException</a>);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">float</span> testPtr[2] = { 2.5f, 5.5f };</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">// Correctly import</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    BOOST_CHECK(handle.Import(static_cast&lt;void*&gt;(testPtr), MemorySource::Malloc));</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordtype">float</span>* buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span>*<span class="keyword">&gt;</span>(handle.Map());</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    BOOST_CHECK(buffer != <span class="keyword">nullptr</span>); <span class="comment">// Yields a valid pointer after import</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    BOOST_CHECK(buffer == testPtr); <span class="comment">// buffer is pointing to testPtr</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// Memory is writable and readable with correct value</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    BOOST_CHECK(buffer[0] == 2.5f);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    BOOST_CHECK(buffer[1] == 5.5f);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    buffer[0] = 3.5f;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    buffer[1] = 10.0f;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    BOOST_CHECK(buffer[0] == 3.5f);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    BOOST_CHECK(buffer[1] == 10.0f);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_ref_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_ref_tensor_handle.xhtml">armnn::RefTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_ref_tensor_handle_8hpp_source.xhtml#l00015">RefTensorHandle.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_null_pointer_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_null_pointer_exception.xhtml">armnn::NullPointerException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00152">Exceptions.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a607dc988355e77983d971e8491929fa2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a607dc988355e77983d971e8491929fa2">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[5/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefTensorHandleGetCapabilities&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml#l00144">144</a> of file <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml">RefTensorHandleTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00510">INetwork::Create()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, and <a class="el" href="namespacearmnn.xhtml#a10c50bc964cc8cc559eebcd7df5a8af3aa47abd1077ef632a38ada05b6edbf389">armnn::PaddingRequired</a>.</p>
<div class="fragment"><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    std::shared_ptr&lt;RefMemoryManager&gt; memoryManager = std::make_shared&lt;RefMemoryManager&gt;();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="classarmnn_1_1_ref_tensor_handle_factory.xhtml">RefTensorHandleFactory</a> handleFactory(memoryManager);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// Builds up the structure of the network.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net(INetwork::Create());</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input = net-&gt;AddInputLayer(0);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output = net-&gt;AddOutputLayer(0);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    std::vector&lt;Capability&gt; capabilities = handleFactory.GetCapabilities(input,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                                                         output,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                                                         CapabilityClass::PaddingRequired);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    BOOST_CHECK(capabilities.empty());</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00062">INetwork.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_tensor_handle_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_ref_tensor_handle_factory.xhtml">armnn::RefTensorHandleFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_ref_tensor_handle_factory_8hpp_source.xhtml#l00017">RefTensorHandleFactory.hpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00173">INetwork.hpp:173</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac5498557f0aca1731f13a086f35768c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5498557f0aca1731f13a086f35768c6">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[6/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RefTensorHandleSupportsInPlaceComputation&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml#l00161">161</a> of file <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml">RefTensorHandleTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>.</p>
<div class="fragment"><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    std::shared_ptr&lt;RefMemoryManager&gt; memoryManager = std::make_shared&lt;RefMemoryManager&gt;();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="classarmnn_1_1_ref_tensor_handle_factory.xhtml">RefTensorHandleFactory</a> handleFactory(memoryManager);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="comment">// RefTensorHandleFactory does not support InPlaceComputation</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(!(handleFactory.SupportsInPlaceComputation()));</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}</div><div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_tensor_handle_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_ref_tensor_handle_factory.xhtml">armnn::RefTensorHandleFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_ref_tensor_handle_factory_8hpp_source.xhtml#l00017">RefTensorHandleFactory.hpp:17</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac36c4ff56b84c0682bc93d747b127983"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac36c4ff56b84c0682bc93d747b127983">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[7/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CheckSourceType&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml#l00172">172</a> of file <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml">RefTensorHandleTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a0fc99721e27eb20ecd0ea85a3cc8b488a966e13d8aabbff3966a5cd28d67b4846">armnn::DmaBuf</a>, <a class="el" href="namespacearmnn.xhtml#a0fc99721e27eb20ecd0ea85a3cc8b488a7f9067c59dd34aca0ad09a7f283ed1f8">armnn::DmaBufProtected</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="namespacearmnn.xhtml#a0fc99721e27eb20ecd0ea85a3cc8b488a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>.</p>
<div class="fragment"><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>({1}, DataType::Float32);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="classarmnn_1_1_ref_tensor_handle.xhtml">RefTensorHandle</a> handle(info, static_cast&lt;unsigned int&gt;(MemorySource::Malloc));</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">int</span>* testPtr = <span class="keyword">new</span> int(4);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">// Not supported</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    BOOST_CHECK(!handle.Import(static_cast&lt;void *&gt;(testPtr), MemorySource::DmaBuf));</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="comment">// Not supported</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    BOOST_CHECK(!handle.Import(static_cast&lt;void *&gt;(testPtr), MemorySource::DmaBufProtected));</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="comment">// Supported</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    BOOST_CHECK(handle.Import(static_cast&lt;void *&gt;(testPtr), MemorySource::Malloc));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">delete</span> testPtr;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_ref_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_ref_tensor_handle.xhtml">armnn::RefTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_ref_tensor_handle_8hpp_source.xhtml#l00015">RefTensorHandle.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa2d70b82fa31164a8dd917932a406463"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2d70b82fa31164a8dd917932a406463">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[8/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">ReusePointer&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml#l00191">191</a> of file <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml">RefTensorHandleTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="namespacearmnn.xhtml#a0fc99721e27eb20ecd0ea85a3cc8b488a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>.</p>
<div class="fragment"><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>({1}, DataType::Float32);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="classarmnn_1_1_ref_tensor_handle.xhtml">RefTensorHandle</a> handle(info, static_cast&lt;unsigned int&gt;(MemorySource::Malloc));</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordtype">int</span>* testPtr = <span class="keyword">new</span> int(4);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    handle.Import(static_cast&lt;void *&gt;(testPtr), MemorySource::Malloc);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="comment">// Reusing previously Imported pointer</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    BOOST_CHECK(handle.Import(static_cast&lt;void *&gt;(testPtr), MemorySource::Malloc));</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">delete</span> testPtr;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_ref_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_ref_tensor_handle.xhtml">armnn::RefTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_ref_tensor_handle_8hpp_source.xhtml#l00015">RefTensorHandle.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7b3429b1e6cbffa9647b5488af797d0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b3429b1e6cbffa9647b5488af797d0d">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[9/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">MisalignedPointer&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml#l00206">206</a> of file <a class="el" href="_ref_tensor_handle_tests_8cpp_source.xhtml">RefTensorHandleTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="namespacearmnn.xhtml#a0fc99721e27eb20ecd0ea85a3cc8b488a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>.</p>
<div class="fragment"><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;{</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>({2}, DataType::Float32);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="classarmnn_1_1_ref_tensor_handle.xhtml">RefTensorHandle</a> handle(info, static_cast&lt;unsigned int&gt;(MemorySource::Malloc));</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">// Allocate a 2 int array</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordtype">int</span>* testPtr = <span class="keyword">new</span> <span class="keywordtype">int</span>[2];</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">// Increment pointer by 1 byte</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordtype">void</span>* misalignedPtr = <span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span>*<span class="keyword">&gt;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(testPtr) + 1);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    BOOST_CHECK(!handle.Import(misalignedPtr, MemorySource::Malloc));</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">delete</span>[] testPtr;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_ref_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_ref_tensor_handle.xhtml">armnn::RefTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_ref_tensor_handle_8hpp_source.xhtml#l00015">RefTensorHandle.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="dir_820f114a135ae891c13c0cafd2ecf138.xhtml">test</a></li><li class="navelem"><a class="el" href="_ref_tensor_handle_tests_8cpp.xhtml">RefTensorHandleTests.cpp</a></li>
    <li class="footer">Generated on Thu Feb 25 2021 17:27:56 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
