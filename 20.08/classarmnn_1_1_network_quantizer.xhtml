<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: NetworkQuantizer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_network_quantizer.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_network_quantizer-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NetworkQuantizer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_network_quantizer_8hpp_source.xhtml">NetworkQuantizer.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for NetworkQuantizer:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_network_quantizer.png" usemap="#NetworkQuantizer_map" alt=""/>
  <map id="NetworkQuantizer_map" name="NetworkQuantizer_map">
<area href="classarmnn_1_1_i_network_quantizer.xhtml" title="Quantizer class Quantizes a float32 InputNetwork. " alt="INetworkQuantizer" shape="rect" coords="0,0,116,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad1d6bb17a39fec4850c40eadf5f537a4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_quantizer.xhtml#ad1d6bb17a39fec4850c40eadf5f537a4">NetworkQuantizer</a> (<a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *inputNetwork, const <a class="el" href="structarmnn_1_1_quantizer_options.xhtml">QuantizerOptions</a> &amp;options)</td></tr>
<tr class="separator:ad1d6bb17a39fec4850c40eadf5f537a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0de9803a30020e30ec8c9c0ba8592dc6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_quantizer.xhtml#a0de9803a30020e30ec8c9c0ba8592dc6">OverrideInputRange</a> (<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerId, float min, float max) override</td></tr>
<tr class="memdesc:a0de9803a30020e30ec8c9c0ba8592dc6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overrides the default quantization values for the input layer with the given id.  <a href="#a0de9803a30020e30ec8c9c0ba8592dc6">More...</a><br /></td></tr>
<tr class="separator:a0de9803a30020e30ec8c9c0ba8592dc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acff529f0d8ffed99123e3a729942be12"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_quantizer.xhtml#acff529f0d8ffed99123e3a729942be12">Refine</a> (const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;inputTensors) override</td></tr>
<tr class="memdesc:acff529f0d8ffed99123e3a729942be12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Refine input network with a set of refinement data for specified LayerBindingId.  <a href="#acff529f0d8ffed99123e3a729942be12">More...</a><br /></td></tr>
<tr class="separator:acff529f0d8ffed99123e3a729942be12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3618dd686c52c451000bea3e20931ac8"><td class="memItemLeft" align="right" valign="top">std::pair&lt; float, float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_quantizer.xhtml#a3618dd686c52c451000bea3e20931ac8">GetMinMaxRange</a> (<a class="el" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a> guid, unsigned int idx)</td></tr>
<tr class="separator:a3618dd686c52c451000bea3e20931ac8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8768a9dd173e985bfc0c72338662d631"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_quantizer.xhtml#a8768a9dd173e985bfc0c72338662d631">ExportNetwork</a> () override</td></tr>
<tr class="memdesc:a8768a9dd173e985bfc0c72338662d631"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract final quantized network.  <a href="#a8768a9dd173e985bfc0c72338662d631">More...</a><br /></td></tr>
<tr class="separator:a8768a9dd173e985bfc0c72338662d631"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_methods_classarmnn_1_1_i_network_quantizer"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarmnn_1_1_i_network_quantizer')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_network_quantizer.xhtml">INetworkQuantizer</a></td></tr>
<tr class="memitem:ab8c40aedacd27ec921e53f3a022e6a63 inherit pub_static_methods_classarmnn_1_1_i_network_quantizer"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_1_1_i_network_quantizer.xhtml">INetworkQuantizer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network_quantizer.xhtml#ab8c40aedacd27ec921e53f3a022e6a63">CreateRaw</a> (<a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *inputNetwork, const <a class="el" href="structarmnn_1_1_quantizer_options.xhtml">QuantizerOptions</a> &amp;options=<a class="el" href="structarmnn_1_1_quantizer_options.xhtml">QuantizerOptions</a>())</td></tr>
<tr class="memdesc:ab8c40aedacd27ec921e53f3a022e6a63 inherit pub_static_methods_classarmnn_1_1_i_network_quantizer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create Quantizer object and return raw pointer.  <a href="classarmnn_1_1_i_network_quantizer.xhtml#ab8c40aedacd27ec921e53f3a022e6a63">More...</a><br /></td></tr>
<tr class="separator:ab8c40aedacd27ec921e53f3a022e6a63 inherit pub_static_methods_classarmnn_1_1_i_network_quantizer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a4d01d9351c02a703740290f226441f inherit pub_static_methods_classarmnn_1_1_i_network_quantizer"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearmnn.xhtml#a41119e261eec9343888d2ceab1e4999a">INetworkQuantizerPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network_quantizer.xhtml#a3a4d01d9351c02a703740290f226441f">Create</a> (<a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *inputNetwork, const <a class="el" href="structarmnn_1_1_quantizer_options.xhtml">QuantizerOptions</a> &amp;options=<a class="el" href="structarmnn_1_1_quantizer_options.xhtml">QuantizerOptions</a>())</td></tr>
<tr class="memdesc:a3a4d01d9351c02a703740290f226441f inherit pub_static_methods_classarmnn_1_1_i_network_quantizer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create Quantizer object wrapped in unique_ptr.  <a href="classarmnn_1_1_i_network_quantizer.xhtml#a3a4d01d9351c02a703740290f226441f">More...</a><br /></td></tr>
<tr class="separator:a3a4d01d9351c02a703740290f226441f inherit pub_static_methods_classarmnn_1_1_i_network_quantizer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1ad5b83dc4d8bed64c29adf21c8958a inherit pub_static_methods_classarmnn_1_1_i_network_quantizer"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network_quantizer.xhtml#ad1ad5b83dc4d8bed64c29adf21c8958a">Destroy</a> (<a class="el" href="classarmnn_1_1_i_network_quantizer.xhtml">INetworkQuantizer</a> *quantizer)</td></tr>
<tr class="memdesc:ad1ad5b83dc4d8bed64c29adf21c8958a inherit pub_static_methods_classarmnn_1_1_i_network_quantizer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroy Quantizer object.  <a href="classarmnn_1_1_i_network_quantizer.xhtml#ad1ad5b83dc4d8bed64c29adf21c8958a">More...</a><br /></td></tr>
<tr class="separator:ad1ad5b83dc4d8bed64c29adf21c8958a inherit pub_static_methods_classarmnn_1_1_i_network_quantizer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_network_quantizer"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_network_quantizer')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_network_quantizer.xhtml">INetworkQuantizer</a></td></tr>
<tr class="memitem:a6b376fc4dcd2e2b3f5c1125a9c460a12 inherit pro_methods_classarmnn_1_1_i_network_quantizer"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network_quantizer.xhtml#a6b376fc4dcd2e2b3f5c1125a9c460a12">~INetworkQuantizer</a> ()</td></tr>
<tr class="separator:a6b376fc4dcd2e2b3f5c1125a9c460a12 inherit pro_methods_classarmnn_1_1_i_network_quantizer"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_network_quantizer_8hpp_source.xhtml#l00020">20</a> of file <a class="el" href="_network_quantizer_8hpp_source.xhtml">NetworkQuantizer.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad1d6bb17a39fec4850c40eadf5f537a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1d6bb17a39fec4850c40eadf5f537a4">&#9670;&nbsp;</a></span>NetworkQuantizer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_network_quantizer.xhtml">NetworkQuantizer</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *&#160;</td>
          <td class="paramname"><em>inputNetwork</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantizer_options.xhtml">QuantizerOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>options</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_quantizer_8hpp_source.xhtml#l00023">23</a> of file <a class="el" href="_network_quantizer_8hpp_source.xhtml">NetworkQuantizer.hpp</a>.</p>

<p class="reference">References <a class="el" href="_network_quantizer_8cpp_source.xhtml#l00051">NetworkQuantizer::OverrideInputRange()</a>, and <a class="el" href="_network_quantizer_8cpp_source.xhtml#l00061">NetworkQuantizer::Refine()</a>.</p>
<div class="fragment"><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    : m_InputNetwork(inputNetwork),</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;      m_NetworkId(0),</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;      m_Runtime(<span class="keyword">nullptr</span>, &amp;<a class="code" href="classarmnn_1_1_i_runtime.xhtml#a978f3d0d34a944b40240bd130d61e3b6">IRuntime::Destroy</a>),</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;      m_RefineCount(0),</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;      m_Options(options) {}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_a978f3d0d34a944b40240bd130d61e3b6"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#a978f3d0d34a944b40240bd130d61e3b6">armnn::IRuntime::Destroy</a></div><div class="ttdeci">static void Destroy(IRuntime *runtime)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00037">Runtime.cpp:37</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a8768a9dd173e985bfc0c72338662d631"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8768a9dd173e985bfc0c72338662d631">&#9670;&nbsp;</a></span>ExportNetwork()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> ExportNetwork </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Extract final quantized network. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_network_quantizer.xhtml#a2c24535b51018853e67bad277f4cbbeb">INetworkQuantizer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_network_quantizer_8cpp_source.xhtml#l00137">137</a> of file <a class="el" href="_network_quantizer_8cpp_source.xhtml">NetworkQuantizer.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00178">Graph::TopologicalSort()</a>, and <a class="el" href="_network_quantizer_utils_8hpp_source.xhtml#l00049">armnn::VisitLayers()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_quantizer_8hpp_source.xhtml#l00034">NetworkQuantizer::GetMinMaxRange()</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> Graph&amp; graph = PolymorphicDowncast&lt;const Network*&gt;(m_InputNetwork)-&gt;GetGraph().TopologicalSort();</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// Step 1) Walk the graph and populate default min/max values for</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// intermediate tensors, only if Runtime does not exist (created</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">// if Refine has been called)</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">if</span> (!m_Runtime)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        m_Ranges.<a class="code" href="classarmnn_1_1_range_tracker.xhtml#ad083f83ce01c5a1e16da1236442e2169">SetDynamicMode</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        StaticRangeVisitor rangeVisitor(m_Ranges);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9835ef753dda5b5a2fe827680e41fda7">VisitLayers</a>(graph, rangeVisitor);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="comment">// Set min/max range of non-calibrated layers to parent layer&#39;s range</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        m_DynamicQuantizationVisitor.value().VisitNonCalibratedLayers();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="comment">// now tear down the runtime and the dynamic visitor.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        m_Runtime.reset(<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        m_DynamicQuantizationVisitor = EmptyOptional();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        m_RefineCount = 0;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Step 2) Convert input InputNetwork to Quantized InputNetwork</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    std::unique_ptr&lt;IQuantizationScheme&gt; quantizationScheme;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">switch</span> (m_Options.<a class="code" href="structarmnn_1_1_quantizer_options.xhtml#a64fb6dc5a9d3fe72b8f63364a10774a7">m_ActivationFormat</a>)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>:</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            quantizationScheme = std::make_unique&lt;QAsymmU8QuantizationScheme&gt;();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">DataType::QAsymmS8</a>:</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            quantizationScheme = std::make_unique&lt;QAsymmS8QuantizationScheme&gt;();</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">DataType::QSymmS8</a>:</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            quantizationScheme = std::make_unique&lt;QSymmS8QuantizationScheme&gt;();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">DataType::QSymmS16</a>:</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            quantizationScheme = std::make_unique&lt;QSymm16QuantizationScheme&gt;();</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Unsupported quantization target&quot;</span>);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    QuantizerVisitor quantizerVisitor(m_Ranges, quantizationScheme.get(), m_Options.<a class="code" href="structarmnn_1_1_quantizer_options.xhtml#a5bc42c844726d5fe782741617a893f43">m_PreserveType</a>);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a9835ef753dda5b5a2fe827680e41fda7">VisitLayers</a>(graph, quantizerVisitor);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="comment">// clear the ranges</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    m_Ranges.<a class="code" href="classarmnn_1_1_range_tracker.xhtml#a372de693ad40b3f42839c8ec6ac845f4">Reset</a>();</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">return</span> quantizerVisitor.RetrieveFinalNetwork();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_quantizer_options_xhtml_a64fb6dc5a9d3fe72b8f63364a10774a7"><div class="ttname"><a href="structarmnn_1_1_quantizer_options.xhtml#a64fb6dc5a9d3fe72b8f63364a10774a7">armnn::QuantizerOptions::m_ActivationFormat</a></div><div class="ttdeci">DataType m_ActivationFormat</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_quantizer_8hpp_source.xhtml#l00025">INetworkQuantizer.hpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9835ef753dda5b5a2fe827680e41fda7"><div class="ttname"><a href="namespacearmnn.xhtml#a9835ef753dda5b5a2fe827680e41fda7">armnn::VisitLayers</a></div><div class="ttdeci">void VisitLayers(const LayerContainer &amp;layerContainer, ILayerVisitor &amp;visitor)</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_utils_8hpp_source.xhtml#l00049">NetworkQuantizerUtils.hpp:49</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantizer_options_xhtml_a5bc42c844726d5fe782741617a893f43"><div class="ttname"><a href="structarmnn_1_1_quantizer_options.xhtml#a5bc42c844726d5fe782741617a893f43">armnn::QuantizerOptions::m_PreserveType</a></div><div class="ttdeci">bool m_PreserveType</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_quantizer_8hpp_source.xhtml#l00026">INetworkQuantizer.hpp:26</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml_ad083f83ce01c5a1e16da1236442e2169"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml#ad083f83ce01c5a1e16da1236442e2169">armnn::RangeTracker::SetDynamicMode</a></div><div class="ttdeci">void SetDynamicMode(bool flag)</div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8hpp_source.xhtml#l00045">RangeTracker.hpp:45</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml_a372de693ad40b3f42839c8ec6ac845f4"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml#a372de693ad40b3f42839c8ec6ac845f4">armnn::RangeTracker::Reset</a></div><div class="ttdeci">void Reset()</div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8cpp_source.xhtml#l00074">RangeTracker.cpp:74</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::DataType::QSymmS8</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3618dd686c52c451000bea3e20931ac8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3618dd686c52c451000bea3e20931ac8">&#9670;&nbsp;</a></span>GetMinMaxRange()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;float, float&gt; GetMinMaxRange </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a>&#160;</td>
          <td class="paramname"><em>guid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_quantizer_8hpp_source.xhtml#l00034">34</a> of file <a class="el" href="_network_quantizer_8hpp_source.xhtml">NetworkQuantizer.hpp</a>.</p>

<p class="reference">References <a class="el" href="_network_quantizer_8cpp_source.xhtml#l00137">NetworkQuantizer::ExportNetwork()</a>, and <a class="el" href="_range_tracker_8cpp_source.xhtml#l00029">RangeTracker::GetRange()</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{ <span class="keywordflow">return</span> m_Ranges.<a class="code" href="classarmnn_1_1_range_tracker.xhtml#a507bae23f59e94b4161886ebe663cdf4">GetRange</a>(guid, idx); }</div><div class="ttc" id="classarmnn_1_1_range_tracker_xhtml_a507bae23f59e94b4161886ebe663cdf4"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml#a507bae23f59e94b4161886ebe663cdf4">armnn::RangeTracker::GetRange</a></div><div class="ttdeci">MinMaxRange GetRange(LayerGuid guid, unsigned int idx) const</div><div class="ttdoc">Retrieve the Range for a particular output slot on a particular layer. </div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8cpp_source.xhtml#l00029">RangeTracker.cpp:29</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0de9803a30020e30ec8c9c0ba8592dc6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0de9803a30020e30ec8c9c0ba8592dc6">&#9670;&nbsp;</a></span>OverrideInputRange()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void OverrideInputRange </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>layerId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overrides the default quantization values for the input layer with the given id. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_network_quantizer.xhtml#a0ec2c346796d52e923cca0477497a6d0">INetworkQuantizer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_network_quantizer_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="_network_quantizer_8cpp_source.xhtml">NetworkQuantizer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_graph_8hpp_source.xhtml#l00186">Graph::GetInputLayers()</a>, and <a class="el" href="_network_quantizer_utils_8hpp_source.xhtml#l00049">armnn::VisitLayers()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_quantizer_8hpp_source.xhtml#l00023">NetworkQuantizer::NetworkQuantizer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> Graph&amp; graph = PolymorphicDowncast&lt;const Network*&gt;(m_InputNetwork)-&gt;GetGraph();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">auto</span> inputLayers = graph.GetInputLayers();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// Walk the input layers of the graph and override the quantization parameters of the one with the given id</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    OverrideInputRangeVisitor overrideInputRangeVisitor(m_Ranges, layerId, <a class="code" href="classarmnn_1_1_range_tracker.xhtml#a997e96288bdb106c922202e3f33d5d7b">RangeTracker::MinMaxRange</a>{min, max});</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a9835ef753dda5b5a2fe827680e41fda7">VisitLayers</a>(inputLayers, overrideInputRangeVisitor);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a9835ef753dda5b5a2fe827680e41fda7"><div class="ttname"><a href="namespacearmnn.xhtml#a9835ef753dda5b5a2fe827680e41fda7">armnn::VisitLayers</a></div><div class="ttdeci">void VisitLayers(const LayerContainer &amp;layerContainer, ILayerVisitor &amp;visitor)</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_utils_8hpp_source.xhtml#l00049">NetworkQuantizerUtils.hpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml_a997e96288bdb106c922202e3f33d5d7b"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml#a997e96288bdb106c922202e3f33d5d7b">armnn::RangeTracker::MinMaxRange</a></div><div class="ttdeci">std::pair&lt; float, float &gt; MinMaxRange</div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8hpp_source.xhtml#l00020">RangeTracker.hpp:20</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acff529f0d8ffed99123e3a729942be12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acff529f0d8ffed99123e3a729942be12">&#9670;&nbsp;</a></span>Refine()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Refine </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Refine input network with a set of refinement data for specified LayerBindingId. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_network_quantizer.xhtml#ae7708b89714c5a85d62e07f674ab9da4">INetworkQuantizer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_network_quantizer_8cpp_source.xhtml#l00061">61</a> of file <a class="el" href="_network_quantizer_8cpp_source.xhtml">NetworkQuantizer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_runtime_8cpp_source.xhtml#l00032">IRuntime::Create()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00058">armnnUtils::FindMinMax()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01014">armnn::Optimize()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00178">Graph::TopologicalSort()</a>, and <a class="el" href="_network_quantizer_utils_8hpp_source.xhtml#l00049">armnn::VisitLayers()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_quantizer_8hpp_source.xhtml#l00023">NetworkQuantizer::NetworkQuantizer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="comment">// The first time Refine is called the m_Runtime and the DynamicQuantizationVisitor</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">// will not have been created. Need to get the environment set up, Runtime loaded,</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// DynamicQuantizationVisitor created and run over the network to initialise itself</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// and the RangeTracker the Debug callback registered and an initial inference</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="comment">// done to set up the first min/max values</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">if</span> (!m_Runtime)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        m_RefineCount = 0;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        m_Ranges.<a class="code" href="classarmnn_1_1_range_tracker.xhtml#ad083f83ce01c5a1e16da1236442e2169">SetDynamicMode</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">const</span> Graph&amp; cGraph = PolymorphicDowncast&lt;const Network*&gt;(m_InputNetwork)-&gt;GetGraph().TopologicalSort();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="comment">// need to insert Debug layers in the DynamicQuantizationVisitor</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        Graph&amp; graph = <span class="keyword">const_cast&lt;</span>Graph&amp;<span class="keyword">&gt;</span>(cGraph);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="comment">// Initialize RangeTracker to the default values for each layer.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="comment">// The default values are overwritten by the min/max that is</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="comment">// recorded during the first dataset min/max calibration. This</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="comment">// initialisation is only required for the first call of Refine().</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        m_DynamicQuantizationVisitor = DynamicQuantizationVisitor(m_Ranges, graph);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9835ef753dda5b5a2fe827680e41fda7">VisitLayers</a>(cGraph, m_DynamicQuantizationVisitor.value());</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        IRuntime::CreationOptions options;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        m_Runtime = <a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(options);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="comment">// Optimize network - debug already enabled for layers that require quantization</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        OptimizerOptions optimizerOptions(<span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        std::vector&lt;BackendId&gt; backends = {<span class="stringliteral">&quot;CpuRef&quot;</span>};</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optimizedNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*m_InputNetwork,</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                                     backends,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                                     m_Runtime-&gt;GetDeviceSpec(),</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                                     optimizerOptions);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        m_Runtime-&gt;LoadNetwork(m_NetworkId, std::move(optimizedNet));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="comment">// Debug callback function to refine min/max in RangeTracker</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keyword">auto</span> rangeTrackerCallback = [&amp;](<a class="code" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a> guid, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex, ITensorHandle *tensorHandle) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="comment">// Get min/max pair from tensor data</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            std::pair&lt;float, float&gt; minMax = <a class="code" href="namespacearmnn_utils.xhtml#a1c9097ab13afc54b48c503c6487aaee1">armnnUtils::FindMinMax</a>(tensorHandle);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="comment">// For first calibration dataset, set min/max range in RangeTracker to</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="comment">// min/max ranges gathered during inference</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keywordflow">if</span> (m_RefineCount == 0)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                m_Ranges.<a class="code" href="classarmnn_1_1_range_tracker.xhtml#a4618337ffe8a3a2b5a6abf475454acdd">ResetMinMax</a>(guid, slotIndex, minMax.first, minMax.second);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <span class="comment">// For every other calibration dataset, only set min/max range if the</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="comment">// values gathered are less than / greater than originally recorded.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                m_Ranges.<a class="code" href="classarmnn_1_1_range_tracker.xhtml#aa55e27d7cc1569b82476e6b30cbd6c25">RefineMin</a>(guid, slotIndex, minMax.first);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                m_Ranges.<a class="code" href="classarmnn_1_1_range_tracker.xhtml#ae5a4c3257000f8a0b7392a0104775894">RefineMax</a>(guid, slotIndex, minMax.second);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        };</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        m_Runtime-&gt;RegisterDebugCallback(m_NetworkId, rangeTrackerCallback);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// Create output tensor for EnqueueWorkload</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    std::vector&lt;armnn::BindingPointInfo&gt; outputBindings;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">auto</span> outputLayers = m_DynamicQuantizationVisitor.value().GetOutputLayers();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    std::vector&lt;TContainer&gt; outputVectors;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> outputLayerBindingId : outputLayers)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keyword">auto</span> outputTensorInfo = m_Runtime-&gt;GetOutputTensorInfo(m_NetworkId, outputLayerBindingId);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        outputBindings.push_back(std::make_pair(outputLayerBindingId, outputTensorInfo));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        outputVectors.push_back(std::vector&lt;float&gt;(outputTensorInfo.GetNumElements(), 0));</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors = armnnUtils::MakeOutputTensors&lt;TContainer&gt;(outputBindings, outputVectors);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">// Execute EnqueueWorkload with calibration image</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    m_Runtime-&gt;EnqueueWorkload(m_NetworkId, inputTensors, outputTensors);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    ++m_RefineCount;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00032">Runtime.cpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml_a4618337ffe8a3a2b5a6abf475454acdd"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml#a4618337ffe8a3a2b5a6abf475454acdd">armnn::RangeTracker::ResetMinMax</a></div><div class="ttdeci">void ResetMinMax(LayerGuid guid, unsigned int idx, float newMin, float newMax)</div><div class="ttdoc">Overwrite min and max in RangeTracker with newMin and newMax. </div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8cpp_source.xhtml#l00064">RangeTracker.cpp:64</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml_ae5a4c3257000f8a0b7392a0104775894"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml#ae5a4c3257000f8a0b7392a0104775894">armnn::RangeTracker::RefineMax</a></div><div class="ttdeci">void RefineMax(LayerGuid guid, unsigned int slotIndex, float newMax)</div><div class="ttdoc">Update max in RangeTracker with new_max if it is greater than current value. </div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8cpp_source.xhtml#l00055">RangeTracker.cpp:55</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9835ef753dda5b5a2fe827680e41fda7"><div class="ttname"><a href="namespacearmnn.xhtml#a9835ef753dda5b5a2fe827680e41fda7">armnn::VisitLayers</a></div><div class="ttdeci">void VisitLayers(const LayerContainer &amp;layerContainer, ILayerVisitor &amp;visitor)</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_utils_8hpp_source.xhtml#l00049">NetworkQuantizerUtils.hpp:49</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01014">Network.cpp:1014</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00325">Tensor.hpp:325</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00593">INetwork.hpp:593</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_a1c9097ab13afc54b48c503c6487aaee1"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a1c9097ab13afc54b48c503c6487aaee1">armnnUtils::FindMinMax</a></div><div class="ttdeci">std::pair&lt; float, float &gt; FindMinMax(armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_utils_8cpp_source.xhtml#l00058">TensorUtils.cpp:58</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml_ad083f83ce01c5a1e16da1236442e2169"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml#ad083f83ce01c5a1e16da1236442e2169">armnn::RangeTracker::SetDynamicMode</a></div><div class="ttdeci">void SetDynamicMode(bool flag)</div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8hpp_source.xhtml#l00045">RangeTracker.hpp:45</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_afad4088a9a058114ee5f87246f87bf49"><div class="ttname"><a href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">armnn::LayerGuid</a></div><div class="ttdeci">profiling::ProfilingGuid LayerGuid</div><div class="ttdoc">Define LayerGuid type. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00259">Types.hpp:259</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml_aa55e27d7cc1569b82476e6b30cbd6c25"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml#aa55e27d7cc1569b82476e6b30cbd6c25">armnn::RangeTracker::RefineMin</a></div><div class="ttdeci">void RefineMin(LayerGuid guid, unsigned int slotIndex, float newMin)</div><div class="ttdoc">Update min in RangeTracker with new_min if it is lower than current value. </div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8cpp_source.xhtml#l00046">RangeTracker.cpp:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/<a class="el" href="_network_quantizer_8hpp_source.xhtml">NetworkQuantizer.hpp</a></li>
<li>src/armnn/<a class="el" href="_network_quantizer_8cpp_source.xhtml">NetworkQuantizer.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_network_quantizer.xhtml">NetworkQuantizer</a></li>
    <li class="footer">Generated on Tue Aug 25 2020 12:29:50 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
