<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnTfParser/TfParser.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_tf_parser_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TfParser.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_tf_parser_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tf_parser_8hpp.xhtml">armnnTfParser/ITfParser.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_types_8hpp.xhtml">armnn/Types.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_8hpp.xhtml">armnn/Tensor.hpp</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_network_8hpp.xhtml">armnn/INetwork.hpp</a>&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">class </span>TensorInfo;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;}</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacetensorflow.xhtml">tensorflow</a></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">class </span>GraphDef;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">class </span>NodeDef;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn_tf_parser.xhtml">armnnTfParser</a></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">class </span>ParsedTfOperation;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">   35</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> = std::unique_ptr&lt;ParsedTfOperation&gt;;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">/// WithOutputTensorIndex wraps a value and an index. The purpose of</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">/// this template is to signify that, in Tensorflow, the input name of</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/// a layer has the convention of &#39;inputTensorName:#index&#39;, where the</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">/// #index can be omitted and it implicitly means the 0 output of</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/// the referenced layer. By supporting this notation we can handle</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">/// layers with multiple outputs, such as Split.</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">   46</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex</a></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#a08f2876bc5d60ed9c711ac7c26747305">   48</a></span>&#160;    T                <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#a08f2876bc5d60ed9c711ac7c26747305">m_IndexedValue</a>;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#a271b1a398c11fb4bf8603119041562c9">   49</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#a271b1a398c11fb4bf8603119041562c9">m_Index</a>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#af35b2c8744db2d46349da7ebd547a157">   51</a></span>&#160;    <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#af35b2c8744db2d46349da7ebd547a157">WithOutputTensorIndex</a>(<span class="keyword">const</span> T &amp; value, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    : m_IndexedValue{value}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    , m_Index{index} {}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#af8b91afcb4d4623d1a3697baa8a85814">   55</a></span>&#160;    <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#af8b91afcb4d4623d1a3697baa8a85814">WithOutputTensorIndex</a>(T &amp;&amp; value, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    : m_IndexedValue{value}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    , m_Index{index} {}</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;};</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="namespacearmnn_tf_parser.xhtml#ad85fe4a9bf2aff90c53bc2f50c8931e6">   60</a></span>&#160;<span class="keyword">using</span> <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">OutputOfParsedTfOperation</a> = <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex&lt;ParsedTfOperation *&gt;</a>;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="namespacearmnn_tf_parser.xhtml#a4c8735480b01dbd0f75c63377fe054e9">   61</a></span>&#160;<span class="keyword">using</span> <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">OutputOfConstNodeDef</a> = <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex&lt;const tensorflow::NodeDef*&gt;</a>;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="namespacearmnn_tf_parser.xhtml#abcf8e5fd95ba7e7bd8cd36fc24974223">   62</a></span>&#160;<span class="keyword">using</span> <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">OutputId</a> = <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">WithOutputTensorIndex&lt;std::string&gt;</a>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classarmnn_tf_parser_1_1_tf_parser.xhtml">   64</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_tf_parser_1_1_tf_parser.xhtml">TfParser</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml">ITfParser</a></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">    /// Creates the network from a protobuf text file on the disk.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> CreateNetworkFromTextFile(</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span>* graphFile,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">const</span> std::map&lt;std::string, armnn::TensorShape&gt;&amp; inputShapes,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; requestedOutputs) <span class="keyword">override</span>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">    /// Creates the network from a protobuf binary file on the disk.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> CreateNetworkFromBinaryFile(</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span>* graphFile,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">const</span> std::map&lt;std::string, armnn::TensorShape&gt;&amp; inputShapes,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; requestedOutputs) <span class="keyword">override</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">    /// Creates the network directly from protobuf text in a string. Useful for debugging/testing.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> CreateNetworkFromString(</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span>* protoText,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keyword">const</span> std::map&lt;std::string, armnn::TensorShape&gt;&amp; inputShapes,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; requestedOutputs) <span class="keyword">override</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">    /// Retrieves binding info (layer id and tensor info) for the network input identified by the given layer name.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn_tf_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> GetNetworkInputBindingInfo(<span class="keyword">const</span> std::string&amp; name) <span class="keyword">const override</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">    /// Retrieves binding info (layer id and tensor info) for the network output identified by the given layer name.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn_tf_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> GetNetworkOutputBindingInfo(<span class="keyword">const</span> std::string&amp; name) <span class="keyword">const override</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="classarmnn_tf_parser_1_1_tf_parser.xhtml">TfParser</a>();</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classarmnn_tf_parser_1_1_tf_parser.xhtml#ad3c8cd69190956793af7af503dc495cd">   96</a></span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span>ParsedConstTfOperation;</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classarmnn_tf_parser_1_1_tf_parser.xhtml#a97caa75ebdb49fc10250742b33d29ae7">   97</a></span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span>ParsedMatMulTfOperation;</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="classarmnn_tf_parser_1_1_tf_parser.xhtml#ac28271f7220cd595de55dbb7f99f4a63">   98</a></span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span>ParsedMulTfOperation;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">    /// Parses a GraphDef loaded into memory from one of the other CreateNetwork*.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> CreateNetworkFromGraphDef(<span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keyword">const</span> std::map&lt;std::string, armnn::TensorShape&gt;&amp; inputShapes,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; requestedOutputs);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">    /// Sets up variables and then performs BFS to parse all nodes.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> LoadGraphDef(<span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">    /// Parses a given node, assuming nodes before it in the graph have been done.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> LoadNodeDef(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">    /// Handling identity layers as the input for Conv2D layer.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span>    <span class="keyword">const</span> tensorflow::NodeDef* ResolveIdentityNode(<span class="keyword">const</span> tensorflow::NodeDef* nodeDef);<span class="comment"></span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">    /// Finds the nodes connected as inputs of the given node in the graph.</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"></span>    std::vector&lt;OutputOfConstNodeDef&gt; GetTfInputNodes(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef) <span class="keyword">const</span>;<span class="comment"></span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">    /// Finds the IParsedTfOperations for the nodes connected as inputs of the given node in the graph,</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">    /// and throws an exception if the number of inputs does not match the expected one.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">    /// This will automatically resolve any identity nodes. The result vector contains the parsed operation</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">    /// together with the output tensor index to make the connection unambiguous.</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span>    std::vector&lt;OutputOfParsedTfOperation&gt; GetInputParsedTfOperationsChecked(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                                                             std::size_t expectedNumInputs);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseConst(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">    /// Checks if there is a pre-parsed const tensor available with the given name and Type.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"></span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Type&gt;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">bool</span> HasParsedConstTensor(<span class="keyword">const</span> std::string &amp; nodeName) <span class="keyword">const</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Type&gt;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">bool</span> HasParsedConstTensor(ParsedTfOperation* parsedTfOpPtr) <span class="keyword">const</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetConstInputIndex(<span class="keyword">const</span> std::vector&lt;OutputOfParsedTfOperation&gt;&amp; inputs);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseAdd(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseAddN(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseBiasAdd(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseConv2D(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseDepthwiseConv2D(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                              <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseExpandDims(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseFusedBatchNorm(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseConcat(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseIdentity(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseLrn(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseMatMul(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseMean(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseMul(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParsePlaceholder(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseRealDiv(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseRelu(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseRelu6(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseReshape(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseResizeBilinear(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseRsqrt(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseShape(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseSqueeze(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseSigmoid(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseSoftmax(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseSoftplus(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseSplit(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseStridedSlice(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseTanh(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseMaxPool(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseAvgPool(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParsePooling2d(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                        <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                        <a class="code" href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718">armnn::PoolingAlgorithm</a> pooltype);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseEqual(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseMaximum(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseMinimum(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseGather(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseGreater(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParsePad(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseSub(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseStack(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ParseTranspose(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> AddActivationLayer(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a>&amp; desc);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> AddAdditionLayer(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keywordtype">bool</span> isBiasAdd = <span class="keyword">false</span>);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> AddRealDivLayer(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> AddMaximumLayer(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* AddMultiplicationLayer(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* AddFullyConnectedLayer(<span class="keyword">const</span> tensorflow::NodeDef&amp; matMulNodeDef,</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keyword">const</span> tensorflow::NodeDef* addNodeDef, <span class="keyword">const</span> <span class="keywordtype">char</span>* armnnLayerName);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordtype">bool</span> IsSupportedLeakyReluPattern(<span class="keyword">const</span> tensorflow::NodeDef&amp; mulNodeDef,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                                    <span class="keywordtype">size_t</span> alphaLayerIndex,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">OutputOfParsedTfOperation</a>&amp; otherOp,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                    <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>** outputOfLeakyRelu,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a> &amp; desc);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    std::pair&lt;armnn::IOutputSlot*, armnn::IOutputSlot*&gt; ProcessElementwiseInputSlots(</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef, <span class="keyword">const</span> std::string&amp; layerName);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ProcessComparisonLayer(</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>* input0Slot,</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>* input1Slot,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> layer,</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a> ProcessElementwiseLayer(</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>* input0Slot,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>* input1Slot,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> layer,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* CreateAdditionLayer(</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>* input0Slot,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>* input1Slot,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keyword">const</span> std::string&amp; layerName);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* CreateAdditionLayer(</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">OutputOfParsedTfOperation</a>&amp; opOne,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">OutputOfParsedTfOperation</a>&amp; opTwo,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfAddition);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* CreateAdditionLayer(</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef,</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layerOne,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layerTwo,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfAddition,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> numberOfLayersToConnect,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            <span class="keywordtype">bool</span> isOdd);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* CreateAdditionLayer(</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef,</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">OutputOfParsedTfOperation</a>&amp; op,</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">static</span> std::pair&lt;armnn::LayerBindingId, armnn::TensorInfo&gt; GetBindingInfo(<span class="keyword">const</span> std::string&amp; layerName,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span>* bindingPointDesc,</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keyword">const</span> std::unordered_map&lt;std::string, BindingPointInfo&gt;&amp; nameToBindingInfo);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordtype">void</span> TrackInputBinding(<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> <span class="keywordtype">id</span>,</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; tensorInfo);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordtype">void</span> TrackOutputBinding(<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> <span class="keywordtype">id</span>,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; tensorInfo);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> TrackBindingPoint(<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer, <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> <span class="keywordtype">id</span>,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; tensorInfo,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span>* bindingPointDesc,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        std::unordered_map&lt;std::string, BindingPointInfo&gt;&amp; nameToBindingInfo);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordtype">void</span> Cleanup();</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">    /// The network we&#39;re building. Gets cleared after it is passed to the user.</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> m_Network;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">using</span> OperationParsingFunction = <a class="code" href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">ParsedTfOperationPtr</a>(<a class="code" href="classarmnn_tf_parser_1_1_tf_parser.xhtml">TfParser</a>::*)(<span class="keyword">const</span> tensorflow::NodeDef&amp; nodeDef,</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                                                 <span class="keyword">const</span> tensorflow::GraphDef&amp; graphDef);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">    /// Map of TensorFlow operation names to parsing member functions.</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"></span>    <span class="keyword">static</span> <span class="keyword">const</span> std::map&lt;std::string, OperationParsingFunction&gt; ms_OperationNameToParsingFunctions;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::list&lt;std::string&gt; m_ControlInputs;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    std::map&lt;std::string, armnn::TensorShape&gt; m_InputShapes;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    std::vector&lt;std::string&gt; m_RequestedOutputs;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">    /// Map of nodes extracted from the GraphDef to speed up parsing.</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"></span>    std::unordered_map&lt;std::string, const tensorflow::NodeDef*&gt; m_NodesByName;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    std::unordered_map&lt;std::string, ParsedTfOperationPtr&gt; m_ParsedTfOperations;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">    /// Maps input layer names to their corresponding ids and tensor info.</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"></span>    std::unordered_map&lt;std::string, BindingPointInfo&gt; m_NetworkInputsBindingInfo;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">    /// Maps output layer names to their corresponding ids and tensor info.</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"></span>    std::unordered_map&lt;std::string, BindingPointInfo&gt; m_NetworkOutputsBindingInfo;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;};</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div><div class="ttc" id="structarmnn_tf_parser_1_1_with_output_tensor_index_xhtml_af8b91afcb4d4623d1a3697baa8a85814"><div class="ttname"><a href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#af8b91afcb4d4623d1a3697baa8a85814">armnnTfParser::WithOutputTensorIndex::WithOutputTensorIndex</a></div><div class="ttdeci">WithOutputTensorIndex(T &amp;&amp;value, unsigned int index)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_parser_8hpp_source.xhtml#l00055">TfParser.hpp:55</a></div></div>
<div class="ttc" id="namespacetensorflow_xhtml"><div class="ttname"><a href="namespacetensorflow.xhtml">tensorflow</a></div><div class="ttdef"><b>Definition:</b> <a href="_tf_parser_8hpp_source.xhtml#l00025">TfParser.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="_tensor_8hpp_xhtml"><div class="ttname"><a href="_tensor_8hpp.xhtml">Tensor.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_tf_parser_xhtml_a9084adbf804022c874039ad40d1939e9"><div class="ttname"><a href="namespacearmnn_tf_parser.xhtml#a9084adbf804022c874039ad40d1939e9">armnnTfParser::BindingPointInfo</a></div><div class="ttdeci">armnn::BindingPointInfo BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_i_tf_parser_8hpp_source.xhtml#l00019">ITfParser.hpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="structarmnn_tf_parser_1_1_with_output_tensor_index_xhtml_a271b1a398c11fb4bf8603119041562c9"><div class="ttname"><a href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#a271b1a398c11fb4bf8603119041562c9">armnnTfParser::WithOutputTensorIndex::m_Index</a></div><div class="ttdeci">unsigned int m_Index</div><div class="ttdef"><b>Definition:</b> <a href="_tf_parser_8hpp_source.xhtml#l00049">TfParser.hpp:49</a></div></div>
<div class="ttc" id="structarmnn_tf_parser_1_1_with_output_tensor_index_xhtml_af35b2c8744db2d46349da7ebd547a157"><div class="ttname"><a href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#af35b2c8744db2d46349da7ebd547a157">armnnTfParser::WithOutputTensorIndex::WithOutputTensorIndex</a></div><div class="ttdeci">WithOutputTensorIndex(const T &amp;value, unsigned int index)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_parser_8hpp_source.xhtml#l00051">TfParser.hpp:51</a></div></div>
<div class="ttc" id="_i_tf_parser_8hpp_xhtml"><div class="ttname"><a href="_i_tf_parser_8hpp.xhtml">ITfParser.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="namespacearmnn_tf_parser_xhtml"><div class="ttname"><a href="namespacearmnn_tf_parser.xhtml">armnnTfParser</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_tf_parser_8hpp_source.xhtml#l00016">ITfParser.hpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a961bbfe1db71a848eff5a1f0ab775718"><div class="ttname"><a href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718">armnn::PoolingAlgorithm</a></div><div class="ttdeci">PoolingAlgorithm</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00096">Types.hpp:96</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00194">Types.hpp:194</a></div></div>
<div class="ttc" id="namespacearmnn_tf_parser_xhtml_aa36bf288c19fe35767bb6e059636f405"><div class="ttname"><a href="namespacearmnn_tf_parser.xhtml#aa36bf288c19fe35767bb6e059636f405">armnnTfParser::ParsedTfOperationPtr</a></div><div class="ttdeci">std::unique_ptr&lt; ParsedTfOperation &gt; ParsedTfOperationPtr</div><div class="ttdef"><b>Definition:</b> <a href="_tf_parser_8hpp_source.xhtml#l00035">TfParser.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a></div><div class="ttdoc">An output connection slot for a layer. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00037">INetwork.hpp:37</a></div></div>
<div class="ttc" id="_types_8hpp_xhtml"><div class="ttname"><a href="_types_8hpp.xhtml">Types.hpp</a></div></div>
<div class="ttc" id="structarmnn_tf_parser_1_1_with_output_tensor_index_xhtml"><div class="ttname"><a href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml">armnnTfParser::WithOutputTensorIndex</a></div><div class="ttdoc">WithOutputTensorIndex wraps a value and an index. </div><div class="ttdef"><b>Definition:</b> <a href="_tf_parser_8hpp_source.xhtml#l00046">TfParser.hpp:46</a></div></div>
<div class="ttc" id="structarmnn_tf_parser_1_1_with_output_tensor_index_xhtml_a08f2876bc5d60ed9c711ac7c26747305"><div class="ttname"><a href="structarmnn_tf_parser_1_1_with_output_tensor_index.xhtml#a08f2876bc5d60ed9c711ac7c26747305">armnnTfParser::WithOutputTensorIndex::m_IndexedValue</a></div><div class="ttdeci">T m_IndexedValue</div><div class="ttdef"><b>Definition:</b> <a href="_tf_parser_8hpp_source.xhtml#l00048">TfParser.hpp:48</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00020">Descriptors.hpp:20</a></div></div>
<div class="ttc" id="_i_network_8hpp_xhtml"><div class="ttname"><a href="_i_network_8hpp.xhtml">INetwork.hpp</a></div></div>
<div class="ttc" id="classarmnn_tf_parser_1_1_i_tf_parser_xhtml"><div class="ttname"><a href="classarmnn_tf_parser_1_1_i_tf_parser.xhtml">armnnTfParser::ITfParser</a></div><div class="ttdoc">Parses a directed acyclic graph from a tensorflow protobuf file. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tf_parser_8hpp_source.xhtml#l00025">ITfParser.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_tf_parser_1_1_tf_parser_xhtml"><div class="ttname"><a href="classarmnn_tf_parser_1_1_tf_parser.xhtml">armnnTfParser::TfParser</a></div><div class="ttdef"><b>Definition:</b> <a href="_tf_parser_8hpp_source.xhtml#l00064">TfParser.hpp:64</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00101">INetwork.hpp:101</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_50aba35e23cba3c8856f8642cc06d5dc.xhtml">armnnTfParser</a></li><li class="navelem"><a class="el" href="_tf_parser_8hpp.xhtml">TfParser.hpp</a></li>
    <li class="footer">Generated on Tue Aug 25 2020 12:29:41 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
