<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: ILayerVisitor Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_i_layer_visitor.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="classarmnn_1_1_i_layer_visitor-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ILayerVisitor Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_i_layer_visitor_8hpp_source.xhtml">ILayerVisitor.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ILayerVisitor:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_i_layer_visitor.png" usemap="#ILayerVisitor_map" alt=""/>
  <map id="ILayerVisitor_map" name="ILayerVisitor_map">
<area href="classarmnn_1_1_layer_visitor_base.xhtml" title="Visitor base class with empty implementations. " alt="LayerVisitorBase&lt; DefaultPolicy &gt;" shape="rect" coords="0,56,296,80"/>
<area href="classarmnn_serializer_1_1_serializer_visitor.xhtml" alt="SerializerVisitor" shape="rect" coords="306,56,602,80"/>
<area href="classarmnn_1_1_layer_visitor_base.xhtml" alt="LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;" shape="rect" coords="612,56,908,80"/>
<area href="classarmnn_1_1_layer_visitor_base.xhtml" alt="LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;" shape="rect" coords="1224,56,1520,80"/>
<area href="classarmnn_1_1_layer_visitor_base.xhtml" alt="LayerVisitorBase&lt; VisitorThrowingPolicy &gt;" shape="rect" coords="1989,56,2285,80"/>
<area href="classarmnn_quantizer_1_1_input_layer_visitor.xhtml" title="Visitor class implementation to gather the TensorInfo for LayerBindingID for creation of ConstTensor ..." alt="InputLayerVisitor" shape="rect" coords="612,112,908,136"/>
<area href="classarmnn_1_1_override_input_range_visitor.xhtml" title="Visitor object for overriding the input range of the quantized input layers in a network. " alt="OverrideInputRangeVisitor" shape="rect" coords="918,112,1214,136"/>
<area href="classarmnn_1_1_static_range_visitor.xhtml" title="Visitor class to establish min/max ranges based on the type of the layer. " alt="StaticRangeVisitor" shape="rect" coords="1224,112,1520,136"/>
<area href="classarmnn_1_1_test_layer_visitor.xhtml" alt="TestLayerVisitor" shape="rect" coords="1530,112,1826,136"/>
<area href="classarmnn_1_1_dynamic_quantization_visitor.xhtml" title="Visitor class to establish min/max ranges based on the type of the layer. " alt="DynamicQuantizationVisitor" shape="rect" coords="1836,112,2132,136"/>
<area href="classarmnn_1_1_quantizer_visitor.xhtml" title="Visitor object for quantizing layers in a network. " alt="QuantizerVisitor" shape="rect" coords="2142,112,2438,136"/>
<area href="classarmnn_1_1_test_batch_normalization_layer_visitor.xhtml" alt="TestBatchNormalizationLayerVisitor" shape="rect" coords="1836,168,2132,192"/>
<area href="classarmnn_1_1_test_constant_layer_visitor.xhtml" alt="TestConstantLayerVisitor" shape="rect" coords="1836,224,2132,248"/>
<area href="classarmnn_1_1_test_convolution2d_layer_visitor.xhtml" alt="TestConvolution2dLayerVisitor" shape="rect" coords="1836,280,2132,304"/>
<area href="classarmnn_1_1_test_depthwise_convolution2d_layer_visitor.xhtml" alt="TestDepthwiseConvolution2dLayerVisitor" shape="rect" coords="1836,336,2132,360"/>
<area href="classarmnn_1_1_test_fully_connected_layer_vistor.xhtml" alt="TestFullyConnectedLayerVistor" shape="rect" coords="1836,392,2132,416"/>
<area href="classarmnn_1_1_test_input_layer_visitor.xhtml" alt="TestInputLayerVisitor" shape="rect" coords="1836,448,2132,472"/>
<area href="classarmnn_1_1_test_lstm_layer_visitor.xhtml" alt="TestLstmLayerVisitor" shape="rect" coords="1836,504,2132,528"/>
<area href="classarmnn_1_1_test_output_layer_visitor.xhtml" alt="TestOutputLayerVisitor" shape="rect" coords="1836,560,2132,584"/>
<area href="classarmnn_1_1_test_q_lstm_layer_visitor.xhtml" alt="TestQLstmLayerVisitor" shape="rect" coords="1836,616,2132,640"/>
<area href="classarmnn_1_1_test_quantized_lstm_layer_visitor.xhtml" alt="TestQuantizedLstmLayerVisitor" shape="rect" coords="1836,672,2132,696"/>
<area href="class_test_activation_layer_visitor.xhtml" alt="TestActivationLayerVisitor" shape="rect" coords="1836,728,2132,752"/>
<area href="class_test_addition_layer_visitor.xhtml" alt="TestAdditionLayerVisitor" shape="rect" coords="1836,784,2132,808"/>
<area href="class_test_arg_min_max_layer_visitor.xhtml" alt="TestArgMinMaxLayerVisitor" shape="rect" coords="1836,840,2132,864"/>
<area href="class_test_batch_to_space_nd_layer_visitor.xhtml" alt="TestBatchToSpaceNdLayerVisitor" shape="rect" coords="1836,896,2132,920"/>
<area href="class_test_comparison_layer_visitor.xhtml" alt="TestComparisonLayerVisitor" shape="rect" coords="1836,952,2132,976"/>
<area href="class_test_concat_layer_visitor.xhtml" alt="TestConcatLayerVisitor" shape="rect" coords="1836,1008,2132,1032"/>
<area href="class_test_depth_to_space_layer_visitor.xhtml" alt="TestDepthToSpaceLayerVisitor" shape="rect" coords="1836,1064,2132,1088"/>
<area href="class_test_dequantize_layer_visitor.xhtml" alt="TestDequantizeLayerVisitor" shape="rect" coords="1836,1120,2132,1144"/>
<area href="class_test_division_layer_visitor.xhtml" alt="TestDivisionLayerVisitor" shape="rect" coords="1836,1176,2132,1200"/>
<area href="class_test_elementwise_unary_layer_visitor.xhtml" alt="TestElementwiseUnaryLayerVisitor" shape="rect" coords="1836,1232,2132,1256"/>
<area href="class_test_fill_layer_visitor.xhtml" alt="TestFillLayerVisitor" shape="rect" coords="1836,1288,2132,1312"/>
<area href="class_test_floor_layer_visitor.xhtml" alt="TestFloorLayerVisitor" shape="rect" coords="1836,1344,2132,1368"/>
<area href="class_test_gather_layer_visitor.xhtml" alt="TestGatherLayerVisitor" shape="rect" coords="1836,1400,2132,1424"/>
<area href="class_test_instance_normalization_layer_visitor.xhtml" alt="TestInstanceNormalizationLayerVisitor" shape="rect" coords="1836,1456,2132,1480"/>
<area href="class_test_l2_normalization_layer_visitor.xhtml" alt="TestL2NormalizationLayerVisitor" shape="rect" coords="1836,1512,2132,1536"/>
<area href="class_test_log_softmax_layer_visitor.xhtml" alt="TestLogSoftmaxLayerVisitor" shape="rect" coords="1836,1568,2132,1592"/>
<area href="class_test_maximum_layer_visitor.xhtml" alt="TestMaximumLayerVisitor" shape="rect" coords="1836,1624,2132,1648"/>
<area href="class_test_mean_layer_visitor.xhtml" alt="TestMeanLayerVisitor" shape="rect" coords="1836,1680,2132,1704"/>
<area href="class_test_merge_layer_visitor.xhtml" alt="TestMergeLayerVisitor" shape="rect" coords="1836,1736,2132,1760"/>
<area href="class_test_minimum_layer_visitor.xhtml" alt="TestMinimumLayerVisitor" shape="rect" coords="1836,1792,2132,1816"/>
<area href="class_test_multiplication_layer_visitor.xhtml" alt="TestMultiplicationLayerVisitor" shape="rect" coords="1836,1848,2132,1872"/>
<area href="class_test_normalization_layer_visitor.xhtml" alt="TestNormalizationLayerVisitor" shape="rect" coords="1836,1904,2132,1928"/>
<area href="class_test_pad_layer_visitor.xhtml" alt="TestPadLayerVisitor" shape="rect" coords="1836,1960,2132,1984"/>
<area href="class_test_permute_layer_visitor.xhtml" alt="TestPermuteLayerVisitor" shape="rect" coords="1836,2016,2132,2040"/>
<area href="class_test_pooling2d_layer_visitor.xhtml" alt="TestPooling2dLayerVisitor" shape="rect" coords="1836,2072,2132,2096"/>
<area href="class_test_prelu_layer_visitor.xhtml" alt="TestPreluLayerVisitor" shape="rect" coords="1836,2128,2132,2152"/>
<area href="class_test_quantize_layer_visitor.xhtml" alt="TestQuantizeLayerVisitor" shape="rect" coords="1836,2184,2132,2208"/>
<area href="class_test_rank_layer_visitor.xhtml" alt="TestRankLayerVisitor" shape="rect" coords="1836,2240,2132,2264"/>
<area href="class_test_reshape_layer_visitor.xhtml" alt="TestReshapeLayerVisitor" shape="rect" coords="1836,2296,2132,2320"/>
<area href="class_test_resize_layer_visitor.xhtml" alt="TestResizeLayerVisitor" shape="rect" coords="1836,2352,2132,2376"/>
<area href="class_test_slice_layer_visitor.xhtml" alt="TestSliceLayerVisitor" shape="rect" coords="1836,2408,2132,2432"/>
<area href="class_test_softmax_layer_visitor.xhtml" alt="TestSoftmaxLayerVisitor" shape="rect" coords="1836,2464,2132,2488"/>
<area href="class_test_space_to_batch_nd_layer_visitor.xhtml" alt="TestSpaceToBatchNdLayerVisitor" shape="rect" coords="1836,2520,2132,2544"/>
<area href="class_test_space_to_depth_layer_visitor.xhtml" alt="TestSpaceToDepthLayerVisitor" shape="rect" coords="1836,2576,2132,2600"/>
<area href="class_test_splitter_layer_visitor.xhtml" alt="TestSplitterLayerVisitor" shape="rect" coords="1836,2632,2132,2656"/>
<area href="class_test_stack_layer_visitor.xhtml" alt="TestStackLayerVisitor" shape="rect" coords="1836,2688,2132,2712"/>
<area href="class_test_stand_in_layer_visitor.xhtml" alt="TestStandInLayerVisitor" shape="rect" coords="1836,2744,2132,2768"/>
<area href="class_test_strided_slice_layer_visitor.xhtml" alt="TestStridedSliceLayerVisitor" shape="rect" coords="1836,2800,2132,2824"/>
<area href="class_test_subtraction_layer_visitor.xhtml" alt="TestSubtractionLayerVisitor" shape="rect" coords="1836,2856,2132,2880"/>
<area href="class_test_switch_layer_visitor.xhtml" alt="TestSwitchLayerVisitor" shape="rect" coords="1836,2912,2132,2936"/>
<area href="class_test_transpose_layer_visitor.xhtml" alt="TestTransposeLayerVisitor" shape="rect" coords="1836,2968,2132,2992"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a288db083c224e756f7bb35afe6289b7f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a288db083c224e756f7bb35afe6289b7f">VisitAbsLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a288db083c224e756f7bb35afe6289b7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an absolute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a288db083c224e756f7bb35afe6289b7f">More...</a><br /></td></tr>
<tr class="separator:a288db083c224e756f7bb35afe6289b7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2a1e493b983a932792bc5d0c1a20127"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab2a1e493b983a932792bc5d0c1a20127">VisitActivationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;activationDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:ab2a1e493b983a932792bc5d0c1a20127"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ab2a1e493b983a932792bc5d0c1a20127">More...</a><br /></td></tr>
<tr class="separator:ab2a1e493b983a932792bc5d0c1a20127"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d20b94b7de822f3d29ab12e47e3be4e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2d20b94b7de822f3d29ab12e47e3be4e">VisitAdditionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a2d20b94b7de822f3d29ab12e47e3be4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an addition layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a2d20b94b7de822f3d29ab12e47e3be4e">More...</a><br /></td></tr>
<tr class="separator:a2d20b94b7de822f3d29ab12e47e3be4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8423316906ebe6ae6d28c7f69ad91248"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8423316906ebe6ae6d28c7f69ad91248">VisitArgMinMaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;argMinMaxDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a8423316906ebe6ae6d28c7f69ad91248"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an arg min max layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8423316906ebe6ae6d28c7f69ad91248">More...</a><br /></td></tr>
<tr class="separator:a8423316906ebe6ae6d28c7f69ad91248"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e642355474f31268e66a404e6c1b81d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a9e642355474f31268e66a404e6c1b81d">VisitBatchNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;desc, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;mean, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;variance, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;beta, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;gamma, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a9e642355474f31268e66a404e6c1b81d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a9e642355474f31268e66a404e6c1b81d">More...</a><br /></td></tr>
<tr class="separator:a9e642355474f31268e66a404e6c1b81d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cee693185bcda15bd777008e60c7cf7"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a1cee693185bcda15bd777008e60c7cf7">VisitBatchToSpaceNdLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;batchToSpaceNdDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a1cee693185bcda15bd777008e60c7cf7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a1cee693185bcda15bd777008e60c7cf7">More...</a><br /></td></tr>
<tr class="separator:a1cee693185bcda15bd777008e60c7cf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a1a6856fe4210d9c84c4fb86b4b661e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a6a1a6856fe4210d9c84c4fb86b4b661e">VisitComparisonLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;comparisonDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a6a1a6856fe4210d9c84c4fb86b4b661e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Comparison layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a6a1a6856fe4210d9c84c4fb86b4b661e">More...</a><br /></td></tr>
<tr class="separator:a6a1a6856fe4210d9c84c4fb86b4b661e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb90d7587f7887aee1f2b43261d4ee5c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aeb90d7587f7887aee1f2b43261d4ee5c">VisitConcatLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;concatDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:aeb90d7587f7887aee1f2b43261d4ee5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aeb90d7587f7887aee1f2b43261d4ee5c">More...</a><br /></td></tr>
<tr class="separator:aeb90d7587f7887aee1f2b43261d4ee5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f123a6a99ac143c0f3806cb505765cd"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2f123a6a99ac143c0f3806cb505765cd">VisitConstantLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;input, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a2f123a6a99ac143c0f3806cb505765cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a layer with no inputs and a single output, which always corresponds to the passed in constant tensor should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a2f123a6a99ac143c0f3806cb505765cd">More...</a><br /></td></tr>
<tr class="separator:a2f123a6a99ac143c0f3806cb505765cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc8fe4c6cbc8fa2b13c525500dddfbf6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#abc8fe4c6cbc8fa2b13c525500dddfbf6">VisitConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;convolution2dDescriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;biases, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:abc8fe4c6cbc8fa2b13c525500dddfbf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#abc8fe4c6cbc8fa2b13c525500dddfbf6">More...</a><br /></td></tr>
<tr class="separator:abc8fe4c6cbc8fa2b13c525500dddfbf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72d308d6f24ffb8846375d770394af66"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a72d308d6f24ffb8846375d770394af66">VisitDepthToSpaceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;depthToSpaceDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a72d308d6f24ffb8846375d770394af66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a depth to space layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a72d308d6f24ffb8846375d770394af66">More...</a><br /></td></tr>
<tr class="separator:a72d308d6f24ffb8846375d770394af66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad39aaac8f8fb790ae364c87f1a249d68"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ad39aaac8f8fb790ae364c87f1a249d68">VisitDepthwiseConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;convolution2dDescriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;biases, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:ad39aaac8f8fb790ae364c87f1a249d68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D depthwise convolution layer with biases should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ad39aaac8f8fb790ae364c87f1a249d68">More...</a><br /></td></tr>
<tr class="separator:ad39aaac8f8fb790ae364c87f1a249d68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fa32cbc3ca68467c749d50e844faeaf"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a0fa32cbc3ca68467c749d50e844faeaf">VisitDequantizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a0fa32cbc3ca68467c749d50e844faeaf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a Dequantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a0fa32cbc3ca68467c749d50e844faeaf">More...</a><br /></td></tr>
<tr class="separator:a0fa32cbc3ca68467c749d50e844faeaf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab270e1bebbe01a22543cc49ac3a14c25"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab270e1bebbe01a22543cc49ac3a14c25">VisitDetectionPostProcessLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;<a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:ab270e1bebbe01a22543cc49ac3a14c25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a Detection PostProcess layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ab270e1bebbe01a22543cc49ac3a14c25">More...</a><br /></td></tr>
<tr class="separator:ab270e1bebbe01a22543cc49ac3a14c25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada3c96a7b0d4251edb24584096b90a24"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ada3c96a7b0d4251edb24584096b90a24">VisitDivisionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:ada3c96a7b0d4251edb24584096b90a24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a division layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ada3c96a7b0d4251edb24584096b90a24">More...</a><br /></td></tr>
<tr class="separator:ada3c96a7b0d4251edb24584096b90a24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf99c2bdfe61c48821f23826433a5abc"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aaf99c2bdfe61c48821f23826433a5abc">VisitElementwiseUnaryLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;elementwiseUnaryDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:aaf99c2bdfe61c48821f23826433a5abc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aaf99c2bdfe61c48821f23826433a5abc">More...</a><br /></td></tr>
<tr class="separator:aaf99c2bdfe61c48821f23826433a5abc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae242b544b15e9d80aa2f3be385540eb6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ae242b544b15e9d80aa2f3be385540eb6">VisitEqualLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:ae242b544b15e9d80aa2f3be385540eb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an Equal layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ae242b544b15e9d80aa2f3be385540eb6">More...</a><br /></td></tr>
<tr class="separator:ae242b544b15e9d80aa2f3be385540eb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf67d8273706f9dfc51be559b8505199"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#abf67d8273706f9dfc51be559b8505199">VisitFillLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;fillDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:abf67d8273706f9dfc51be559b8505199"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a fill layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#abf67d8273706f9dfc51be559b8505199">More...</a><br /></td></tr>
<tr class="separator:abf67d8273706f9dfc51be559b8505199"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fd73f343863eedb8dde418c6183193c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a3fd73f343863eedb8dde418c6183193c">VisitFloorLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a3fd73f343863eedb8dde418c6183193c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a floor layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a3fd73f343863eedb8dde418c6183193c">More...</a><br /></td></tr>
<tr class="separator:a3fd73f343863eedb8dde418c6183193c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab93a48970564c6eabbc982a2116c1262"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab93a48970564c6eabbc982a2116c1262">VisitFullyConnectedLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;fullyConnectedDescriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;biases, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:ab93a48970564c6eabbc982a2116c1262"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ab93a48970564c6eabbc982a2116c1262">More...</a><br /></td></tr>
<tr class="separator:ab93a48970564c6eabbc982a2116c1262"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b19c99b738524199b49d4b9819d4d8a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8b19c99b738524199b49d4b9819d4d8a">VisitGatherLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a8b19c99b738524199b49d4b9819d4d8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8b19c99b738524199b49d4b9819d4d8a">More...</a><br /></td></tr>
<tr class="separator:a8b19c99b738524199b49d4b9819d4d8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2e2934576c5b4755cc9b36671227bc2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ad2e2934576c5b4755cc9b36671227bc2">VisitGatherLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;gatherDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:ad2e2934576c5b4755cc9b36671227bc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ad2e2934576c5b4755cc9b36671227bc2">More...</a><br /></td></tr>
<tr class="separator:ad2e2934576c5b4755cc9b36671227bc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac81739b57b9a27fb0c363bcd6479692e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ac81739b57b9a27fb0c363bcd6479692e">VisitGreaterLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:ac81739b57b9a27fb0c363bcd6479692e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Greater layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ac81739b57b9a27fb0c363bcd6479692e">More...</a><br /></td></tr>
<tr class="separator:ac81739b57b9a27fb0c363bcd6479692e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6dc51682cb4178194f3f00c2309ec7b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab6dc51682cb4178194f3f00c2309ec7b">VisitInputLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> id, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:ab6dc51682cb4178194f3f00c2309ec7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an <a class="el" href="classarmnn_1_1_input_layer.xhtml" title="A layer user-provided data can be bound to (e.g. inputs, outputs). ">InputLayer</a> should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ab6dc51682cb4178194f3f00c2309ec7b">More...</a><br /></td></tr>
<tr class="separator:ab6dc51682cb4178194f3f00c2309ec7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf4e8d2b1ed2612f4821ed1d2351667b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aaf4e8d2b1ed2612f4821ed1d2351667b">VisitInstanceNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;desc, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:aaf4e8d2b1ed2612f4821ed1d2351667b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an instance normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aaf4e8d2b1ed2612f4821ed1d2351667b">More...</a><br /></td></tr>
<tr class="separator:aaf4e8d2b1ed2612f4821ed1d2351667b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0678ff146765cea41b6d577773680fda"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a0678ff146765cea41b6d577773680fda">VisitL2NormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;desc, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a0678ff146765cea41b6d577773680fda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an L2 normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a0678ff146765cea41b6d577773680fda">More...</a><br /></td></tr>
<tr class="separator:a0678ff146765cea41b6d577773680fda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2db103c5db69877b05b365e50ee3bd5b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2db103c5db69877b05b365e50ee3bd5b">VisitLogSoftmaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;logSoftmaxDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a2db103c5db69877b05b365e50ee3bd5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a log softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a2db103c5db69877b05b365e50ee3bd5b">More...</a><br /></td></tr>
<tr class="separator:a2db103c5db69877b05b365e50ee3bd5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed730aaef50861ea8b7b6276ce880c9a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aed730aaef50861ea8b7b6276ce880c9a">VisitLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;params, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:aed730aaef50861ea8b7b6276ce880c9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an Lstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aed730aaef50861ea8b7b6276ce880c9a">More...</a><br /></td></tr>
<tr class="separator:aed730aaef50861ea8b7b6276ce880c9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cbdbdbda6abefbc2e1eacaad47795bd"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a9cbdbdbda6abefbc2e1eacaad47795bd">VisitMaximumLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a9cbdbdbda6abefbc2e1eacaad47795bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Maximum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a9cbdbdbda6abefbc2e1eacaad47795bd">More...</a><br /></td></tr>
<tr class="separator:a9cbdbdbda6abefbc2e1eacaad47795bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab33e9cae83e312ccc9e12adcf53494e3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab33e9cae83e312ccc9e12adcf53494e3">VisitMeanLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;meanDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:ab33e9cae83e312ccc9e12adcf53494e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Mean layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ab33e9cae83e312ccc9e12adcf53494e3">More...</a><br /></td></tr>
<tr class="separator:ab33e9cae83e312ccc9e12adcf53494e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a002ed3346c6a89035f54e11155d5b1e1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a002ed3346c6a89035f54e11155d5b1e1">VisitMergeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a002ed3346c6a89035f54e11155d5b1e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a merge layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a002ed3346c6a89035f54e11155d5b1e1">More...</a><br /></td></tr>
<tr class="separator:a002ed3346c6a89035f54e11155d5b1e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc80689b27497fe0c4ee3c27b50d1f31"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#acc80689b27497fe0c4ee3c27b50d1f31">VisitMergerLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="namespacearmnn.xhtml#a003d213dd28b0b8c0f26fbf268ccb975">MergerDescriptor</a> &amp;mergerDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:acc80689b27497fe0c4ee3c27b50d1f31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a merger layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#acc80689b27497fe0c4ee3c27b50d1f31">More...</a><br /></td></tr>
<tr class="separator:acc80689b27497fe0c4ee3c27b50d1f31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63187da01b5bb0bd4500ddf851edd0ff"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a63187da01b5bb0bd4500ddf851edd0ff">VisitMinimumLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a63187da01b5bb0bd4500ddf851edd0ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Minimum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a63187da01b5bb0bd4500ddf851edd0ff">More...</a><br /></td></tr>
<tr class="separator:a63187da01b5bb0bd4500ddf851edd0ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e415ad61a4fa40d85a4f0da855cf485"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a1e415ad61a4fa40d85a4f0da855cf485">VisitMultiplicationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a1e415ad61a4fa40d85a4f0da855cf485"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a multiplication layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a1e415ad61a4fa40d85a4f0da855cf485">More...</a><br /></td></tr>
<tr class="separator:a1e415ad61a4fa40d85a4f0da855cf485"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96501b3e43422b9fdf6fc45d89b20992"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a96501b3e43422b9fdf6fc45d89b20992">VisitNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;normalizationDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a96501b3e43422b9fdf6fc45d89b20992"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a96501b3e43422b9fdf6fc45d89b20992">More...</a><br /></td></tr>
<tr class="separator:a96501b3e43422b9fdf6fc45d89b20992"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0da6bde681d919b7282eddad4a446890"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a0da6bde681d919b7282eddad4a446890">VisitOutputLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> id, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a0da6bde681d919b7282eddad4a446890"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an output layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a0da6bde681d919b7282eddad4a446890">More...</a><br /></td></tr>
<tr class="separator:a0da6bde681d919b7282eddad4a446890"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab2febd844bcf654e80cf164984c8904"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aab2febd844bcf654e80cf164984c8904">VisitPadLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;padDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:aab2febd844bcf654e80cf164984c8904"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a pad layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aab2febd844bcf654e80cf164984c8904">More...</a><br /></td></tr>
<tr class="separator:aab2febd844bcf654e80cf164984c8904"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a211e587a05b0c7e7202f8f8894f89894"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a211e587a05b0c7e7202f8f8894f89894">VisitPermuteLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;permuteDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a211e587a05b0c7e7202f8f8894f89894"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a211e587a05b0c7e7202f8f8894f89894">More...</a><br /></td></tr>
<tr class="separator:a211e587a05b0c7e7202f8f8894f89894"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef56afef7d87afa51fd363487c375af5"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aef56afef7d87afa51fd363487c375af5">VisitPooling2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;pooling2dDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:aef56afef7d87afa51fd363487c375af5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aef56afef7d87afa51fd363487c375af5">More...</a><br /></td></tr>
<tr class="separator:aef56afef7d87afa51fd363487c375af5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f6971a5d2c164c691dc7943f4befd5c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a4f6971a5d2c164c691dc7943f4befd5c">VisitPreluLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a4f6971a5d2c164c691dc7943f4befd5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a PReLU activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a4f6971a5d2c164c691dc7943f4befd5c">More...</a><br /></td></tr>
<tr class="separator:a4f6971a5d2c164c691dc7943f4befd5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78ec371d5935104926bca5c5febf6780"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a78ec371d5935104926bca5c5febf6780">VisitQuantizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a78ec371d5935104926bca5c5febf6780"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a quantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a78ec371d5935104926bca5c5febf6780">More...</a><br /></td></tr>
<tr class="separator:a78ec371d5935104926bca5c5febf6780"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f99f4f70c011a8ab5234e5595350781"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a3f99f4f70c011a8ab5234e5595350781">VisitQLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;params, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a3f99f4f70c011a8ab5234e5595350781"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a QLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a3f99f4f70c011a8ab5234e5595350781">More...</a><br /></td></tr>
<tr class="separator:a3f99f4f70c011a8ab5234e5595350781"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb1bac244973743d460064c1e0d816fd"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#acb1bac244973743d460064c1e0d816fd">VisitQuantizedLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">QuantizedLstmInputParams</a> &amp;params, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:acb1bac244973743d460064c1e0d816fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a QuantizedLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#acb1bac244973743d460064c1e0d816fd">More...</a><br /></td></tr>
<tr class="separator:acb1bac244973743d460064c1e0d816fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b2632b6e22ac7bc314bad5532fdb3c9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7b2632b6e22ac7bc314bad5532fdb3c9">VisitRankLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a7b2632b6e22ac7bc314bad5532fdb3c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a rank layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a7b2632b6e22ac7bc314bad5532fdb3c9">More...</a><br /></td></tr>
<tr class="separator:a7b2632b6e22ac7bc314bad5532fdb3c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb732489554691ba852ca323888093ac"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#acb732489554691ba852ca323888093ac">VisitReshapeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;reshapeDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:acb732489554691ba852ca323888093ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#acb732489554691ba852ca323888093ac">More...</a><br /></td></tr>
<tr class="separator:acb732489554691ba852ca323888093ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d87dab666a8aa6e132fcd93717a3c4b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8d87dab666a8aa6e132fcd93717a3c4b">VisitResizeBilinearLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">ResizeBilinearDescriptor</a> &amp;resizeDesc, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a8d87dab666a8aa6e132fcd93717a3c4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a8d87dab666a8aa6e132fcd93717a3c4b">More...</a><br /></td></tr>
<tr class="separator:a8d87dab666a8aa6e132fcd93717a3c4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a306e22f3cc6baaf7a6f1390f669be42e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a306e22f3cc6baaf7a6f1390f669be42e">VisitResizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;resizeDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a306e22f3cc6baaf7a6f1390f669be42e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a306e22f3cc6baaf7a6f1390f669be42e">More...</a><br /></td></tr>
<tr class="separator:a306e22f3cc6baaf7a6f1390f669be42e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a413253dbf325ea0b44559b55242170d1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a413253dbf325ea0b44559b55242170d1">VisitRsqrtLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a413253dbf325ea0b44559b55242170d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Reciprocal of square root layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a413253dbf325ea0b44559b55242170d1">More...</a><br /></td></tr>
<tr class="separator:a413253dbf325ea0b44559b55242170d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad5c9d5c9cf256ea990097732fd1f108"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aad5c9d5c9cf256ea990097732fd1f108">VisitSliceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;sliceDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:aad5c9d5c9cf256ea990097732fd1f108"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aad5c9d5c9cf256ea990097732fd1f108">More...</a><br /></td></tr>
<tr class="separator:aad5c9d5c9cf256ea990097732fd1f108"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae47c90e3188970462a28d297644133d1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ae47c90e3188970462a28d297644133d1">VisitSoftmaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;softmaxDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:ae47c90e3188970462a28d297644133d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ae47c90e3188970462a28d297644133d1">More...</a><br /></td></tr>
<tr class="separator:ae47c90e3188970462a28d297644133d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8c1ec6712293700fb3874f63f2ec5f0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aa8c1ec6712293700fb3874f63f2ec5f0">VisitSpaceToBatchNdLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;spaceToBatchNdDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:aa8c1ec6712293700fb3874f63f2ec5f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#aa8c1ec6712293700fb3874f63f2ec5f0">More...</a><br /></td></tr>
<tr class="separator:aa8c1ec6712293700fb3874f63f2ec5f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ac3fe15d509443ffbe985370b61b913"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7ac3fe15d509443ffbe985370b61b913">VisitSpaceToDepthLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;spaceToDepthDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a7ac3fe15d509443ffbe985370b61b913"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a space to depth layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a7ac3fe15d509443ffbe985370b61b913">More...</a><br /></td></tr>
<tr class="separator:a7ac3fe15d509443ffbe985370b61b913"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45c613d43c30b3314cafb1be3ef7685c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a45c613d43c30b3314cafb1be3ef7685c">VisitSplitterLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;splitterDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a45c613d43c30b3314cafb1be3ef7685c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a45c613d43c30b3314cafb1be3ef7685c">More...</a><br /></td></tr>
<tr class="separator:a45c613d43c30b3314cafb1be3ef7685c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c7df9d37959280f4328848ae4b2be37"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a5c7df9d37959280f4328848ae4b2be37">VisitStackLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;stackDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a5c7df9d37959280f4328848ae4b2be37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a stack layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a5c7df9d37959280f4328848ae4b2be37">More...</a><br /></td></tr>
<tr class="separator:a5c7df9d37959280f4328848ae4b2be37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c97836f7288428fe4f070033d2f0aea"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2c97836f7288428fe4f070033d2f0aea">VisitStandInLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;standInDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a2c97836f7288428fe4f070033d2f0aea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a <a class="el" href="classarmnn_1_1_stand_in_layer.xhtml" title="This layer represents an unknown operation in the input graph. ">StandInLayer</a> should call back to when its Accept(ILaterVisitor&amp;) function is invoked.  <a href="#a2c97836f7288428fe4f070033d2f0aea">More...</a><br /></td></tr>
<tr class="separator:a2c97836f7288428fe4f070033d2f0aea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2f4ca5ada6d8fcf82d7bea2e6a06924"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ac2f4ca5ada6d8fcf82d7bea2e6a06924">VisitStridedSliceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;stridedSliceDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:ac2f4ca5ada6d8fcf82d7bea2e6a06924"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ac2f4ca5ada6d8fcf82d7bea2e6a06924">More...</a><br /></td></tr>
<tr class="separator:ac2f4ca5ada6d8fcf82d7bea2e6a06924"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad339435c8d56522efc647da668d47047"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ad339435c8d56522efc647da668d47047">VisitSubtractionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:ad339435c8d56522efc647da668d47047"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a subtraction layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#ad339435c8d56522efc647da668d47047">More...</a><br /></td></tr>
<tr class="separator:ad339435c8d56522efc647da668d47047"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d33c538a0f3f179ec2eeb4dcee2a21e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a6d33c538a0f3f179ec2eeb4dcee2a21e">VisitSwitchLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a6d33c538a0f3f179ec2eeb4dcee2a21e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a switch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a6d33c538a0f3f179ec2eeb4dcee2a21e">More...</a><br /></td></tr>
<tr class="separator:a6d33c538a0f3f179ec2eeb4dcee2a21e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58bb3bc96c089a4d0b954be81f1899c6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a58bb3bc96c089a4d0b954be81f1899c6">VisitTransposeConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;biases, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a58bb3bc96c089a4d0b954be81f1899c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D transpose convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a58bb3bc96c089a4d0b954be81f1899c6">More...</a><br /></td></tr>
<tr class="separator:a58bb3bc96c089a4d0b954be81f1899c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e101341277244c45eb20f4db63c77a3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a5e101341277244c45eb20f4db63c77a3">VisitTransposeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;transposeDescriptor, const char *name=nullptr)=0</td></tr>
<tr class="memdesc:a5e101341277244c45eb20f4db63c77a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a transpose layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="#a5e101341277244c45eb20f4db63c77a3">More...</a><br /></td></tr>
<tr class="separator:a5e101341277244c45eb20f4db63c77a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a463965a96896bf0d261b44eea5172c7b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a463965a96896bf0d261b44eea5172c7b">StartVisit</a> ()</td></tr>
<tr class="separator:a463965a96896bf0d261b44eea5172c7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4549b1bbb63fa26700d74854e388784f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a4549b1bbb63fa26700d74854e388784f">FinishVisit</a> ()</td></tr>
<tr class="separator:a4549b1bbb63fa26700d74854e388784f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a27fa880bce96ac7355284a7681f2377e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a27fa880bce96ac7355284a7681f2377e">ILayerVisitor</a> ()</td></tr>
<tr class="separator:a27fa880bce96ac7355284a7681f2377e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ad7aeeaf26228ef11c15fa5d4507d8a"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7ad7aeeaf26228ef11c15fa5d4507d8a">~ILayerVisitor</a> ()</td></tr>
<tr class="separator:a7ad7aeeaf26228ef11c15fa5d4507d8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00016">16</a> of file <a class="el" href="_i_layer_visitor_8hpp_source.xhtml">ILayerVisitor.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a27fa880bce96ac7355284a7681f2377e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27fa880bce96ac7355284a7681f2377e">&#9670;&nbsp;</a></span>ILayerVisitor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00019">19</a> of file <a class="el" href="_i_layer_visitor_8hpp_source.xhtml">ILayerVisitor.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<a id="a7ad7aeeaf26228ef11c15fa5d4507d8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ad7aeeaf26228ef11c15fa5d4507d8a">&#9670;&nbsp;</a></span>~ILayerVisitor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00020">20</a> of file <a class="el" href="_i_layer_visitor_8hpp_source.xhtml">ILayerVisitor.hpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00043">ARMNN_DEPRECATED_MSG</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a288db083c224e756f7bb35afe6289b7f">ILayerVisitor::VisitAbsLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab2a1e493b983a932792bc5d0c1a20127">ILayerVisitor::VisitActivationLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2d20b94b7de822f3d29ab12e47e3be4e">ILayerVisitor::VisitAdditionLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8423316906ebe6ae6d28c7f69ad91248">ILayerVisitor::VisitArgMinMaxLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a9e642355474f31268e66a404e6c1b81d">ILayerVisitor::VisitBatchNormalizationLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a1cee693185bcda15bd777008e60c7cf7">ILayerVisitor::VisitBatchToSpaceNdLayer()</a>, and <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a6a1a6856fe4210d9c84c4fb86b4b661e">ILayerVisitor::VisitComparisonLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4549b1bbb63fa26700d74854e388784f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4549b1bbb63fa26700d74854e388784f">&#9670;&nbsp;</a></span>FinishVisit()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void FinishVisit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#a65ad16db7d3eab9c6bfc2cdb7271ef3b">DynamicQuantizationVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00539">539</a> of file <a class="el" href="_i_layer_visitor_8hpp_source.xhtml">ILayerVisitor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_quantizer_utils_8hpp_source.xhtml#l00049">armnn::VisitLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<a id="a463965a96896bf0d261b44eea5172c7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a463965a96896bf0d261b44eea5172c7b">&#9670;&nbsp;</a></span>StartVisit()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void StartVisit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00538">538</a> of file <a class="el" href="_i_layer_visitor_8hpp_source.xhtml">ILayerVisitor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_quantizer_utils_8hpp_source.xhtml#l00049">armnn::VisitLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<a id="a288db083c224e756f7bb35afe6289b7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a288db083c224e756f7bb35afe6289b7f">&#9670;&nbsp;</a></span>VisitAbsLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitAbsLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function an absolute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#afb3379853398423f791269433f6bb43c">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a4abca3536debe2dac00f1d6a0b14a435">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acb663f7919f9566c3dcc8b6478999d34">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acb663f7919f9566c3dcc8b6478999d34">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acb663f7919f9566c3dcc8b6478999d34">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acb663f7919f9566c3dcc8b6478999d34">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#a4abca3536debe2dac00f1d6a0b14a435">DynamicQuantizationVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_abs_layer_8cpp_source.xhtml#l00047">AbsLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00020">ILayerVisitor::~ILayerVisitor()</a>.</p>

</div>
</div>
<a id="ab2a1e493b983a932792bc5d0c1a20127"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2a1e493b983a932792bc5d0c1a20127">&#9670;&nbsp;</a></span>VisitActivationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitActivationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>activationDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">activationDescriptor</td><td>- <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml" title="An ActivationDescriptor for the ActivationLayer. ">ActivationDescriptor</a> to configure the activation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#af493528dec93f39f5081dbefb40bff75">DynamicQuantizationVisitor</a>, <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a3f7b255222c79282f598eb8efefa880b">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#af493528dec93f39f5081dbefb40bff75">StaticRangeVisitor</a>, <a class="el" href="class_test_activation_layer_visitor.xhtml#a70104e9bd1dc97e0ec593d53ca07ceed">TestActivationLayerVisitor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#af493528dec93f39f5081dbefb40bff75">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a30b99e5202fc77b02f92d5c44e5ca86d">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a30b99e5202fc77b02f92d5c44e5ca86d">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a30b99e5202fc77b02f92d5c44e5ca86d">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a30b99e5202fc77b02f92d5c44e5ca86d">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>.</p>

<p class="reference">Referenced by <a class="el" href="_activation_layer_8cpp_source.xhtml#l00046">ActivationLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00020">ILayerVisitor::~ILayerVisitor()</a>.</p>

</div>
</div>
<a id="a2d20b94b7de822f3d29ab12e47e3be4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d20b94b7de822f3d29ab12e47e3be4e">&#9670;&nbsp;</a></span>VisitAdditionLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitAdditionLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an addition layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a7b608d5a44e36e6cd96e915658d49da3">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a7cb4ef1bc9588c4319144460c288022f">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0c9f3396207de48925016a2eee6aa12b">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0c9f3396207de48925016a2eee6aa12b">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0c9f3396207de48925016a2eee6aa12b">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0c9f3396207de48925016a2eee6aa12b">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#a7cb4ef1bc9588c4319144460c288022f">DynamicQuantizationVisitor</a>, <a class="el" href="class_test_addition_layer_visitor.xhtml#a8e8b2a50a021997816e159c5b4efbd2f">TestAdditionLayerVisitor</a>, and <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#a7cb4ef1bc9588c4319144460c288022f">StaticRangeVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_addition_layer_8cpp_source.xhtml#l00033">AdditionLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00020">ILayerVisitor::~ILayerVisitor()</a>.</p>

</div>
</div>
<a id="a8423316906ebe6ae6d28c7f69ad91248"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8423316906ebe6ae6d28c7f69ad91248">&#9670;&nbsp;</a></span>VisitArgMinMaxLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitArgMinMaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>argMinMaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an arg min max layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">argMinMaxDescriptor</td><td>- <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml" title="An ArgMinMaxDescriptor for ArgMinMaxLayer. ">ArgMinMaxDescriptor</a> to configure the activation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ad7c76e1781b02bcc685ec87fe071b1fc">SerializerVisitor</a>, <a class="el" href="class_test_arg_min_max_layer_visitor.xhtml#ad182e15a8f78b102792e81a1f00d42a5">TestArgMinMaxLayerVisitor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a2482bba03a17e59a8ead45530e8efea5">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a719076848950255b929636c97aaaede4">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a719076848950255b929636c97aaaede4">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a719076848950255b929636c97aaaede4">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a719076848950255b929636c97aaaede4">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#a8ce07a6c3587bd156c5a45e7e50dc3d7">DynamicQuantizationVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00087">ArgMinMaxLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00020">ILayerVisitor::~ILayerVisitor()</a>.</p>

</div>
</div>
<a id="a9e642355474f31268e66a404e6c1b81d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e642355474f31268e66a404e6c1b81d">&#9670;&nbsp;</a></span>VisitBatchNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitBatchNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>variance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">mean</td><td>- Pre-calculated mean for each channel. </td></tr>
    <tr><td class="paramname">variance</td><td>- Pre-calculated variance for each channel. </td></tr>
    <tr><td class="paramname">beta</td><td>- Per-channel additive factor. </td></tr>
    <tr><td class="paramname">gamma</td><td>- Per-channel multiplicative factor. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_1_1_test_batch_normalization_layer_visitor.xhtml#a66833912b4e3a62df3111ca9325a2097">TestBatchNormalizationLayerVisitor</a>, <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a53e3051bacbfc5d901184eb7cb29c8c2">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a1532cb8f551812e784ccc14faae407b9">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab0ae25ba5f3c494d1fb32f06cd57af10">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab0ae25ba5f3c494d1fb32f06cd57af10">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab0ae25ba5f3c494d1fb32f06cd57af10">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab0ae25ba5f3c494d1fb32f06cd57af10">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#a1532cb8f551812e784ccc14faae407b9">DynamicQuantizationVisitor</a>, and <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#a1532cb8f551812e784ccc14faae407b9">StaticRangeVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00072">BatchNormalizationLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00020">ILayerVisitor::~ILayerVisitor()</a>.</p>

</div>
</div>
<a id="a1cee693185bcda15bd777008e60c7cf7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1cee693185bcda15bd777008e60c7cf7">&#9670;&nbsp;</a></span>VisitBatchToSpaceNdLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitBatchToSpaceNdLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>batchToSpaceNdDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">batchToSpaceNdDescriptor</td><td>- Description of the layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#af5d09e03a578afa9c0bb8afd11c65485">DynamicQuantizationVisitor</a>, <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#af5d09e03a578afa9c0bb8afd11c65485">StaticRangeVisitor</a>, <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a1d1235559a11a1aa63724eba742ad29c">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#af5d09e03a578afa9c0bb8afd11c65485">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a62aac266e23bd680633e62832f56bc11">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a62aac266e23bd680633e62832f56bc11">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a62aac266e23bd680633e62832f56bc11">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a62aac266e23bd680633e62832f56bc11">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_batch_to_space_nd_layer_visitor.xhtml#abd5b11a31d323707f10145455d772945">TestBatchToSpaceNdLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00097">BatchToSpaceNdLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00020">ILayerVisitor::~ILayerVisitor()</a>.</p>

</div>
</div>
<a id="a6a1a6856fe4210d9c84c4fb86b4b661e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a1a6856fe4210d9c84c4fb86b4b661e">&#9670;&nbsp;</a></span>VisitComparisonLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitComparisonLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>comparisonDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Comparison layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">comparisonDescriptor</td><td>- Description of the layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#afb1afddc0f2cb1caac0daf5bbd13c8c8">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a6a1adf7bf81e5cbb74b4cc4e8946c653">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a95dc828296e6d05c0bf0b691d4dc6a3f">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a95dc828296e6d05c0bf0b691d4dc6a3f">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a95dc828296e6d05c0bf0b691d4dc6a3f">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a95dc828296e6d05c0bf0b691d4dc6a3f">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_comparison_layer_visitor.xhtml#afd43077d8634db560f46af7cf1b04511">TestComparisonLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00075">ComparisonLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00020">ILayerVisitor::~ILayerVisitor()</a>.</p>

</div>
</div>
<a id="aeb90d7587f7887aee1f2b43261d4ee5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb90d7587f7887aee1f2b43261d4ee5c">&#9670;&nbsp;</a></span>VisitConcatLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitConcatLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>concatDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">concatDescriptor</td><td>- ConcatDescriptor (synonym for <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml" title="An OriginsDescriptor for the ConcatLayer. ">OriginsDescriptor</a>) to configure the concatenation process. Number of Views must be equal to the number of inputs, and their order must match - e.g. first view corresponds to the first input, second view to the second input, etc.... </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#a8a3cd0b0d46a765ad2b0652c72a31d0c">DynamicQuantizationVisitor</a>, <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a148d342b40eada32d536c2ccda673405">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#afb527e0c7c30b56da911fee8c7b7a011">StaticRangeVisitor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#afb527e0c7c30b56da911fee8c7b7a011">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2d4f84683c4a00dfb5eecb6b165d41b9">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2d4f84683c4a00dfb5eecb6b165d41b9">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2d4f84683c4a00dfb5eecb6b165d41b9">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2d4f84683c4a00dfb5eecb6b165d41b9">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_concat_layer_visitor.xhtml#a82a4d1fee8d0f7c207835e11d889ce47">TestConcatLayerVisitor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">93</a> of file <a class="el" href="_i_layer_visitor_8hpp_source.xhtml">ILayerVisitor.hpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors()</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00043">ARMNN_DEPRECATED_MSG</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2f123a6a99ac143c0f3806cb505765cd">ILayerVisitor::VisitConstantLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#abc8fe4c6cbc8fa2b13c525500dddfbf6">ILayerVisitor::VisitConvolution2dLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a72d308d6f24ffb8846375d770394af66">ILayerVisitor::VisitDepthToSpaceLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ad39aaac8f8fb790ae364c87f1a249d68">ILayerVisitor::VisitDepthwiseConvolution2dLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a0fa32cbc3ca68467c749d50e844faeaf">ILayerVisitor::VisitDequantizeLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab270e1bebbe01a22543cc49ac3a14c25">ILayerVisitor::VisitDetectionPostProcessLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ada3c96a7b0d4251edb24584096b90a24">ILayerVisitor::VisitDivisionLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aaf99c2bdfe61c48821f23826433a5abc">ILayerVisitor::VisitElementwiseUnaryLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ae242b544b15e9d80aa2f3be385540eb6">ILayerVisitor::VisitEqualLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#abf67d8273706f9dfc51be559b8505199">ILayerVisitor::VisitFillLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a3fd73f343863eedb8dde418c6183193c">ILayerVisitor::VisitFloorLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab93a48970564c6eabbc982a2116c1262">ILayerVisitor::VisitFullyConnectedLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8b19c99b738524199b49d4b9819d4d8a">ILayerVisitor::VisitGatherLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ac81739b57b9a27fb0c363bcd6479692e">ILayerVisitor::VisitGreaterLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab6dc51682cb4178194f3f00c2309ec7b">ILayerVisitor::VisitInputLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aaf4e8d2b1ed2612f4821ed1d2351667b">ILayerVisitor::VisitInstanceNormalizationLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a0678ff146765cea41b6d577773680fda">ILayerVisitor::VisitL2NormalizationLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2db103c5db69877b05b365e50ee3bd5b">ILayerVisitor::VisitLogSoftmaxLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aed730aaef50861ea8b7b6276ce880c9a">ILayerVisitor::VisitLstmLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a9cbdbdbda6abefbc2e1eacaad47795bd">ILayerVisitor::VisitMaximumLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ab33e9cae83e312ccc9e12adcf53494e3">ILayerVisitor::VisitMeanLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a002ed3346c6a89035f54e11155d5b1e1">ILayerVisitor::VisitMergeLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#acc80689b27497fe0c4ee3c27b50d1f31">ILayerVisitor::VisitMergerLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a63187da01b5bb0bd4500ddf851edd0ff">ILayerVisitor::VisitMinimumLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a1e415ad61a4fa40d85a4f0da855cf485">ILayerVisitor::VisitMultiplicationLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a96501b3e43422b9fdf6fc45d89b20992">ILayerVisitor::VisitNormalizationLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a0da6bde681d919b7282eddad4a446890">ILayerVisitor::VisitOutputLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aab2febd844bcf654e80cf164984c8904">ILayerVisitor::VisitPadLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a211e587a05b0c7e7202f8f8894f89894">ILayerVisitor::VisitPermuteLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aef56afef7d87afa51fd363487c375af5">ILayerVisitor::VisitPooling2dLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a4f6971a5d2c164c691dc7943f4befd5c">ILayerVisitor::VisitPreluLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a3f99f4f70c011a8ab5234e5595350781">ILayerVisitor::VisitQLstmLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#acb1bac244973743d460064c1e0d816fd">ILayerVisitor::VisitQuantizedLstmLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a78ec371d5935104926bca5c5febf6780">ILayerVisitor::VisitQuantizeLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7b2632b6e22ac7bc314bad5532fdb3c9">ILayerVisitor::VisitRankLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#acb732489554691ba852ca323888093ac">ILayerVisitor::VisitReshapeLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a8d87dab666a8aa6e132fcd93717a3c4b">ILayerVisitor::VisitResizeBilinearLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a306e22f3cc6baaf7a6f1390f669be42e">ILayerVisitor::VisitResizeLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a413253dbf325ea0b44559b55242170d1">ILayerVisitor::VisitRsqrtLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aad5c9d5c9cf256ea990097732fd1f108">ILayerVisitor::VisitSliceLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ae47c90e3188970462a28d297644133d1">ILayerVisitor::VisitSoftmaxLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#aa8c1ec6712293700fb3874f63f2ec5f0">ILayerVisitor::VisitSpaceToBatchNdLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7ac3fe15d509443ffbe985370b61b913">ILayerVisitor::VisitSpaceToDepthLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a45c613d43c30b3314cafb1be3ef7685c">ILayerVisitor::VisitSplitterLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a5c7df9d37959280f4328848ae4b2be37">ILayerVisitor::VisitStackLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a2c97836f7288428fe4f070033d2f0aea">ILayerVisitor::VisitStandInLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ac2f4ca5ada6d8fcf82d7bea2e6a06924">ILayerVisitor::VisitStridedSliceLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#ad339435c8d56522efc647da668d47047">ILayerVisitor::VisitSubtractionLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a6d33c538a0f3f179ec2eeb4dcee2a21e">ILayerVisitor::VisitSwitchLayer()</a>, <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a58bb3bc96c089a4d0b954be81f1899c6">ILayerVisitor::VisitTransposeConvolution2dLayer()</a>, and <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a5e101341277244c45eb20f4db63c77a3">ILayerVisitor::VisitTransposeLayer()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_concat_layer_8cpp_source.xhtml#l00312">ConcatLayer::Accept()</a>.</p>
<div class="fragment"><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="comment">// default implementation to ease transition while MergerLayer is being deprecated</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_visitor.xhtml#acc80689b27497fe0c4ee3c27b50d1f31">VisitMergerLayer</a>(layer, concatDescriptor, name);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_i_layer_visitor_xhtml_acc80689b27497fe0c4ee3c27b50d1f31"><div class="ttname"><a href="classarmnn_1_1_i_layer_visitor.xhtml#acc80689b27497fe0c4ee3c27b50d1f31">armnn::ILayerVisitor::VisitMergerLayer</a></div><div class="ttdeci">virtual void VisitMergerLayer(const IConnectableLayer *layer, const MergerDescriptor &amp;mergerDescriptor, const char *name=nullptr)=0</div><div class="ttdoc">Function that a merger layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_ab66a241a0ed3ee89c866e777b035d0ed"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_BEGIN</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00033">Deprecated.hpp:33</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_ad762b11b48e5c1d1c1743f529485728a"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_END</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00034">Deprecated.hpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2f123a6a99ac143c0f3806cb505765cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f123a6a99ac143c0f3806cb505765cd">&#9670;&nbsp;</a></span>VisitConstantLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitConstantLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a layer with no inputs and a single output, which always corresponds to the passed in constant tensor should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">input</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> to be provided as the only output of the layer. The layer will maintain its own copy of the tensor data, meaning the memory referenced by <em>input</em> can be freed or reused after this function is called. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_1_1_test_constant_layer_visitor.xhtml#a8fc14cd9ff3e7d4581bbd0cf3d91014f">TestConstantLayerVisitor</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#aeb652d74e4b3596e85b22c2d52144f73">DynamicQuantizationVisitor</a>, <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ae7bb76117b0e10efef5d3d6637df4480">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#aeb652d74e4b3596e85b22c2d52144f73">StaticRangeVisitor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#aeb652d74e4b3596e85b22c2d52144f73">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a90698dba3e90ced6f562cda146bf15e3">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a90698dba3e90ced6f562cda146bf15e3">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a90698dba3e90ced6f562cda146bf15e3">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a90698dba3e90ced6f562cda146bf15e3">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>.</p>

<p class="reference">Referenced by <a class="el" href="_constant_layer_8cpp_source.xhtml#l00063">ConstantLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="abc8fe4c6cbc8fa2b13c525500dddfbf6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc8fe4c6cbc8fa2b13c525500dddfbf6">&#9670;&nbsp;</a></span>VisitConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">convolution2dDescriptor</td><td>- Description of the 2D convolution layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the weights data. </td></tr>
    <tr><td class="paramname">biases</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> tensor for the bias data. If specified, must match the output tensor shape. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#af4c7002e267521e7ea0933ef2b767f9e">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#ac2f379ba77b06095e0c024e232ec1fd4">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aff3099f516e132f4d8818a54fa1ee767">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aff3099f516e132f4d8818a54fa1ee767">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aff3099f516e132f4d8818a54fa1ee767">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aff3099f516e132f4d8818a54fa1ee767">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#ac2f379ba77b06095e0c024e232ec1fd4">DynamicQuantizationVisitor</a>, <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#ac2f379ba77b06095e0c024e232ec1fd4">StaticRangeVisitor</a>, and <a class="el" href="classarmnn_1_1_test_convolution2d_layer_visitor.xhtml#ac2f379ba77b06095e0c024e232ec1fd4">TestConvolution2dLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00140">Convolution2dLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a72d308d6f24ffb8846375d770394af66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72d308d6f24ffb8846375d770394af66">&#9670;&nbsp;</a></span>VisitDepthToSpaceLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitDepthToSpaceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>depthToSpaceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a depth to space layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">depthToSpaceDescriptor</td><td>- Parameters for the depth to space operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ac30449d327001492692fa23a666efd7f">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#ac0daac0e6ce49805580a8a50a8d3d514">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ad3aaff3b6165f8de16522bc4a1ed32a0">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ad3aaff3b6165f8de16522bc4a1ed32a0">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ad3aaff3b6165f8de16522bc4a1ed32a0">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ad3aaff3b6165f8de16522bc4a1ed32a0">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_depth_to_space_layer_visitor.xhtml#af12dba5e6a354df7c18370a3a7a36061">TestDepthToSpaceLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00076">DepthToSpaceLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="ad39aaac8f8fb790ae364c87f1a249d68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad39aaac8f8fb790ae364c87f1a249d68">&#9670;&nbsp;</a></span>VisitDepthwiseConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitDepthwiseConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a 2D depthwise convolution layer with biases should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">convolution2dDescriptor</td><td>- Description of the 2D depthwise convolution layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the weights. Expected format: [channelMultiplier, inputChannels, height, width]. </td></tr>
    <tr><td class="paramname">biases</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> tensor for the bias data. If specified, must match the output tensor shape. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#afd318b4ffed3c04a4807ca2c13077ab7">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a554e88817e6fd98645388873a108f868">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a70050fc50ee44a439665f914d5fe9684">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a70050fc50ee44a439665f914d5fe9684">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a70050fc50ee44a439665f914d5fe9684">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a70050fc50ee44a439665f914d5fe9684">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_test_depthwise_convolution2d_layer_visitor.xhtml#ad68842514df44ee37485f2c1d0ef5b29">TestDepthwiseConvolution2dLayerVisitor</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#a554e88817e6fd98645388873a108f868">DynamicQuantizationVisitor</a>, and <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#a554e88817e6fd98645388873a108f868">StaticRangeVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00148">DepthwiseConvolution2dLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a0fa32cbc3ca68467c749d50e844faeaf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fa32cbc3ca68467c749d50e844faeaf">&#9670;&nbsp;</a></span>VisitDequantizeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitDequantizeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a Dequantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a9a502d24112baa19f11c76bc651e0cc0">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aa27cc900d32dcc4a92f59e3bab4f4653">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aa27cc900d32dcc4a92f59e3bab4f4653">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aa27cc900d32dcc4a92f59e3bab4f4653">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aa27cc900d32dcc4a92f59e3bab4f4653">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_dequantize_layer_visitor.xhtml#ae988a88e27a6fd19c8c34565856832b6">TestDequantizeLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00048">DequantizeLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="ab270e1bebbe01a22543cc49ac3a14c25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab270e1bebbe01a22543cc49ac3a14c25">&#9670;&nbsp;</a></span>VisitDetectionPostProcessLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitDetectionPostProcessLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a Detection PostProcess layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">descriptor</td><td>- Description of the Detection PostProcess layer. </td></tr>
    <tr><td class="paramname">anchors</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the anchors. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ace945f2f1d416b240f9c0344671b17ad">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a88bad2eef809ccf6f2129f9ed4a6f3a7">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a88bad2eef809ccf6f2129f9ed4a6f3a7">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a88bad2eef809ccf6f2129f9ed4a6f3a7">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a88bad2eef809ccf6f2129f9ed4a6f3a7">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>.</p>

<p class="reference">Referenced by <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00079">DetectionPostProcessLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="ada3c96a7b0d4251edb24584096b90a24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada3c96a7b0d4251edb24584096b90a24">&#9670;&nbsp;</a></span>VisitDivisionLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitDivisionLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a division layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a9cc611872dcd6b526c84231e0b6920da">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a7450859464a381eafaedb33adc582f75">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a7450859464a381eafaedb33adc582f75">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a7450859464a381eafaedb33adc582f75">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a7450859464a381eafaedb33adc582f75">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_division_layer_visitor.xhtml#abad13f0c666e3a256a04bf057ec44f43">TestDivisionLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_division_layer_8cpp_source.xhtml#l00033">DivisionLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="aaf99c2bdfe61c48821f23826433a5abc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf99c2bdfe61c48821f23826433a5abc">&#9670;&nbsp;</a></span>VisitElementwiseUnaryLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitElementwiseUnaryLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>elementwiseUnaryDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">elementwiseUnaryDescriptor</td><td>- Description of the layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a2e0686c8a9f4a53f78fd35f83fa77c56">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9d02f4bfaffcb16e340e9b8c20bc5e35">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9d02f4bfaffcb16e340e9b8c20bc5e35">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9d02f4bfaffcb16e340e9b8c20bc5e35">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9d02f4bfaffcb16e340e9b8c20bc5e35">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a237f88794e504388160a87813b66b9e3">QuantizerVisitor</a>, and <a class="el" href="class_test_elementwise_unary_layer_visitor.xhtml#ab0de6425150b30ba857eae132efe5f58">TestElementwiseUnaryLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00058">ElementwiseUnaryLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="ae242b544b15e9d80aa2f3be385540eb6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae242b544b15e9d80aa2f3be385540eb6">&#9670;&nbsp;</a></span>VisitEqualLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitEqualLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function an Equal layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a778b3249ab3704387496d45c39480ecb">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3249cd1186dc7e700a0ec0884fb9d5fa">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3249cd1186dc7e700a0ec0884fb9d5fa">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3249cd1186dc7e700a0ec0884fb9d5fa">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3249cd1186dc7e700a0ec0884fb9d5fa">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="abf67d8273706f9dfc51be559b8505199"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf67d8273706f9dfc51be559b8505199">&#9670;&nbsp;</a></span>VisitFillLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitFillLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>fillDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a fill layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">fillDescriptor</td><td>- Description of the layer </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a5cba52e71687c849f356dd218bd7707c">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae343d79924ac474939c3e38a8b80004e">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae343d79924ac474939c3e38a8b80004e">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae343d79924ac474939c3e38a8b80004e">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae343d79924ac474939c3e38a8b80004e">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a2da06e8f6265a430bb6907107c4c38b1">QuantizerVisitor</a>, and <a class="el" href="class_test_fill_layer_visitor.xhtml#a2c1d3ba1f6a601e3a4562518254cbeed">TestFillLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_fill_layer_8cpp_source.xhtml#l00052">FillLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a3fd73f343863eedb8dde418c6183193c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fd73f343863eedb8dde418c6183193c">&#9670;&nbsp;</a></span>VisitFloorLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitFloorLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a floor layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a64c53003d714d4957829f821a5e4153d">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a060c3a3f978fec03212afaff1fe1648d">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a060c3a3f978fec03212afaff1fe1648d">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a060c3a3f978fec03212afaff1fe1648d">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a060c3a3f978fec03212afaff1fe1648d">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_floor_layer_visitor.xhtml#ade86f8f6842f2ab1a1472ade46fe913b">TestFloorLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_floor_layer_8cpp_source.xhtml#l00046">FloorLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="ab93a48970564c6eabbc982a2116c1262"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab93a48970564c6eabbc982a2116c1262">&#9670;&nbsp;</a></span>VisitFullyConnectedLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitFullyConnectedLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>fullyConnectedDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">fullyConnectedDescriptor</td><td>- Description of the fully connected layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the weights data. </td></tr>
    <tr><td class="paramname">biases</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> tensor for the bias data. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a0d4758122aed43d472cdbd59e84bc047">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9049cf6d72d4b67fff93670f21c09da3">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9049cf6d72d4b67fff93670f21c09da3">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9049cf6d72d4b67fff93670f21c09da3">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9049cf6d72d4b67fff93670f21c09da3">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_test_fully_connected_layer_vistor.xhtml#ad40e29d0b682d39b260cea5966f591ac">TestFullyConnectedLayerVistor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#abbdd655f9e0bec625369079ed97f1328">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#ac98eae261af6c8d5f7161a01a1959e72">DynamicQuantizationVisitor</a>, and <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#ac98eae261af6c8d5f7161a01a1959e72">StaticRangeVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00087">FullyConnectedLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a8b19c99b738524199b49d4b9819d4d8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b19c99b738524199b49d4b9819d4d8a">&#9670;&nbsp;</a></span>VisitGatherLayer() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitGatherLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ad297ae199a9fa61e1fd983d645da6471">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae7639178bd8c29ffa83162dfd108b725">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae7639178bd8c29ffa83162dfd108b725">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae7639178bd8c29ffa83162dfd108b725">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae7639178bd8c29ffa83162dfd108b725">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gather_layer_8cpp_source.xhtml#l00074">GatherLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="ad2e2934576c5b4755cc9b36671227bc2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2e2934576c5b4755cc9b36671227bc2">&#9670;&nbsp;</a></span>VisitGatherLayer() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitGatherLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>gatherDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">gatherDescriptor</td><td>- Parameters for the gather operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ab2398d989dad3d2be45a91343f1f1e3f">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aea011723381847939ee1773d7c6fac25">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aea011723381847939ee1773d7c6fac25">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aea011723381847939ee1773d7c6fac25">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aea011723381847939ee1773d7c6fac25">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_gather_layer_visitor.xhtml#aeb20612b956cb18066b0554af982d063">TestGatherLayerVisitor</a>.</p>

</div>
</div>
<a id="ac81739b57b9a27fb0c363bcd6479692e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac81739b57b9a27fb0c363bcd6479692e">&#9670;&nbsp;</a></span>VisitGreaterLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitGreaterLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Greater layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ab0d8bc8095f70f4616bc3ace8dd46b02">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2a28dbfcd1e83bc8158d78feb93d4a0c">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2a28dbfcd1e83bc8158d78feb93d4a0c">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2a28dbfcd1e83bc8158d78feb93d4a0c">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2a28dbfcd1e83bc8158d78feb93d4a0c">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="ab6dc51682cb4178194f3f00c2309ec7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6dc51682cb4178194f3f00c2309ec7b">&#9670;&nbsp;</a></span>VisitInputLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitInputLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an <a class="el" href="classarmnn_1_1_input_layer.xhtml" title="A layer user-provided data can be bound to (e.g. inputs, outputs). ">InputLayer</a> should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">id</td><td>- User generated id to uniquely identify a particular input. The same id needs to be specified when passing the inputs to the <a class="el" href="classarmnn_1_1_i_runtime.xhtml#aec0dc8016a3b1e444dfc1ffb5f15195c" title="Evaluates a network using input in inputTensors and outputs filled into outputTensors. ">IRuntime::EnqueueWorkload()</a> function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ade20ba84b9c46a9afedf0b969f870919">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6c23f9e9d8427775925d071feee5dbd1">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6c23f9e9d8427775925d071feee5dbd1">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6c23f9e9d8427775925d071feee5dbd1">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6c23f9e9d8427775925d071feee5dbd1">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#a2ca539d734553e606c0134940e444298">DynamicQuantizationVisitor</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a2ca539d734553e606c0134940e444298">QuantizerVisitor</a>, <a class="el" href="classarmnn_quantizer_1_1_input_layer_visitor.xhtml#a0153ae82bec6d8b2e383d99faab51661">InputLayerVisitor</a>, <a class="el" href="classarmnn_1_1_test_input_layer_visitor.xhtml#a2ca539d734553e606c0134940e444298">TestInputLayerVisitor</a>, and <a class="el" href="classarmnn_1_1_override_input_range_visitor.xhtml#a2ca539d734553e606c0134940e444298">OverrideInputRangeVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_input_layer_8cpp_source.xhtml#l00038">InputLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="aaf4e8d2b1ed2612f4821ed1d2351667b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf4e8d2b1ed2612f4821ed1d2351667b">&#9670;&nbsp;</a></span>VisitInstanceNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitInstanceNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an instance normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">desc</td><td>- Parameters for the instance normalization operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#aae3bf0ab71205ddf8916512ac8330a1e">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a58f90a911e6827702c478cabaeac57fe">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a58f90a911e6827702c478cabaeac57fe">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a58f90a911e6827702c478cabaeac57fe">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a58f90a911e6827702c478cabaeac57fe">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#ac6da520014db9cd2d4bede451e37ca0a">QuantizerVisitor</a>, and <a class="el" href="class_test_instance_normalization_layer_visitor.xhtml#a25af7a2d5f41733c34d69a2a8b7af322">TestInstanceNormalizationLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00047">InstanceNormalizationLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a0678ff146765cea41b6d577773680fda"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0678ff146765cea41b6d577773680fda">&#9670;&nbsp;</a></span>VisitL2NormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitL2NormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that an L2 normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<p>Normalization is performed along dimension 1, but requires a 4d input. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">desc</td><td>- Parameters for the L2 normalization operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a227d927a30f0700956047d9f65fca813">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae68e2b431ea3d2822f19ad4ac806fdaa">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae68e2b431ea3d2822f19ad4ac806fdaa">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae68e2b431ea3d2822f19ad4ac806fdaa">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae68e2b431ea3d2822f19ad4ac806fdaa">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_l2_normalization_layer_visitor.xhtml#ac7bbd8c7a31ff2b4b864f1114faa6f62">TestL2NormalizationLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00047">L2NormalizationLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a2db103c5db69877b05b365e50ee3bd5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2db103c5db69877b05b365e50ee3bd5b">&#9670;&nbsp;</a></span>VisitLogSoftmaxLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitLogSoftmaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>logSoftmaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a log softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">logSoftmaxDescriptor</td><td>- LogSoftmaxDescriptor to configure the log softmax. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a5c02b1f1028daf64f7c6244ac68b37f5">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4d2e5580385ee664830720698d112c">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4d2e5580385ee664830720698d112c">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4d2e5580385ee664830720698d112c">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4d2e5580385ee664830720698d112c">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#abe0c29cd370a84c3e669d28dda18afb7">QuantizerVisitor</a>, and <a class="el" href="class_test_log_softmax_layer_visitor.xhtml#a4eb04f9ec8e68aa3e7262a8ea537793a">TestLogSoftmaxLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00046">LogSoftmaxLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="aed730aaef50861ea8b7b6276ce880c9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed730aaef50861ea8b7b6276ce880c9a">&#9670;&nbsp;</a></span>VisitLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function an Lstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">descriptor</td><td>- Parameters controlling the operation of the Lstm operation. </td></tr>
    <tr><td class="paramname">params</td><td>- The weights and biases for the LSTM cell. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_1_1_test_lstm_layer_visitor.xhtml#a17f68e9e232fe06a015da85ff9e147a6">TestLstmLayerVisitor</a>, <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a2b37a5d520204e4e1652e6d4d38774b3">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aaf1a238ec5b6bb172bc4cd3811f08b28">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aaf1a238ec5b6bb172bc4cd3811f08b28">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aaf1a238ec5b6bb172bc4cd3811f08b28">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aaf1a238ec5b6bb172bc4cd3811f08b28">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>.</p>

<p class="reference">Referenced by <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00301">LstmLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a9cbdbdbda6abefbc2e1eacaad47795bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9cbdbdbda6abefbc2e1eacaad47795bd">&#9670;&nbsp;</a></span>VisitMaximumLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitMaximumLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Maximum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a29cb9e904f31bcc86b1ab75d13d343a4">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a778e1b2219e3eb2d790d6e6e653a9f25">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a778e1b2219e3eb2d790d6e6e653a9f25">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a778e1b2219e3eb2d790d6e6e653a9f25">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a778e1b2219e3eb2d790d6e6e653a9f25">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_maximum_layer_visitor.xhtml#a8dff1fc263f5d27c5c7eb72525616819">TestMaximumLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_maximum_layer_8cpp_source.xhtml#l00032">MaximumLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="ab33e9cae83e312ccc9e12adcf53494e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab33e9cae83e312ccc9e12adcf53494e3">&#9670;&nbsp;</a></span>VisitMeanLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitMeanLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>meanDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Mean layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">meanDescriptor</td><td>- Parameters for the mean operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a1404339c6c051dc6924a16172db4b3ee">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0180a15e542f4ef240fadc09fe4b2e3f">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0180a15e542f4ef240fadc09fe4b2e3f">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0180a15e542f4ef240fadc09fe4b2e3f">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0180a15e542f4ef240fadc09fe4b2e3f">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a0a2f55bda910ccf8816d2678b7c980b6">QuantizerVisitor</a>, and <a class="el" href="class_test_mean_layer_visitor.xhtml#a4474b89b12f8cf84ddad2f69fa56b4b3">TestMeanLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mean_layer_8cpp_source.xhtml#l00103">MeanLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a002ed3346c6a89035f54e11155d5b1e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a002ed3346c6a89035f54e11155d5b1e1">&#9670;&nbsp;</a></span>VisitMergeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitMergeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a merge layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ae91857ae8a9be3557316eb446c40ba98">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aafb62c879f0c78bfdc3c4e4f2cb82e68">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aafb62c879f0c78bfdc3c4e4f2cb82e68">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aafb62c879f0c78bfdc3c4e4f2cb82e68">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aafb62c879f0c78bfdc3c4e4f2cb82e68">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_merge_layer_visitor.xhtml#a1c5bedcbd22dbfe7979ccdd11fe8a2b0">TestMergeLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_merge_layer_8cpp_source.xhtml#l00061">MergeLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="acc80689b27497fe0c4ee3c27b50d1f31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc80689b27497fe0c4ee3c27b50d1f31">&#9670;&nbsp;</a></span>VisitMergerLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitMergerLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a003d213dd28b0b8c0f26fbf268ccb975">MergerDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>mergerDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a merger layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">mergerDescriptor</td><td>- MergerDescriptor (synonym for <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml" title="An OriginsDescriptor for the ConcatLayer. ">OriginsDescriptor</a>) to configure the concatenation process. Number of Views must be equal to the number of inputs, and their order must match - e.g. first view corresponds to the first input, second view to the second input, etc.... </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ac6013ef93bf6ec846910e019a54cf021">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acef69a3870409ca9a6130db91047e729">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acef69a3870409ca9a6130db91047e729">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acef69a3870409ca9a6130db91047e729">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acef69a3870409ca9a6130db91047e729">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a63187da01b5bb0bd4500ddf851edd0ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63187da01b5bb0bd4500ddf851edd0ff">&#9670;&nbsp;</a></span>VisitMinimumLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitMinimumLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Minimum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a87432c758f53e21892780fc3b10b5c2a">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1e24e9a7bf52efc1699c126435574e95">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1e24e9a7bf52efc1699c126435574e95">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1e24e9a7bf52efc1699c126435574e95">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1e24e9a7bf52efc1699c126435574e95">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_minimum_layer_visitor.xhtml#a6945889384b43d06c902e09c2fa53f2b">TestMinimumLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_minimum_layer_8cpp_source.xhtml#l00033">MinimumLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a1e415ad61a4fa40d85a4f0da855cf485"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e415ad61a4fa40d85a4f0da855cf485">&#9670;&nbsp;</a></span>VisitMultiplicationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitMultiplicationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a multiplication layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a23e516e20d857cd11ce80d0967ae48f3">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac57d22126a9131108214df9177addade">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac57d22126a9131108214df9177addade">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac57d22126a9131108214df9177addade">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac57d22126a9131108214df9177addade">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a1c587861e672cedaedd1f32bbce44afc">QuantizerVisitor</a>, and <a class="el" href="class_test_multiplication_layer_visitor.xhtml#a9f5d0d4838758c83b30132f5b58ecabe">TestMultiplicationLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_multiplication_layer_8cpp_source.xhtml#l00033">MultiplicationLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a96501b3e43422b9fdf6fc45d89b20992"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96501b3e43422b9fdf6fc45d89b20992">&#9670;&nbsp;</a></span>VisitNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>normalizationDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">normalizationDescriptor</td><td>- <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml" title="A NormalizationDescriptor for the NormalizationLayer. ">NormalizationDescriptor</a> to configure the normalization. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#adf9c46396d90c17839fcbdd9f400166e">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3150ff2299a2e193952300b8c9edd1e1">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3150ff2299a2e193952300b8c9edd1e1">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3150ff2299a2e193952300b8c9edd1e1">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3150ff2299a2e193952300b8c9edd1e1">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#ab0946e6e13740185d7b7939720f347f1">QuantizerVisitor</a>, <a class="el" href="class_test_normalization_layer_visitor.xhtml#ad844c577a58cae918e3c33fabe7ee53a">TestNormalizationLayerVisitor</a>, and <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#afaee82902e4fd3eb9953f1f40217ac67">DynamicQuantizationVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00047">NormalizationLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a0da6bde681d919b7282eddad4a446890"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0da6bde681d919b7282eddad4a446890">&#9670;&nbsp;</a></span>VisitOutputLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitOutputLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function an output layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">id</td><td>- User generated id to uniquely identify a particular output. The same id needs to be specified when passing the outputs to the <a class="el" href="classarmnn_1_1_i_runtime.xhtml#aec0dc8016a3b1e444dfc1ffb5f15195c" title="Evaluates a network using input in inputTensors and outputs filled into outputTensors. ">IRuntime::EnqueueWorkload()</a> function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a56858f9071c8bf57fdb31a96833ff4bd">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acc39ddb06acfd91cf3cfb0fcd9337005">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acc39ddb06acfd91cf3cfb0fcd9337005">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acc39ddb06acfd91cf3cfb0fcd9337005">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acc39ddb06acfd91cf3cfb0fcd9337005">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#ac75d60924c52b96ea6f9567fcfa2db10">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#ac75d60924c52b96ea6f9567fcfa2db10">DynamicQuantizationVisitor</a>, and <a class="el" href="classarmnn_1_1_test_output_layer_visitor.xhtml#ac75d60924c52b96ea6f9567fcfa2db10">TestOutputLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_output_layer_8cpp_source.xhtml#l00040">OutputLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="aab2febd844bcf654e80cf164984c8904"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab2febd844bcf654e80cf164984c8904">&#9670;&nbsp;</a></span>VisitPadLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitPadLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>padDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a pad layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">paddings</td><td>- n by 2 tensor, where n is the rank of the input tensor, such that paddings[i,0] indicates the amount of padding to add in front of dimension i, and paddings[i,1] indicates the amount of padding to add after the end of dimension i </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a3569b9af864b7b141b067e7de3902bf3">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a240e1b725cc204bb468b6b402e1670">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a240e1b725cc204bb468b6b402e1670">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a240e1b725cc204bb468b6b402e1670">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a240e1b725cc204bb468b6b402e1670">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a0b4b2e9b5578bf50197c6929a6a48071">QuantizerVisitor</a>, and <a class="el" href="class_test_pad_layer_visitor.xhtml#a2d6f74a95551413af84e39e7bc945ee6">TestPadLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_pad_layer_8cpp_source.xhtml#l00074">PadLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a211e587a05b0c7e7202f8f8894f89894"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a211e587a05b0c7e7202f8f8894f89894">&#9670;&nbsp;</a></span>VisitPermuteLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitPermuteLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>permuteDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">permuteDescriptor</td><td>- <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml" title="A PermuteDescriptor for the PermuteLayer. ">PermuteDescriptor</a> to configure the permute. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ac81df940ac47b39a703a2cbe017bda8e">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a275f4c270ce472abc8701f6475ff7f38">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a275f4c270ce472abc8701f6475ff7f38">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a275f4c270ce472abc8701f6475ff7f38">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a275f4c270ce472abc8701f6475ff7f38">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a8667c9d0c42575e31c7a630fea8c7256">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#ad5532a4626c0228acc7b01fa0f5515eb">DynamicQuantizationVisitor</a>, <a class="el" href="class_test_permute_layer_visitor.xhtml#a181b55393cb73902343f9ba888d5aee5">TestPermuteLayerVisitor</a>, and <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#ad5532a4626c0228acc7b01fa0f5515eb">StaticRangeVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_permute_layer_8cpp_source.xhtml#l00058">PermuteLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="aef56afef7d87afa51fd363487c375af5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef56afef7d87afa51fd363487c375af5">&#9670;&nbsp;</a></span>VisitPooling2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitPooling2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>pooling2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">pooling2dDescriptor</td><td>- <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml" title="A Pooling2dDescriptor for the Pooling2dLayer. ">Pooling2dDescriptor</a> to configure the pooling. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ab3c8fcc1045d3379148d4298b27c20d3">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a5e369658cb00178eeb9136f1c912fd3f">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a5e369658cb00178eeb9136f1c912fd3f">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a5e369658cb00178eeb9136f1c912fd3f">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a5e369658cb00178eeb9136f1c912fd3f">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#aaee763832ceb783dcffde56e1c1a6d93">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#aaca77d69321f5ba94d639fe40dbd0b1c">DynamicQuantizationVisitor</a>, <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#aaca77d69321f5ba94d639fe40dbd0b1c">StaticRangeVisitor</a>, and <a class="el" href="class_test_pooling2d_layer_visitor.xhtml#ade7046687c2407a419046043cd898929">TestPooling2dLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00118">Pooling2dLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a4f6971a5d2c164c691dc7943f4befd5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f6971a5d2c164c691dc7943f4befd5c">&#9670;&nbsp;</a></span>VisitPreluLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitPreluLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a PReLU activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a26930996b666eef0b5b1fe562644f5c9">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a79c933bea6fb9986c3baa171be98da5c">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a79c933bea6fb9986c3baa171be98da5c">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a79c933bea6fb9986c3baa171be98da5c">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a79c933bea6fb9986c3baa171be98da5c">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a34f5745a60988b4a109ec213f8d0cb77">QuantizerVisitor</a>, and <a class="el" href="class_test_prelu_layer_visitor.xhtml#a913cb5edde4ab4acea66197bba905461">TestPreluLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00116">PreluLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a3f99f4f70c011a8ab5234e5595350781"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f99f4f70c011a8ab5234e5595350781">&#9670;&nbsp;</a></span>VisitQLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitQLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a QLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">descriptor</td><td>- Parameters controlling the operation of the QLstm operation. </td></tr>
    <tr><td class="paramname">params</td><td>- The weights and biases for the layer </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_1_1_test_q_lstm_layer_visitor.xhtml#a36602061e420666a085b6ffbcd23ad2f">TestQLstmLayerVisitor</a>, <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#af01d9d7ba6c29a2a0e2efa291f6887f6">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab80f8f2c2202a4651c63757b307a21b7">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab80f8f2c2202a4651c63757b307a21b7">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab80f8f2c2202a4651c63757b307a21b7">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab80f8f2c2202a4651c63757b307a21b7">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>.</p>

<p class="reference">Referenced by <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00303">QLstmLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="acb1bac244973743d460064c1e0d816fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb1bac244973743d460064c1e0d816fd">&#9670;&nbsp;</a></span>VisitQuantizedLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitQuantizedLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">QuantizedLstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a QuantizedLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">params</td><td>- The weights and biases for the Quantized LSTM cell </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_1_1_test_quantized_lstm_layer_visitor.xhtml#ad5e5c9b46d43895fad6a14529494ac32">TestQuantizedLstmLayerVisitor</a>, <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a598e914a8657aca24ed847d9069ad025">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2fdb21a22a95af72177b4e909741b5c7">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2fdb21a22a95af72177b4e909741b5c7">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2fdb21a22a95af72177b4e909741b5c7">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2fdb21a22a95af72177b4e909741b5c7">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>.</p>

<p class="reference">Referenced by <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00170">QuantizedLstmLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a78ec371d5935104926bca5c5febf6780"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78ec371d5935104926bca5c5febf6780">&#9670;&nbsp;</a></span>VisitQuantizeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitQuantizeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a quantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a25ee3712e8012235fedcd41fdd1b78a3">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a6db421f0be147916cb4894ad3885d1">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a6db421f0be147916cb4894ad3885d1">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a6db421f0be147916cb4894ad3885d1">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a6db421f0be147916cb4894ad3885d1">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_quantize_layer_visitor.xhtml#af045a29468269d611f6d9b3f0187e20a">TestQuantizeLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00045">QuantizeLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a7b2632b6e22ac7bc314bad5532fdb3c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b2632b6e22ac7bc314bad5532fdb3c9">&#9670;&nbsp;</a></span>VisitRankLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitRankLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a rank layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a9d260d77fa97488a8fd0ef0e6fd4177a">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0e6452322927acf6fe4e38ca9cc6d117">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0e6452322927acf6fe4e38ca9cc6d117">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0e6452322927acf6fe4e38ca9cc6d117">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0e6452322927acf6fe4e38ca9cc6d117">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_rank_layer_visitor.xhtml#a5bc08188abb4f726c7cd23d6c87cd0de">TestRankLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_rank_layer_8cpp_source.xhtml#l00042">RankLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="acb732489554691ba852ca323888093ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb732489554691ba852ca323888093ac">&#9670;&nbsp;</a></span>VisitReshapeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitReshapeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>reshapeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">reshapeDescriptor</td><td>- Parameters for the reshape operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ada00d4a9cb133fef352290610f257000">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9ebd504c48864d63917836e0dc335725">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9ebd504c48864d63917836e0dc335725">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9ebd504c48864d63917836e0dc335725">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9ebd504c48864d63917836e0dc335725">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a4a7f7f33591fd91e8fb1c08d06c0733a">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#a4a7f7f33591fd91e8fb1c08d06c0733a">DynamicQuantizationVisitor</a>, <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#a4a7f7f33591fd91e8fb1c08d06c0733a">StaticRangeVisitor</a>, and <a class="el" href="class_test_reshape_layer_visitor.xhtml#a2c919bfe0206ba436a368f0e6c5a145f">TestReshapeLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00054">ReshapeLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a8d87dab666a8aa6e132fcd93717a3c4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d87dab666a8aa6e132fcd93717a3c4b">&#9670;&nbsp;</a></span>VisitResizeBilinearLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitResizeBilinearLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">ResizeBilinearDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>resizeDesc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">resizeDesc</td><td>- Parameters for the resize operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#afa243ee90086da1e8270b8391dd8f221">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4c5571a4b3db2badf7f1dce3467391">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4c5571a4b3db2badf7f1dce3467391">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4c5571a4b3db2badf7f1dce3467391">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4c5571a4b3db2badf7f1dce3467391">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a5abbca55c908440acecfa6e0f921092d">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#a5abbca55c908440acecfa6e0f921092d">DynamicQuantizationVisitor</a>, and <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#a5abbca55c908440acecfa6e0f921092d">StaticRangeVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a306e22f3cc6baaf7a6f1390f669be42e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a306e22f3cc6baaf7a6f1390f669be42e">&#9670;&nbsp;</a></span>VisitResizeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitResizeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>resizeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">resizeDescriptor</td><td>- Parameters for the resize operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ad7df3f2ae8cbb23bb8651fff4d079718">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a49c296c5d0f9efb76f165954cf40c281">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a49c296c5d0f9efb76f165954cf40c281">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a49c296c5d0f9efb76f165954cf40c281">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a49c296c5d0f9efb76f165954cf40c281">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a7eea0e93f066099f3549fef15881a4cb">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#a7eea0e93f066099f3549fef15881a4cb">StaticRangeVisitor</a>, and <a class="el" href="class_test_resize_layer_visitor.xhtml#a574ae8c8a32c4028b05f1e4e672430b2">TestResizeLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_resize_layer_8cpp_source.xhtml#l00076">ResizeLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a413253dbf325ea0b44559b55242170d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a413253dbf325ea0b44559b55242170d1">&#9670;&nbsp;</a></span>VisitRsqrtLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitRsqrtLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a Reciprocal of square root layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#af9fea44d69144543d711293ab4a61af4">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6a62605ac51992ce0913cc119b59546b">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6a62605ac51992ce0913cc119b59546b">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6a62605ac51992ce0913cc119b59546b">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6a62605ac51992ce0913cc119b59546b">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a990bfe643729a7dedcc55da1f7d1b3bf">QuantizerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00048">RsqrtLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="aad5c9d5c9cf256ea990097732fd1f108"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad5c9d5c9cf256ea990097732fd1f108">&#9670;&nbsp;</a></span>VisitSliceLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitSliceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>sliceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">sliceDescriptor</td><td>- <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml" title="A SliceDescriptor for the SliceLayer. ">SliceDescriptor</a> to configure the slice operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a8931b9c0199822fe3db2fdbde579a96e">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1c023b3170bed9368b65730bc7fff60b">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1c023b3170bed9368b65730bc7fff60b">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1c023b3170bed9368b65730bc7fff60b">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1c023b3170bed9368b65730bc7fff60b">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a20a228046c2aacd8664e50841af84e2b">QuantizerVisitor</a>, and <a class="el" href="class_test_slice_layer_visitor.xhtml#a30ebaf9fe550a2135b9a642aca6bd578">TestSliceLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_slice_layer_8cpp_source.xhtml#l00061">SliceLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="ae47c90e3188970462a28d297644133d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae47c90e3188970462a28d297644133d1">&#9670;&nbsp;</a></span>VisitSoftmaxLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitSoftmaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>softmaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">softmaxDescriptor</td><td>- <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml" title="A SoftmaxDescriptor for the SoftmaxLayer. ">SoftmaxDescriptor</a> to configure the softmax. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a22d44460791b64d4e1d65f8107f69786">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#abd8b0b2e365bbeabceddc35a1cb52916">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#abd8b0b2e365bbeabceddc35a1cb52916">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#abd8b0b2e365bbeabceddc35a1cb52916">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#abd8b0b2e365bbeabceddc35a1cb52916">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a98f34d2511f43324833060154cbdba8d">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#a98f34d2511f43324833060154cbdba8d">DynamicQuantizationVisitor</a>, <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#a98f34d2511f43324833060154cbdba8d">StaticRangeVisitor</a>, and <a class="el" href="class_test_softmax_layer_visitor.xhtml#abc95aaf7e818fe803ebd1da23b825e35">TestSoftmaxLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00047">SoftmaxLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="aa8c1ec6712293700fb3874f63f2ec5f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8c1ec6712293700fb3874f63f2ec5f0">&#9670;&nbsp;</a></span>VisitSpaceToBatchNdLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitSpaceToBatchNdLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>spaceToBatchNdDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">spaceToBatchNdDescriptor</td><td>- Parameters for the space to batch operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a4ca05fff57392b368ce229af4721aa19">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9478c4f41840a2e2c12b7f336e725a8a">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9478c4f41840a2e2c12b7f336e725a8a">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9478c4f41840a2e2c12b7f336e725a8a">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9478c4f41840a2e2c12b7f336e725a8a">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a8e327cc6432697fd55d6b91e554360d9">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#a8e327cc6432697fd55d6b91e554360d9">DynamicQuantizationVisitor</a>, <a class="el" href="class_test_space_to_batch_nd_layer_visitor.xhtml#aad7ede69e2035c4bd1baa6047659ede4">TestSpaceToBatchNdLayerVisitor</a>, and <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#a8e327cc6432697fd55d6b91e554360d9">StaticRangeVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00085">SpaceToBatchNdLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a7ac3fe15d509443ffbe985370b61b913"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ac3fe15d509443ffbe985370b61b913">&#9670;&nbsp;</a></span>VisitSpaceToDepthLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitSpaceToDepthLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>spaceToDepthDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a space to depth layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">spaceToDepthDescriptor</td><td>- Parameters for the space to depth operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#aa3c4485dc7e9529e9a03e74ba69bd624">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acdedda623455cc7a0f982d6f4e96d53a">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acdedda623455cc7a0f982d6f4e96d53a">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acdedda623455cc7a0f982d6f4e96d53a">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acdedda623455cc7a0f982d6f4e96d53a">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a2c416fbd39598732dd3c6255ceaf1b66">QuantizerVisitor</a>, and <a class="el" href="class_test_space_to_depth_layer_visitor.xhtml#afbbc42602e9740b6dec20dc620c65d25">TestSpaceToDepthLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00078">SpaceToDepthLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a45c613d43c30b3314cafb1be3ef7685c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45c613d43c30b3314cafb1be3ef7685c">&#9670;&nbsp;</a></span>VisitSplitterLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitSplitterLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>splitterDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">splitterDescriptor</td><td>- <a class="el" href="structarmnn_1_1_views_descriptor.xhtml" title="A ViewsDescriptor for the SplitterLayer. ">ViewsDescriptor</a> to configure the splitting process. Number of Views must be equal to the number of outputs, and their order must match - e.g. first view corresponds to the first output, second view to the second output, etc.... </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#ab24e753aaf05ae1f1b099ec020bbb0df">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8689a80f8939de6323319aba5806ee9e">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8689a80f8939de6323319aba5806ee9e">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8689a80f8939de6323319aba5806ee9e">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8689a80f8939de6323319aba5806ee9e">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#afbea8aa2295f2ab71ea5bb64ccd47871">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#afbea8aa2295f2ab71ea5bb64ccd47871">DynamicQuantizationVisitor</a>, <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#afbea8aa2295f2ab71ea5bb64ccd47871">StaticRangeVisitor</a>, and <a class="el" href="class_test_splitter_layer_visitor.xhtml#ad202b3d5cbf22158c4e3dccd9fb31c44">TestSplitterLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00242">SplitterLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a5c7df9d37959280f4328848ae4b2be37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c7df9d37959280f4328848ae4b2be37">&#9670;&nbsp;</a></span>VisitStackLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitStackLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>stackDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a stack layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">stackDescriptor</td><td>- Parameters for the stack operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#aa6835f67d172384fb91ca5e7d0933a00">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8b47d411d147aa420f7a69356d84fb80">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8b47d411d147aa420f7a69356d84fb80">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8b47d411d147aa420f7a69356d84fb80">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8b47d411d147aa420f7a69356d84fb80">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a1b4325b20242a2db0922f68aea195d00">QuantizerVisitor</a>, and <a class="el" href="class_test_stack_layer_visitor.xhtml#a1d9b846a26fadfc1e87778a235e5653d">TestStackLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_stack_layer_8cpp_source.xhtml#l00096">StackLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a2c97836f7288428fe4f070033d2f0aea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c97836f7288428fe4f070033d2f0aea">&#9670;&nbsp;</a></span>VisitStandInLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitStandInLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>standInDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a <a class="el" href="classarmnn_1_1_stand_in_layer.xhtml" title="This layer represents an unknown operation in the input graph. ">StandInLayer</a> should call back to when its Accept(ILaterVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">standInDescriptor</td><td>- Parameters for the stand-in layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#afdc56797f18b4ec2b66469bd4553d65b">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3c15053a7e295099a1a34c4add5a03b8">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3c15053a7e295099a1a34c4add5a03b8">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3c15053a7e295099a1a34c4add5a03b8">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3c15053a7e295099a1a34c4add5a03b8">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_stand_in_layer_visitor.xhtml#aab375a07b377ddb7066440e686101ebf">TestStandInLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_stand_in_layer_8cpp_source.xhtml#l00044">StandInLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="ac2f4ca5ada6d8fcf82d7bea2e6a06924"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2f4ca5ada6d8fcf82d7bea2e6a06924">&#9670;&nbsp;</a></span>VisitStridedSliceLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitStridedSliceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>stridedSliceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">stridedSliceDescriptor</td><td>- Parameters for the strided slice operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a4f0cb9c392102c5108766a0faa754d92">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a31862ce4ffaddde96ebe0afcf04f3577">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a31862ce4ffaddde96ebe0afcf04f3577">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a31862ce4ffaddde96ebe0afcf04f3577">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a31862ce4ffaddde96ebe0afcf04f3577">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a61b7aa0305e7c45a625f7835fa26b9b6">QuantizerVisitor</a>, <a class="el" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml#a61b7aa0305e7c45a625f7835fa26b9b6">DynamicQuantizationVisitor</a>, <a class="el" href="classarmnn_1_1_static_range_visitor.xhtml#a61b7aa0305e7c45a625f7835fa26b9b6">StaticRangeVisitor</a>, and <a class="el" href="class_test_strided_slice_layer_visitor.xhtml#a1e5648d30dc1cafce96708941b2e4c03">TestStridedSliceLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00112">StridedSliceLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="ad339435c8d56522efc647da668d47047"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad339435c8d56522efc647da668d47047">&#9670;&nbsp;</a></span>VisitSubtractionLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitSubtractionLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a subtraction layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a8f33221ab8f8feb4f2bbd5ddaa5bfa02">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac42c3a57a82260c8315d4f0320620934">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac42c3a57a82260c8315d4f0320620934">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac42c3a57a82260c8315d4f0320620934">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac42c3a57a82260c8315d4f0320620934">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#abffdcc9b528d64b510103f5b280e246e">QuantizerVisitor</a>, and <a class="el" href="class_test_subtraction_layer_visitor.xhtml#a7581d2d2c8ad89ee620115a69c099233">TestSubtractionLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_subtraction_layer_8cpp_source.xhtml#l00033">SubtractionLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a6d33c538a0f3f179ec2eeb4dcee2a21e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d33c538a0f3f179ec2eeb4dcee2a21e">&#9670;&nbsp;</a></span>VisitSwitchLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitSwitchLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function a switch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a20396d2da2d38ae69bd5bda5d8c1e8dc">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a877d400155151a5afba9f0b17fbcf8f3">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a877d400155151a5afba9f0b17fbcf8f3">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a877d400155151a5afba9f0b17fbcf8f3">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a877d400155151a5afba9f0b17fbcf8f3">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="class_test_switch_layer_visitor.xhtml#ab560074961c9dafff57a6967b0b00570">TestSwitchLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_switch_layer_8cpp_source.xhtml#l00053">SwitchLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a58bb3bc96c089a4d0b954be81f1899c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58bb3bc96c089a4d0b954be81f1899c6">&#9670;&nbsp;</a></span>VisitTransposeConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitTransposeConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a 2D transpose convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">descriptor</td><td>- Description of the 2D transpose convolution layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. ">Tensor</a> for the weights data. </td></tr>
    <tr><td class="paramname">biases</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> tensor for the bias data. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#aa46bee20f6017ada3c3a46e1bdf23011">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a4dfb04de9aa0b8b55c70fe96af13e1e1">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a4dfb04de9aa0b8b55c70fe96af13e1e1">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a4dfb04de9aa0b8b55c70fe96af13e1e1">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a4dfb04de9aa0b8b55c70fe96af13e1e1">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, and <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a9e7ddd6c869af052317c6de0df53c942">QuantizerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00138">TransposeConvolution2dLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<a id="a5e101341277244c45eb20f4db63c77a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e101341277244c45eb20f4db63c77a3">&#9670;&nbsp;</a></span>VisitTransposeLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void VisitTransposeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>transposeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that a transpose layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">layer</td><td>- pointer to the layer which is calling back to this visit function. </td></tr>
    <tr><td class="paramname">transposeDescriptor</td><td>- <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml" title="A TransposeDescriptor for the TransposeLayer. ">TransposeDescriptor</a> to configure the transpose. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_serializer_1_1_serializer_visitor.xhtml#a82daa527121e400d8bab5eecc77f6fcb">SerializerVisitor</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2cb213b083367f4fe9bed2916206525f">LayerVisitorBase&lt; DefaultPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2cb213b083367f4fe9bed2916206525f">LayerVisitorBase&lt; VisitorThrowingPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2cb213b083367f4fe9bed2916206525f">LayerVisitorBase&lt; armnn::VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2cb213b083367f4fe9bed2916206525f">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a>, <a class="el" href="classarmnn_1_1_quantizer_visitor.xhtml#a8c918592332c5e8339d43a9288350964">QuantizerVisitor</a>, and <a class="el" href="class_test_transpose_layer_visitor.xhtml#ae0b779e4ca5e1ae6b27ad38ab1611b38">TestTransposeLayerVisitor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00058">TransposeLayer::Accept()</a>, and <a class="el" href="_i_layer_visitor_8hpp_source.xhtml#l00093">ILayerVisitor::VisitConcatLayer()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>include/armnn/<a class="el" href="_i_layer_visitor_8hpp_source.xhtml">ILayerVisitor.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a></li>
    <li class="footer">Generated on Tue Aug 25 2020 12:29:49 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
