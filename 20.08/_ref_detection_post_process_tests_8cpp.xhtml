<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/test/RefDetectionPostProcessTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_ref_detection_post_process_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">RefDetectionPostProcessTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="_detection_post_process_8hpp_source.xhtml">reference/workloads/DetectionPostProcess.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_descriptors_8hpp_source.xhtml">armnn/Descriptors.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_types_8hpp_source.xhtml">armnn/Types.hpp</a>&gt;</code><br />
<code>#include &lt;boost/test/unit_test.hpp&gt;</code><br />
</div>
<p><a href="_ref_detection_post_process_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a40961f56ccc8ff0aeea124b89643f23a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_detection_post_process_tests_8cpp.xhtml#a40961f56ccc8ff0aeea124b89643f23a">BOOST_AUTO_TEST_CASE</a> (TopKSortTest)</td></tr>
<tr class="separator:a40961f56ccc8ff0aeea124b89643f23a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7083dd07d3521987d305c9b3d1825554"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_detection_post_process_tests_8cpp.xhtml#a7083dd07d3521987d305c9b3d1825554">BOOST_AUTO_TEST_CASE</a> (FullTopKSortTest)</td></tr>
<tr class="separator:a7083dd07d3521987d305c9b3d1825554"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c275c5e6ec037a0a5d1d256a9b51d3c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_detection_post_process_tests_8cpp.xhtml#a3c275c5e6ec037a0a5d1d256a9b51d3c">BOOST_AUTO_TEST_CASE</a> (IouTest)</td></tr>
<tr class="separator:a3c275c5e6ec037a0a5d1d256a9b51d3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aace916ae80b99d65cc9ba778a0b2e21e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_detection_post_process_tests_8cpp.xhtml#aace916ae80b99d65cc9ba778a0b2e21e">BOOST_AUTO_TEST_CASE</a> (NmsFunction)</td></tr>
<tr class="separator:aace916ae80b99d65cc9ba778a0b2e21e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb1c1308e009fe531107404309c59332"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_detection_post_process_tests_8cpp.xhtml#acb1c1308e009fe531107404309c59332">DetectionPostProcessTestImpl</a> (bool useRegularNms, const std::vector&lt; float &gt; &amp;expectedDetectionBoxes, const std::vector&lt; float &gt; &amp;expectedDetectionClasses, const std::vector&lt; float &gt; &amp;expectedDetectionScores, const std::vector&lt; float &gt; &amp;expectedNumDetections)</td></tr>
<tr class="separator:acb1c1308e009fe531107404309c59332"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a015c7cd1184ff864914fc23118aa61df"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_detection_post_process_tests_8cpp.xhtml#a015c7cd1184ff864914fc23118aa61df">BOOST_AUTO_TEST_CASE</a> (RegularNmsDetectionPostProcess)</td></tr>
<tr class="separator:a015c7cd1184ff864914fc23118aa61df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0aa24f86a923e00239a1f845a333f33e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_detection_post_process_tests_8cpp.xhtml#a0aa24f86a923e00239a1f845a333f33e">BOOST_AUTO_TEST_CASE</a> (FastNmsDetectionPostProcess)</td></tr>
<tr class="separator:a0aa24f86a923e00239a1f845a333f33e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a40961f56ccc8ff0aeea124b89643f23a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40961f56ccc8ff0aeea124b89643f23a">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TopKSortTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml#l00015">15</a> of file <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml">RefDetectionPostProcessTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00025">armnn::TopKSort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k = 3;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> indices[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keywordtype">float</span> values[8] = { 0, 7, 6, 5, 4, 3, 2, 500 };</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a2748f45e58b1c612d473043f711d1434">armnn::TopKSort</a>(k, indices, values, 8);</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    BOOST_TEST(indices[0] == 7);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    BOOST_TEST(indices[1] == 1);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    BOOST_TEST(indices[2] == 2);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a2748f45e58b1c612d473043f711d1434"><div class="ttname"><a href="namespacearmnn.xhtml#a2748f45e58b1c612d473043f711d1434">armnn::TopKSort</a></div><div class="ttdeci">void TopKSort(unsigned int k, unsigned int *indices, const float *values, unsigned int numElement)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00025">DetectionPostProcess.cpp:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7083dd07d3521987d305c9b3d1825554"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7083dd07d3521987d305c9b3d1825554">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">FullTopKSortTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml#l00026">26</a> of file <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml">RefDetectionPostProcessTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00025">armnn::TopKSort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k = 8;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> indices[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordtype">float</span> values[8] = { 0, 7, 6, 5, 4, 3, 2, 500 };</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a2748f45e58b1c612d473043f711d1434">armnn::TopKSort</a>(k, indices, values, 8);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    BOOST_TEST(indices[0] == 7);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    BOOST_TEST(indices[1] == 1);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    BOOST_TEST(indices[2] == 2);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    BOOST_TEST(indices[3] == 3);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    BOOST_TEST(indices[4] == 4);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    BOOST_TEST(indices[5] == 5);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    BOOST_TEST(indices[6] == 6);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    BOOST_TEST(indices[7] == 0);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a2748f45e58b1c612d473043f711d1434"><div class="ttname"><a href="namespacearmnn.xhtml#a2748f45e58b1c612d473043f711d1434">armnn::TopKSort</a></div><div class="ttdeci">void TopKSort(unsigned int k, unsigned int *indices, const float *values, unsigned int numElement)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00025">DetectionPostProcess.cpp:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3c275c5e6ec037a0a5d1d256a9b51d3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c275c5e6ec037a0a5d1d256a9b51d3c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">IouTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml#l00042">42</a> of file <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml">RefDetectionPostProcessTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00031">armnn::IntersectionOverUnion()</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordtype">float</span> boxI[4] = { 0.0f, 0.0f, 10.0f, 10.0f };</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordtype">float</span> boxJ[4] = { 1.0f, 1.0f, 11.0f, 11.0f };</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordtype">float</span> iou = <a class="code" href="namespacearmnn.xhtml#abf6aad7bc221f8ad22b4d99cd020373b">armnn::IntersectionOverUnion</a>(boxI, boxJ);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    BOOST_TEST(iou == 0.68, boost::test_tools::tolerance(0.001));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_abf6aad7bc221f8ad22b4d99cd020373b"><div class="ttname"><a href="namespacearmnn.xhtml#abf6aad7bc221f8ad22b4d99cd020373b">armnn::IntersectionOverUnion</a></div><div class="ttdeci">float IntersectionOverUnion(const float *boxI, const float *boxJ)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00031">DetectionPostProcess.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aace916ae80b99d65cc9ba778a0b2e21e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aace916ae80b99d65cc9ba778a0b2e21e">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">NmsFunction&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml#l00050">50</a> of file <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml">RefDetectionPostProcessTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00050">armnn::NonMaxSuppression()</a>, and <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores()</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    std::vector&lt;float&gt; boxCorners({</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        0.0f, 0.0f, 1.0f, 1.0f,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        0.0f, 0.1f, 1.0f, 1.1f,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        0.0f, -0.1f, 1.0f, 0.9f,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        0.0f, 10.0f, 1.0f, 11.0f,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        0.0f, 10.1f, 1.0f, 11.1f,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        0.0f, 100.0f, 1.0f, 101.0f</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    });</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>({ 0.9f, 0.75f, 0.6f, 0.93f, 0.5f, 0.3f });</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    std::vector&lt;unsigned int&gt; result =</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ac8c641d4a69c9a85c487cfbc7ea4d73c">armnn::NonMaxSuppression</a>(6, boxCorners, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>, 0.0, 3, 0.5);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    BOOST_TEST(result.size() == 3);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    BOOST_TEST(result[0] == 3);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    BOOST_TEST(result[1] == 0);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    BOOST_TEST(result[2] == 5);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a0348e6bb67ace72535bd105219bb6237"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a></div><div class="ttdeci">std::vector&lt; float &gt; scores({ 0.0f, 0.9f, 0.8f, 0.0f, 0.75f, 0.72f, 0.0f, 0.6f, 0.5f, 0.0f, 0.93f, 0.95f, 0.0f, 0.5f, 0.4f, 0.0f, 0.3f, 0.2f })</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac8c641d4a69c9a85c487cfbc7ea4d73c"><div class="ttname"><a href="namespacearmnn.xhtml#ac8c641d4a69c9a85c487cfbc7ea4d73c">armnn::NonMaxSuppression</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; NonMaxSuppression(unsigned int numBoxes, const std::vector&lt; float &gt; &amp;boxCorners, const std::vector&lt; float &gt; &amp;scores, float nmsScoreThreshold, unsigned int maxDetection, float nmsIouThreshold)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00050">DetectionPostProcess.cpp:50</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a015c7cd1184ff864914fc23118aa61df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a015c7cd1184ff864914fc23118aa61df">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">RegularNmsDetectionPostProcess&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml#l00173">173</a> of file <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml">RefDetectionPostProcessTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml#l00072">DetectionPostProcessTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;{</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    std::vector&lt;float&gt; expectedDetectionBoxes({</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        0.0f, 10.0f, 1.0f, 11.0f,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        0.0f, 10.0f, 1.0f, 11.0f,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    });</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    std::vector&lt;float&gt; expectedDetectionScores({ 0.95f, 0.93f, 0.0f });</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    std::vector&lt;float&gt; expectedDetectionClasses({ 1.0f, 0.0f, 0.0f });</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    std::vector&lt;float&gt; expectedNumDetections({ 2.0f });</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="_ref_detection_post_process_tests_8cpp.xhtml#acb1c1308e009fe531107404309c59332">DetectionPostProcessTestImpl</a>(<span class="keyword">true</span>, expectedDetectionBoxes, expectedDetectionClasses,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                 expectedDetectionScores, expectedNumDetections);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div><div class="ttc" id="_ref_detection_post_process_tests_8cpp_xhtml_acb1c1308e009fe531107404309c59332"><div class="ttname"><a href="_ref_detection_post_process_tests_8cpp.xhtml#acb1c1308e009fe531107404309c59332">DetectionPostProcessTestImpl</a></div><div class="ttdeci">void DetectionPostProcessTestImpl(bool useRegularNms, const std::vector&lt; float &gt; &amp;expectedDetectionBoxes, const std::vector&lt; float &gt; &amp;expectedDetectionClasses, const std::vector&lt; float &gt; &amp;expectedDetectionScores, const std::vector&lt; float &gt; &amp;expectedNumDetections)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_detection_post_process_tests_8cpp_source.xhtml#l00072">RefDetectionPostProcessTests.cpp:72</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0aa24f86a923e00239a1f845a333f33e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0aa24f86a923e00239a1f845a333f33e">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">FastNmsDetectionPostProcess&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml#l00189">189</a> of file <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml">RefDetectionPostProcessTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>, and <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml#l00072">DetectionPostProcessTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;{</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    std::vector&lt;float&gt; expectedDetectionBoxes({</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        0.0f, 10.0f, 1.0f, 11.0f,</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        0.0f, 0.0f, 1.0f, 1.0f,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        0.0f, 100.0f, 1.0f, 101.0f</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    });</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    std::vector&lt;float&gt; expectedDetectionScores({ 0.95f, 0.9f, 0.3f });</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    std::vector&lt;float&gt; expectedDetectionClasses({ 1.0f, 0.0f, 0.0f });</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    std::vector&lt;float&gt; expectedNumDetections({ 3.0f });</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="_ref_detection_post_process_tests_8cpp.xhtml#acb1c1308e009fe531107404309c59332">DetectionPostProcessTestImpl</a>(<span class="keyword">false</span>, expectedDetectionBoxes, expectedDetectionClasses,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                 expectedDetectionScores, expectedNumDetections);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div><div class="ttc" id="_ref_detection_post_process_tests_8cpp_xhtml_acb1c1308e009fe531107404309c59332"><div class="ttname"><a href="_ref_detection_post_process_tests_8cpp.xhtml#acb1c1308e009fe531107404309c59332">DetectionPostProcessTestImpl</a></div><div class="ttdeci">void DetectionPostProcessTestImpl(bool useRegularNms, const std::vector&lt; float &gt; &amp;expectedDetectionBoxes, const std::vector&lt; float &gt; &amp;expectedDetectionClasses, const std::vector&lt; float &gt; &amp;expectedDetectionScores, const std::vector&lt; float &gt; &amp;expectedNumDetections)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_detection_post_process_tests_8cpp_source.xhtml#l00072">RefDetectionPostProcessTests.cpp:72</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acb1c1308e009fe531107404309c59332"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb1c1308e009fe531107404309c59332">&#9670;&nbsp;</a></span>DetectionPostProcessTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DetectionPostProcessTestImpl </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>useRegularNms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>expectedDetectionBoxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>expectedDetectionClasses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>expectedDetectionScores</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>expectedNumDetections</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml">RefDetectionPostProcessTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings()</a>, <a class="el" href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00141">armnn::DetectionPostProcess()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00547">DetectionPostProcessDescriptor::m_UseRegularNms</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores()</a>, and <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_detection_post_process_tests_8cpp_source.xhtml#l00173">BOOST_AUTO_TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> boxEncodingsInfo({ 1, 6, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>({ 1, 6, 3 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>({ 6, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionBoxesInfo({ 1, 3, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionScoresInfo({ 1, 3 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionClassesInfo({ 1, 3 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> numDetectionInfo({ 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a> desc;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">m_UseRegularNms</a> = useRegularNms;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    desc.m_MaxDetections = 3;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    desc.m_MaxClassesPerDetection = 1;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    desc.m_DetectionsPerClass =1;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    desc.m_NmsScoreThreshold = 0.0;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    desc.m_NmsIouThreshold = 0.5;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    desc.m_NumClasses = 2;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    desc.m_ScaleY = 10.0;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    desc.m_ScaleX = 10.0;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    desc.m_ScaleH = 5.0;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    desc.m_ScaleW = 5.0;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>({</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        0.0f, -1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    });</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>({</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        0.0f, 0.9f, 0.8f,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        0.0f, 0.75f, 0.72f,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        0.0f, 0.6f, 0.5f,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        0.0f, 0.93f, 0.95f,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        0.0f, 0.5f, 0.4f,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        0.0f, 0.3f, 0.2f</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    });</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>({</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        0.5f, 100.5f, 1.0f, 1.0f</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    });</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">auto</span> boxEncodingsDecoder = armnn::MakeDecoder&lt;float&gt;(boxEncodingsInfo, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>.data());</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">auto</span> scoresDecoder       = armnn::MakeDecoder&lt;float&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>.data());</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">auto</span> anchorsDecoder      = armnn::MakeDecoder&lt;float&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>.data());</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    std::vector&lt;float&gt; detectionBoxes(detectionBoxesInfo.GetNumElements());</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    std::vector&lt;float&gt; detectionScores(detectionScoresInfo.GetNumElements());</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    std::vector&lt;float&gt; detectionClasses(detectionClassesInfo.GetNumElements());</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    std::vector&lt;float&gt; numDetections(1);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ae76ce23fa9fc18e56448d52b37dd3f32">armnn::DetectionPostProcess</a>(boxEncodingsInfo,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                scoresInfo,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                anchorsInfo,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                detectionBoxesInfo,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                detectionClassesInfo,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                detectionScoresInfo,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                numDetectionInfo,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                desc,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                *boxEncodingsDecoder,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                *scoresDecoder,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                *anchorsDecoder,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                detectionBoxes.data(),</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                detectionClasses.data(),</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                detectionScores.data(),</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                numDetections.data());</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    BOOST_CHECK_EQUAL_COLLECTIONS(detectionBoxes.begin(),</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                  detectionBoxes.end(),</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                  expectedDetectionBoxes.begin(),</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                  expectedDetectionBoxes.end());</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    BOOST_CHECK_EQUAL_COLLECTIONS(detectionScores.begin(),</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                  detectionScores.end(),</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                  expectedDetectionScores.begin(),</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                  expectedDetectionScores.end());</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    BOOST_CHECK_EQUAL_COLLECTIONS(detectionClasses.begin(),</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                  detectionClasses.end(),</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                  expectedDetectionClasses.begin(),</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                  expectedDetectionClasses.end());</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    BOOST_CHECK_EQUAL_COLLECTIONS(numDetections.begin(),</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                  numDetections.end(),</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                  expectedNumDetections.begin(),</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                  expectedNumDetections.end());</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a358cb7cd3c0647b25be049fd734b8c22"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a></div><div class="ttdeci">armnn::TensorInfo anchorsInfo({ 6, 4 }, armnn::DataType::Float32)</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ada422a73ac4e68bcb1b1b1f0b44028d9"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a></div><div class="ttdeci">std::vector&lt; float &gt; boxEncodings({ 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f })</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae76ce23fa9fc18e56448d52b37dd3f32"><div class="ttname"><a href="namespacearmnn.xhtml#ae76ce23fa9fc18e56448d52b37dd3f32">armnn::DetectionPostProcess</a></div><div class="ttdeci">void DetectionPostProcess(const TensorInfo &amp;boxEncodingsInfo, const TensorInfo &amp;scoresInfo, const TensorInfo &amp;anchorsInfo, const TensorInfo &amp;detectionBoxesInfo, const TensorInfo &amp;detectionClassesInfo, const TensorInfo &amp;detectionScoresInfo, const TensorInfo &amp;numDetectionsInfo, const DetectionPostProcessDescriptor &amp;desc, Decoder&lt; float &gt; &amp;boxEncodings, Decoder&lt; float &gt; &amp;scores, Decoder&lt; float &gt; &amp;anchors, float *detectionBoxes, float *detectionClasses, float *detectionScores, float *numDetections)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00141">DetectionPostProcess.cpp:141</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7ed9bc7c26df67d274d5dd4cd83adf0f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">armnn::DetectionPostProcessDescriptor::m_UseRegularNms</a></div><div class="ttdeci">bool m_UseRegularNms</div><div class="ttdoc">Use Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00547">Descriptors.hpp:547</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a0348e6bb67ace72535bd105219bb6237"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a></div><div class="ttdeci">std::vector&lt; float &gt; scores({ 0.0f, 0.9f, 0.8f, 0.0f, 0.75f, 0.72f, 0.0f, 0.6f, 0.5f, 0.0f, 0.93f, 0.95f, 0.0f, 0.5f, 0.4f, 0.0f, 0.3f, 0.2f })</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a64c1dd1b6dd60be9f4a16db9c8f427a5"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a></div><div class="ttdeci">armnn::TensorInfo scoresInfo({ 1, 6, 3 }, armnn::DataType::Float32)</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00503">Descriptors.hpp:503</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ac0981848e4ae57729f14f72bd4caa9f8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a></div><div class="ttdeci">std::vector&lt; float &gt; anchors({ 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 100.5f, 1.0f, 1.0f })</div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="dir_820f114a135ae891c13c0cafd2ecf138.xhtml">test</a></li><li class="navelem"><a class="el" href="_ref_detection_post_process_tests_8cpp.xhtml">RefDetectionPostProcessTests.cpp</a></li>
    <li class="footer">Generated on Tue Aug 25 2020 12:29:46 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
