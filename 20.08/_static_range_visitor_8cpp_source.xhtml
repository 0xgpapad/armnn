<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/StaticRangeVisitor.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_static_range_visitor_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">StaticRangeVisitor.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_static_range_visitor_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_static_range_visitor_8hpp.xhtml">StaticRangeVisitor.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_descriptors_8hpp.xhtml">armnn/Descriptors.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_8hpp.xhtml">armnn/Types.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#ad9a8ed92b7844396ca754c269a88f813">   17</a></span>&#160;<a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#ad9a8ed92b7844396ca754c269a88f813">StaticRangeVisitor::StaticRangeVisitor</a>(<a class="code" href="classarmnn_1_1_range_tracker.xhtml">RangeTracker</a>&amp; rangeTracker)</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    : m_RangeTracker(rangeTracker)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{}</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keywordtype">void</span> StaticRangeVisitor::SetRange(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIdx, <span class="keywordtype">float</span> min, <span class="keywordtype">float</span> max)</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    m_RangeTracker.<a class="code" href="classarmnn_1_1_range_tracker.xhtml#a2f058d459a4f21569be3266227f2f6e5">SetRange</a>(layer, outputIdx, min, max);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;}</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keywordtype">void</span> StaticRangeVisitor::ForwardParentParameters(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer)</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> parentRange = m_RangeTracker.<a class="code" href="classarmnn_1_1_range_tracker.xhtml#a507bae23f59e94b4161886ebe663cdf4">GetRange</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">GetConnection</a>()-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ad0c3555b126975ad6b3e250fe2a59534">GetOwningLayerGuid</a>(), 0);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    SetRange(layer, 0, parentRange.first, parentRange.second);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;}</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#a7cb4ef1bc9588c4319144460c288022f">   32</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#a7cb4ef1bc9588c4319144460c288022f">StaticRangeVisitor::VisitAdditionLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    SetRange(layer, 0, -20.f, 20.f);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#a1532cb8f551812e784ccc14faae407b9">   38</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#a1532cb8f551812e784ccc14faae407b9">StaticRangeVisitor::VisitBatchNormalizationLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a>&amp; desc,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; mean,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; variance,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; beta,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; gamma,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                                      <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(desc);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(mean);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(variance);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(beta);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(gamma);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    SetRange(layer, 0, -15.0f, 15.0f);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#ac2f379ba77b06095e0c024e232ec1fd4">   55</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#ac2f379ba77b06095e0c024e232ec1fd4">StaticRangeVisitor::VisitConvolution2dLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a>&amp; convolution2dDescriptor,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; weights,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; biases,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                                 <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(convolution2dDescriptor);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(weights);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(biases);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    SetRange(layer, 0, -15.0f, 15.0f);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#a554e88817e6fd98645388873a108f868">   68</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#a554e88817e6fd98645388873a108f868">StaticRangeVisitor::VisitDepthwiseConvolution2dLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a>&amp; desc,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; weights,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; biases,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                                          <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(desc);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(weights);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(biases);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    SetRange(layer, 0, -15.0f, 15.0f);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#af493528dec93f39f5081dbefb40bff75">   81</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#af493528dec93f39f5081dbefb40bff75">StaticRangeVisitor::VisitActivationLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a>&amp; activationDescriptor,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                              <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">switch</span> (activationDescriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a>)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="comment">// Range is 0, 15 for Abs, Linear, ReLu and Soft ReLu</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">ActivationFunction::Abs</a>:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b">ActivationFunction::Linear</a>:</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559">ActivationFunction::ReLu</a>:</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa6bba7052636d1740303b1b2ef3b53fef">ActivationFunction::SoftReLu</a>:</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            SetRange(layer, 0, 0.f, 15.f);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">ActivationFunction::BoundedReLu</a>:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            SetRange(layer, 0, 0.f, activationDescriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a>);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">ActivationFunction::TanH</a>:</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            SetRange(layer, 0, -1.f, 1.f);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaacb7667f5ec2f6e8a5943b781ba6c2735">ActivationFunction::LeakyReLu</a>:</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            SetRange(layer, 0, -5.f, 15.f);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            SetRange(layer, 0, -15.f, 15.f);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#ac98eae261af6c8d5f7161a01a1959e72">  110</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#ac98eae261af6c8d5f7161a01a1959e72">StaticRangeVisitor::VisitFullyConnectedLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a>&amp; desc,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; weights,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; biases,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                                  <span class="keyword">const</span> <span class="keywordtype">char</span> *name)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(desc);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(weights);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(biases);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    SetRange(layer, 0, -15.0f, 15.0f);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#ad5532a4626c0228acc7b01fa0f5515eb">  123</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#ad5532a4626c0228acc7b01fa0f5515eb">StaticRangeVisitor::VisitPermuteLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a>&amp; permuteDescriptor,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                           <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(permuteDescriptor);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    ForwardParentParameters(layer);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#a8e327cc6432697fd55d6b91e554360d9">  132</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#a8e327cc6432697fd55d6b91e554360d9">StaticRangeVisitor::VisitSpaceToBatchNdLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a>&amp; spaceToBatchNdDescriptor,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;{</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(spaceToBatchNdDescriptor);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    ForwardParentParameters(layer);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#aaca77d69321f5ba94d639fe40dbd0b1c">  141</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#aaca77d69321f5ba94d639fe40dbd0b1c">StaticRangeVisitor::VisitPooling2dLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a>&amp; pooling2dDescriptor,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                             <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(pooling2dDescriptor);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    ForwardParentParameters(layer);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#a98f34d2511f43324833060154cbdba8d">  150</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#a98f34d2511f43324833060154cbdba8d">StaticRangeVisitor::VisitSoftmaxLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a>&amp; softmaxDescriptor,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                           <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(softmaxDescriptor);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    SetRange(layer, 0, 0.f, 1.f);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#afb527e0c7c30b56da911fee8c7b7a011">  159</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#afb527e0c7c30b56da911fee8c7b7a011">StaticRangeVisitor::VisitConcatLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a>&amp; originsDescriptor,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                          <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(originsDescriptor);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordtype">float</span> min = std::numeric_limits&lt;float&gt;::max();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordtype">float</span> max = std::numeric_limits&lt;float&gt;::lowest();</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">GetNumInputSlots</a>(); ++i)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">IOutputSlot</a>* outputSlot = layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(i).<a class="code" href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">GetConnection</a>();</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <a class="code" href="classarmnn_1_1profiling_1_1_profiling_guid.xhtml">LayerGuid</a> layerId = outputSlot-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ad0c3555b126975ad6b3e250fe2a59534">GetOwningLayerGuid</a>();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex = outputSlot-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a41d30a9cd272e05986d71a69d6ad618b">CalculateIndexOnOwner</a>();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <a class="code" href="classarmnn_1_1_range_tracker.xhtml#a997e96288bdb106c922202e3f33d5d7b">RangeTracker::MinMaxRange</a> range = m_RangeTracker.<a class="code" href="classarmnn_1_1_range_tracker.xhtml#a507bae23f59e94b4161886ebe663cdf4">GetRange</a>(layerId, slotIndex);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        min = std::min(min, range.first);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        max = std::max(max, range.second);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    SetRange(layer, 0, min, max);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#aeb652d74e4b3596e85b22c2d52144f73">  179</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#aeb652d74e4b3596e85b22c2d52144f73">StaticRangeVisitor::VisitConstantLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; input,</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                            <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">if</span> (input.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() != <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>)</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Quantization is supported only for FP32 tensors&quot;</span>);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// Work out the range based on the input constants</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputNumElements = input.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>();</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>* inputData = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span>*<span class="keyword">&gt;</span>(input.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">GetMemoryArea</a>());</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordtype">float</span> min = std::numeric_limits&lt;float&gt;::max();</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordtype">float</span> max = std::numeric_limits&lt;float&gt;::lowest();</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputNumElements; i++)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> inputValue = inputData[i];</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        min = std::min(min, inputValue);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        max = std::max(max, inputValue);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    SetRange(layer, 0, min, max);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#a4a7f7f33591fd91e8fb1c08d06c0733a">  207</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#a4a7f7f33591fd91e8fb1c08d06c0733a">StaticRangeVisitor::VisitReshapeLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a>&amp; reshapeDescriptor,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                           <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(reshapeDescriptor);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    ForwardParentParameters(layer);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#afbea8aa2295f2ab71ea5bb64ccd47871">  216</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#afbea8aa2295f2ab71ea5bb64ccd47871">StaticRangeVisitor::VisitSplitterLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_views_descriptor.xhtml">SplitterDescriptor</a>&amp; splitterDescriptor,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                            <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;{</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(splitterDescriptor);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    ForwardParentParameters(layer);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#a5abbca55c908440acecfa6e0f921092d">  225</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#a5abbca55c908440acecfa6e0f921092d">StaticRangeVisitor::VisitResizeBilinearLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">ResizeBilinearDescriptor</a>&amp; resizeDesc,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;{</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(resizeDesc);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    ForwardParentParameters(layer);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#a7eea0e93f066099f3549fef15881a4cb">  234</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#a7eea0e93f066099f3549fef15881a4cb">StaticRangeVisitor::VisitResizeLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a>&amp; resizeDescriptor,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                          <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(resizeDescriptor);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    ForwardParentParameters(layer);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#a61b7aa0305e7c45a625f7835fa26b9b6">  243</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#a61b7aa0305e7c45a625f7835fa26b9b6">StaticRangeVisitor::VisitStridedSliceLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a>&amp; stridedSliceDescriptor,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;{</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(stridedSliceDescriptor);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    ForwardParentParameters(layer);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;}</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="classarmnn_1_1_static_range_visitor.xhtml#af5d09e03a578afa9c0bb8afd11c65485">  252</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml#af5d09e03a578afa9c0bb8afd11c65485">StaticRangeVisitor::VisitBatchToSpaceNdLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a>&amp; batchToSpaceNdDescriptor,</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;{</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(batchToSpaceNdDescriptor);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    ForwardParentParameters(layer);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;}</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;} <span class="comment">//namespace armnn</span></div><div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559">armnn::ActivationFunction::ReLu</a></div></div>
<div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml">armnn::ViewsDescriptor</a></div><div class="ttdoc">A ViewsDescriptor for the SplitterLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00198">Descriptors.hpp:198</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_ac2f379ba77b06095e0c024e232ec1fd4"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#ac2f379ba77b06095e0c024e232ec1fd4">armnn::StaticRangeVisitor::VisitConvolution2dLayer</a></div><div class="ttdeci">void VisitConvolution2dLayer(const IConnectableLayer *layer, const Convolution2dDescriptor &amp;convolution2dDescriptor, const ConstTensor &amp;weights, const Optional&lt; ConstTensor &gt; &amp;biases, const char *name=nullptr) override</div><div class="ttdoc">Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is ...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00055">StaticRangeVisitor.cpp:55</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a9c2cba04b6d7ace4fc2a2436b82a5a63"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">armnn::IConnectableLayer::GetNumInputSlots</a></div><div class="ttdeci">virtual unsigned int GetNumInputSlots() const =0</div><div class="ttdoc">Returns the number of connectable input slots. </div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a></div><div class="ttdoc">A ReshapeDescriptor for the ReshapeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00815">Descriptors.hpp:815</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_ac98eae261af6c8d5f7161a01a1959e72"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#ac98eae261af6c8d5f7161a01a1959e72">armnn::StaticRangeVisitor::VisitFullyConnectedLayer</a></div><div class="ttdeci">void VisitFullyConnectedLayer(const IConnectableLayer *layer, const FullyConnectedDescriptor &amp;desc, const ConstTensor &amp;weights, const Optional&lt; ConstTensor &gt; &amp;biases, const char *name) override</div><div class="ttdoc">Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00110">StaticRangeVisitor.cpp:110</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml">armnn::RangeTracker</a></div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8hpp_source.xhtml#l00017">RangeTracker.hpp:17</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00400">Descriptors.hpp:400</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_guid_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_guid.xhtml">armnn::profiling::ProfilingGuid</a></div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00275">Types.hpp:275</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaacb7667f5ec2f6e8a5943b781ba6c2735"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaacb7667f5ec2f6e8a5943b781ba6c2735">armnn::ActivationFunction::LeakyReLu</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_afb527e0c7c30b56da911fee8c7b7a011"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#afb527e0c7c30b56da911fee8c7b7a011">armnn::StaticRangeVisitor::VisitConcatLayer</a></div><div class="ttdeci">void VisitConcatLayer(const IConnectableLayer *layer, const OriginsDescriptor &amp;originsDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00159">StaticRangeVisitor.cpp:159</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_af493528dec93f39f5081dbefb40bff75"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#af493528dec93f39f5081dbefb40bff75">armnn::StaticRangeVisitor::VisitActivationLayer</a></div><div class="ttdeci">void VisitActivationLayer(const IConnectableLayer *layer, const ActivationDescriptor &amp;activationDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is inv...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00081">StaticRangeVisitor.cpp:81</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_a4a7f7f33591fd91e8fb1c08d06c0733a"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#a4a7f7f33591fd91e8fb1c08d06c0733a">armnn::StaticRangeVisitor::VisitReshapeLayer</a></div><div class="ttdeci">void VisitReshapeLayer(const IConnectableLayer *layer, const ReshapeDescriptor &amp;reshapeDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00207">StaticRangeVisitor.cpp:207</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="_static_range_visitor_8hpp_xhtml"><div class="ttname"><a href="_static_range_visitor_8hpp.xhtml">StaticRangeVisitor.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::BaseTensor::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00274">Tensor.hpp:274</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_a5abbca55c908440acecfa6e0f921092d"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#a5abbca55c908440acecfa6e0f921092d">armnn::StaticRangeVisitor::VisitResizeBilinearLayer</a></div><div class="ttdeci">void VisitResizeBilinearLayer(const IConnectableLayer *layer, const ResizeBilinearDescriptor &amp;resizeDesc, const char *name=nullptr) override</div><div class="ttdoc">Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00225">StaticRangeVisitor.cpp:225</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_aa81f67ac64f0c249e26499600c45d996"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">armnn::BaseTensor::GetMemoryArea</a></div><div class="ttdeci">MemoryType GetMemoryArea() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00276">Tensor.hpp:276</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_a1532cb8f551812e784ccc14faae407b9"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#a1532cb8f551812e784ccc14faae407b9">armnn::StaticRangeVisitor::VisitBatchNormalizationLayer</a></div><div class="ttdeci">void VisitBatchNormalizationLayer(const IConnectableLayer *layer, const BatchNormalizationDescriptor &amp;desc, const ConstTensor &amp;mean, const ConstTensor &amp;variance, const ConstTensor &amp;beta, const ConstTensor &amp;gamma, const char *name=nullptr) override</div><div class="ttdoc">Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;) functio...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00038">StaticRangeVisitor.cpp:38</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a></div><div class="ttdoc">A BatchToSpaceNdDescriptor for the BatchToSpaceNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00665">Descriptors.hpp:665</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml_a997e96288bdb106c922202e3f33d5d7b"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml#a997e96288bdb106c922202e3f33d5d7b">armnn::RangeTracker::MinMaxRange</a></div><div class="ttdeci">std::pair&lt; float, float &gt; MinMaxRange</div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8hpp_source.xhtml#l00020">RangeTracker.hpp:20</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a></div><div class="ttdoc">A ResizeDescriptor for the ResizeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00777">Descriptors.hpp:777</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml_a507bae23f59e94b4161886ebe663cdf4"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml#a507bae23f59e94b4161886ebe663cdf4">armnn::RangeTracker::GetRange</a></div><div class="ttdeci">MinMaxRange GetRange(LayerGuid guid, unsigned int idx) const</div><div class="ttdoc">Retrieve the Range for a particular output slot on a particular layer. </div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8cpp_source.xhtml#l00029">RangeTracker.cpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_a7cb4ef1bc9588c4319144460c288022f"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#a7cb4ef1bc9588c4319144460c288022f">armnn::StaticRangeVisitor::VisitAdditionLayer</a></div><div class="ttdeci">void VisitAdditionLayer(const IConnectableLayer *layer, const char *name=nullptr) override</div><div class="ttdoc">Functions to set the Range on a per-layer-type basis. </div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00032">StaticRangeVisitor.cpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml_a2f058d459a4f21569be3266227f2f6e5"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml#a2f058d459a4f21569be3266227f2f6e5">armnn::RangeTracker::SetRange</a></div><div class="ttdeci">void SetRange(const IConnectableLayer *layer, unsigned int outputIdx, float min, float max)</div><div class="ttdoc">Set the range for an output slot on a layer. </div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8cpp_source.xhtml#l00012">RangeTracker.cpp:12</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a></div><div class="ttdoc">An output connection slot for a layer. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00037">INetwork.hpp:37</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml">armnn::OriginsDescriptor</a></div><div class="ttdoc">An OriginsDescriptor for the ConcatLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00155">Descriptors.hpp:155</a></div></div>
<div class="ttc" id="_types_8hpp_xhtml"><div class="ttname"><a href="_types_8hpp.xhtml">Types.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a></div><div class="ttdoc">A FullyConnectedDescriptor for the FullyConnectedLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00381">Descriptors.hpp:381</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00298">Tensor.hpp:298</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_a61b7aa0305e7c45a625f7835fa26b9b6"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#a61b7aa0305e7c45a625f7835fa26b9b6">armnn::StaticRangeVisitor::VisitStridedSliceLayer</a></div><div class="ttdeci">void VisitStridedSliceLayer(const IConnectableLayer *layer, const StridedSliceDescriptor &amp;stridedSliceDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoke...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00243">StaticRangeVisitor.cpp:243</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_ad5532a4626c0228acc7b01fa0f5515eb"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#ad5532a4626c0228acc7b01fa0f5515eb">armnn::StaticRangeVisitor::VisitPermuteLayer</a></div><div class="ttdeci">void VisitPermuteLayer(const IConnectableLayer *layer, const PermuteDescriptor &amp;permuteDescriptor, const char *name) override</div><div class="ttdoc">Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00123">StaticRangeVisitor.cpp:123</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa6bba7052636d1740303b1b2ef3b53fef"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa6bba7052636d1740303b1b2ef3b53fef">armnn::ActivationFunction::SoftReLu</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a41d30a9cd272e05986d71a69d6ad618b"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a41d30a9cd272e05986d71a69d6ad618b">armnn::IOutputSlot::CalculateIndexOnOwner</a></div><div class="ttdeci">virtual unsigned int CalculateIndexOnOwner() const =0</div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_a8e327cc6432697fd55d6b91e554360d9"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#a8e327cc6432697fd55d6b91e554360d9">armnn::StaticRangeVisitor::VisitSpaceToBatchNdLayer</a></div><div class="ttdeci">void VisitSpaceToBatchNdLayer(const IConnectableLayer *layer, const SpaceToBatchNdDescriptor &amp;spaceToBatchNdDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invok...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00132">StaticRangeVisitor.cpp:132</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00020">Descriptors.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a></div><div class="ttdoc">min(a, max(b, input)) ReLu1 &amp; ReLu6. </div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_ad9a8ed92b7844396ca754c269a88f813"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#ad9a8ed92b7844396ca754c269a88f813">armnn::StaticRangeVisitor::StaticRangeVisitor</a></div><div class="ttdeci">StaticRangeVisitor(RangeTracker &amp;rangeTracker)</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00017">StaticRangeVisitor.cpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_aeb652d74e4b3596e85b22c2d52144f73"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#aeb652d74e4b3596e85b22c2d52144f73">armnn::StaticRangeVisitor::VisitConstantLayer</a></div><div class="ttdeci">void VisitConstantLayer(const IConnectableLayer *layer, const ConstTensor &amp;input, const char *name=nullptr) override</div><div class="ttdoc">Function a layer with no inputs and a single output, which always corresponds to the passed in consta...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00179">StaticRangeVisitor.cpp:179</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a></div><div class="ttdoc">A SpaceToBatchNdDescriptor for the SpaceToBatchNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00835">Descriptors.hpp:835</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a017b2990003a014234f13e999dc7c689"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">armnn::ActivationDescriptor::m_A</a></div><div class="ttdeci">float m_A</div><div class="ttdoc">Alpha upper bound value used by the activation functions. (BoundedReLu, Linear, TanH, Elu). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00045">Descriptors.hpp:45</a></div></div>
<div class="ttc" id="_descriptors_8hpp_xhtml"><div class="ttname"><a href="_descriptors_8hpp.xhtml">Descriptors.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_i_input_slot_xhtml_a81fbf6103761e55061b62ba989b00f10"><div class="ttname"><a href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">armnn::IInputSlot::GetConnection</a></div><div class="ttdeci">virtual const IOutputSlot * GetConnection() const =0</div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_a7eea0e93f066099f3549fef15881a4cb"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#a7eea0e93f066099f3549fef15881a4cb">armnn::StaticRangeVisitor::VisitResizeLayer</a></div><div class="ttdeci">void VisitResizeLayer(const IConnectableLayer *layer, const ResizeDescriptor &amp;resizeDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00234">StaticRangeVisitor.cpp:234</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_a98f34d2511f43324833060154cbdba8d"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#a98f34d2511f43324833060154cbdba8d">armnn::StaticRangeVisitor::VisitSoftmaxLayer</a></div><div class="ttdeci">void VisitSoftmaxLayer(const IConnectableLayer *layer, const SoftmaxDescriptor &amp;softmaxDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00150">StaticRangeVisitor.cpp:150</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a></div><div class="ttdoc">A StridedSliceDescriptor for the StridedSliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01059">Descriptors.hpp:1059</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_afbea8aa2295f2ab71ea5bb64ccd47871"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#afbea8aa2295f2ab71ea5bb64ccd47871">armnn::StaticRangeVisitor::VisitSplitterLayer</a></div><div class="ttdeci">void VisitSplitterLayer(const IConnectableLayer *layer, const SplitterDescriptor &amp;splitterDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoke...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00216">StaticRangeVisitor.cpp:216</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#aea909c7327109228ef618d459015def3">armnn::BaseTensor::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00271">Tensor.hpp:271</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_af5d09e03a578afa9c0bb8afd11c65485"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#af5d09e03a578afa9c0bb8afd11c65485">armnn::StaticRangeVisitor::VisitBatchToSpaceNdLayer</a></div><div class="ttdeci">void VisitBatchToSpaceNdLayer(const IConnectableLayer *layer, const BatchToSpaceNdDescriptor &amp;batchToSpaceNdDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;) function ...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00252">StaticRangeVisitor.cpp:252</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ad0c3555b126975ad6b3e250fe2a59534"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ad0c3555b126975ad6b3e250fe2a59534">armnn::IOutputSlot::GetOwningLayerGuid</a></div><div class="ttdeci">virtual LayerGuid GetOwningLayerGuid() const =0</div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_aaca77d69321f5ba94d639fe40dbd0b1c"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#aaca77d69321f5ba94d639fe40dbd0b1c">armnn::StaticRangeVisitor::VisitPooling2dLayer</a></div><div class="ttdeci">void VisitPooling2dLayer(const IConnectableLayer *layer, const Pooling2dDescriptor &amp;pooling2dDescriptor, const char *name) override</div><div class="ttdoc">Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00141">StaticRangeVisitor.cpp:141</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00321">Descriptors.hpp:321</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_bilinear_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">armnn::ResizeBilinearDescriptor</a></div><div class="ttdoc">A ResizeBilinearDescriptor for the ResizeBilinearLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00754">Descriptors.hpp:754</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b">armnn::ActivationFunction::Linear</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml_a554e88817e6fd98645388873a108f868"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml#a554e88817e6fd98645388873a108f868">armnn::StaticRangeVisitor::VisitDepthwiseConvolution2dLayer</a></div><div class="ttdeci">void VisitDepthwiseConvolution2dLayer(const IConnectableLayer *layer, const DepthwiseConvolution2dDescriptor &amp;desc, const ConstTensor &amp;weights, const Optional&lt; ConstTensor &gt; &amp;biases, const char *name=nullptr) override</div><div class="ttdoc">Function that a 2D depthwise convolution layer with biases should call back to when its Accept(ILayer...</div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8cpp_source.xhtml#l00068">StaticRangeVisitor.cpp:68</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a></div><div class="ttdoc">A SoftmaxDescriptor for the SoftmaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00131">Descriptors.hpp:131</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu, LeakyReLu, Abs, Sqrt, Square, Elu). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00043">Descriptors.hpp:43</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a></div><div class="ttdoc">A DepthwiseConvolution2dDescriptor for the DepthwiseConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00452">Descriptors.hpp:452</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a></div><div class="ttdoc">A BatchNormalizationDescriptor for the BatchNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00618">Descriptors.hpp:618</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a></div><div class="ttdoc">A PermuteDescriptor for the PermuteLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00110">Descriptors.hpp:110</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">armnn::ActivationFunction::TanH</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_static_range_visitor_8cpp.xhtml">StaticRangeVisitor.cpp</a></li>
    <li class="footer">Generated on Tue Aug 25 2020 12:29:39 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
