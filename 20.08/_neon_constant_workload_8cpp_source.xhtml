<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/neon/workloads/NeonConstantWorkload.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_neon_constant_workload_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NeonConstantWorkload.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_neon_constant_workload_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_constant_workload_8hpp.xhtml">NeonConstantWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;arm_compute/core/Types.h&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_b_float16_8hpp.xhtml">BFloat16.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_half_8hpp.xhtml">Half.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_arm_compute_tensor_utils_8hpp.xhtml">aclCommon/ArmComputeTensorUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_polymorphic_downcast_8hpp.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_neon_tensor_handle_8hpp.xhtml">neon/NeonTensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_cpu_tensor_handle_8hpp.xhtml">backendsCommon/CpuTensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_workload_8hpp.xhtml">backendsCommon/Workload.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;boost/cast.hpp&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#afb681fd9b8afe0b236d51b6c868ae660">   22</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> <a class="code" href="namespacearmnn.xhtml#afb681fd9b8afe0b236d51b6c868ae660">NeonConstantWorkloadValidate</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">const</span> arm_compute::TensorInfo neonOutputInfo = armcomputetensorutils::BuildArmComputeTensorInfo(output);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    std::array&lt;arm_compute::DataType,9&gt; supportedTypes = {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;            arm_compute::DataType::BFLOAT16,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;            arm_compute::DataType::F16,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            arm_compute::DataType::F32,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            arm_compute::DataType::QASYMM8,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            arm_compute::DataType::QASYMM8_SIGNED,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            arm_compute::DataType::QSYMM16,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            arm_compute::DataType::QSYMM8,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            arm_compute::DataType::QSYMM8_PER_CHANNEL,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            arm_compute::DataType::S32</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    };</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keyword">auto</span> it = std::find(begin(supportedTypes), end(supportedTypes), neonOutputInfo.data_type());</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">if</span> (it != end(supportedTypes))</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a>{};</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    }</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a>{arm_compute::ErrorCode::RUNTIME_ERROR, <span class="stringliteral">&quot;Unsupported DataType&quot;</span>};</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_constant_workload.xhtml#a104b2d6e3d37d807cd758d2111922ac2">   49</a></span>&#160;<a class="code" href="classarmnn_1_1_neon_constant_workload.xhtml#a104b2d6e3d37d807cd758d2111922ac2">NeonConstantWorkload::NeonConstantWorkload</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml">ConstantQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    : <a class="code" href="classarmnn_1_1_base_workload.xhtml">BaseWorkload</a>&lt;<a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml">ConstantQueueDescriptor</a>&gt;(descriptor, info)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    , m_RanOnce(<a class="code" href="_cl_layer_tests_8cpp.xhtml#a2289f9e7fac0ce47801448e873b04303">false</a>)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_constant_workload.xhtml#ae071e8822437c78baea75c3aef3a263a">   56</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_neon_constant_workload.xhtml#ae071e8822437c78baea75c3aef3a263a">NeonConstantWorkload::Execute</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="_neon_workload_utils_8hpp.xhtml#a8bf91fd5e5875631bcf6abbcd97fe2f4">ARMNN_SCOPED_PROFILING_EVENT_NEON</a>(<span class="stringliteral">&quot;NeonConstantWorkload_Execute&quot;</span>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">using namespace </span>armcomputetensorutils;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// The intermediate tensor held by the corresponding layer output handler can be initialised with the</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="comment">// given data on the first inference, then reused for subsequent inferences.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">// The initialisation cannot happen at workload construction time since the ACL kernel for the next layer</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// may not have been configured at the time.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">if</span> (!m_RanOnce)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml">ConstantQueueDescriptor</a>&amp; data = this-&gt;<a class="code" href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">m_Data</a>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(data.<a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml#ade37258f293ac919eac5f1af1de5ac82">m_LayerOutput</a> != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        arm_compute::ITensor&amp; output =</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            PolymorphicDowncast&lt;NeonTensorHandle*&gt;(data.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[0])-&gt;GetTensor();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a> computeDataType =</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            PolymorphicDowncast&lt;NeonTensorHandle*&gt;(data.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[0])-&gt;GetDataType();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">switch</span> (computeDataType)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">case</span> arm_compute::DataType::BFLOAT16:</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                CopyArmComputeITensorData(data.<a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml#ade37258f293ac919eac5f1af1de5ac82">m_LayerOutput</a>-&gt;<a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">GetConstTensor</a>&lt;<a class="code" href="classarmnn_1_1_b_float16.xhtml">BFloat16</a>&gt;(), output);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">case</span> arm_compute::DataType::F16:</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                CopyArmComputeITensorData(data.<a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml#ade37258f293ac919eac5f1af1de5ac82">m_LayerOutput</a>-&gt;<a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">GetConstTensor</a>&lt;<a class="code" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">Half</a>&gt;(), output);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">case</span> arm_compute::DataType::F32:</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                CopyArmComputeITensorData(data.<a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml#ade37258f293ac919eac5f1af1de5ac82">m_LayerOutput</a>-&gt;<a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">GetConstTensor</a>&lt;<span class="keywordtype">float</span>&gt;(), output);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">case</span> arm_compute::DataType::QASYMM8:</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                CopyArmComputeITensorData(data.<a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml#ade37258f293ac919eac5f1af1de5ac82">m_LayerOutput</a>-&gt;<a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">GetConstTensor</a>&lt;uint8_t&gt;(), output);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">case</span> arm_compute::DataType::QASYMM8_SIGNED:</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                CopyArmComputeITensorData(data.<a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml#ade37258f293ac919eac5f1af1de5ac82">m_LayerOutput</a>-&gt;<a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">GetConstTensor</a>&lt;int8_t&gt;(), output);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">case</span> arm_compute::DataType::QSYMM16:</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                CopyArmComputeITensorData(data.<a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml#ade37258f293ac919eac5f1af1de5ac82">m_LayerOutput</a>-&gt;<a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">GetConstTensor</a>&lt;int16_t&gt;(), output);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">case</span> arm_compute::DataType::QSYMM8:</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">case</span> arm_compute::DataType::QSYMM8_PER_CHANNEL:</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                CopyArmComputeITensorData(data.<a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml#ade37258f293ac919eac5f1af1de5ac82">m_LayerOutput</a>-&gt;<a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">GetConstTensor</a>&lt;int8_t&gt;(), output);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">case</span> arm_compute::DataType::S32:</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                CopyArmComputeITensorData(data.<a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml#ade37258f293ac919eac5f1af1de5ac82">m_LayerOutput</a>-&gt;<a class="code" href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">GetConstTensor</a>&lt;int32_t&gt;(), output);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Unknown data type&quot;</span>);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        m_RanOnce = <span class="keyword">true</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;} <span class="comment">//namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_neon_constant_workload_xhtml_a104b2d6e3d37d807cd758d2111922ac2"><div class="ttname"><a href="classarmnn_1_1_neon_constant_workload.xhtml#a104b2d6e3d37d807cd758d2111922ac2">armnn::NeonConstantWorkload::NeonConstantWorkload</a></div><div class="ttdeci">NeonConstantWorkload(const ConstantQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_constant_workload_8cpp_source.xhtml#l00049">NeonConstantWorkload.cpp:49</a></div></div>
<div class="ttc" id="structarmnn_1_1_constant_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_constant_queue_descriptor.xhtml">armnn::ConstantQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00337">WorkloadData.hpp:337</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="_cl_layer_tests_8cpp_xhtml_a2289f9e7fac0ce47801448e873b04303"><div class="ttname"><a href="_cl_layer_tests_8cpp.xhtml#a2289f9e7fac0ce47801448e873b04303">false</a></div><div class="ttdeci">DataLayout::NHWC false</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_tests_8cpp_source.xhtml#l00137">ClLayerTests.cpp:137</a></div></div>
<div class="ttc" id="_neon_constant_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_constant_workload_8hpp.xhtml">NeonConstantWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_b_float16_xhtml"><div class="ttname"><a href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a></div><div class="ttdef"><b>Definition:</b> <a href="_b_float16_8hpp_source.xhtml#l00014">BFloat16.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml_a0a487c549c63319505095b855ea3c195"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml#a0a487c549c63319505095b855ea3c195">armnn::BaseWorkload&lt; ConstantQueueDescriptor &gt;::m_Data</a></div><div class="ttdeci">const ConstantQueueDescriptor m_Data</div><div class="ttdef"><b>Definition:</b> <a href="_workload_8hpp_source.xhtml#l00046">Workload.hpp:46</a></div></div>
<div class="ttc" id="_neon_workload_utils_8hpp_xhtml_a8bf91fd5e5875631bcf6abbcd97fe2f4"><div class="ttname"><a href="_neon_workload_utils_8hpp.xhtml#a8bf91fd5e5875631bcf6abbcd97fe2f4">ARMNN_SCOPED_PROFILING_EVENT_NEON</a></div><div class="ttdeci">#define ARMNN_SCOPED_PROFILING_EVENT_NEON(name)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_utils_8hpp_source.xhtml#l00017">NeonWorkloadUtils.hpp:17</a></div></div>
<div class="ttc" id="structarmnn_1_1_constant_queue_descriptor_xhtml_ade37258f293ac919eac5f1af1de5ac82"><div class="ttname"><a href="structarmnn_1_1_constant_queue_descriptor.xhtml#ade37258f293ac919eac5f1af1de5ac82">armnn::ConstantQueueDescriptor::m_LayerOutput</a></div><div class="ttdeci">const ConstCpuTensorHandle * m_LayerOutput</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00344">WorkloadData.hpp:344</a></div></div>
<div class="ttc" id="_neon_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="_neon_tensor_handle_8hpp.xhtml">NeonTensorHandle.hpp</a></div></div>
<div class="ttc" id="_arm_compute_tensor_utils_8hpp_xhtml"><div class="ttname"><a href="_arm_compute_tensor_utils_8hpp.xhtml">ArmComputeTensorUtils.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_cpu_tensor_handle_xhtml_a3a76fc8b348e13d5a6ac1240c96ebef4"><div class="ttname"><a href="classarmnn_1_1_const_cpu_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">armnn::ConstCpuTensorHandle::GetConstTensor</a></div><div class="ttdeci">const T * GetConstTensor() const</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00031">CpuTensorHandle.hpp:31</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="_polymorphic_downcast_8hpp_xhtml"><div class="ttname"><a href="_polymorphic_downcast_8hpp.xhtml">PolymorphicDowncast.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml">armnn::BaseWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_8hpp_source.xhtml#l00028">Workload.hpp:28</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00032">Types.hpp:32</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00026">Types.hpp:26</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="_cpu_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="_cpu_tensor_handle_8hpp.xhtml">CpuTensorHandle.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_constant_workload_xhtml_ae071e8822437c78baea75c3aef3a263a"><div class="ttname"><a href="classarmnn_1_1_neon_constant_workload.xhtml#ae071e8822437c78baea75c3aef3a263a">armnn::NeonConstantWorkload::Execute</a></div><div class="ttdeci">virtual void Execute() const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_constant_workload_8cpp_source.xhtml#l00056">NeonConstantWorkload.cpp:56</a></div></div>
<div class="ttc" id="_half_8hpp_xhtml"><div class="ttname"><a href="_half_8hpp.xhtml">Half.hpp</a></div></div>
<div class="ttc" id="_workload_8hpp_xhtml"><div class="ttname"><a href="_workload_8hpp.xhtml">Workload.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_xhtml_a6abd491bb99ffe88bd472c1ae5a1ed1a"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">armnn::QueueDescriptor::m_Outputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Outputs</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00031">WorkloadData.hpp:31</a></div></div>
<div class="ttc" id="_b_float16_8hpp_xhtml"><div class="ttname"><a href="_b_float16_8hpp.xhtml">BFloat16.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_afb681fd9b8afe0b236d51b6c868ae660"><div class="ttname"><a href="namespacearmnn.xhtml#afb681fd9b8afe0b236d51b6c868ae660">armnn::NeonConstantWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConstantWorkloadValidate(const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_constant_workload_8cpp_source.xhtml#l00022">NeonConstantWorkload.cpp:22</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0f38fa92b2468d5378258a2b074c1a31"><div class="ttname"><a href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a></div><div class="ttdeci">half_float::half Half</div><div class="ttdef"><b>Definition:</b> <a href="_half_8hpp_source.xhtml#l00016">Half.hpp:16</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_d86eb514662c7c08e168285f21d00ea1.xhtml">neon</a></li><li class="navelem"><a class="el" href="dir_369c3c20501d0d10bd0354bf11c2f559.xhtml">workloads</a></li><li class="navelem"><a class="el" href="_neon_constant_workload_8cpp.xhtml">NeonConstantWorkload.cpp</a></li>
    <li class="footer">Generated on Tue Aug 25 2020 12:29:43 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
