<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/layerTests/AdditionTestImpl.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_addition_test_impl_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">AdditionTestImpl.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_addition_test_impl_8hpp_source.xhtml">AdditionTestImpl.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_elementwise_test_impl_8hpp_source.xhtml">ElementwiseTestImpl.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_quantize_helper_8hpp_source.xhtml">QuantizeHelper.hpp</a>&gt;</code><br />
</div>
<p><a href="_addition_test_impl_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a5f3caae0b1541a904067544dd37655f0"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a5f3caae0b1541a904067544dd37655f0"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">armnn::IWorkload</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#a5f3caae0b1541a904067544dd37655f0">CreateWorkload&lt; armnn::AdditionQueueDescriptor &gt;</a> (const <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> &amp;info, const <a class="el" href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a> &amp;descriptor)</td></tr>
<tr class="separator:a5f3caae0b1541a904067544dd37655f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a108165b4957f3790332ae0afedf37ccd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#a108165b4957f3790332ae0afedf37ccd">AdditionTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a108165b4957f3790332ae0afedf37ccd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab102e5bc3a3b04360a0f42e25ab3c898"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 5 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#ab102e5bc3a3b04360a0f42e25ab3c898">Addition5dTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:ab102e5bc3a3b04360a0f42e25ab3c898"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add789f43d728a34fccf9aea235179342"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:add789f43d728a34fccf9aea235179342"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#add789f43d728a34fccf9aea235179342">AdditionBroadcastTestImpl</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:add789f43d728a34fccf9aea235179342"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6a320dc43ad2384cf2d7288cf9c0823"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:ad6a320dc43ad2384cf2d7288cf9c0823"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 4 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#ad6a320dc43ad2384cf2d7288cf9c0823">AdditionBroadcast1ElementTestImpl</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:ad6a320dc43ad2384cf2d7288cf9c0823"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9591268a5a6c7d0a0b91098deab4fe34"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#a9591268a5a6c7d0a0b91098deab4fe34">AdditionBroadcastTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a9591268a5a6c7d0a0b91098deab4fe34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0946a9b1b8cf99591b03ea7f5f7e725f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#a0946a9b1b8cf99591b03ea7f5f7e725f">AdditionBroadcastUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a0946a9b1b8cf99591b03ea7f5f7e725f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a470ed90260ed36c02adc91df184fcc82"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#a470ed90260ed36c02adc91df184fcc82">AdditionBroadcastInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a470ed90260ed36c02adc91df184fcc82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ea42d7fde58f0aace730d757c90e0d4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int32_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#a7ea42d7fde58f0aace730d757c90e0d4">AdditionBroadcastInt32Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a7ea42d7fde58f0aace730d757c90e0d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bff97bff3f9fb4cf473812dee810de0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#a4bff97bff3f9fb4cf473812dee810de0">AdditionBroadcast1ElementTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a4bff97bff3f9fb4cf473812dee810de0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad71ffd0e8547900b92a5d471f01cd69b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#ad71ffd0e8547900b92a5d471f01cd69b">AdditionBroadcast1ElementUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:ad71ffd0e8547900b92a5d471f01cd69b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97579bb78890452730fff4d1e3e6fb4a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#a97579bb78890452730fff4d1e3e6fb4a">AdditionBroadcast1ElementInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a97579bb78890452730fff4d1e3e6fb4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a642ae54e1693f26f65a18c87ca0fdec9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int32_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#a642ae54e1693f26f65a18c87ca0fdec9">AdditionBroadcast1ElementInt32Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a642ae54e1693f26f65a18c87ca0fdec9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b5e20456506426ba2e4ea9616df978f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#a4b5e20456506426ba2e4ea9616df978f">AdditionUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a4b5e20456506426ba2e4ea9616df978f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae087613cdb8319fbab07d44e6eaf217d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#ae087613cdb8319fbab07d44e6eaf217d">AdditionInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:ae087613cdb8319fbab07d44e6eaf217d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebc3be70ed70b822de9dfe9788e0d8ce"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int32_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#aebc3be70ed70b822de9dfe9788e0d8ce">AdditionInt32Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:aebc3be70ed70b822de9dfe9788e0d8ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa11fe3b8a07854e2bb9dd3ccecaa96e4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#aa11fe3b8a07854e2bb9dd3ccecaa96e4">AdditionAfterMaxPoolTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:aa11fe3b8a07854e2bb9dd3ccecaa96e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a557c464592942eb098f63aa0f91e4d24"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_addition_test_impl_8cpp.xhtml#a557c464592942eb098f63aa0f91e4d24">CompareAdditionTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;refWorkloadFactory)</td></tr>
<tr class="separator:a557c464592942eb098f63aa0f91e4d24"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ab102e5bc3a3b04360a0f42e25ab3c898"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab102e5bc3a3b04360a0f42e25ab3c898">&#9670;&nbsp;</a></span>Addition5dTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 5&gt; Addition5dTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00089">89</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth     = 2u;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 2u;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channels  = 2u;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height    = 2u;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width     = 3u;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[] = { depth, batchSize, channels, height, width };</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    std::vector&lt;float&gt; input1 =</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        2.6f, 4.0f, 4.4f,  2.7f, 4.6f, 2.8f,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        2.3f, 1.9f, 3.4f,  2.9f, 2.2f, 4.5f,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        2.8f, 1.9f, 2.3f,  2.6f, 4.7f, 3.5f,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        0.4f, 1.5f, 2.1f,  0.7f, 5.0f, 1.1f,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        1.0f, 2.7f, 0.0f,  0.6f, 0.8f, 0.9f,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        1.0f, 2.6f, 0.4f,  3.8f, 0.4f, 0.8f,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        0.5f, 4.3f, 3.1f,  4.4f, 0.7f, 1.4f,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        0.4f, 4.4f, 0.7f,  0.6f, 4.7f, 1.2f,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    };</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    std::vector&lt;float&gt; input2 =</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        4.4f, 3.0f, 1.0f,  0.0f, 3.9f, 3.1f,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        1.7f, 2.9f, 1.3f,  0.4f, 0.4f, 4.3f,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        4.5f, 0.2f, 2.2f,  4.1f, 3.9f, 3.0f,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        0.1f, 2.5f, 4.1f,  4.6f, 1.5f, 0.0f,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        0.5f, 4.9f, 2.5f,  1.5f, 3.4f, 4.5f,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        2.0f, 3.0f, 4.9f,  1.6f, 2.4f, 3.4f,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        3.6f, 1.8f, 1.3f,  2.6f, 2.1f, 4.8f,</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        2.0f, 4.3f, 4.0f,  0.2f, 0.6f, 4.4f,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    };</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    std::vector&lt;float&gt; output =</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        7.0f, 7.0f, 5.4f,  2.7f, 8.5f, 5.9f,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        4.0f, 4.8f, 4.7f,  3.3f, 2.6f, 8.8f,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        7.3f, 2.1f, 4.5f,  6.7f, 8.6f, 6.5f,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        0.5f, 4.0f, 6.2f,  5.3f, 6.5f, 1.1f,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        1.5f, 7.6f, 2.5f,  2.1f, 4.2f, 5.4f,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        3.0f, 5.6f, 5.3f,  5.4f, 2.8f, 4.2f,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        4.1f, 6.1f, 4.4f,  7.0f, 2.8f, 6.2f,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        2.4f, 8.7f, 4.7f,  0.8f, 5.3f, 5.6f,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    };</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;5, armnn::AdditionQueueDescriptor, armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        workloadFactory,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        memoryManager,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        shape,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        input1,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        shape,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        input2,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        shape,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        output);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa11fe3b8a07854e2bb9dd3ccecaa96e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa11fe3b8a07854e2bb9dd3ccecaa96e4">&#9670;&nbsp;</a></span>AdditionAfterMaxPoolTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; AdditionAfterMaxPoolTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00516">516</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00014">CopyDataFromITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00009">CopyDataToITensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01236">IWorkloadFactory::CreateAddition()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01489">IWorkloadFactory::CreatePooling2d()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00367">Pooling2dDescriptor::m_PoolHeight</a>, and <a class="el" href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718a6a061313d22e51e0f25b7cd4dc065233">armnn::Max</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l01422">BOOST_AUTO_TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;{</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="comment">// Create Initial Tensor</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="comment">// 1, 2, 3</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="comment">// 4, 5, 6</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="comment">// 7, 8, 9</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> poolingInputTensorInfo({ 1, 1, 3, 3}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> poolingOutputTensorInfo({ 1, 1, 2, 2}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    boost::multi_array&lt;float, 4&gt; poolingInput = MakeTensor&lt;float,4&gt;(poolingInputTensorInfo,</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                                            {1, 2, 3,</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                                                             4, 5, 6,</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                                             7, 8, 9</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                                            });</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; poolingInputHandle =</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(poolingInputTensorInfo);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; poolingOutputHandle =</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(poolingOutputTensorInfo);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="comment">// Apply MaxPool poolSize = 1x1, stride=2x2</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="comment">// Result =</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="comment">// 1, 3</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="comment">// 7, 9</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a> descriptor;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">m_PoolHeight</a> = 1;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    descriptor.m_PoolWidth = 1;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    descriptor.m_StrideX = 2;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    descriptor.m_StrideY = 2;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    descriptor.m_PoolType = <a class="code" href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718a6a061313d22e51e0f25b7cd4dc065233">armnn::PoolingAlgorithm::Max</a>;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <a class="code" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">armnn::Pooling2dQueueDescriptor</a> queueDescriptor;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    queueDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a> = descriptor;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> workloadInfo;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    AddInputToWorkload(queueDescriptor, workloadInfo, poolingInputTensorInfo, poolingInputHandle.get());</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    AddOutputToWorkload(queueDescriptor, workloadInfo, poolingOutputTensorInfo, poolingOutputHandle.get());</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="comment">// Create the MaxPool</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a6e95afd9a55700cbf6f9e8db8089f2f2">CreatePooling2d</a>(queueDescriptor, workloadInfo);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="comment">//LayerTestResult&lt;float, 4&gt; result(poolingOutputTensorInfo);</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="keyword">auto</span> shape( GetTensorShapeAsArray&lt;4&gt;(poolingOutputTensorInfo));</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    boost::multi_array&lt;float, 4&gt; resultMaxPool;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    resultMaxPool.resize(shape);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="comment">// Create addition with another tensor the same size</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="comment">// This would be the result to apply a Conv2d with kernel ones(2) and stride 1x1</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="comment">// with the initial tensor.</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="comment">// 12, 16</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <span class="comment">// 24, 28</span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> addInputTensorInfo({ 1,1,2,2}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> addOutputTensorInfo({ 1,1,2,2}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    boost::multi_array&lt;float, 4&gt; addInput = MakeTensor&lt;float,4&gt;(addInputTensorInfo,</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                                                                    {12, 16,</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                                                                     24, 28,</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                                                                    });</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="comment">// Expected output tensor after MaxPool and Addition.</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float,4&gt;</a> addRet(addOutputTensorInfo);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    addRet.outputExpected = MakeTensor&lt;float, 4&gt;(addOutputTensorInfo, std::vector&lt;float&gt;(</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    {</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        13, 19,</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        31, 37</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    }));</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; addInputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(addInputTensorInfo);</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; addOutputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(addOutputTensorInfo);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <a class="code" href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a> data;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <span class="comment">// Add the output of the MaxPool and the new tensor</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    AddInputToWorkload(data, info, poolingOutputTensorInfo, poolingOutputHandle.get());</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    AddInputToWorkload(data, info, addInputTensorInfo, addInputHandle.get());</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    AddOutputToWorkload(data, info, addOutputTensorInfo, addOutputHandle.get());</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; addWorkload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">CreateAddition</a>(data, info);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    poolingInputHandle-&gt;Allocate();</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    poolingOutputHandle-&gt;Allocate();</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    addInputHandle-&gt;Allocate();</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    addOutputHandle-&gt;Allocate();</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(poolingInputHandle.get(), &amp;poolingInput[0][0][0][0]);</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;resultMaxPool[0][0][0][0], poolingOutputHandle.get());</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(poolingOutputHandle.get(), &amp;resultMaxPool[0][0][0][0]);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(addInputHandle.get(), &amp;addInput[0][0][0][0]);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    workload-&gt;PostAllocationConfigure();</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    addWorkload-&gt;PostAllocationConfigure();</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    addWorkload-&gt;Execute();</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;addRet.output[0][0][0][0], addOutputHandle.get());</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <span class="keywordflow">return</span> addRet;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;}</div><div class="ttc" id="_deprecated_8hpp_xhtml_ab66a241a0ed3ee89c866e777b035d0ed"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_BEGIN</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00033">Deprecated.hpp:33</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="structarmnn_1_1_addition_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00222">WorkloadData.hpp:222</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00049">WorkloadData.hpp:49</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a5699e8606c37d18c03910b242cd1b010"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">armnn::Pooling2dDescriptor::m_PoolHeight</a></div><div class="ttdeci">uint32_t m_PoolHeight</div><div class="ttdoc">Pooling height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00367">Descriptors.hpp:367</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_ad762b11b48e5c1d1c1743f529485728a"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_END</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00034">Deprecated.hpp:34</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_a99b626c58a926dc7d6df78d22ec186c8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *memory, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15c140be4ddceffee16436f009d3ed94"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">armnn::IWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a6e95afd9a55700cbf6f9e8db8089f2f2"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a6e95afd9a55700cbf6f9e8db8089f2f2">armnn::IWorkloadFactory::CreatePooling2d</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreatePooling2d(const Pooling2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01489">WorkloadFactory.cpp:1489</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_acf187617ed4cdd6625b396d6b194923e"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">armnn::IWorkloadFactory::CreateAddition</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateAddition(const AdditionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01236">WorkloadFactory.cpp:1236</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a961bbfe1db71a848eff5a1f0ab775718a6a061313d22e51e0f25b7cd4dc065233"><div class="ttname"><a href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718a6a061313d22e51e0f25b7cd4dc065233">armnn::PoolingAlgorithm::Max</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00030">LayerTestResult.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">armnn::Pooling2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00168">WorkloadData.hpp:168</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00321">Descriptors.hpp:321</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a97579bb78890452730fff4d1e3e6fb4a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97579bb78890452730fff4d1e3e6fb4a">&#9670;&nbsp;</a></span>AdditionBroadcast1ElementInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; AdditionBroadcast1ElementInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00374">374</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;{</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keywordflow">return</span> AdditionBroadcast1ElementTestImpl&lt;armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        workloadFactory, memoryManager, 0.1333333f, 0);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a642ae54e1693f26f65a18c87ca0fdec9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a642ae54e1693f26f65a18c87ca0fdec9">&#9670;&nbsp;</a></span>AdditionBroadcast1ElementInt32Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int32_t, 4&gt; AdditionBroadcast1ElementInt32Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00382">382</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;{</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordflow">return</span> AdditionBroadcast1ElementTestImpl&lt;armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            workloadFactory, memoryManager, 1.f, 0);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4bff97bff3f9fb4cf473812dee810de0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bff97bff3f9fb4cf473812dee810de0">&#9670;&nbsp;</a></span>AdditionBroadcast1ElementTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; AdditionBroadcast1ElementTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00358">358</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;{</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordflow">return</span> AdditionBroadcast1ElementTestImpl&lt;armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        workloadFactory, memoryManager, 0.0f, 0);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad6a320dc43ad2384cf2d7288cf9c0823"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6a320dc43ad2384cf2d7288cf9c0823">&#9670;&nbsp;</a></span>AdditionBroadcast1ElementTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; AdditionBroadcast1ElementTestImpl </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00247">247</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00014">CopyDataFromITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00009">CopyDataToITensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01236">IWorkloadFactory::CreateAddition()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult&lt; T, n &gt;::output</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult&lt; T, n &gt;::outputExpected</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00481">TensorInfo::SetQuantizationOffset()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00465">TensorInfo::SetQuantizationScale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo1 = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>({1, 3, 2, 3}, ArmnnType);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo2 = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>({1, 1, 1, 1}, ArmnnType);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>({1, 3, 2, 3}, ArmnnType);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">if</span> (armnn::IsQuantizedType&lt;T&gt;())</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        inputTensorInfo1.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(qScale);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        inputTensorInfo1.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(qOffset);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        inputTensorInfo2.SetQuantizationScale(qScale);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        inputTensorInfo2.SetQuantizationOffset(qOffset);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        outputTensorInfo.SetQuantizationScale(qScale);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        outputTensorInfo.SetQuantizationOffset(qOffset);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keyword">auto</span> input1 = MakeTensor&lt;T, 4&gt;(inputTensorInfo1, armnnUtils::QuantizedVector&lt;T&gt;(</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;         0.0f,  1.0f,  2.0f,</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;         3.0f,  4.0f,  5.0f,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;         6.0f,  7.0f,  8.0f,</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;         9.0f, 10.0f, 11.0f,</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        12.0f, 13.0f, 14.0f,</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        15.0f, 16.0f, 17.0f,</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    },</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    qScale, qOffset));</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">auto</span> input2 = MakeTensor&lt;T, 4&gt;(inputTensorInfo2, armnnUtils::QuantizedVector&lt;T&gt;(</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    {</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        0.5f,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    },</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    qScale, qOffset));</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T,4&gt;</a> ret(outputTensorInfo);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    ret.outputExpected = MakeTensor&lt;T, 4&gt;(outputTensorInfo, armnnUtils::QuantizedVector&lt;T&gt;(</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;         0.5f,  1.5f,  2.5f,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;         3.5f,  4.5f,  5.5f,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;         6.5f,  7.5f,  8.5f,</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;         9.5f, 10.5f, 11.5f,</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        12.5f, 13.5f, 14.5f,</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        15.5f, 16.5f, 17.5f,</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    },</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    qScale, qOffset));</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle1 = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo1);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle2 = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo2);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <a class="code" href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a> data;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo1, inputHandle1.get());</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo2, inputHandle2.get());</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">CreateAddition</a>(data, info);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    inputHandle1-&gt;Allocate();</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    inputHandle2-&gt;Allocate();</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle1.get(), &amp;input1[0][0][0][0]);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle2.get(), &amp;input2[0][0][0][0]);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    workload-&gt;PostAllocationConfigure();</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;ret.output[0][0][0][0], outputHandle.get());</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;}</div><div class="ttc" id="_deprecated_8hpp_xhtml_ab66a241a0ed3ee89c866e777b035d0ed"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_BEGIN</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00033">Deprecated.hpp:33</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="structarmnn_1_1_addition_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00222">WorkloadData.hpp:222</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_ad762b11b48e5c1d1c1743f529485728a"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_END</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00034">Deprecated.hpp:34</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00465">Tensor.cpp:465</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_a99b626c58a926dc7d6df78d22ec186c8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *memory, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15c140be4ddceffee16436f009d3ed94"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">armnn::IWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_acf187617ed4cdd6625b396d6b194923e"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">armnn::IWorkloadFactory::CreateAddition</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateAddition(const AdditionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01236">WorkloadFactory.cpp:1236</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00030">LayerTestResult.hpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00481">Tensor.cpp:481</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad71ffd0e8547900b92a5d471f01cd69b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad71ffd0e8547900b92a5d471f01cd69b">&#9670;&nbsp;</a></span>AdditionBroadcast1ElementUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; AdditionBroadcast1ElementUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00366">366</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;{</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordflow">return</span> AdditionBroadcast1ElementTestImpl&lt;armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        workloadFactory, memoryManager, 0.1333333f, 128);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a470ed90260ed36c02adc91df184fcc82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a470ed90260ed36c02adc91df184fcc82">&#9670;&nbsp;</a></span>AdditionBroadcastInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; AdditionBroadcastInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00342">342</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;{</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">return</span> AdditionBroadcastTestImpl&lt;armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        workloadFactory, memoryManager, 2.f, 0);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7ea42d7fde58f0aace730d757c90e0d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ea42d7fde58f0aace730d757c90e0d4">&#9670;&nbsp;</a></span>AdditionBroadcastInt32Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int32_t, 4&gt; AdditionBroadcastInt32Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00350">350</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;{</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">return</span> AdditionBroadcastTestImpl&lt;armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            workloadFactory, memoryManager, 1.f, 0);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a9591268a5a6c7d0a0b91098deab4fe34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9591268a5a6c7d0a0b91098deab4fe34">&#9670;&nbsp;</a></span>AdditionBroadcastTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; AdditionBroadcastTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00326">326</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;{</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keywordflow">return</span> AdditionBroadcastTestImpl&lt;armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        workloadFactory, memoryManager, 0.0f, 0);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="add789f43d728a34fccf9aea235179342"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add789f43d728a34fccf9aea235179342">&#9670;&nbsp;</a></span>AdditionBroadcastTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 4&gt; AdditionBroadcastTestImpl </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00162">162</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00014">CopyDataFromITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00009">CopyDataToITensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01236">IWorkloadFactory::CreateAddition()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00041">LayerTestResult&lt; T, n &gt;::output</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult&lt; T, n &gt;::outputExpected</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00481">TensorInfo::SetQuantizationOffset()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00465">TensorInfo::SetQuantizationScale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo1 = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>({1, 3, 2, 1}, ArmnnType);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo2 = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>({1, 1, 2, 3}, ArmnnType);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>({1, 3, 2, 3}, ArmnnType);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">if</span> (armnn::IsQuantizedType&lt;T&gt;())</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        inputTensorInfo1.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(qScale);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        inputTensorInfo1.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(qOffset);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        inputTensorInfo2.SetQuantizationScale(qScale);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        inputTensorInfo2.SetQuantizationOffset(qOffset);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        outputTensorInfo.SetQuantizationScale(qScale);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        outputTensorInfo.SetQuantizationOffset(qOffset);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">auto</span> input1 = MakeTensor&lt;T, 4&gt;(inputTensorInfo1, armnnUtils::QuantizedVector&lt;T&gt;(</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        0.0f,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        1.0f,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        2.0f,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        3.0f,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        4.0f,</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        5.0f,</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    },</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    qScale, qOffset));</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">auto</span> input2 = MakeTensor&lt;T, 4&gt;(inputTensorInfo2, armnnUtils::QuantizedVector&lt;T&gt;(</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        0.5f, 1.5f, 2.5f,</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        3.5f, 4.5f, 5.5f,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    },</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    qScale, qOffset));</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T,4&gt;</a> ret(outputTensorInfo);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    ret.outputExpected = MakeTensor&lt;T, 4&gt;(outputTensorInfo, armnnUtils::QuantizedVector&lt;T&gt;(</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        0.5f, 1.5f, 2.5f,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        4.5f, 5.5f, 6.5f,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        2.5f, 3.5f, 4.5f,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        6.5f, 7.5f, 8.5f,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        4.5f, 5.5f, 6.5f,</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        8.5f, 9.5f, 10.5f,</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    },</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    qScale, qOffset));</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle1 = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo1);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle2 = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo2);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <a class="code" href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a> data;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo1, inputHandle1.get());</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo2, inputHandle2.get());</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">CreateAddition</a>(data, info);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    inputHandle1-&gt;Allocate();</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    inputHandle2-&gt;Allocate();</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle1.get(), &amp;input1[0][0][0][0]);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle2.get(), &amp;input2[0][0][0][0]);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    workload-&gt;PostAllocationConfigure();</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;ret.output[0][0][0][0], outputHandle.get());</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;}</div><div class="ttc" id="_deprecated_8hpp_xhtml_ab66a241a0ed3ee89c866e777b035d0ed"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_BEGIN</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00033">Deprecated.hpp:33</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="structarmnn_1_1_addition_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00222">WorkloadData.hpp:222</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_ad762b11b48e5c1d1c1743f529485728a"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_END</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00034">Deprecated.hpp:34</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00465">Tensor.cpp:465</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_a99b626c58a926dc7d6df78d22ec186c8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *memory, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15c140be4ddceffee16436f009d3ed94"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">armnn::IWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_acf187617ed4cdd6625b396d6b194923e"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">armnn::IWorkloadFactory::CreateAddition</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateAddition(const AdditionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01236">WorkloadFactory.cpp:1236</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00030">LayerTestResult.hpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00481">Tensor.cpp:481</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0946a9b1b8cf99591b03ea7f5f7e725f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0946a9b1b8cf99591b03ea7f5f7e725f">&#9670;&nbsp;</a></span>AdditionBroadcastUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; AdditionBroadcastUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00334">334</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;{</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keywordflow">return</span> AdditionBroadcastTestImpl&lt;armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        workloadFactory, memoryManager, 2.f, 0);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae087613cdb8319fbab07d44e6eaf217d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae087613cdb8319fbab07d44e6eaf217d">&#9670;&nbsp;</a></span>AdditionInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; AdditionInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00432">432</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;{</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    std::vector&lt;int16_t&gt; input0 =</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    {</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        63,  35,  77,  70,  56, 112, <span class="comment">//  441, 245,  539,  490,  392, 184</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        203,  28, 252, 168, 245,  91  <span class="comment">// 1421, 196, 1764, 1176, 1715, 637</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    };</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    std::vector&lt;int16_t&gt; input1 =</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    {</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        21,   7, 175, 231, 175, 210, <span class="comment">// 126,   28, 1204, 1596, 1204, 1449</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        126, 161,  63,  21, 105, 126  <span class="comment">// 861, 1106,  420,  126,  714,  861</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    };</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    std::vector&lt;int16_t&gt; output =</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    {</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        84,  42, 252, 301, 231, 322, <span class="comment">//  588,  294, 1764, 2107(clamped), 1617, 2254(clamped)</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        329, 189, 315, 189, 350, 217, <span class="comment">// 2303(clamped), 1323, 2205(clamped), 1323, 2450(clamped), 1519</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    };</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::AdditionQueueDescriptor, armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        workloadFactory,</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        memoryManager,</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        shape0,</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        input0,</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        7.0f,</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        0,</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        shape1,</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        input1,</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        7.0f,</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        0,</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        shape0,</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        output,</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        7.0f,</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        0);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aebc3be70ed70b822de9dfe9788e0d8ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebc3be70ed70b822de9dfe9788e0d8ce">&#9670;&nbsp;</a></span>AdditionInt32Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int32_t, 4&gt; AdditionInt32Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00474">474</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;{</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    std::vector&lt;int32_t&gt; input0 =</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    {</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        63,  35,  77,  70,  56, 112, <span class="comment">//  441, 245,  539,  490,  392, 184</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        203,  28, 252, 168, 245,  91  <span class="comment">// 1421, 196, 1764, 1176, 1715, 637</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    };</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    std::vector&lt;int32_t&gt; input1 =</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    {</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        21,   7, 175, 231, 175, 210, <span class="comment">// 126,   28, 1204, 1596, 1204, 1449</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        126, 161,  63,  21, 105, 126  <span class="comment">// 861, 1106,  420,  126,  714,  861</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    };</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    std::vector&lt;int32_t&gt; output =</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    {</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        84,  42, 252, 301, 231, 322, <span class="comment">//  588,  294, 1764, 2107(clamped), 1617, 2254(clamped)</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        329, 189, 315, 189, 350, 217, <span class="comment">// 2303(clamped), 1323, 2205(clamped), 1323, 2450(clamped), 1519</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    };</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::AdditionQueueDescriptor, armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        workloadFactory,</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        memoryManager,</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        shape0,</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        input0,</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        1.0f,</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        0,</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        shape1,</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        input1,</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        1.0f,</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        0,</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        shape0,</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        output,</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        1.0f,</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        0);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a108165b4957f3790332ae0afedf37ccd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a108165b4957f3790332ae0afedf37ccd">&#9670;&nbsp;</a></span>AdditionTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float,4&gt; AdditionTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00021">21</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 2u;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channels  = 2u;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height    = 2u;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width     = 3u;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[] = { batchSize, channels, height, width };</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    std::vector&lt;float&gt; input1 =</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        0.0f, 2.0f, 1.0f,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        0.2f, 1.0f, 2.0f,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        1.0f, 2.0f, 1.0f,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        0.2f, 1.0f, 2.0f,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        0.0f, 2.0f, 1.0f,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        4.2f, 1.0f, 2.0f,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        0.0f, 0.0f, 1.0f,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        0.2f, 1.0f, 2.0f,</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    };</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    std::vector&lt;float&gt; input2 =</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        1.0f, 2.0f,  1.0f,</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        0.0f, 1.0f,  2.0f,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        1.0f, 2.0f, -2.0f,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        0.2f, 1.0f,  2.0f,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        0.0f, 2.0f,  1.0f,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        4.2f, 0.0f, -3.0f,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        0.0f, 0.0f,  1.0f,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        0.7f, 1.0f,  5.0f,</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    };</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    std::vector&lt;float&gt; output</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        1.0f, 4.0f,  2.0f,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        0.2f, 2.0f,  4.0f,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        2.0f, 4.0f, -1.0f,</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        0.4f, 2.0f,  4.0f,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        0.0f, 4.0f,  2.0f,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        8.4f, 1.0f, -1.0f,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        0.0f, 0.0f,  2.0f,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        0.9f, 2.0f,  7.0f,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    };</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::AdditionQueueDescriptor, armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        workloadFactory,</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        memoryManager,</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        shape,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        input1,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        shape,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        input2,</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        shape,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        output);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4b5e20456506426ba2e4ea9616df978f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b5e20456506426ba2e4ea9616df978f">&#9670;&nbsp;</a></span>AdditionUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; AdditionUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00390">390</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;{</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    std::vector&lt;uint8_t&gt; input0(</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    {</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        63,  35,  77,  70,  56, 112, <span class="comment">//  420, 224,  518,  469,  371, 763</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        203,  28, 252, 168, 245,  91  <span class="comment">// 1400, 175, 1743, 1155, 1694, 616</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    });</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    std::vector&lt;uint8_t&gt; input1(</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    {</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        21,   7, 175, 231, 175, 210, <span class="comment">// 126,   28, 1204, 1596, 1204, 1449</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        126, 161,  63,  21, 105, 126  <span class="comment">// 861, 1106,  420,  126,  714,  861</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    });</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    std::vector&lt;uint8_t&gt; output(</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    {</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        81,  39, 249, 255, 228, 255, <span class="comment">//  546,  252, 1722, 2065(clamped), 1575, 2212(clamped)</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        255, 186, 255, 186, 255, 214, <span class="comment">// 2261(clamped), 1281, 2163(clamped), 1281, 2408(clamped), 1477</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    });</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::AdditionQueueDescriptor, armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        workloadFactory,</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        memoryManager,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        shape0,</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        input0,</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        7.0f,</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        3,</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        shape1,</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        input1,</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        7.0f,</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        3,</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        shape0,</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        output,</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        7.0f,</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        3);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a557c464592942eb098f63aa0f91e4d24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a557c464592942eb098f63aa0f91e4d24">&#9670;&nbsp;</a></span>CompareAdditionTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float,4&gt; CompareAdditionTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>refWorkloadFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00626">626</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00014">CopyDataFromITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00009">CopyDataToITensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01236">IWorkloadFactory::CreateAddition()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, and <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>
<div class="fragment"><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;{</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 4;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channels  = 1;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height    = 2;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width     = 3;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo1, inputTensorInfo2;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[] = {batchSize, channels, height, width};</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    inputTensorInfo1 = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, shape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    inputTensorInfo2 = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, shape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, shape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keyword">auto</span> input1 = MakeRandomTensor&lt;float, 4&gt;(inputTensorInfo1, 1232);</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keyword">auto</span> input2 = MakeRandomTensor&lt;float, 4&gt;(inputTensorInfo2, 456);</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float,4&gt;</a> ret(outputTensorInfo);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle1 = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo1);</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle2 = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo2);</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle1Ref = refWorkloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo1);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle2Ref = refWorkloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo2);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandleRef = refWorkloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <a class="code" href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a> data;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo1, inputHandle1.get());</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo2, inputHandle2.get());</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <a class="code" href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a> refData = data;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> refInfo = info;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    SetWorkloadInput(refData, refInfo, 0, inputTensorInfo1, inputHandle1Ref.get());</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    SetWorkloadInput(refData, refInfo, 1, inputTensorInfo2, inputHandle2Ref.get());</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    SetWorkloadOutput(refData, refInfo, 0, outputTensorInfo, outputHandleRef.get());</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">CreateAddition</a>(data, info);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workloadRef = refWorkloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">CreateAddition</a>(refData, refInfo);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    inputHandle1-&gt;Allocate();</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    inputHandle2-&gt;Allocate();</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    inputHandle1Ref-&gt;Allocate();</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    inputHandle2Ref-&gt;Allocate();</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    outputHandleRef-&gt;Allocate();</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle1.get(), &amp;input1[0][0][0][0]);</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle2.get(), &amp;input2[0][0][0][0]);</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle1Ref.get(), &amp;input1[0][0][0][0]);</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle2Ref.get(), &amp;input2[0][0][0][0]);</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    workload-&gt;PostAllocationConfigure();</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    workloadRef-&gt;PostAllocationConfigure();</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    workloadRef-&gt;Execute();</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;ret.output[0][0][0][0], outputHandle.get());</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;ret.outputExpected[0][0][0][0], outputHandleRef.get());</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;}</div><div class="ttc" id="_deprecated_8hpp_xhtml_ab66a241a0ed3ee89c866e777b035d0ed"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_BEGIN</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00033">Deprecated.hpp:33</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="structarmnn_1_1_addition_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00222">WorkloadData.hpp:222</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_ad762b11b48e5c1d1c1743f529485728a"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_END</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00034">Deprecated.hpp:34</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_a99b626c58a926dc7d6df78d22ec186c8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *memory, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15c140be4ddceffee16436f009d3ed94"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">armnn::IWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_acf187617ed4cdd6625b396d6b194923e"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">armnn::IWorkloadFactory::CreateAddition</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateAddition(const AdditionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01236">WorkloadFactory.cpp:1236</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00030">LayerTestResult.hpp:30</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5f3caae0b1541a904067544dd37655f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f3caae0b1541a904067544dd37655f0">&#9670;&nbsp;</a></span>CreateWorkload< armnn::AdditionQueueDescriptor >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_workload.xhtml">armnn::IWorkload</a>&gt; <a class="el" href="_elementwise_unary_test_impl_8hpp.xhtml#aa50938ed8f91e09acd4af904dcf5543a">CreateWorkload</a>&lt; <a class="el" href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00013">13</a> of file <a class="el" href="_addition_test_impl_8cpp_source.xhtml">AdditionTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <span class="keywordflow">return</span> workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">CreateAddition</a>(descriptor, info);</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_acf187617ed4cdd6625b396d6b194923e"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">armnn::IWorkloadFactory::CreateAddition</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateAddition(const AdditionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01236">WorkloadFactory.cpp:1236</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_99a30439342d160875b21dac3498ad7f.xhtml">layerTests</a></li><li class="navelem"><a class="el" href="_addition_test_impl_8cpp.xhtml">AdditionTestImpl.cpp</a></li>
    <li class="footer">Generated on Tue Aug 25 2020 12:29:45 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
