<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/neon/test/NeonFallbackTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_neon_fallback_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">NeonFallbackTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="_common_test_utils_8hpp_source.xhtml">backendsCommon/test/CommonTestUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_mock_import_backend_8hpp_source.xhtml">backendsCommon/test/mockBackend/MockImportBackend.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_graph_utils_8hpp_source.xhtml">test/GraphUtils.hpp</a>&gt;</code><br />
<code>#include &lt;boost/test/unit_test.hpp&gt;</code><br />
</div>
<p><a href="_neon_fallback_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aa58a47ff11eeb9ea65568f1197fb83d4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_fallback_tests_8cpp.xhtml#aa58a47ff11eeb9ea65568f1197fb83d4">BOOST_AUTO_TEST_CASE</a> (FallbackImportToCpuAcc)</td></tr>
<tr class="separator:aa58a47ff11eeb9ea65568f1197fb83d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c907180763a8801535ef690a3931ecd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_fallback_tests_8cpp.xhtml#a7c907180763a8801535ef690a3931ecd">BOOST_AUTO_TEST_CASE</a> (FallbackPaddingCopyToCpuAcc)</td></tr>
<tr class="separator:a7c907180763a8801535ef690a3931ecd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3df6190d73ec3575e8274994e65f058"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_fallback_tests_8cpp.xhtml#ad3df6190d73ec3575e8274994e65f058">BOOST_AUTO_TEST_CASE</a> (FallbackImportFromCpuAcc)</td></tr>
<tr class="separator:ad3df6190d73ec3575e8274994e65f058"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11077d8b798e0d6e0bb552e1bde0e62a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_fallback_tests_8cpp.xhtml#a11077d8b798e0d6e0bb552e1bde0e62a">BOOST_AUTO_TEST_CASE</a> (FallbackPaddingCopyFromCpuAcc)</td></tr>
<tr class="separator:a11077d8b798e0d6e0bb552e1bde0e62a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1c239387f7cbdbfd173126ab8b5b24f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_fallback_tests_8cpp.xhtml#af1c239387f7cbdbfd173126ab8b5b24f">BOOST_AUTO_TEST_CASE</a> (FallbackDisableImportFromCpuAcc)</td></tr>
<tr class="separator:af1c239387f7cbdbfd173126ab8b5b24f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:ab59caffe2ee6be46c08766c055420f17"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_fallback_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a> = { <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a> }</td></tr>
<tr class="separator:ab59caffe2ee6be46c08766c055420f17"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="aa58a47ff11eeb9ea65568f1197fb83d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa58a47ff11eeb9ea65568f1197fb83d4">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">FallbackImportToCpuAcc&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_fallback_tests_8cpp_source.xhtml#l00017">17</a> of file <a class="el" href="_neon_fallback_tests_8cpp_source.xhtml">NeonFallbackTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00068">CheckOrder()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::CpuAcc</a>, <a class="el" href="_network_8cpp_source.xhtml#l00050">INetwork::Create()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00032">IRuntime::Create()</a>, <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00045">CreateBackendObject()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00072">BackendRegistry::GetBackendIds()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00022">GetFirstLayerWithName()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00486">ProfilerManager::GetInstance()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00498">ProfilerManager::GetProfiler()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00261">Layer::GetType()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00660">OptimizerOptions::m_ImportEnabled</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::MemImport</a>, <a class="el" href="_mock_import_backend_8hpp_source.xhtml#l00012">armnn::MockImportBackendId()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01014">armnn::Optimize()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00330">Profiler::Print()</a>, and <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="comment">// Create a mock backend object</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <a class="code" href="classarmnn_1_1_mock_import_backend_initialiser.xhtml">MockImportBackendInitialiser</a> initialiser; <span class="comment">// Register the Mock Backend</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keyword">auto</span> backendObjPtr = <a class="code" href="_common_test_utils_8cpp.xhtml#a7a4090354279f08b1e27244bab25aa86">CreateBackendObject</a>(<a class="code" href="namespacearmnn.xhtml#ac38529227e1adeef300d31625826382b">MockImportBackendId</a>());</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    BOOST_TEST((backendObjPtr != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> backendIds = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">GetBackendIds</a>();</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">if</span> (backendIds.find(<span class="stringliteral">&quot;MockRef&quot;</span>) == backendIds.end())</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        std::string message = <span class="stringliteral">&quot;Cannot load MockRef&quot;</span>;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        BOOST_FAIL(message);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    }</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="comment">// Create runtime in which test will run and allow fallback to CpuRef.</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(options));</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">// Builds up the structure of the network.</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net(<a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>());</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input0 = net-&gt;AddInputLayer(0, <span class="stringliteral">&quot;input0&quot;</span>);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input1 = net-&gt;AddInputLayer(1, <span class="stringliteral">&quot;input1&quot;</span>);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input2 = net-&gt;AddInputLayer(2, <span class="stringliteral">&quot;input2&quot;</span>);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* add = net-&gt;AddAdditionLayer(<span class="stringliteral">&quot;add&quot;</span>);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* sub = net-&gt;AddSubtractionLayer(<span class="stringliteral">&quot;sub&quot;</span>);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output = net-&gt;AddOutputLayer(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    input2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(sub-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(sub-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    sub-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a> = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 2, 3, 2 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    input2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    sub-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// optimize the network</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    std::vector&lt;BackendId&gt; backends = { <span class="stringliteral">&quot;MockRef&quot;</span>, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">Compute::CpuAcc</a> };</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="structarmnn_1_1_optimizer_options.xhtml">OptimizerOptions</a> optOptions;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    optOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a05c1bba6ba3ecc1339d4c4c10c0d8890">m_ImportEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*net, backends, runtime-&gt;GetDeviceSpec(), optOptions);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="classarmnn_1_1_optimized_network.xhtml">OptimizedNetwork</a>* optNetObjPtr = PolymorphicDowncast&lt;OptimizedNetwork*&gt;(optNet.get());</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph = optNetObjPtr-&gt;GetGraph();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer0 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;input0&quot;</span>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer1 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;input1&quot;</span>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer2 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;input2&quot;</span>);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer3 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;add&quot;</span>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer4 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;[ add (0) -&gt; sub (1) ]&quot;</span>);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer5 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;sub&quot;</span>);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer6 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">// Checks order is valid.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer0, layer1));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer1, layer2));</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer2, layer3));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer3, layer4));</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer4, layer5));</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer5, layer6));</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">// Load it into the runtime. It should pass.</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> netId;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    std::string ignoredErrorMessage;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> networkProperties(<span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    runtime-&gt;LoadNetwork(netId, std::move(optNet), ignoredErrorMessage, networkProperties);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// Creates structures for input &amp; output</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    std::vector&lt;float&gt; inputData0</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        1.0f, 1.0f, 2.0f, 2.0f, 2.0f, 3.0f, 4.0f, 4.0f, 5.0f, 5.0f, 6.0f, 6.0f</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    };</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    std::vector&lt;float&gt; inputData1</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        0.0f, 1.0f, 1.0f, 2.0f, 3.0f, 3.0f, 3.0f, 4.0f, 4.0f, 5.0f, 5.0f, 6.0f</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    };</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    std::vector&lt;float&gt; inputData2</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        12.0f, 11.0f, 10.0f, 9.0f, 8.0f, 7.0f, 6.0f, 5.0f, 4.0f, 3.0f, 2.0f, 1.0f</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    };</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    std::vector&lt;float&gt; outputData(12);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::vector&lt;float&gt; expectedOutput</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        11.0f, 9.0f, 7.0f, 5.0f, 3.0f, 1.0f, -1.0f, -3.0f, -5.0f, -7.0f, -9.0f, -11.0f</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    };</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensors</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        { 0, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 0), inputData0.data()) },</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        { 1, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 1), inputData1.data()) },</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        { 2, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 2), inputData2.data()) }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    };</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        { 0,<a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(runtime-&gt;GetOutputTensorInfo(netId, 0), outputData.data()) }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    };</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    runtime-&gt;GetProfiler(netId)-&gt;EnableProfiling(<span class="keyword">true</span>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// Do the inference</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">// Retrieve the Profiler.Print() output to get the workload execution</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a>&amp; profilerManager = <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a>();</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    profilerManager.<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a18fdcafb1d421ba99c48205d93115936">GetProfiler</a>()-&gt;<a class="code" href="classarmnn_1_1_profiler.xhtml#a352a82f3a338acf06a20d290f605c489">Print</a>(ss);;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    std::string dump = ss.str();</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">// Contains ImportMemGeneric</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    std::size_t found = dump.find(<span class="stringliteral">&quot;ImportMemGeneric&quot;</span>);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    BOOST_TEST(found != std::string::npos);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// Contains SyncMemGeneric</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    found = dump.find(<span class="stringliteral">&quot;SyncMemGeneric&quot;</span>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    BOOST_TEST(found != std::string::npos);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Does not contain CopyMemGeneric</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    found = dump.find(<span class="stringliteral">&quot;CopyMemGeneric&quot;</span>);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    BOOST_TEST(found == std::string::npos);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// Use memory import between backends</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    BOOST_TEST((layer4-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">LayerType::MemImport</a>));</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="comment">// Check output is as expected</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    BOOST_TEST(outputData == expectedOutput);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00032">Runtime.cpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a570cb1835ec73000a7954ba75257904f"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">armnn::BackendRegistry::GetBackendIds</a></div><div class="ttdeci">BackendIdSet GetBackendIds() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00072">BackendRegistry.cpp:72</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_import_backend_initialiser_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_import_backend_initialiser.xhtml">armnn::MockImportBackendInitialiser</a></div><div class="ttdef"><b>Definition:</b> <a href="_mock_import_backend_8hpp_source.xhtml#l00014">MockImportBackend.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00191">BackendId.hpp:191</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a5f17e02e0054dac0a691685a0464ed36"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a></div><div class="ttdeci">armnn::Layer * GetFirstLayerWithName(armnn::Graph &amp;graph, const std::string &amp;name)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00022">GraphUtils.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a93857080c2523bf3395e7aa7e6024d5c"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a></div><div class="ttdeci">static ProfilerManager &amp; GetInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00486">Profiling.cpp:486</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a21d963c71be62057ed99b5007e7bbbfd"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a></div><div class="ttdeci">bool CheckOrder(const armnn::Graph &amp;graph, const armnn::Layer *first, const armnn::Layer *second)</div><div class="ttdoc">Checks that first comes before second in the order. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00068">GraphUtils.cpp:68</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00025">IRuntime.hpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00324">Tensor.hpp:324</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac38529227e1adeef300d31625826382b"><div class="ttname"><a href="namespacearmnn.xhtml#ac38529227e1adeef300d31625826382b">armnn::MockImportBackendId</a></div><div class="ttdeci">constexpr const char * MockImportBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_mock_import_backend_8hpp_source.xhtml#l00012">MockImportBackend.hpp:12</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a18fdcafb1d421ba99c48205d93115936"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a18fdcafb1d421ba99c48205d93115936">armnn::ProfilerManager::GetProfiler</a></div><div class="ttdeci">Profiler * GetProfiler()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00498">Profiling.cpp:498</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00027">IRuntime.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00290">Tensor.hpp:290</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01014">Network.cpp:1014</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00298">Tensor.hpp:298</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00325">Tensor.hpp:325</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00593">INetwork.hpp:593</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml">armnn::ProfilerManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00093">Profiling.hpp:93</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00609">INetwork.hpp:609</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a05c1bba6ba3ecc1339d4c4c10c0d8890"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a05c1bba6ba3ecc1339d4c4c10c0d8890">armnn::OptimizerOptions::m_ImportEnabled</a></div><div class="ttdeci">bool m_ImportEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00660">INetwork.hpp:660</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00042">IRuntime.hpp:42</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::LayerType::MemImport</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a></div><div class="ttdoc">CPU Execution: NEON: ArmCompute. </div></div>
<div class="ttc" id="_common_test_utils_8cpp_xhtml_a7a4090354279f08b1e27244bab25aa86"><div class="ttname"><a href="_common_test_utils_8cpp.xhtml#a7a4090354279f08b1e27244bab25aa86">CreateBackendObject</a></div><div class="ttdeci">armnn::IBackendInternalUniquePtr CreateBackendObject(const armnn::BackendId &amp;backendId)</div><div class="ttdef"><b>Definition:</b> <a href="_common_test_utils_8cpp_source.xhtml#l00045">CommonTestUtils.cpp:45</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_aaef29472862381822654ab6cbf7cba2a"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">armnn::Layer::GetType</a></div><div class="ttdeci">LayerType GetType() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00261">Layer.hpp:261</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00101">INetwork.hpp:101</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_a352a82f3a338acf06a20d290f605c489"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#a352a82f3a338acf06a20d290f605c489">armnn::Profiler::Print</a></div><div class="ttdeci">void Print(std::ostream &amp;outStream) const override</div><div class="ttdoc">Print stats for events in JSON Format to the given output stream. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00330">Profiling.cpp:330</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00050">Network.cpp:50</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00209">Layer.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimized_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_optimized_network.xhtml">armnn::OptimizedNetwork</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_8hpp_source.xhtml#l00278">Network.hpp:278</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7c907180763a8801535ef690a3931ecd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c907180763a8801535ef690a3931ecd">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">FallbackPaddingCopyToCpuAcc&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_fallback_tests_8cpp_source.xhtml#l00155">155</a> of file <a class="el" href="_neon_fallback_tests_8cpp_source.xhtml">NeonFallbackTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00068">CheckOrder()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::CpuAcc</a>, <a class="el" href="_network_8cpp_source.xhtml#l00050">INetwork::Create()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00032">IRuntime::Create()</a>, <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00045">CreateBackendObject()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00072">BackendRegistry::GetBackendIds()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00022">GetFirstLayerWithName()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00486">ProfilerManager::GetInstance()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00498">ProfilerManager::GetProfiler()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00261">Layer::GetType()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00660">OptimizerOptions::m_ImportEnabled</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::MemCopy</a>, <a class="el" href="_mock_import_backend_8hpp_source.xhtml#l00012">armnn::MockImportBackendId()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01014">armnn::Optimize()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00330">Profiler::Print()</a>, and <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// Create a mock backend object</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="classarmnn_1_1_mock_import_backend_initialiser.xhtml">MockImportBackendInitialiser</a> initialiser; <span class="comment">// Register the Mock Backend</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">auto</span> backendObjPtr = <a class="code" href="_common_test_utils_8cpp.xhtml#a7a4090354279f08b1e27244bab25aa86">CreateBackendObject</a>(<a class="code" href="namespacearmnn.xhtml#ac38529227e1adeef300d31625826382b">MockImportBackendId</a>());</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    BOOST_TEST((backendObjPtr != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> backendIds = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">GetBackendIds</a>();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">if</span> (backendIds.find(<span class="stringliteral">&quot;MockRef&quot;</span>) == backendIds.end())</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        std::string message = <span class="stringliteral">&quot;Cannot load MockRef&quot;</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        BOOST_FAIL(message);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// Create runtime in which test will run and allow fallback to CpuRef.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(options));</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="comment">// Builds up the structure of the network.</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net(<a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>());</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> desc;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input0 = net-&gt;AddInputLayer(0, <span class="stringliteral">&quot;input0&quot;</span>);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input1 = net-&gt;AddInputLayer(1, <span class="stringliteral">&quot;input1&quot;</span>);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* add = net-&gt;AddAdditionLayer(<span class="stringliteral">&quot;add&quot;</span>);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* pooling = net-&gt;AddPooling2dLayer(desc, <span class="stringliteral">&quot;pooling&quot;</span>);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output = net-&gt;AddOutputLayer(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(pooling-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    pooling-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a> = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 2, 3, 2 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> poolingInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 2, 1, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    pooling-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(poolingInfo);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// optimize the network</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    std::vector&lt;BackendId&gt; backends = { <span class="stringliteral">&quot;MockRef&quot;</span>, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">Compute::CpuAcc</a> };</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="structarmnn_1_1_optimizer_options.xhtml">OptimizerOptions</a> optOptions;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    optOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a05c1bba6ba3ecc1339d4c4c10c0d8890">m_ImportEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*net, backends, runtime-&gt;GetDeviceSpec(), optOptions);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="classarmnn_1_1_optimized_network.xhtml">OptimizedNetwork</a>* optNetObjPtr = PolymorphicDowncast&lt;OptimizedNetwork*&gt;(optNet.get());</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph = optNetObjPtr-&gt;GetGraph();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer0 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;input0&quot;</span>);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer1 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;input1&quot;</span>);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer2 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;add&quot;</span>);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer3 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;[ add (0) -&gt; pooling (0) ]&quot;</span>);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer4 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;pooling&quot;</span>);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer5 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="comment">// Checks order is valid.</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer0, layer1));</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer1, layer2));</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer2, layer3));</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer3, layer4));</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer4, layer5));</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="comment">// Load it into the runtime. It should pass.</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> netId;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    std::string ignoredErrorMessage;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> networkProperties(<span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    runtime-&gt;LoadNetwork(netId, std::move(optNet), ignoredErrorMessage, networkProperties);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="comment">// Creates structures for input &amp; output</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    std::vector&lt;float&gt; inputData0</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        1.0f, 1.0f, 2.0f, 2.0f, 2.0f, 3.0f, 4.0f, 4.0f, 5.0f, 5.0f, 6.0f, 6.0f</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    };</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    std::vector&lt;float&gt; inputData1</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        0.0f, 1.0f, 1.0f, 2.0f, 3.0f, 3.0f, 3.0f, 4.0f, 4.0f, 5.0f, 5.0f, 6.0f</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    };</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    std::vector&lt;float&gt; outputData(2);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    std::vector&lt;float&gt; expectedOutput</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        6.0f, 12.0f</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    };</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensors</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        { 0, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 0), inputData0.data()) },</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        { 1, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 1), inputData1.data()) }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    };</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        { 0, <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(runtime-&gt;GetOutputTensorInfo(netId, 0), outputData.data()) }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    };</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    runtime-&gt;GetProfiler(netId)-&gt;EnableProfiling(<span class="keyword">true</span>);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// Do the inference</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="comment">// Retrieve the Profiler.Print() output to get the workload execution</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a>&amp; profilerManager = <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a>();</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    profilerManager.<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a18fdcafb1d421ba99c48205d93115936">GetProfiler</a>()-&gt;<a class="code" href="classarmnn_1_1_profiler.xhtml#a352a82f3a338acf06a20d290f605c489">Print</a>(ss);;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    std::string dump = ss.str();</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="comment">// Contains CopyMemGeneric between the backends</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    std::size_t found = dump.find(<span class="stringliteral">&quot;CopyMemGeneric&quot;</span>);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    BOOST_TEST(found != std::string::npos);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="comment">// Contains SyncMemGeneric for the output</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    found = dump.find(<span class="stringliteral">&quot;SyncMemGeneric&quot;</span>);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    BOOST_TEST(found != std::string::npos);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="comment">// Does not contain ImportMemGeneric</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    found = dump.find(<span class="stringliteral">&quot;ImportMemGeneric&quot;</span>);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    BOOST_TEST(found == std::string::npos);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="comment">// Use memory import between backends</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    BOOST_TEST((layer3-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">LayerType::MemCopy</a>));</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="comment">// Check output is as expected</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    BOOST_TEST(outputData == expectedOutput);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00032">Runtime.cpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a570cb1835ec73000a7954ba75257904f"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">armnn::BackendRegistry::GetBackendIds</a></div><div class="ttdeci">BackendIdSet GetBackendIds() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00072">BackendRegistry.cpp:72</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_import_backend_initialiser_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_import_backend_initialiser.xhtml">armnn::MockImportBackendInitialiser</a></div><div class="ttdef"><b>Definition:</b> <a href="_mock_import_backend_8hpp_source.xhtml#l00014">MockImportBackend.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00191">BackendId.hpp:191</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a5f17e02e0054dac0a691685a0464ed36"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a></div><div class="ttdeci">armnn::Layer * GetFirstLayerWithName(armnn::Graph &amp;graph, const std::string &amp;name)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00022">GraphUtils.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a93857080c2523bf3395e7aa7e6024d5c"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a></div><div class="ttdeci">static ProfilerManager &amp; GetInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00486">Profiling.cpp:486</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a21d963c71be62057ed99b5007e7bbbfd"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a></div><div class="ttdeci">bool CheckOrder(const armnn::Graph &amp;graph, const armnn::Layer *first, const armnn::Layer *second)</div><div class="ttdoc">Checks that first comes before second in the order. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00068">GraphUtils.cpp:68</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00025">IRuntime.hpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00324">Tensor.hpp:324</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac38529227e1adeef300d31625826382b"><div class="ttname"><a href="namespacearmnn.xhtml#ac38529227e1adeef300d31625826382b">armnn::MockImportBackendId</a></div><div class="ttdeci">constexpr const char * MockImportBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_mock_import_backend_8hpp_source.xhtml#l00012">MockImportBackend.hpp:12</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a18fdcafb1d421ba99c48205d93115936"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a18fdcafb1d421ba99c48205d93115936">armnn::ProfilerManager::GetProfiler</a></div><div class="ttdeci">Profiler * GetProfiler()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00498">Profiling.cpp:498</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00027">IRuntime.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00290">Tensor.hpp:290</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01014">Network.cpp:1014</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00298">Tensor.hpp:298</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00325">Tensor.hpp:325</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::LayerType::MemCopy</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00593">INetwork.hpp:593</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml">armnn::ProfilerManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00093">Profiling.hpp:93</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00609">INetwork.hpp:609</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a05c1bba6ba3ecc1339d4c4c10c0d8890"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a05c1bba6ba3ecc1339d4c4c10c0d8890">armnn::OptimizerOptions::m_ImportEnabled</a></div><div class="ttdeci">bool m_ImportEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00660">INetwork.hpp:660</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00042">IRuntime.hpp:42</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a></div><div class="ttdoc">CPU Execution: NEON: ArmCompute. </div></div>
<div class="ttc" id="_common_test_utils_8cpp_xhtml_a7a4090354279f08b1e27244bab25aa86"><div class="ttname"><a href="_common_test_utils_8cpp.xhtml#a7a4090354279f08b1e27244bab25aa86">CreateBackendObject</a></div><div class="ttdeci">armnn::IBackendInternalUniquePtr CreateBackendObject(const armnn::BackendId &amp;backendId)</div><div class="ttdef"><b>Definition:</b> <a href="_common_test_utils_8cpp_source.xhtml#l00045">CommonTestUtils.cpp:45</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_aaef29472862381822654ab6cbf7cba2a"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">armnn::Layer::GetType</a></div><div class="ttdeci">LayerType GetType() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00261">Layer.hpp:261</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00101">INetwork.hpp:101</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00321">Descriptors.hpp:321</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_a352a82f3a338acf06a20d290f605c489"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#a352a82f3a338acf06a20d290f605c489">armnn::Profiler::Print</a></div><div class="ttdeci">void Print(std::ostream &amp;outStream) const override</div><div class="ttdoc">Print stats for events in JSON Format to the given output stream. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00330">Profiling.cpp:330</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00050">Network.cpp:50</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00209">Layer.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimized_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_optimized_network.xhtml">armnn::OptimizedNetwork</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_8hpp_source.xhtml#l00278">Network.hpp:278</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad3df6190d73ec3575e8274994e65f058"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3df6190d73ec3575e8274994e65f058">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">FallbackImportFromCpuAcc&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_fallback_tests_8cpp_source.xhtml#l00286">286</a> of file <a class="el" href="_neon_fallback_tests_8cpp_source.xhtml">NeonFallbackTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00068">CheckOrder()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::CpuAcc</a>, <a class="el" href="_network_8cpp_source.xhtml#l00050">INetwork::Create()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00032">IRuntime::Create()</a>, <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00045">CreateBackendObject()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00072">BackendRegistry::GetBackendIds()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00022">GetFirstLayerWithName()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00486">ProfilerManager::GetInstance()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00498">ProfilerManager::GetProfiler()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00261">Layer::GetType()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00660">OptimizerOptions::m_ImportEnabled</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::MemImport</a>, <a class="el" href="_mock_import_backend_8hpp_source.xhtml#l00012">armnn::MockImportBackendId()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01014">armnn::Optimize()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00330">Profiler::Print()</a>, and <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;{</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="comment">// Create a mock backend object</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <a class="code" href="classarmnn_1_1_mock_import_backend_initialiser.xhtml">MockImportBackendInitialiser</a> initialiser; <span class="comment">// Register the Mock Backend</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">auto</span> backendObjPtr = <a class="code" href="_common_test_utils_8cpp.xhtml#a7a4090354279f08b1e27244bab25aa86">CreateBackendObject</a>(<a class="code" href="namespacearmnn.xhtml#ac38529227e1adeef300d31625826382b">MockImportBackendId</a>());</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    BOOST_TEST((backendObjPtr != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> backendIds = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">GetBackendIds</a>();</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">if</span> (backendIds.find(<span class="stringliteral">&quot;MockRef&quot;</span>) == backendIds.end())</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        std::string message = <span class="stringliteral">&quot;Cannot load MockRef&quot;</span>;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        BOOST_FAIL(message);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="comment">// Create runtime in which test will run and allow fallback to CpuRef.</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(options));</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">// Builds up the structure of the network.</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net(<a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>());</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input0 = net-&gt;AddInputLayer(0, <span class="stringliteral">&quot;input0&quot;</span>);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input1 = net-&gt;AddInputLayer(1, <span class="stringliteral">&quot;input1&quot;</span>);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input2 = net-&gt;AddInputLayer(2, <span class="stringliteral">&quot;input2&quot;</span>);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* sub = net-&gt;AddSubtractionLayer(<span class="stringliteral">&quot;sub&quot;</span>);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* add = net-&gt;AddAdditionLayer(<span class="stringliteral">&quot;add&quot;</span>);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output = net-&gt;AddOutputLayer(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(sub-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(sub-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    input2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    sub-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a> = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 2, 3, 2 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    input2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    sub-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="comment">// optimize the network</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    std::vector&lt;BackendId&gt; backends = { <span class="stringliteral">&quot;MockRef&quot;</span>, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">Compute::CpuAcc</a> };</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <a class="code" href="structarmnn_1_1_optimizer_options.xhtml">OptimizerOptions</a> optOptions;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    optOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a05c1bba6ba3ecc1339d4c4c10c0d8890">m_ImportEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*net, backends, runtime-&gt;GetDeviceSpec(), optOptions);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <a class="code" href="classarmnn_1_1_optimized_network.xhtml">OptimizedNetwork</a>* optNetObjPtr = PolymorphicDowncast&lt;OptimizedNetwork*&gt;(optNet.get());</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph = optNetObjPtr-&gt;GetGraph();</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer0 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;input0&quot;</span>);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer1 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;input1&quot;</span>);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer2 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;input2&quot;</span>);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer3 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;sub&quot;</span>);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer4 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;[ sub (0) -&gt; add (1) ]&quot;</span>);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer5 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;add&quot;</span>);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer6 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="comment">// Checks order is valid.</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer0, layer1));</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer1, layer2));</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer2, layer3));</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer3, layer4));</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer4, layer5));</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer5, layer6));</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="comment">// Load it into the runtime. It should pass.</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> netId;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    std::string ignoredErrorMessage;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> networkProperties(<span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    runtime-&gt;LoadNetwork(netId, std::move(optNet), ignoredErrorMessage, networkProperties);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="comment">// Creates structures for input &amp; output</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    std::vector&lt;float&gt; inputData0</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    {</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        1.0f, 1.0f, 2.0f, 2.0f, 2.0f, 3.0f, 4.0f, 4.0f, 5.0f, 5.0f, 6.0f, 0.0f</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    };</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    std::vector&lt;float&gt; inputData1</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        0.0f, 1.0f, 1.0f, 2.0f, 3.0f, 3.0f, 3.0f, 4.0f, 4.0f, 5.0f, 5.0f, 6.0f</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    };</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    std::vector&lt;float&gt; inputData2</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    {</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        12.0f, 11.0f, 10.0f, 9.0f, 8.0f, 7.0f, 6.0f, 5.0f, 4.0f, 3.0f, 2.0f, 1.0f</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    };</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    std::vector&lt;float&gt; outputData(12);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    std::vector&lt;float&gt; expectedOutput</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    {</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        13.0f, 11.0f, 11.0f, 9.0f, 7.0f, 7.0f, 7.0f, 5.0f, 5.0f, 3.0f, 3.0f, -5.0f</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    };</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensors</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    {</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        { 0, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 0), inputData0.data()) },</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        { 1, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 1), inputData1.data()) },</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        { 2, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 2), inputData2.data()) }</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    };</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    {</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        { 0,<a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(runtime-&gt;GetOutputTensorInfo(netId, 0), outputData.data()) }</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    };</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    runtime-&gt;GetProfiler(netId)-&gt;EnableProfiling(<span class="keyword">true</span>);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="comment">// Do the inference</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="comment">// Retrieve the Profiler.Print() output to get the workload execution</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a>&amp; profilerManager = <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a>();</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    profilerManager.<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a18fdcafb1d421ba99c48205d93115936">GetProfiler</a>()-&gt;<a class="code" href="classarmnn_1_1_profiler.xhtml#a352a82f3a338acf06a20d290f605c489">Print</a>(ss);;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    std::string dump = ss.str();</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="comment">// Contains ImportMemGeneric</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    std::size_t found = dump.find(<span class="stringliteral">&quot;ImportMemGeneric&quot;</span>);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    BOOST_TEST(found != std::string::npos);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="comment">// Contains SyncMemGeneric</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    found = dump.find(<span class="stringliteral">&quot;SyncMemGeneric&quot;</span>);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    BOOST_TEST(found != std::string::npos);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="comment">// Does not contain CopyMemGeneric</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    found = dump.find(<span class="stringliteral">&quot;CopyMemGeneric&quot;</span>);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    BOOST_TEST(found == std::string::npos);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="comment">// Use memory import between backends</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    BOOST_TEST((layer4-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">LayerType::MemImport</a>));</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="comment">// Check output is as expected</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    BOOST_TEST(outputData == expectedOutput);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00032">Runtime.cpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a570cb1835ec73000a7954ba75257904f"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">armnn::BackendRegistry::GetBackendIds</a></div><div class="ttdeci">BackendIdSet GetBackendIds() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00072">BackendRegistry.cpp:72</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_import_backend_initialiser_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_import_backend_initialiser.xhtml">armnn::MockImportBackendInitialiser</a></div><div class="ttdef"><b>Definition:</b> <a href="_mock_import_backend_8hpp_source.xhtml#l00014">MockImportBackend.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00191">BackendId.hpp:191</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a5f17e02e0054dac0a691685a0464ed36"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a></div><div class="ttdeci">armnn::Layer * GetFirstLayerWithName(armnn::Graph &amp;graph, const std::string &amp;name)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00022">GraphUtils.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a93857080c2523bf3395e7aa7e6024d5c"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a></div><div class="ttdeci">static ProfilerManager &amp; GetInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00486">Profiling.cpp:486</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a21d963c71be62057ed99b5007e7bbbfd"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a></div><div class="ttdeci">bool CheckOrder(const armnn::Graph &amp;graph, const armnn::Layer *first, const armnn::Layer *second)</div><div class="ttdoc">Checks that first comes before second in the order. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00068">GraphUtils.cpp:68</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00025">IRuntime.hpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00324">Tensor.hpp:324</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac38529227e1adeef300d31625826382b"><div class="ttname"><a href="namespacearmnn.xhtml#ac38529227e1adeef300d31625826382b">armnn::MockImportBackendId</a></div><div class="ttdeci">constexpr const char * MockImportBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_mock_import_backend_8hpp_source.xhtml#l00012">MockImportBackend.hpp:12</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a18fdcafb1d421ba99c48205d93115936"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a18fdcafb1d421ba99c48205d93115936">armnn::ProfilerManager::GetProfiler</a></div><div class="ttdeci">Profiler * GetProfiler()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00498">Profiling.cpp:498</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00027">IRuntime.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00290">Tensor.hpp:290</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01014">Network.cpp:1014</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00298">Tensor.hpp:298</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00325">Tensor.hpp:325</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00593">INetwork.hpp:593</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml">armnn::ProfilerManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00093">Profiling.hpp:93</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00609">INetwork.hpp:609</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a05c1bba6ba3ecc1339d4c4c10c0d8890"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a05c1bba6ba3ecc1339d4c4c10c0d8890">armnn::OptimizerOptions::m_ImportEnabled</a></div><div class="ttdeci">bool m_ImportEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00660">INetwork.hpp:660</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00042">IRuntime.hpp:42</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::LayerType::MemImport</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a></div><div class="ttdoc">CPU Execution: NEON: ArmCompute. </div></div>
<div class="ttc" id="_common_test_utils_8cpp_xhtml_a7a4090354279f08b1e27244bab25aa86"><div class="ttname"><a href="_common_test_utils_8cpp.xhtml#a7a4090354279f08b1e27244bab25aa86">CreateBackendObject</a></div><div class="ttdeci">armnn::IBackendInternalUniquePtr CreateBackendObject(const armnn::BackendId &amp;backendId)</div><div class="ttdef"><b>Definition:</b> <a href="_common_test_utils_8cpp_source.xhtml#l00045">CommonTestUtils.cpp:45</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_aaef29472862381822654ab6cbf7cba2a"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">armnn::Layer::GetType</a></div><div class="ttdeci">LayerType GetType() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00261">Layer.hpp:261</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00101">INetwork.hpp:101</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_a352a82f3a338acf06a20d290f605c489"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#a352a82f3a338acf06a20d290f605c489">armnn::Profiler::Print</a></div><div class="ttdeci">void Print(std::ostream &amp;outStream) const override</div><div class="ttdoc">Print stats for events in JSON Format to the given output stream. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00330">Profiling.cpp:330</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00050">Network.cpp:50</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00209">Layer.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimized_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_optimized_network.xhtml">armnn::OptimizedNetwork</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_8hpp_source.xhtml#l00278">Network.hpp:278</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a11077d8b798e0d6e0bb552e1bde0e62a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11077d8b798e0d6e0bb552e1bde0e62a">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">FallbackPaddingCopyFromCpuAcc&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_fallback_tests_8cpp_source.xhtml#l00424">424</a> of file <a class="el" href="_neon_fallback_tests_8cpp_source.xhtml">NeonFallbackTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00068">CheckOrder()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::CpuAcc</a>, <a class="el" href="_network_8cpp_source.xhtml#l00050">INetwork::Create()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00032">IRuntime::Create()</a>, <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00045">CreateBackendObject()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00072">BackendRegistry::GetBackendIds()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00022">GetFirstLayerWithName()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00486">ProfilerManager::GetInstance()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00498">ProfilerManager::GetProfiler()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00261">Layer::GetType()</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00660">OptimizerOptions::m_ImportEnabled</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::MemCopy</a>, <a class="el" href="_mock_import_backend_8hpp_source.xhtml#l00012">armnn::MockImportBackendId()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01014">armnn::Optimize()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00330">Profiler::Print()</a>, and <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;{</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="comment">// Create a mock backend object</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <a class="code" href="classarmnn_1_1_mock_import_backend_initialiser.xhtml">MockImportBackendInitialiser</a> initialiser; <span class="comment">// Register the Mock Backend</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keyword">auto</span> backendObjPtr = <a class="code" href="_common_test_utils_8cpp.xhtml#a7a4090354279f08b1e27244bab25aa86">CreateBackendObject</a>(<a class="code" href="namespacearmnn.xhtml#ac38529227e1adeef300d31625826382b">MockImportBackendId</a>());</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    BOOST_TEST((backendObjPtr != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> backendIds = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">GetBackendIds</a>();</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordflow">if</span> (backendIds.find(<span class="stringliteral">&quot;MockRef&quot;</span>) == backendIds.end())</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    {</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        std::string message = <span class="stringliteral">&quot;Cannot load MockRef&quot;</span>;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        BOOST_FAIL(message);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    }</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="comment">// Create runtime in which test will run and allow fallback to CpuRef.</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(options));</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="comment">// Builds up the structure of the network.</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net(<a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>());</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> desc;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input0 = net-&gt;AddInputLayer(0, <span class="stringliteral">&quot;input0&quot;</span>);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input1 = net-&gt;AddInputLayer(1, <span class="stringliteral">&quot;input1&quot;</span>);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* pooling = net-&gt;AddPooling2dLayer(desc, <span class="stringliteral">&quot;pooling&quot;</span>);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* add = net-&gt;AddAdditionLayer(<span class="stringliteral">&quot;add&quot;</span>);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output = net-&gt;AddOutputLayer(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(pooling-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    pooling-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 2, 3, 2 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> poolingInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 2, 1, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(inputInfo);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(poolingInfo);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    pooling-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(poolingInfo);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(poolingInfo);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="comment">// optimize the network</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    std::vector&lt;BackendId&gt; backends = { <span class="stringliteral">&quot;MockRef&quot;</span>, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">Compute::CpuAcc</a> };</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <a class="code" href="structarmnn_1_1_optimizer_options.xhtml">OptimizerOptions</a> optOptions;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    optOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a05c1bba6ba3ecc1339d4c4c10c0d8890">m_ImportEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*net, backends, runtime-&gt;GetDeviceSpec(), optOptions);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <a class="code" href="classarmnn_1_1_optimized_network.xhtml">OptimizedNetwork</a>* optNetObjPtr = PolymorphicDowncast&lt;OptimizedNetwork*&gt;(optNet.get());</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph = optNetObjPtr-&gt;GetGraph();</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer0 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;input0&quot;</span>);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer1 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;input1&quot;</span>);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer2 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;pooling&quot;</span>);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer3 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;[ pooling (0) -&gt; add (0) ]&quot;</span>);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer4 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;add&quot;</span>);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer5 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="comment">// Checks order is valid.</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer0, layer1));</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer1, layer2));</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer2, layer3));</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer3, layer4));</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer4, layer5));</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="comment">// Load it into the runtime. It should pass.</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> netId;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    std::string ignoredErrorMessage;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> networkProperties(<span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    runtime-&gt;LoadNetwork(netId, std::move(optNet), ignoredErrorMessage, networkProperties);</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="comment">// Creates structures for input &amp; output</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    std::vector&lt;float&gt; inputData0</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    {</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f, 11.0f, 12.0f</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    };</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    std::vector&lt;float&gt; inputData1</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    {</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        -1.0f, 3.0f</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    };</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    std::vector&lt;float&gt; outputData(2);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    std::vector&lt;float&gt; expectedOutput</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    {</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        5.0f, 15.0f</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    };</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensors</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    {</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        { 0, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 0), inputData0.data()) },</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        { 1, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 1), inputData1.data()) }</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    };</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    {</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        { 0, <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(runtime-&gt;GetOutputTensorInfo(netId, 0), outputData.data()) }</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    };</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    runtime-&gt;GetProfiler(netId)-&gt;EnableProfiling(<span class="keyword">true</span>);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="comment">// Do the inference</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="comment">// Retrieve the Profiler.Print() output to get the workload execution</span></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a>&amp; profilerManager = <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a>();</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    profilerManager.<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a18fdcafb1d421ba99c48205d93115936">GetProfiler</a>()-&gt;<a class="code" href="classarmnn_1_1_profiler.xhtml#a352a82f3a338acf06a20d290f605c489">Print</a>(ss);;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    std::string dump = ss.str();</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="comment">// Contains CopyMemGeneric between the backends</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    std::size_t found = dump.find(<span class="stringliteral">&quot;CopyMemGeneric&quot;</span>);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    BOOST_TEST(found != std::string::npos);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="comment">// Contains SyncMemGeneric for the output</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    found = dump.find(<span class="stringliteral">&quot;SyncMemGeneric&quot;</span>);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    BOOST_TEST(found != std::string::npos);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="comment">// Does not contain ImportMemGeneric</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    found = dump.find(<span class="stringliteral">&quot;ImportMemGeneric&quot;</span>);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    BOOST_TEST(found == std::string::npos);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <span class="comment">// Use memory import between backends</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    BOOST_TEST((layer3-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">LayerType::MemCopy</a>));</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="comment">// Check output is as expected</span></div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    BOOST_TEST(outputData == expectedOutput);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00032">Runtime.cpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a570cb1835ec73000a7954ba75257904f"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">armnn::BackendRegistry::GetBackendIds</a></div><div class="ttdeci">BackendIdSet GetBackendIds() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00072">BackendRegistry.cpp:72</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_import_backend_initialiser_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_import_backend_initialiser.xhtml">armnn::MockImportBackendInitialiser</a></div><div class="ttdef"><b>Definition:</b> <a href="_mock_import_backend_8hpp_source.xhtml#l00014">MockImportBackend.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00191">BackendId.hpp:191</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a5f17e02e0054dac0a691685a0464ed36"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a></div><div class="ttdeci">armnn::Layer * GetFirstLayerWithName(armnn::Graph &amp;graph, const std::string &amp;name)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00022">GraphUtils.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a93857080c2523bf3395e7aa7e6024d5c"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a></div><div class="ttdeci">static ProfilerManager &amp; GetInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00486">Profiling.cpp:486</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a21d963c71be62057ed99b5007e7bbbfd"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a></div><div class="ttdeci">bool CheckOrder(const armnn::Graph &amp;graph, const armnn::Layer *first, const armnn::Layer *second)</div><div class="ttdoc">Checks that first comes before second in the order. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00068">GraphUtils.cpp:68</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00025">IRuntime.hpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00324">Tensor.hpp:324</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac38529227e1adeef300d31625826382b"><div class="ttname"><a href="namespacearmnn.xhtml#ac38529227e1adeef300d31625826382b">armnn::MockImportBackendId</a></div><div class="ttdeci">constexpr const char * MockImportBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_mock_import_backend_8hpp_source.xhtml#l00012">MockImportBackend.hpp:12</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a18fdcafb1d421ba99c48205d93115936"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a18fdcafb1d421ba99c48205d93115936">armnn::ProfilerManager::GetProfiler</a></div><div class="ttdeci">Profiler * GetProfiler()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00498">Profiling.cpp:498</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00027">IRuntime.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00290">Tensor.hpp:290</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01014">Network.cpp:1014</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00298">Tensor.hpp:298</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00325">Tensor.hpp:325</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::LayerType::MemCopy</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00593">INetwork.hpp:593</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml">armnn::ProfilerManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00093">Profiling.hpp:93</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00609">INetwork.hpp:609</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a05c1bba6ba3ecc1339d4c4c10c0d8890"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a05c1bba6ba3ecc1339d4c4c10c0d8890">armnn::OptimizerOptions::m_ImportEnabled</a></div><div class="ttdeci">bool m_ImportEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00660">INetwork.hpp:660</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00042">IRuntime.hpp:42</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a></div><div class="ttdoc">CPU Execution: NEON: ArmCompute. </div></div>
<div class="ttc" id="_common_test_utils_8cpp_xhtml_a7a4090354279f08b1e27244bab25aa86"><div class="ttname"><a href="_common_test_utils_8cpp.xhtml#a7a4090354279f08b1e27244bab25aa86">CreateBackendObject</a></div><div class="ttdeci">armnn::IBackendInternalUniquePtr CreateBackendObject(const armnn::BackendId &amp;backendId)</div><div class="ttdef"><b>Definition:</b> <a href="_common_test_utils_8cpp_source.xhtml#l00045">CommonTestUtils.cpp:45</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_aaef29472862381822654ab6cbf7cba2a"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">armnn::Layer::GetType</a></div><div class="ttdeci">LayerType GetType() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00261">Layer.hpp:261</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00101">INetwork.hpp:101</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00321">Descriptors.hpp:321</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_a352a82f3a338acf06a20d290f605c489"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#a352a82f3a338acf06a20d290f605c489">armnn::Profiler::Print</a></div><div class="ttdeci">void Print(std::ostream &amp;outStream) const override</div><div class="ttdoc">Print stats for events in JSON Format to the given output stream. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00330">Profiling.cpp:330</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00050">Network.cpp:50</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00209">Layer.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimized_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_optimized_network.xhtml">armnn::OptimizedNetwork</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_8hpp_source.xhtml#l00278">Network.hpp:278</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af1c239387f7cbdbfd173126ab8b5b24f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1c239387f7cbdbfd173126ab8b5b24f">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">FallbackDisableImportFromCpuAcc&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_fallback_tests_8cpp_source.xhtml#l00555">555</a> of file <a class="el" href="_neon_fallback_tests_8cpp_source.xhtml">NeonFallbackTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00068">CheckOrder()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::CpuAcc</a>, <a class="el" href="_network_8cpp_source.xhtml#l00050">INetwork::Create()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00032">IRuntime::Create()</a>, <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00045">CreateBackendObject()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00072">BackendRegistry::GetBackendIds()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00022">GetFirstLayerWithName()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00486">ProfilerManager::GetInstance()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00498">ProfilerManager::GetProfiler()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00261">Layer::GetType()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::MemCopy</a>, <a class="el" href="_mock_import_backend_8hpp_source.xhtml#l00012">armnn::MockImportBackendId()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01014">armnn::Optimize()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00330">Profiler::Print()</a>, and <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;{</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="comment">// Create a mock backend object</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <a class="code" href="classarmnn_1_1_mock_import_backend_initialiser.xhtml">MockImportBackendInitialiser</a> initialiser; <span class="comment">// Register the Mock Backend</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keyword">auto</span> backendObjPtr = <a class="code" href="_common_test_utils_8cpp.xhtml#a7a4090354279f08b1e27244bab25aa86">CreateBackendObject</a>(<a class="code" href="namespacearmnn.xhtml#ac38529227e1adeef300d31625826382b">MockImportBackendId</a>());</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    BOOST_TEST((backendObjPtr != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> backendIds = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">GetBackendIds</a>();</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">if</span> (backendIds.find(<span class="stringliteral">&quot;MockRef&quot;</span>) == backendIds.end())</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    {</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        std::string message = <span class="stringliteral">&quot;Cannot load MockRef&quot;</span>;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        BOOST_FAIL(message);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    }</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="comment">// Create runtime in which test will run and allow fallback to CpuRef.</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(options));</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="comment">// Builds up the structure of the network.</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net(<a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>());</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input0 = net-&gt;AddInputLayer(0, <span class="stringliteral">&quot;input0&quot;</span>);</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input1 = net-&gt;AddInputLayer(1, <span class="stringliteral">&quot;input1&quot;</span>);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input2 = net-&gt;AddInputLayer(2, <span class="stringliteral">&quot;input2&quot;</span>);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* sub = net-&gt;AddSubtractionLayer(<span class="stringliteral">&quot;sub&quot;</span>);</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* add = net-&gt;AddAdditionLayer(<span class="stringliteral">&quot;add&quot;</span>);</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output = net-&gt;AddOutputLayer(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(sub-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(sub-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    input2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    sub-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a> = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 2, 3, 2 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    input2-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    sub-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    add-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="comment">// optimize the network</span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    std::vector&lt;BackendId&gt; backends = { <span class="stringliteral">&quot;MockRef&quot;</span>, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">Compute::CpuAcc</a> };</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*net, backends, runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <a class="code" href="classarmnn_1_1_optimized_network.xhtml">OptimizedNetwork</a>* optNetObjPtr = PolymorphicDowncast&lt;OptimizedNetwork*&gt;(optNet.get());</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph = optNetObjPtr-&gt;GetGraph();</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer0 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;input0&quot;</span>);</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer1 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;input1&quot;</span>);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer2 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;input2&quot;</span>);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer3 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;sub&quot;</span>);</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer4 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;[ sub (0) -&gt; add (1) ]&quot;</span>);</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer5 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;add&quot;</span>);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer6 = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="comment">// Checks order is valid.</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer0, layer1));</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer1, layer2));</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer2, layer3));</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer3, layer4));</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer4, layer5));</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a>(graph, layer5, layer6));</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="comment">// Load it into the runtime. It should pass.</span></div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> netId;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    std::string ignoredErrorMessage;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> networkProperties(<span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    runtime-&gt;LoadNetwork(netId, std::move(optNet), ignoredErrorMessage, networkProperties);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="comment">// Creates structures for input &amp; output</span></div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    std::vector&lt;float&gt; inputData0</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    {</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        1.0f, 1.0f, 2.0f, 2.0f, 2.0f, 3.0f, 4.0f, 4.0f, 5.0f, 5.0f, 6.0f, 0.0f</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    };</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    std::vector&lt;float&gt; inputData1</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    {</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        0.0f, 1.0f, 1.0f, 2.0f, 3.0f, 3.0f, 3.0f, 4.0f, 4.0f, 5.0f, 5.0f, 6.0f</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    };</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    std::vector&lt;float&gt; inputData2</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    {</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        12.0f, 11.0f, 10.0f, 9.0f, 8.0f, 7.0f, 6.0f, 5.0f, 4.0f, 3.0f, 2.0f, 1.0f</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    };</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    std::vector&lt;float&gt; outputData(12);</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    std::vector&lt;float&gt; expectedOutput</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    {</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        13.0f, 11.0f, 11.0f, 9.0f, 7.0f, 7.0f, 7.0f, 5.0f, 5.0f, 3.0f, 3.0f, -5.0f</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    };</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensors</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    {</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        { 0, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 0), inputData0.data()) },</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        { 1, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 1), inputData1.data()) },</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        { 2, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(runtime-&gt;GetInputTensorInfo(netId, 2), inputData2.data()) }</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    };</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    {</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        { 0,<a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(runtime-&gt;GetOutputTensorInfo(netId, 0), outputData.data()) }</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    };</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    runtime-&gt;GetProfiler(netId)-&gt;EnableProfiling(<span class="keyword">true</span>);</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="comment">// Do the inference</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="comment">// Retrieve the Profiler.Print() output to get the workload execution</span></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a>&amp; profilerManager = <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a>();</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    profilerManager.<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a18fdcafb1d421ba99c48205d93115936">GetProfiler</a>()-&gt;<a class="code" href="classarmnn_1_1_profiler.xhtml#a352a82f3a338acf06a20d290f605c489">Print</a>(ss);;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    std::string dump = ss.str();</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="comment">// Contains CopyMemGeneric between the backends</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    std::size_t found = dump.find(<span class="stringliteral">&quot;CopyMemGeneric&quot;</span>);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    BOOST_TEST(found != std::string::npos);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="comment">// Does not contain ImportMemGeneric</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    found = dump.find(<span class="stringliteral">&quot;ImportMemGeneric&quot;</span>);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    BOOST_TEST(found == std::string::npos);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="comment">// Use memory import between backends</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    BOOST_TEST((layer4-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">LayerType::MemCopy</a>));</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <span class="comment">// Check output is as expected</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    BOOST_TEST(outputData == expectedOutput);</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00032">Runtime.cpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a570cb1835ec73000a7954ba75257904f"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">armnn::BackendRegistry::GetBackendIds</a></div><div class="ttdeci">BackendIdSet GetBackendIds() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00072">BackendRegistry.cpp:72</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_import_backend_initialiser_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_import_backend_initialiser.xhtml">armnn::MockImportBackendInitialiser</a></div><div class="ttdef"><b>Definition:</b> <a href="_mock_import_backend_8hpp_source.xhtml#l00014">MockImportBackend.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00191">BackendId.hpp:191</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a5f17e02e0054dac0a691685a0464ed36"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a></div><div class="ttdeci">armnn::Layer * GetFirstLayerWithName(armnn::Graph &amp;graph, const std::string &amp;name)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00022">GraphUtils.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a93857080c2523bf3395e7aa7e6024d5c"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a></div><div class="ttdeci">static ProfilerManager &amp; GetInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00486">Profiling.cpp:486</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a21d963c71be62057ed99b5007e7bbbfd"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a21d963c71be62057ed99b5007e7bbbfd">CheckOrder</a></div><div class="ttdeci">bool CheckOrder(const armnn::Graph &amp;graph, const armnn::Layer *first, const armnn::Layer *second)</div><div class="ttdoc">Checks that first comes before second in the order. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00068">GraphUtils.cpp:68</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00025">IRuntime.hpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00324">Tensor.hpp:324</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac38529227e1adeef300d31625826382b"><div class="ttname"><a href="namespacearmnn.xhtml#ac38529227e1adeef300d31625826382b">armnn::MockImportBackendId</a></div><div class="ttdeci">constexpr const char * MockImportBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_mock_import_backend_8hpp_source.xhtml#l00012">MockImportBackend.hpp:12</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a18fdcafb1d421ba99c48205d93115936"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a18fdcafb1d421ba99c48205d93115936">armnn::ProfilerManager::GetProfiler</a></div><div class="ttdeci">Profiler * GetProfiler()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00498">Profiling.cpp:498</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00027">IRuntime.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00290">Tensor.hpp:290</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01014">Network.cpp:1014</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00298">Tensor.hpp:298</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00325">Tensor.hpp:325</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::LayerType::MemCopy</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00593">INetwork.hpp:593</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml">armnn::ProfilerManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00093">Profiling.hpp:93</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00042">IRuntime.hpp:42</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a></div><div class="ttdoc">CPU Execution: NEON: ArmCompute. </div></div>
<div class="ttc" id="_common_test_utils_8cpp_xhtml_a7a4090354279f08b1e27244bab25aa86"><div class="ttname"><a href="_common_test_utils_8cpp.xhtml#a7a4090354279f08b1e27244bab25aa86">CreateBackendObject</a></div><div class="ttdeci">armnn::IBackendInternalUniquePtr CreateBackendObject(const armnn::BackendId &amp;backendId)</div><div class="ttdef"><b>Definition:</b> <a href="_common_test_utils_8cpp_source.xhtml#l00045">CommonTestUtils.cpp:45</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_aaef29472862381822654ab6cbf7cba2a"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aaef29472862381822654ab6cbf7cba2a">armnn::Layer::GetType</a></div><div class="ttdeci">LayerType GetType() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00261">Layer.hpp:261</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00101">INetwork.hpp:101</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="classarmnn_1_1_profiler_xhtml_a352a82f3a338acf06a20d290f605c489"><div class="ttname"><a href="classarmnn_1_1_profiler.xhtml#a352a82f3a338acf06a20d290f605c489">armnn::Profiler::Print</a></div><div class="ttdeci">void Print(std::ostream &amp;outStream) const override</div><div class="ttdoc">Print stats for events in JSON Format to the given output stream. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00330">Profiling.cpp:330</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00050">Network.cpp:50</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00209">Layer.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimized_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_optimized_network.xhtml">armnn::OptimizedNetwork</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_8hpp_source.xhtml#l00278">Network.hpp:278</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="ab59caffe2ee6be46c08766c055420f17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab59caffe2ee6be46c08766c055420f17">&#9670;&nbsp;</a></span>defaultBackends</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a>&gt; defaultBackends = { <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a> }</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_fallback_tests_8cpp_source.xhtml#l00015">15</a> of file <a class="el" href="_neon_fallback_tests_8cpp_source.xhtml">NeonFallbackTests.cpp</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_d86eb514662c7c08e168285f21d00ea1.xhtml">neon</a></li><li class="navelem"><a class="el" href="dir_c3e37ff99b1c352c48e2670d743526e1.xhtml">test</a></li><li class="navelem"><a class="el" href="_neon_fallback_tests_8cpp.xhtml">NeonFallbackTests.cpp</a></li>
    <li class="footer">Generated on Tue Aug 25 2020 12:29:46 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
