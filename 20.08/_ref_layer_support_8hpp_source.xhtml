<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/RefLayerSupport.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_ref_layer_support_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">RefLayerSupport.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_ref_layer_support_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_layer_support_base_8hpp.xhtml">backendsCommon/LayerSupportBase.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;{</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_layer_support.xhtml">   12</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_ref_layer_support.xhtml">RefLayerSupport</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;{</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use IsElementwiseUnarySupported instead&quot;</span>)</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#abd7fa8c2233f8a653e30ae2f3b839d92">IsAbsSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">IsActivationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;                               <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">IsAdditionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">IsArgMinMaxSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                              <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">IsBatchNormalizationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; mean,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; var,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; beta,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; gamma,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                       <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">IsBatchToSpaceNdSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a7c52726a684dd76258c61af124012537">IsComparisonSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                               <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a3dca8ffbcb5f3afa1799aa7d354a3016">IsConcatSupported</a>(<span class="keyword">const</span> std::vector&lt;const TensorInfo*&gt; inputs,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">ConcatDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">IsConstantSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#ad330b6e7dcf25410ea878af0557f2197">IsConvertBf16ToFp32Supported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                      <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">IsConvertFp16ToFp32Supported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                      <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a0947498c6cc747db6219a22132a1b89a">IsConvertFp32ToBf16Supported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                      <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">IsConvertFp32ToFp16Supported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                      <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">IsConvolution2dSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; weights,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; biases,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                  <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a87a66c5e87a19534ce3e6c374c9b8f09">IsDebugSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">IsDepthToSpaceSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">DepthToSpaceDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">IsDepthwiseConvolutionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; weights,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; biases,</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">IsDequantizeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                               <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a50af275d7755a5bb1be69736d7e4b02f">IsDetectionPostProcessSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; detectionBoxes,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; detectionClasses,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; detectionScores,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; numDetections,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a55d91a97ff664f42cd5cd62b60c15f80">IsDilatedDepthwiseConvolutionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; weights,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; biases,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                                <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported =</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                                    <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f">IsDivisionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a61c5b4e5dc224ef0c876e43353b34030">IsElementwiseUnarySupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                     <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use IsComparisonSupported instead&quot;</span>)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#afb6ad04c6ff234b193f3dfc0cfabcbd5">IsEqualSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#aab7318aa8adc0a8a3b6a1780cfc1f90b">IsFakeQuantizationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                     <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">IsFillSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">IsFloorSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">IsFullyConnectedSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; weights,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; biases,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a2f51fda38409c3768a7bd28cedf3f075">IsGatherSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use IsComparisonSupported instead&quot;</span>)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a14e45f3699e823d7859d5d352d89265c">IsGreaterSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                            <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">IsInputSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a0813546a09bf2caba6794014d1960624">IsInstanceNormalizationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b">IsL2NormalizationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a6d414f4983a5ca9596d84e340e6fd895">IsLogSoftmaxSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">LogSoftmaxDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                               <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported) <span class="keyword">const override</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a862535721737220f62a49f14ff494dd5">IsLstmSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputStateIn,</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; cellStateIn,</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; scratchBuffer,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputStateOut,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; cellStateOut,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a>&amp; paramsInfo,</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a">IsMaximumSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                            <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">IsMeanSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use IsConcatSupported instead&quot;</span>)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#aa9309ea64f9f7447efe3567f77417d29">IsMergerSupported</a>(<span class="keyword">const</span> std::vector&lt;const TensorInfo*&gt; inputs,</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">MergerDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a9d25fabf725313fda40a41400155bafe">IsMemCopySupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                            <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116">IsMinimumSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                            <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a421e1f3865d99d52613003048342c49a">IsMultiplicationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">IsNormalizationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                  <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">IsOutputSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43">IsPadSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30">IsPermuteSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                            <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">IsPooling2dSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                              <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7">IsQuantizeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31">IsQLstmSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; previousOutputIn,</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; previousCellStateIn,</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputStateOut,</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; cellStateOut,</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a>&amp; paramsInfo,</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#ae106544a060930a518ae0a003a3e9a64">IsRankSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">IsReshapeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                            <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a0f29f31e1ba46a52eedcdecd34f4cc24">IsResizeBilinearSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">IsResizeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    </div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use IsElementwiseUnarySupported instead&quot;</span>)</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a10ae4d84b0d31580f6fcd5107322ebcf">IsRsqrtSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">IsSliceSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099">IsSoftmaxSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                            <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5">IsSpaceToBatchNdSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">IsSpaceToDepthSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>())</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                 <span class="keyword">const override</span>;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use IsSplitterSupported with outputs instead&quot;</span>)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a17dd12822d49a23d24198f425a6fb9c4">IsSplitterSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a17dd12822d49a23d24198f425a6fb9c4">IsSplitterSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                             <span class="keyword">const</span> std::vector&lt;std::reference_wrapper&lt;TensorInfo&gt;&gt;&amp; outputs,</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">IsStackSupported</a>(<span class="keyword">const</span> std::vector&lt;const TensorInfo*&gt;&amp; inputs,</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#ac054cb25099005eac854afb1511340f0">IsStridedSliceSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">IsSubtractionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input1,</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                                <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f">IsPreluSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; alpha,</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">IsTransposeConvolution2dSupported</a>(</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; weights,</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; biases,</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_ref_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee">IsTransposeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; output,</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                              <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) <span class="keyword">const override</span>;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;};</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_afb6ad04c6ff234b193f3dfc0cfabcbd5"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#afb6ad04c6ff234b193f3dfc0cfabcbd5">armnn::RefLayerSupport::IsEqualSupported</a></div><div class="ttdeci">bool IsEqualSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00830">RefLayerSupport.cpp:830</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml">armnn::LayerSupportBase</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8hpp_source.xhtml#l00013">LayerSupportBase.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a7c52726a684dd76258c61af124012537"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a7c52726a684dd76258c61af124012537">armnn::RefLayerSupport::IsComparisonSupported</a></div><div class="ttdeci">bool IsComparisonSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ComparisonDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00303">RefLayerSupport.cpp:303</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_aa02f01bbcb48c67f5b2efc4132ec5e86"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">armnn::RefLayerSupport::IsReshapeSupported</a></div><div class="ttdeci">bool IsReshapeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReshapeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01670">RefLayerSupport.cpp:1670</a></div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml">armnn::ViewsDescriptor</a></div><div class="ttdoc">A ViewsDescriptor for the SplitterLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00198">Descriptors.hpp:198</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a8385cf8227907904a6a86fac318fc099"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099">armnn::RefLayerSupport::IsSoftmaxSupported</a></div><div class="ttdeci">bool IsSoftmaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01788">RefLayerSupport.cpp:1788</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">armnn::TransposeConvolution2dDescriptor</a></div><div class="ttdoc">A TransposeConvolution2dDescriptor for the TransposeConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01196">Descriptors.hpp:1196</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a9d553495d9a94fa55588ae159d8bda30"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30">armnn::RefLayerSupport::IsPermuteSupported</a></div><div class="ttdeci">bool IsPermuteSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01533">RefLayerSupport.cpp:1533</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a0534291adf9f3436ba331552eba29a43"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43">armnn::RefLayerSupport::IsPadSupported</a></div><div class="ttdeci">bool IsPadSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01502">RefLayerSupport.cpp:1502</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a6d414f4983a5ca9596d84e340e6fd895"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a6d414f4983a5ca9596d84e340e6fd895">armnn::RefLayerSupport::IsLogSoftmaxSupported</a></div><div class="ttdeci">bool IsLogSoftmaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01111">RefLayerSupport.cpp:1111</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a></div><div class="ttdoc">A ReshapeDescriptor for the ReshapeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00815">Descriptors.hpp:815</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a2f51fda38409c3768a7bd28cedf3f075"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a2f51fda38409c3768a7bd28cedf3f075">armnn::RefLayerSupport::IsGatherSupported</a></div><div class="ttdeci">bool IsGatherSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const GatherDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00988">RefLayerSupport.cpp:988</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a91fb5f44d8b9427dc45443aa9ebfe13e"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">armnn::RefLayerSupport::IsConvertFp32ToFp16Supported</a></div><div class="ttdeci">bool IsConvertFp32ToFp16Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00437">RefLayerSupport.cpp:437</a></div></div>
<div class="ttc" id="structarmnn_1_1_comparison_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_comparison_descriptor.xhtml">armnn::ComparisonDescriptor</a></div><div class="ttdoc">A ComparisonDescriptor for the ComparisonLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00070">Descriptors.hpp:70</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a55d91a97ff664f42cd5cd62b60c15f80"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a55d91a97ff664f42cd5cd62b60c15f80">armnn::RefLayerSupport::IsDilatedDepthwiseConvolutionSupported</a></div><div class="ttdeci">bool IsDilatedDepthwiseConvolutionSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00746">RefLayerSupport.cpp:746</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a0e14dafa85cfcd4a6b6b752284b51e63"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">armnn::RefLayerSupport::IsSliceSupported</a></div><div class="ttdeci">bool IsSliceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01759">RefLayerSupport.cpp:1759</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_ab4609f1baf5fcd295951f3c8abdffd90"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">armnn::RefLayerSupport::IsStackSupported</a></div><div class="ttdeci">bool IsStackSupported(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01931">RefLayerSupport.cpp:1931</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00400">Descriptors.hpp:400</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a4b36dcedd5edbd5142b3548967aadc2f"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f">armnn::RefLayerSupport::IsPreluSupported</a></div><div class="ttdeci">bool IsPreluSupported(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l02031">RefLayerSupport.cpp:2031</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_ad330b6e7dcf25410ea878af0557f2197"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#ad330b6e7dcf25410ea878af0557f2197">armnn::RefLayerSupport::IsConvertBf16ToFp32Supported</a></div><div class="ttdeci">bool IsConvertBf16ToFp32Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00387">RefLayerSupport.cpp:387</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_adf54bcad228c0ac21f6735d31460cf31"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31">armnn::RefLayerSupport::IsQLstmSupported</a></div><div class="ttdeci">bool IsQLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01595">RefLayerSupport.cpp:1595</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_aca4acda7ab553edfda828658d8f3882b"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b">armnn::RefLayerSupport::IsL2NormalizationSupported</a></div><div class="ttdeci">bool IsL2NormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01076">RefLayerSupport.cpp:1076</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a128fb9890897e08251a3f621e570cd23"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">armnn::RefLayerSupport::IsDepthToSpaceSupported</a></div><div class="ttdeci">bool IsDepthToSpaceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00572">RefLayerSupport.cpp:572</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ada422a73ac4e68bcb1b1b1f0b44028d9"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a></div><div class="ttdeci">std::vector&lt; float &gt; boxEncodings({ 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f })</div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a67c970dd054b991e14369de523ca3a5a"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">armnn::RefLayerSupport::IsBatchNormalizationSupported</a></div><div class="ttdeci">bool IsBatchNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00206">RefLayerSupport.cpp:206</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::SpaceToDepthDescriptor</a></div><div class="ttdoc">A SpaceToDepthDescriptor for the SpaceToDepthLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00867">Descriptors.hpp:867</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_adc84390751f227fe03a115b5fa10b0fc"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">armnn::RefLayerSupport::IsDepthwiseConvolutionSupported</a></div><div class="ttdeci">bool IsDepthwiseConvolutionSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00602">RefLayerSupport.cpp:602</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_aab7318aa8adc0a8a3b6a1780cfc1f90b"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#aab7318aa8adc0a8a3b6a1780cfc1f90b">armnn::RefLayerSupport::IsFakeQuantizationSupported</a></div><div class="ttdeci">bool IsFakeQuantizationSupported(const TensorInfo &amp;input, const FakeQuantizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00842">RefLayerSupport.cpp:842</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_adc5695cc25f4055c7ed54bdc8604a098"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">armnn::RefLayerSupport::IsBatchToSpaceNdSupported</a></div><div class="ttdeci">bool IsBatchToSpaceNdSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00253">RefLayerSupport.cpp:253</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a0f29f31e1ba46a52eedcdecd34f4cc24"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a0f29f31e1ba46a52eedcdecd34f4cc24">armnn::RefLayerSupport::IsResizeBilinearSupported</a></div><div class="ttdeci">bool IsResizeBilinearSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01693">RefLayerSupport.cpp:1693</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a></div><div class="ttdoc">A BatchToSpaceNdDescriptor for the BatchToSpaceNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00665">Descriptors.hpp:665</a></div></div>
<div class="ttc" id="_layer_support_base_8hpp_xhtml"><div class="ttname"><a href="_layer_support_base_8hpp.xhtml">LayerSupportBase.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_aa9309ea64f9f7447efe3567f77417d29"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#aa9309ea64f9f7447efe3567f77417d29">armnn::RefLayerSupport::IsMergerSupported</a></div><div class="ttdeci">bool IsMergerSupported(const std::vector&lt; const TensorInfo *&gt; inputs, const TensorInfo &amp;output, const MergerDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01350">RefLayerSupport.cpp:1350</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a0c69484f19ed650ad48b716719114e51"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">armnn::RefLayerSupport::IsTransposeConvolution2dSupported</a></div><div class="ttdeci">bool IsTransposeConvolution2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l02066">RefLayerSupport.cpp:2066</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a></div><div class="ttdoc">A ResizeDescriptor for the ResizeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00777">Descriptors.hpp:777</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml">armnn::StackDescriptor</a></div><div class="ttdoc">A StackDescriptor for the StackLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01007">Descriptors.hpp:1007</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_aef3244c0ef64c8f2f352d21ce0c06985"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">armnn::RefLayerSupport::IsOutputSupported</a></div><div class="ttdeci">bool IsOutputSupported(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01496">RefLayerSupport.cpp:1496</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_aeaf971dd9dffd6f6bc7e5a1ae6b6af5c"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">armnn::RefLayerSupport::IsFullyConnectedSupported</a></div><div class="ttdeci">bool IsFullyConnectedSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const TensorInfo &amp;biases, const FullyConnectedDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00908">RefLayerSupport.cpp:908</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_ad2c7be6b84b04444e514f52f593b3df7"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7">armnn::RefLayerSupport::IsQuantizeSupported</a></div><div class="ttdeci">bool IsQuantizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01619">RefLayerSupport.cpp:1619</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a3d27a3fc6a7df0b68d80cb113aff8b6c"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">armnn::RefLayerSupport::IsResizeSupported</a></div><div class="ttdeci">bool IsResizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01720">RefLayerSupport.cpp:1720</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a></div><div class="ttdoc">A PadDescriptor for the PadLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00958">Descriptors.hpp:958</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_adf18c4fa8fc9e0cdae1967990aa90fe8"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">armnn::RefLayerSupport::IsConstantSupported</a></div><div class="ttdeci">bool IsConstantSupported(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00368">RefLayerSupport.cpp:368</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml">armnn::LstmInputParamsInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00063">LstmParams.hpp:63</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a0f4841f89f21fd794786b4c03c2425fd"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">armnn::RefLayerSupport::IsArgMinMaxSupported</a></div><div class="ttdeci">bool IsArgMinMaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00179">RefLayerSupport.cpp:179</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a3adfc31e079a970e028e537ec05fabf5"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5">armnn::RefLayerSupport::IsSpaceToBatchNdSupported</a></div><div class="ttdeci">bool IsSpaceToBatchNdSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01818">RefLayerSupport.cpp:1818</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a></div><div class="ttdoc">An LstmDescriptor for the LstmLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00894">Descriptors.hpp:894</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a3d0eafb3de560b3482f857b56b2b2116"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116">armnn::RefLayerSupport::IsMinimumSupported</a></div><div class="ttdeci">bool IsMinimumSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01387">RefLayerSupport.cpp:1387</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a10ae4d84b0d31580f6fcd5107322ebcf"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a10ae4d84b0d31580f6fcd5107322ebcf">armnn::RefLayerSupport::IsRsqrtSupported</a></div><div class="ttdeci">bool IsRsqrtSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01749">RefLayerSupport.cpp:1749</a></div></div>
<div class="ttc" id="structarmnn_1_1_l2_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_descriptor.xhtml">armnn::L2NormalizationDescriptor</a></div><div class="ttdoc">A L2NormalizationDescriptor for the L2NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00599">Descriptors.hpp:599</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a></div><div class="ttdoc">An ArgMinMaxDescriptor for ArgMinMaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00051">Descriptors.hpp:51</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml">armnn::OriginsDescriptor</a></div><div class="ttdoc">An OriginsDescriptor for the ConcatLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00155">Descriptors.hpp:155</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a></div><div class="ttdoc">A FullyConnectedDescriptor for the FullyConnectedLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00381">Descriptors.hpp:381</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_ae106544a060930a518ae0a003a3e9a64"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#ae106544a060930a518ae0a003a3e9a64">armnn::RefLayerSupport::IsRankSupported</a></div><div class="ttdeci">bool IsRankSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01655">RefLayerSupport.cpp:1655</a></div></div>
<div class="ttc" id="structarmnn_1_1_fake_quantization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fake_quantization_descriptor.xhtml">armnn::FakeQuantizationDescriptor</a></div><div class="ttdoc">A FakeQuantizationDescriptor for the FakeQuantizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00696">Descriptors.hpp:696</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a1efcaf6f02892442fefca09f49ea3d7c"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">armnn::RefLayerSupport::IsConvertFp16ToFp32Supported</a></div><div class="ttdeci">bool IsConvertFp16ToFp32Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00402">RefLayerSupport.cpp:402</a></div></div>
<div class="ttc" id="structarmnn_1_1_gather_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a></div><div class="ttdoc">A GatherDescriptor for the GatherLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00734">Descriptors.hpp:734</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_ab268618580d4f53bf5e9b5a47dee3f6a"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">armnn::RefLayerSupport::IsMeanSupported</a></div><div class="ttdeci">bool IsMeanSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01287">RefLayerSupport.cpp:1287</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml">armnn::QLstmDescriptor</a></div><div class="ttdoc">A QLstmDescriptor for the QLstmLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01136">Descriptors.hpp:1136</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_ab2af1e7da9490d29e569d271e16b0d5c"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">armnn::RefLayerSupport::IsSpaceToDepthSupported</a></div><div class="ttdeci">bool IsSpaceToDepthSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01847">RefLayerSupport.cpp:1847</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a48177e22e47448adb3d83e145dadf735"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">armnn::RefLayerSupport::IsAdditionSupported</a></div><div class="ttdeci">bool IsAdditionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00141">RefLayerSupport.cpp:141</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_ac054cb25099005eac854afb1511340f0"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#ac054cb25099005eac854afb1511340f0">armnn::RefLayerSupport::IsStridedSliceSupported</a></div><div class="ttdeci">bool IsStridedSliceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01964">RefLayerSupport.cpp:1964</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_af6c947e4d4b25bc49d92d18d4ff26736"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">armnn::RefLayerSupport::IsSubtractionSupported</a></div><div class="ttdeci">bool IsSubtractionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01993">RefLayerSupport.cpp:1993</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00020">Descriptors.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a0947498c6cc747db6219a22132a1b89a"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a0947498c6cc747db6219a22132a1b89a">armnn::RefLayerSupport::IsConvertFp32ToBf16Supported</a></div><div class="ttdeci">bool IsConvertFp32ToBf16Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00422">RefLayerSupport.cpp:422</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a53c7593d1aa26207eac5d5814a9d56dc"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">armnn::RefLayerSupport::IsFloorSupported</a></div><div class="ttdeci">bool IsFloorSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00885">RefLayerSupport.cpp:885</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_ab3adb3a28736529682e4ff0ea976dcd3"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">armnn::RefLayerSupport::IsActivationSupported</a></div><div class="ttdeci">bool IsActivationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00073">RefLayerSupport.cpp:73</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a87a66c5e87a19534ce3e6c374c9b8f09"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a87a66c5e87a19534ce3e6c374c9b8f09">armnn::RefLayerSupport::IsDebugSupported</a></div><div class="ttdeci">bool IsDebugSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00542">RefLayerSupport.cpp:542</a></div></div>
<div class="ttc" id="structarmnn_1_1_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_slice_descriptor.xhtml">armnn::SliceDescriptor</a></div><div class="ttdoc">A SliceDescriptor for the SliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00984">Descriptors.hpp:984</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a50af275d7755a5bb1be69736d7e4b02f"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a50af275d7755a5bb1be69736d7e4b02f">armnn::RefLayerSupport::IsDetectionPostProcessSupported</a></div><div class="ttdeci">bool IsDetectionPostProcessSupported(const TensorInfo &amp;boxEncodings, const TensorInfo &amp;scores, const TensorInfo &amp;anchors, const TensorInfo &amp;detectionBoxes, const TensorInfo &amp;detectionClasses, const TensorInfo &amp;detectionScores, const TensorInfo &amp;numDetections, const DetectionPostProcessDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00714">RefLayerSupport.cpp:714</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a></div><div class="ttdoc">A SpaceToBatchNdDescriptor for the SpaceToBatchNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00835">Descriptors.hpp:835</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">armnn::ElementwiseUnaryDescriptor</a></div><div class="ttdoc">A ElementwiseUnaryDescriptor for the ElementwiseUnaryLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00090">Descriptors.hpp:90</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a61c5b4e5dc224ef0c876e43353b34030"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a61c5b4e5dc224ef0c876e43353b34030">armnn::RefLayerSupport::IsElementwiseUnarySupported</a></div><div class="ttdeci">bool IsElementwiseUnarySupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00794">RefLayerSupport.cpp:794</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a421e1f3865d99d52613003048342c49a"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a421e1f3865d99d52613003048342c49a">armnn::RefLayerSupport::IsMultiplicationSupported</a></div><div class="ttdeci">bool IsMultiplicationSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01425">RefLayerSupport.cpp:1425</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a0348e6bb67ace72535bd105219bb6237"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a></div><div class="ttdeci">std::vector&lt; float &gt; scores({ 0.0f, 0.9f, 0.8f, 0.0f, 0.75f, 0.72f, 0.0f, 0.6f, 0.5f, 0.0f, 0.93f, 0.95f, 0.0f, 0.5f, 0.4f, 0.0f, 0.3f, 0.2f })</div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a3dca8ffbcb5f3afa1799aa7d354a3016"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a3dca8ffbcb5f3afa1799aa7d354a3016">armnn::RefLayerSupport::IsConcatSupported</a></div><div class="ttdeci">bool IsConcatSupported(const std::vector&lt; const TensorInfo *&gt; inputs, const TensorInfo &amp;output, const ConcatDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00335">RefLayerSupport.cpp:335</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a994c2065561141bf37fcd2ff7bb4af4d"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">armnn::RefLayerSupport::IsNormalizationSupported</a></div><div class="ttdeci">bool IsNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01463">RefLayerSupport.cpp:1463</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a2e89c72cf60df7c2d2d7e5d98822b672"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">armnn::RefLayerSupport::IsDequantizeSupported</a></div><div class="ttdeci">bool IsDequantizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00676">RefLayerSupport.cpp:676</a></div></div>
<div class="ttc" id="structarmnn_1_1_mean_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a></div><div class="ttdoc">A MeanDescriptor for the MeanLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00934">Descriptors.hpp:934</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a14e45f3699e823d7859d5d352d89265c"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a14e45f3699e823d7859d5d352d89265c">armnn::RefLayerSupport::IsGreaterSupported</a></div><div class="ttdeci">bool IsGreaterSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01026">RefLayerSupport.cpp:1026</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a9d25fabf725313fda40a41400155bafe"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a9d25fabf725313fda40a41400155bafe">armnn::RefLayerSupport::IsMemCopySupported</a></div><div class="ttdeci">bool IsMemCopySupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01358">RefLayerSupport.cpp:1358</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a></div><div class="ttdoc">A TransposeDescriptor for the TransposeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01246">Descriptors.hpp:1246</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a></div><div class="ttdoc">A StridedSliceDescriptor for the StridedSliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01059">Descriptors.hpp:1059</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_ad29d99ecd719c640ed22dcf5c688c6a5"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">armnn::RefLayerSupport::IsInputSupported</a></div><div class="ttdeci">bool IsInputSupported(const TensorInfo &amp;input, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01038">RefLayerSupport.cpp:1038</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a08f55136b1f0907e7083d70d719f697f"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f">armnn::RefLayerSupport::IsDivisionSupported</a></div><div class="ttdeci">bool IsDivisionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00756">RefLayerSupport.cpp:756</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_abd7fa8c2233f8a653e30ae2f3b839d92"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#abd7fa8c2233f8a653e30ae2f3b839d92">armnn::RefLayerSupport::IsAbsSupported</a></div><div class="ttdeci">bool IsAbsSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00064">RefLayerSupport.cpp:64</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_a76fb13a018f8e01087a7ae0eb23509e1"><div class="ttname"><a href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a></div><div class="ttdeci">#define ARMNN_DEPRECATED_MSG(message)</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00043">Deprecated.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a862535721737220f62a49f14ff494dd5"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a862535721737220f62a49f14ff494dd5">armnn::RefLayerSupport::IsLstmSupported</a></div><div class="ttdeci">bool IsLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01138">RefLayerSupport.cpp:1138</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_acc5d9a4c8f29984de3bbdca87684f317"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">armnn::RefLayerSupport::IsFillSupported</a></div><div class="ttdeci">bool IsFillSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const FillDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00860">RefLayerSupport.cpp:860</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a17dd12822d49a23d24198f425a6fb9c4"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a17dd12822d49a23d24198f425a6fb9c4">armnn::RefLayerSupport::IsSplitterSupported</a></div><div class="ttdeci">bool IsSplitterSupported(const TensorInfo &amp;input, const ViewsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01878">RefLayerSupport.cpp:1878</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00321">Descriptors.hpp:321</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a></div><div class="ttdoc">A NormalizationDescriptor for the NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00559">Descriptors.hpp:559</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a0189645f33641b280877a1b2f6ba9fee"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee">armnn::RefLayerSupport::IsTransposeSupported</a></div><div class="ttdeci">bool IsTransposeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l02139">RefLayerSupport.cpp:2139</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml">armnn::RefLayerSupport</a></div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8hpp_source.xhtml#l00012">RefLayerSupport.hpp:12</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00503">Descriptors.hpp:503</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml">armnn::InstanceNormalizationDescriptor</a></div><div class="ttdoc">An InstanceNormalizationDescriptor for InstanceNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00637">Descriptors.hpp:637</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_af7ff06bd8115a6a9cc6d41e5c762798e"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">armnn::RefLayerSupport::IsConvolution2dSupported</a></div><div class="ttdeci">bool IsConvolution2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l00457">RefLayerSupport.cpp:457</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_a0813546a09bf2caba6794014d1960624"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#a0813546a09bf2caba6794014d1960624">armnn::RefLayerSupport::IsInstanceNormalizationSupported</a></div><div class="ttdeci">bool IsInstanceNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01044">RefLayerSupport.cpp:1044</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a></div><div class="ttdoc">A SoftmaxDescriptor for the SoftmaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00131">Descriptors.hpp:131</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_afef9436c86b37b973471f2ae546ac00a"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a">armnn::RefLayerSupport::IsMaximumSupported</a></div><div class="ttdeci">bool IsMaximumSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01249">RefLayerSupport.cpp:1249</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a></div><div class="ttdoc">A DepthwiseConvolution2dDescriptor for the DepthwiseConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00452">Descriptors.hpp:452</a></div></div>
<div class="ttc" id="structarmnn_1_1_fill_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fill_descriptor.xhtml">armnn::FillDescriptor</a></div><div class="ttdoc">A FillDescriptor for the FillLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00715">Descriptors.hpp:715</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_layer_support_xhtml_aa955675303d67b1d1fb51fb7f09d8c21"><div class="ttname"><a href="classarmnn_1_1_ref_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">armnn::RefLayerSupport::IsPooling2dSupported</a></div><div class="ttdeci">bool IsPooling2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_layer_support_8cpp_source.xhtml#l01564">RefLayerSupport.cpp:1564</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a></div><div class="ttdoc">A BatchNormalizationDescriptor for the BatchNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00618">Descriptors.hpp:618</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a></div><div class="ttdoc">A PermuteDescriptor for the PermuteLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00110">Descriptors.hpp:110</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ac0981848e4ae57729f14f72bd4caa9f8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a></div><div class="ttdeci">std::vector&lt; float &gt; anchors({ 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 100.5f, 1.0f, 1.0f })</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="_ref_layer_support_8hpp.xhtml">RefLayerSupport.hpp</a></li>
    <li class="footer">Generated on Tue Aug 25 2020 12:29:43 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
