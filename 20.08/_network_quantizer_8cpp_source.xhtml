<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/NetworkQuantizer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_network_quantizer_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NetworkQuantizer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_network_quantizer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_network_quantizer_8hpp.xhtml">NetworkQuantizer.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_network_quantizer_utils_8hpp.xhtml">NetworkQuantizerUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_8hpp.xhtml">Graph.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_layer_8hpp.xhtml">Layer.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_network_8hpp.xhtml">Network.hpp</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_dynamic_quantization_visitor_8hpp.xhtml">DynamicQuantizationVisitor.hpp</a>&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_static_range_visitor_8hpp.xhtml">StaticRangeVisitor.hpp</a>&quot;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_quantizer_visitor_8hpp.xhtml">QuantizerVisitor.hpp</a>&quot;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_override_input_range_visitor_8hpp.xhtml">OverrideInputRangeVisitor.hpp</a>&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_i_o_utils_8hpp.xhtml">TensorIOUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_layer_visitor_8hpp.xhtml">armnn/ILayerVisitor.hpp</a>&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_network_8hpp.xhtml">armnn/INetwork.hpp</a>&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_8hpp.xhtml">armnn/Tensor.hpp</a>&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_8hpp.xhtml">armnn/Types.hpp</a>&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_utils_8hpp.xhtml">armnnUtils/TensorUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_polymorphic_downcast_8hpp.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;boost/variant.hpp&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a9eb69ebdaf4ceb8014e7c8a540266100">   34</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a9eb69ebdaf4ceb8014e7c8a540266100">TContainer</a> = boost::variant&lt;std::vector&lt;float&gt;, std::vector&lt;int&gt;, std::vector&lt;unsigned char&gt;&gt;;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_network_quantizer.xhtml#ab8c40aedacd27ec921e53f3a022e6a63">   36</a></span>&#160;<a class="code" href="classarmnn_1_1_i_network_quantizer.xhtml">INetworkQuantizer</a>* <a class="code" href="classarmnn_1_1_i_network_quantizer.xhtml#ab8c40aedacd27ec921e53f3a022e6a63">INetworkQuantizer::CreateRaw</a>(<a class="code" href="classarmnn_1_1_i_network.xhtml">INetwork</a>* inputNetwork, <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_quantizer_options.xhtml">QuantizerOptions</a>&amp; options)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classarmnn_1_1_network_quantizer.xhtml">NetworkQuantizer</a>(inputNetwork, options);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_network_quantizer.xhtml#a3a4d01d9351c02a703740290f226441f">   41</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a41119e261eec9343888d2ceab1e4999a">INetworkQuantizerPtr</a> <a class="code" href="classarmnn_1_1_i_network_quantizer.xhtml#a3a4d01d9351c02a703740290f226441f">INetworkQuantizer::Create</a>(<a class="code" href="classarmnn_1_1_i_network.xhtml">INetwork</a>* inputNetwork, <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_quantizer_options.xhtml">QuantizerOptions</a>&amp; options)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a41119e261eec9343888d2ceab1e4999a">INetworkQuantizerPtr</a>(<a class="code" href="classarmnn_1_1_i_network_quantizer.xhtml#ab8c40aedacd27ec921e53f3a022e6a63">CreateRaw</a>(inputNetwork, options), &amp;<a class="code" href="classarmnn_1_1_i_network_quantizer.xhtml#ad1ad5b83dc4d8bed64c29adf21c8958a">INetworkQuantizer::Destroy</a>);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_network_quantizer.xhtml#ad1ad5b83dc4d8bed64c29adf21c8958a">   46</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_i_network_quantizer.xhtml#ad1ad5b83dc4d8bed64c29adf21c8958a">INetworkQuantizer::Destroy</a>(<a class="code" href="classarmnn_1_1_i_network_quantizer.xhtml">INetworkQuantizer</a> *quantizer)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">delete</span> PolymorphicDowncast&lt;NetworkQuantizer*&gt;(quantizer);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classarmnn_1_1_network_quantizer.xhtml#a0de9803a30020e30ec8c9c0ba8592dc6">   51</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_network_quantizer.xhtml#a0de9803a30020e30ec8c9c0ba8592dc6">NetworkQuantizer::OverrideInputRange</a>(<a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerId, <span class="keywordtype">float</span> min, <span class="keywordtype">float</span> max)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph = PolymorphicDowncast&lt;const Network*&gt;(m_InputNetwork)-&gt;GetGraph();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">auto</span> inputLayers = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a919fb58873ef3a6549e4490e226f2eae">GetInputLayers</a>();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// Walk the input layers of the graph and override the quantization parameters of the one with the given id</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="classarmnn_1_1_override_input_range_visitor.xhtml">OverrideInputRangeVisitor</a> overrideInputRangeVisitor(m_Ranges, layerId, <a class="code" href="classarmnn_1_1_range_tracker.xhtml#a997e96288bdb106c922202e3f33d5d7b">RangeTracker::MinMaxRange</a>{min, max});</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a9835ef753dda5b5a2fe827680e41fda7">VisitLayers</a>(inputLayers, overrideInputRangeVisitor);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classarmnn_1_1_network_quantizer.xhtml#acff529f0d8ffed99123e3a729942be12">   61</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_network_quantizer.xhtml#acff529f0d8ffed99123e3a729942be12">NetworkQuantizer::Refine</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a>&amp; inputTensors)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="comment">// The first time Refine is called the m_Runtime and the DynamicQuantizationVisitor</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">// will not have been created. Need to get the environment set up, Runtime loaded,</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// DynamicQuantizationVisitor created and run over the network to initialise itself</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// and the RangeTracker the Debug callback registered and an initial inference</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="comment">// done to set up the first min/max values</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">if</span> (!m_Runtime)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        m_RefineCount = 0;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        m_Ranges.SetDynamicMode(<span class="keyword">true</span>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; cGraph = PolymorphicDowncast&lt;const Network*&gt;(m_InputNetwork)-&gt;GetGraph().<a class="code" href="classarmnn_1_1_graph.xhtml#a9a7209345edfdb2b066b0ceb66414d7c">TopologicalSort</a>();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="comment">// need to insert Debug layers in the DynamicQuantizationVisitor</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph = <span class="keyword">const_cast&lt;</span><a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp;<span class="keyword">&gt;</span>(cGraph);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="comment">// Initialize RangeTracker to the default values for each layer.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="comment">// The default values are overwritten by the min/max that is</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="comment">// recorded during the first dataset min/max calibration. This</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="comment">// initialisation is only required for the first call of Refine().</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        m_DynamicQuantizationVisitor = <a class="code" href="classarmnn_1_1_dynamic_quantization_visitor.xhtml">DynamicQuantizationVisitor</a>(m_Ranges, graph);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9835ef753dda5b5a2fe827680e41fda7">VisitLayers</a>(cGraph, m_DynamicQuantizationVisitor.value());</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        m_Runtime = <a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(options);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="comment">// Optimize network - debug already enabled for layers that require quantization</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <a class="code" href="structarmnn_1_1_optimizer_options.xhtml">OptimizerOptions</a> optimizerOptions(<span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        std::vector&lt;BackendId&gt; backends = {<span class="stringliteral">&quot;CpuRef&quot;</span>};</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optimizedNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*m_InputNetwork,</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                                     backends,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                                     m_Runtime-&gt;GetDeviceSpec(),</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                                     optimizerOptions);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        m_Runtime-&gt;LoadNetwork(m_NetworkId, std::move(optimizedNet));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="comment">// Debug callback function to refine min/max in RangeTracker</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keyword">auto</span> rangeTrackerCallback = [&amp;](<a class="code" href="classarmnn_1_1profiling_1_1_profiling_guid.xhtml">LayerGuid</a> guid, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex, <a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> *tensorHandle) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="comment">// Get min/max pair from tensor data</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            std::pair&lt;float, float&gt; minMax = <a class="code" href="namespacearmnn_utils.xhtml#a1c9097ab13afc54b48c503c6487aaee1">armnnUtils::FindMinMax</a>(tensorHandle);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="comment">// For first calibration dataset, set min/max range in RangeTracker to</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="comment">// min/max ranges gathered during inference</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keywordflow">if</span> (m_RefineCount == 0)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                m_Ranges.ResetMinMax(guid, slotIndex, minMax.first, minMax.second);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <span class="comment">// For every other calibration dataset, only set min/max range if the</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="comment">// values gathered are less than / greater than originally recorded.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                m_Ranges.RefineMin(guid, slotIndex, minMax.first);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                m_Ranges.RefineMax(guid, slotIndex, minMax.second);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        };</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        m_Runtime-&gt;RegisterDebugCallback(m_NetworkId, rangeTrackerCallback);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// Create output tensor for EnqueueWorkload</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    std::vector&lt;armnn::BindingPointInfo&gt; outputBindings;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">auto</span> outputLayers = m_DynamicQuantizationVisitor.value().GetOutputLayers();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    std::vector&lt;TContainer&gt; outputVectors;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> outputLayerBindingId : outputLayers)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keyword">auto</span> outputTensorInfo = m_Runtime-&gt;GetOutputTensorInfo(m_NetworkId, outputLayerBindingId);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        outputBindings.push_back(std::make_pair(outputLayerBindingId, outputTensorInfo));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        outputVectors.push_back(std::vector&lt;float&gt;(outputTensorInfo.GetNumElements(), 0));</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors = armnnUtils::MakeOutputTensors&lt;TContainer&gt;(outputBindings, outputVectors);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">// Execute EnqueueWorkload with calibration image</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    m_Runtime-&gt;EnqueueWorkload(m_NetworkId, inputTensors, outputTensors);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    ++m_RefineCount;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="classarmnn_1_1_network_quantizer.xhtml#a8768a9dd173e985bfc0c72338662d631">  137</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> <a class="code" href="classarmnn_1_1_network_quantizer.xhtml#a8768a9dd173e985bfc0c72338662d631">NetworkQuantizer::ExportNetwork</a>()</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph = PolymorphicDowncast&lt;const Network*&gt;(m_InputNetwork)-&gt;GetGraph().<a class="code" href="classarmnn_1_1_graph.xhtml#a9a7209345edfdb2b066b0ceb66414d7c">TopologicalSort</a>();</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// Step 1) Walk the graph and populate default min/max values for</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// intermediate tensors, only if Runtime does not exist (created</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">// if Refine has been called)</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">if</span> (!m_Runtime)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        m_Ranges.SetDynamicMode(<span class="keyword">false</span>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <a class="code" href="classarmnn_1_1_static_range_visitor.xhtml">StaticRangeVisitor</a> rangeVisitor(m_Ranges);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9835ef753dda5b5a2fe827680e41fda7">VisitLayers</a>(graph, rangeVisitor);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="comment">// Set min/max range of non-calibrated layers to parent layer&#39;s range</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        m_DynamicQuantizationVisitor.value().VisitNonCalibratedLayers();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="comment">// now tear down the runtime and the dynamic visitor.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        m_Runtime.reset(<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        m_DynamicQuantizationVisitor = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        m_RefineCount = 0;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Step 2) Convert input InputNetwork to Quantized InputNetwork</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    std::unique_ptr&lt;IQuantizationScheme&gt; quantizationScheme;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">switch</span> (m_Options.m_ActivationFormat)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>:</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            quantizationScheme = std::make_unique&lt;QAsymmU8QuantizationScheme&gt;();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">DataType::QAsymmS8</a>:</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            quantizationScheme = std::make_unique&lt;QAsymmS8QuantizationScheme&gt;();</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">DataType::QSymmS8</a>:</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            quantizationScheme = std::make_unique&lt;QSymmS8QuantizationScheme&gt;();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">DataType::QSymmS16</a>:</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            quantizationScheme = std::make_unique&lt;QSymm16QuantizationScheme&gt;();</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Unsupported quantization target&quot;</span>);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml">QuantizerVisitor</a> quantizerVisitor(m_Ranges, quantizationScheme.get(), m_Options.m_PreserveType);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a9835ef753dda5b5a2fe827680e41fda7">VisitLayers</a>(graph, quantizerVisitor);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="comment">// clear the ranges</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    m_Ranges.Reset();</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">return</span> quantizerVisitor.RetrieveFinalNetwork();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;} <span class="comment">//namespace armn</span></div><div class="ttc" id="_tensor_i_o_utils_8hpp_xhtml"><div class="ttname"><a href="_tensor_i_o_utils_8hpp.xhtml">TensorIOUtils.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00032">Runtime.cpp:32</a></div></div>
<div class="ttc" id="_tensor_8hpp_xhtml"><div class="ttname"><a href="_tensor_8hpp.xhtml">Tensor.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_override_input_range_visitor_xhtml"><div class="ttname"><a href="classarmnn_1_1_override_input_range_visitor.xhtml">armnn::OverrideInputRangeVisitor</a></div><div class="ttdoc">Visitor object for overriding the input range of the quantized input layers in a network. </div><div class="ttdef"><b>Definition:</b> <a href="_override_input_range_visitor_8hpp_source.xhtml#l00018">OverrideInputRangeVisitor.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_network_quantizer_xhtml"><div class="ttname"><a href="classarmnn_1_1_network_quantizer.xhtml">armnn::NetworkQuantizer</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_8hpp_source.xhtml#l00020">NetworkQuantizer.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_guid_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_guid.xhtml">armnn::profiling::ProfilingGuid</a></div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00275">Types.hpp:275</a></div></div>
<div class="ttc" id="_quantizer_visitor_8hpp_xhtml"><div class="ttname"><a href="_quantizer_visitor_8hpp.xhtml">QuantizerVisitor.hpp</a></div></div>
<div class="ttc" id="_static_range_visitor_8hpp_xhtml"><div class="ttname"><a href="_static_range_visitor_8hpp.xhtml">StaticRangeVisitor.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a41119e261eec9343888d2ceab1e4999a"><div class="ttname"><a href="namespacearmnn.xhtml#a41119e261eec9343888d2ceab1e4999a">armnn::INetworkQuantizerPtr</a></div><div class="ttdeci">std::unique_ptr&lt; class INetworkQuantizer, void(*)(INetworkQuantizer *quantizer)&gt; INetworkQuantizerPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_quantizer_8hpp_source.xhtml#l00029">INetworkQuantizer.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a></div><div class="ttdoc">Main network class which provides the interface for building up a neural network. ...</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00105">INetwork.hpp:105</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00324">Tensor.hpp:324</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantizer_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_quantizer_options.xhtml">armnn::QuantizerOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_network_quantizer_8hpp_source.xhtml#l00015">INetworkQuantizer.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9835ef753dda5b5a2fe827680e41fda7"><div class="ttname"><a href="namespacearmnn.xhtml#a9835ef753dda5b5a2fe827680e41fda7">armnn::VisitLayers</a></div><div class="ttdeci">void VisitLayers(const LayerContainer &amp;layerContainer, ILayerVisitor &amp;visitor)</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_utils_8hpp_source.xhtml#l00049">NetworkQuantizerUtils.hpp:49</a></div></div>
<div class="ttc" id="_network_quantizer_8hpp_xhtml"><div class="ttname"><a href="_network_quantizer_8hpp.xhtml">NetworkQuantizer.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml_a997e96288bdb106c922202e3f33d5d7b"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml#a997e96288bdb106c922202e3f33d5d7b">armnn::RangeTracker::MinMaxRange</a></div><div class="ttdeci">std::pair&lt; float, float &gt; MinMaxRange</div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8hpp_source.xhtml#l00020">RangeTracker.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00194">Types.hpp:194</a></div></div>
<div class="ttc" id="_polymorphic_downcast_8hpp_xhtml"><div class="ttname"><a href="_polymorphic_downcast_8hpp.xhtml">PolymorphicDowncast.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_quantizer_xhtml_ad1ad5b83dc4d8bed64c29adf21c8958a"><div class="ttname"><a href="classarmnn_1_1_i_network_quantizer.xhtml#ad1ad5b83dc4d8bed64c29adf21c8958a">armnn::INetworkQuantizer::Destroy</a></div><div class="ttdeci">static void Destroy(INetworkQuantizer *quantizer)</div><div class="ttdoc">Destroy Quantizer object. </div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_8cpp_source.xhtml#l00046">NetworkQuantizer.cpp:46</a></div></div>
<div class="ttc" id="classarmnn_1_1_static_range_visitor_xhtml"><div class="ttname"><a href="classarmnn_1_1_static_range_visitor.xhtml">armnn::StaticRangeVisitor</a></div><div class="ttdoc">Visitor class to establish min/max ranges based on the type of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="_static_range_visitor_8hpp_source.xhtml#l00019">StaticRangeVisitor.hpp:19</a></div></div>
<div class="ttc" id="_override_input_range_visitor_8hpp_xhtml"><div class="ttname"><a href="_override_input_range_visitor_8hpp.xhtml">OverrideInputRangeVisitor.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_network_quantizer_xhtml_acff529f0d8ffed99123e3a729942be12"><div class="ttname"><a href="classarmnn_1_1_network_quantizer.xhtml#acff529f0d8ffed99123e3a729942be12">armnn::NetworkQuantizer::Refine</a></div><div class="ttdeci">void Refine(const InputTensors &amp;inputTensors) override</div><div class="ttdoc">Refine input network with a set of refinement data for specified LayerBindingId. </div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_8cpp_source.xhtml#l00061">NetworkQuantizer.cpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_network_quantizer_xhtml_a0de9803a30020e30ec8c9c0ba8592dc6"><div class="ttname"><a href="classarmnn_1_1_network_quantizer.xhtml#a0de9803a30020e30ec8c9c0ba8592dc6">armnn::NetworkQuantizer::OverrideInputRange</a></div><div class="ttdeci">void OverrideInputRange(LayerBindingId layerId, float min, float max) override</div><div class="ttdoc">Overrides the default quantization values for the input layer with the given id. </div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_8cpp_source.xhtml#l00051">NetworkQuantizer.cpp:51</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01014">Network.cpp:1014</a></div></div>
<div class="ttc" id="_i_layer_visitor_8hpp_xhtml"><div class="ttname"><a href="_i_layer_visitor_8hpp.xhtml">ILayerVisitor.hpp</a></div></div>
<div class="ttc" id="_graph_8hpp_xhtml"><div class="ttname"><a href="_graph_8hpp.xhtml">Graph.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00015">ITensorHandle.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="_types_8hpp_xhtml"><div class="ttname"><a href="_types_8hpp.xhtml">Types.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_quantizer_xhtml_ab8c40aedacd27ec921e53f3a022e6a63"><div class="ttname"><a href="classarmnn_1_1_i_network_quantizer.xhtml#ab8c40aedacd27ec921e53f3a022e6a63">armnn::INetworkQuantizer::CreateRaw</a></div><div class="ttdeci">static INetworkQuantizer * CreateRaw(INetwork *inputNetwork, const QuantizerOptions &amp;options=QuantizerOptions())</div><div class="ttdoc">Create Quantizer object and return raw pointer. </div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_8cpp_source.xhtml#l00036">NetworkQuantizer.cpp:36</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00325">Tensor.hpp:325</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00593">INetwork.hpp:593</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_a1c9097ab13afc54b48c503c6487aaee1"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a1c9097ab13afc54b48c503c6487aaee1">armnnUtils::FindMinMax</a></div><div class="ttdeci">std::pair&lt; float, float &gt; FindMinMax(armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_utils_8cpp_source.xhtml#l00058">TensorUtils.cpp:58</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml">armnn::QuantizerVisitor</a></div><div class="ttdoc">Visitor object for quantizing layers in a network. </div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8hpp_source.xhtml#l00025">QuantizerVisitor.hpp:25</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00609">INetwork.hpp:609</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="_i_network_8hpp_xhtml"><div class="ttname"><a href="_i_network_8hpp.xhtml">INetwork.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00042">IRuntime.hpp:42</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9eb69ebdaf4ceb8014e7c8a540266100"><div class="ttname"><a href="namespacearmnn.xhtml#a9eb69ebdaf4ceb8014e7c8a540266100">armnn::TContainer</a></div><div class="ttdeci">boost::variant&lt; std::vector&lt; float &gt;, std::vector&lt; int &gt;, std::vector&lt; unsigned char &gt; &gt; TContainer</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_8cpp_source.xhtml#l00034">NetworkQuantizer.cpp:34</a></div></div>
<div class="ttc" id="_layer_8hpp_xhtml"><div class="ttname"><a href="_layer_8hpp.xhtml">Layer.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="_tensor_utils_8hpp_xhtml"><div class="ttname"><a href="_tensor_utils_8hpp.xhtml">TensorUtils.hpp</a></div></div>
<div class="ttc" id="_network_8hpp_xhtml"><div class="ttname"><a href="_network_8hpp.xhtml">Network.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::DataType::QSymmS8</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_quantization_visitor_xhtml"><div class="ttname"><a href="classarmnn_1_1_dynamic_quantization_visitor.xhtml">armnn::DynamicQuantizationVisitor</a></div><div class="ttdoc">Visitor class to establish min/max ranges based on the type of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_quantization_visitor_8hpp_source.xhtml#l00019">DynamicQuantizationVisitor.hpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a9a7209345edfdb2b066b0ceb66414d7c"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a9a7209345edfdb2b066b0ceb66414d7c">armnn::Graph::TopologicalSort</a></div><div class="ttdeci">Graph &amp; TopologicalSort()</div><div class="ttdoc">Sorts layers in topological order and return this. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00178">Graph.hpp:178</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a919fb58873ef3a6549e4490e226f2eae"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a919fb58873ef3a6549e4490e226f2eae">armnn::Graph::GetInputLayers</a></div><div class="ttdeci">InputLayersAccessor GetInputLayers() const</div><div class="ttdoc">Returns a wrapper object with begin(), end() methods to iterate over the input layers in a range-base...</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00186">Graph.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00101">INetwork.hpp:101</a></div></div>
<div class="ttc" id="_dynamic_quantization_visitor_8hpp_xhtml"><div class="ttname"><a href="_dynamic_quantization_visitor_8hpp.xhtml">DynamicQuantizationVisitor.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_quantizer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_network_quantizer.xhtml">armnn::INetworkQuantizer</a></div><div class="ttdoc">Quantizer class Quantizes a float32 InputNetwork. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_quantizer_8hpp_source.xhtml#l00032">INetworkQuantizer.hpp:32</a></div></div>
<div class="ttc" id="_network_quantizer_utils_8hpp_xhtml"><div class="ttname"><a href="_network_quantizer_utils_8hpp.xhtml">NetworkQuantizerUtils.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_network_quantizer_xhtml_a8768a9dd173e985bfc0c72338662d631"><div class="ttname"><a href="classarmnn_1_1_network_quantizer.xhtml#a8768a9dd173e985bfc0c72338662d631">armnn::NetworkQuantizer::ExportNetwork</a></div><div class="ttdeci">INetworkPtr ExportNetwork() override</div><div class="ttdoc">Extract final quantized network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_8cpp_source.xhtml#l00137">NetworkQuantizer.cpp:137</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_quantizer_xhtml_a3a4d01d9351c02a703740290f226441f"><div class="ttname"><a href="classarmnn_1_1_i_network_quantizer.xhtml#a3a4d01d9351c02a703740290f226441f">armnn::INetworkQuantizer::Create</a></div><div class="ttdeci">static INetworkQuantizerPtr Create(INetwork *inputNetwork, const QuantizerOptions &amp;options=QuantizerOptions())</div><div class="ttdoc">Create Quantizer object wrapped in unique_ptr. </div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_8cpp_source.xhtml#l00041">NetworkQuantizer.cpp:41</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_network_quantizer_8cpp.xhtml">NetworkQuantizer.cpp</a></li>
    <li class="footer">Generated on Tue Aug 25 2020 12:29:39 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
