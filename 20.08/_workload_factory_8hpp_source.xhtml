<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/WorkloadFactory.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_workload_factory_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">WorkloadFactory.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_workload_factory_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_fwd_8hpp.xhtml">armnn/TensorFwd.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_optional_8hpp.xhtml">armnn/Optional.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_i_tensor_handle_8hpp.xhtml">armnn/backends/ITensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_workload_8hpp.xhtml">backendsCommon/Workload.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">class </span>Layer;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">// Workload factory interface for compute backends.</span></div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_workload_factory.xhtml">   21</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="classarmnn_1_1_i_workload_factory.xhtml#aab62208f96483015c29ad58549efedd8">   24</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#aab62208f96483015c29ad58549efedd8">~IWorkloadFactory</a>() { }</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a9f7e4296485d2812e7996089149c96d1">GetBackendId</a>() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IsLayerSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; backendId,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>&amp; layer,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;DataType&gt;</a> dataType,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                 std::string&amp; outReasonIfUnsupported);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IsLayerSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>&amp; layer,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;DataType&gt;</a> dataType,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                 std::string&amp; outReasonIfUnsupported);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a37f4eba7877deb34f4d8d64c9bcb9ab5">SupportsSubTensors</a>() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use ITensorHandleFactory::CreateSubTensorHandle instead&quot;</span>)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;ITensorHandle&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#ac043991b839903b2ba9da884e4020848">CreateSubTensorHandle</a>(<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&amp; parent,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                                                 <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> <span class="keyword">const</span>&amp; subTensorShape,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                                                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span>* subTensorOrigin</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                                                ) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#aa83593035de93eb4b6dddb9dc8f5ced6">CreateInput</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">InputQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use ITensorHandleFactory::CreateTensorHandle instead&quot;</span>)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;ITensorHandle&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo,</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                                                              <span class="keyword">const</span> <span class="keywordtype">bool</span> IsMemoryManaged = <span class="keyword">true</span>) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use ITensorHandleFactory::CreateTensorHandle instead&quot;</span>)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;ITensorHandle&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                                              <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                                              <span class="keyword">const</span> <span class="keywordtype">bool</span> IsMemoryManaged = <span class="keyword">true</span>) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use CreateElementwiseUnary instead&quot;</span>)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#ae3ba329a833bbb63961eb64d6477d691">CreateAbs</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_abs_queue_descriptor.xhtml">AbsQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">CreateActivation</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_queue_descriptor.xhtml">ActivationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;              info) <span class="keyword">const</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">CreateAddition</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;            info) <span class="keyword">const</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#ac47803c9faacfb7c10219253b99f61ca">CreateArgMinMax</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_arg_min_max_queue_descriptor.xhtml">ArgMinMaxQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;            info) <span class="keyword">const</span>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#abe1e0d40e23195022c0bc10a8aab55ea">CreateBatchNormalization</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">BatchNormalizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#af00ce13ef7dabd17cc4186d0a4991757">CreateBatchToSpaceNd</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_to_space_nd_queue_descriptor.xhtml">BatchToSpaceNdQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) <span class="keyword">const</span>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a3fa12033e9be37c529ac54a83ab43b36">CreateComparison</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_comparison_queue_descriptor.xhtml">ComparisonQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; Info) <span class="keyword">const</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a32bb8d6cf5fc028bf501252767c08b21">CreateConcat</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_concat_queue_descriptor.xhtml">ConcatQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;          info) <span class="keyword">const</span>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a963bd7acce29a83d96daeb2cea34f2f7">CreateConstant</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml">ConstantQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#af8ecac7ffd75e39c5a651932c5eaa8d2">CreateConvertBf16ToFp32</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor.xhtml">ConvertBf16ToFp32QueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a83e0a21747c1ce29b2083c1e3b1d88af">CreateConvertFp16ToFp32</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">ConvertFp16ToFp32QueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a147654e5d9af7cec3ecd957c6bd4161e">CreateConvertFp32ToBf16</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor.xhtml">ConvertFp32ToBf16QueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a2b414a001b6b31d00bfe4056fd6740c5">CreateConvertFp32ToFp16</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">ConvertFp32ToFp16QueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a2184995027cd2c9f9980206de9658855">CreateConvolution2d</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;               info) <span class="keyword">const</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a00346a3754d9411bba2e29dc1f996ac6">CreateDebug</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_debug_queue_descriptor.xhtml">DebugQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a3c3a47828ee252dca111605c9be4b072">CreateDepthToSpace</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depth_to_space_queue_descriptor.xhtml">DepthToSpaceQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#accb9759dfd2880efe0f8d2705ddee448">CreateDepthwiseConvolution2d</a>(</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">DepthwiseConvolution2dQueueDescriptor</a>&amp; descriptor, <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a3243806bf6c89df8952cc0a3601e538b">CreateDequantize</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_dequantize_queue_descriptor.xhtml">DequantizeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#ad0da07faa15302377aa97be89c57677c">CreateDetectionPostProcess</a>(</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">DetectionPostProcessQueueDescriptor</a>&amp; descriptor, <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a20bb773c7fd6253418bdedac1312cd19">CreateDivision</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_division_queue_descriptor.xhtml">DivisionQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a12d2c4e0f0b0d6b36d8a3e14bf69f9e4">CreateElementwiseUnary</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; Info) <span class="keyword">const</span>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use CreateComparison instead&quot;</span>)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a096bb62d44fadf079ea4463379d4e6aa">CreateEqual</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_equal_queue_descriptor.xhtml">EqualQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; Info) <span class="keyword">const</span>;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a42581f3d1c22e64b7f3676ea20acab0e">CreateFakeQuantization</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fake_quantization_queue_descriptor.xhtml">FakeQuantizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a40c882d6ffadc328ab14502b16d5e90c">CreateFill</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fill_queue_descriptor.xhtml">FillQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;        info) <span class="keyword">const</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#aa1a45333dc35cb5ba9ab71fca4f359e4">CreateFloor</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_floor_queue_descriptor.xhtml">FloorQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a1c193739520e08f686b347ff795ad2fe">CreateFullyConnected</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">FullyConnectedQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;                  info) <span class="keyword">const</span>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a91fe56cae7e970d90f6e7f54427e7d44">CreateGather</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_gather_queue_descriptor.xhtml">GatherQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use CreateComparison instead&quot;</span>)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a4e779d1b00a9e885497364ebd0dc24ef">CreateGreater</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_greater_queue_descriptor.xhtml">GreaterQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a96a3123d8a8290b01582d955cdcd75d5">CreateInstanceNormalization</a>(</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_instance_normalization_queue_descriptor.xhtml">InstanceNormalizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a3c86f886e36ce943f1ebc241a37f0413">CreateL2Normalization</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">L2NormalizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#adbdc0563cc7d8b6c1e3c2fb6f13871bf">CreateLogSoftmax</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">LogSoftmaxQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#ab6bd7aaf685d4e956d780f8655a6f174">CreateLstm</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a3fe27b35296a25984ab97319fd9a13d6">CreateMaximum</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_maximum_queue_descriptor.xhtml">MaximumQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#ac63f8f12f80efbe37b789d1540649470">CreateMean</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mean_queue_descriptor.xhtml">MeanQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; Info) <span class="keyword">const</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a87bf54bcdc865fd5d4f86194b3899d09">CreateMemCopy</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">MemCopyQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#af0c99a5e2a6e4a67fec8b8c5906a3552">CreateMemImport</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_import_queue_descriptor.xhtml">MemImportQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#acc3239cb7dd9434551a70d8534387069">CreateMerge</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_merge_queue_descriptor.xhtml">MergeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use CreateConcat instead&quot;</span>)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#addb710d76098d55ad2f56117b73a9f48">CreateMerger</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_concat_queue_descriptor.xhtml">MergerQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;          info) <span class="keyword">const</span>;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a8851ca32bea910cf9376d05527e3dbef">CreateMinimum</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_minimum_queue_descriptor.xhtml">MinimumQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a756955d7436dd8f6e63cdf6367eb1694">CreateMultiplication</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;                  info) <span class="keyword">const</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a185c215631e1b01a6d41232410de4c46">CreateNormalization</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_normalization_queue_descriptor.xhtml">NormalizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;                 info) <span class="keyword">const</span>;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#adb279112eb265e5531c4ac2194b6c898">CreateOutput</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">OutputQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#ab0c956e4a638d0a2777ecb71953f7e27">CreatePad</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pad_queue_descriptor.xhtml">PadQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; Info) <span class="keyword">const</span>;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a2dcee0bc4bbae1f745324aed0f841a0a">CreatePermute</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_permute_queue_descriptor.xhtml">PermuteQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;           info) <span class="keyword">const</span>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a6e95afd9a55700cbf6f9e8db8089f2f2">CreatePooling2d</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">Pooling2dQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;           info) <span class="keyword">const</span>;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a012306477c38a533edd29c422227cd8c">CreatePreCompiled</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pre_compiled_queue_descriptor.xhtml">PreCompiledQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#adf4a93f605e4e7dad6aee0b4d2159171">CreatePrelu</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_prelu_queue_descriptor.xhtml">PreluQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a1942c254ba89d17803e5a636aa927d90">CreateQuantize</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_quantize_queue_descriptor.xhtml">QuantizeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; Info) <span class="keyword">const</span>;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#ab17bf35d906f8daad42be0a0799c72ab">CreateQLstm</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">QLstmQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#ab5ceda49651dcd53fb7eb05658b5a0cb">CreateQuantizedLstm</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml">QuantizedLstmQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15e6119396b9db114f07302da82f8429">CreateRank</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_rank_queue_descriptor.xhtml">RankQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a4f9d9c79a100a0d057027d8524373962">CreateReshape</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reshape_queue_descriptor.xhtml">ReshapeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a84377c94a59c589dbf419f838c4b9119">CreateResize</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_queue_descriptor.xhtml">ResizeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use CreateResize instead&quot;</span>)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a7eb321c47cd90d2cc3823e74596f1239">CreateResizeBilinear</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_bilinear_queue_descriptor.xhtml">ResizeBilinearQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use CreateElementwiseUnary instead&quot;</span>)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a2459b9d4f72d78eab86f9ec09384c491">CreateRsqrt</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml">RsqrtQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a86658e2fc02a32acd4de20ef92242347">CreateSlice</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_slice_queue_descriptor.xhtml">SliceQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a8a843d44d2e81df87e414df3b3e688de">CreateSoftmax</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">SoftmaxQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;           info) <span class="keyword">const</span>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a44e7aebc021646becc3f32722e22553e">CreateSpaceToBatchNd</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_batch_nd_queue_descriptor.xhtml">SpaceToBatchNdQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a9bdc3801e1e964046730d49c0e11d1ce">CreateSpaceToDepth</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">SpaceToDepthQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a439305cf0a71fc85a0b93cc063100f91">CreateSubtraction</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#ac306abe0073a04300f2d96d0b5eb6218">CreateSplitter</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_splitter_queue_descriptor.xhtml">SplitterQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;            info) <span class="keyword">const</span>;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#aa06423ce3f34e4ec2d336889f8c0d79a">CreateStack</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stack_queue_descriptor.xhtml">StackQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a21344e9f338e1d4c3d26825002a02754">CreateStridedSlice</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_strided_slice_queue_descriptor.xhtml">StridedSliceQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; Info) <span class="keyword">const</span>;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#ab37f39b9e3e224ccde6b36adc876bb19">CreateSwitch</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_switch_queue_descriptor.xhtml">SwitchQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; Info) <span class="keyword">const</span>;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a96217a8bbb66811608ce729fd49a3dd2">CreateTranspose</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_queue_descriptor.xhtml">TransposeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a12cccba82124cc4993868a3173a65167">CreateTransposeConvolution2d</a>(</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">TransposeConvolution2dQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const</span>;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;};</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="structarmnn_1_1_multiplication_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">armnn::MultiplicationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00228">WorkloadData.hpp:228</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_ac306abe0073a04300f2d96d0b5eb6218"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#ac306abe0073a04300f2d96d0b5eb6218">armnn::IWorkloadFactory::CreateSplitter</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateSplitter(const SplitterQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01566">WorkloadFactory.cpp:1566</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_queue_descriptor.xhtml">armnn::InstanceNormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00322">WorkloadData.hpp:322</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_abe1e0d40e23195022c0bc10a8aab55ea"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#abe1e0d40e23195022c0bc10a8aab55ea">armnn::IWorkloadFactory::CreateBatchNormalization</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateBatchNormalization(const BatchNormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01248">WorkloadFactory.cpp:1248</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_permute_queue_descriptor.xhtml">armnn::PermuteQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00162">WorkloadData.hpp:162</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a00346a3754d9411bba2e29dc1f996ac6"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a00346a3754d9411bba2e29dc1f996ac6">armnn::IWorkloadFactory::CreateDebug</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateDebug(const DebugQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01308">WorkloadFactory.cpp:1308</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a87bf54bcdc865fd5d4f86194b3899d09"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a87bf54bcdc865fd5d4f86194b3899d09">armnn::IWorkloadFactory::CreateMemCopy</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateMemCopy(const MemCopyQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01429">WorkloadFactory.cpp:1429</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a9f7e4296485d2812e7996089149c96d1"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a9f7e4296485d2812e7996089149c96d1">armnn::IWorkloadFactory::GetBackendId</a></div><div class="ttdeci">virtual const BackendId &amp; GetBackendId() const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a3c86f886e36ce943f1ebc241a37f0413"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a3c86f886e36ce943f1ebc241a37f0413">armnn::IWorkloadFactory::CreateL2Normalization</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateL2Normalization(const L2NormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01399">WorkloadFactory.cpp:1399</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantize_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_quantize_queue_descriptor.xhtml">armnn::QuantizeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00263">WorkloadData.hpp:263</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_af00ce13ef7dabd17cc4186d0a4991757"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#af00ce13ef7dabd17cc4186d0a4991757">armnn::IWorkloadFactory::CreateBatchToSpaceNd</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateBatchToSpaceNd(const BatchToSpaceNdQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01254">WorkloadFactory.cpp:1254</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a756955d7436dd8f6e63cdf6367eb1694"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a756955d7436dd8f6e63cdf6367eb1694">armnn::IWorkloadFactory::CreateMultiplication</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateMultiplication(const MultiplicationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01459">WorkloadFactory.cpp:1459</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00049">Types.hpp:49</a></div></div>
<div class="ttc" id="structarmnn_1_1_maximum_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_maximum_queue_descriptor.xhtml">armnn::MaximumQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00246">WorkloadData.hpp:246</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">armnn::DetectionPostProcessQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00203">WorkloadData.hpp:203</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a96a3123d8a8290b01582d955cdcd75d5"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a96a3123d8a8290b01582d955cdcd75d5">armnn::IWorkloadFactory::CreateInstanceNormalization</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateInstanceNormalization(const InstanceNormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01392">WorkloadFactory.cpp:1392</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a4e779d1b00a9e885497364ebd0dc24ef"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a4e779d1b00a9e885497364ebd0dc24ef">armnn::IWorkloadFactory::CreateGreater</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateGreater(const GreaterQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01386">WorkloadFactory.cpp:1386</a></div></div>
<div class="ttc" id="structarmnn_1_1_gather_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_gather_queue_descriptor.xhtml">armnn::GatherQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00479">WorkloadData.hpp:479</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_ac47803c9faacfb7c10219253b99f61ca"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#ac47803c9faacfb7c10219253b99f61ca">armnn::IWorkloadFactory::CreateArgMinMax</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateArgMinMax(const ArgMinMaxQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01242">WorkloadFactory.cpp:1242</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_addb710d76098d55ad2f56117b73a9f48"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#addb710d76098d55ad2f56117b73a9f48">armnn::IWorkloadFactory::CreateMerger</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateMerger(const MergerQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01447">WorkloadFactory.cpp:1447</a></div></div>
<div class="ttc" id="structarmnn_1_1_splitter_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_splitter_queue_descriptor.xhtml">armnn::SplitterQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00083">WorkloadData.hpp:83</a></div></div>
<div class="ttc" id="structarmnn_1_1_constant_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_constant_queue_descriptor.xhtml">armnn::ConstantQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00337">WorkloadData.hpp:337</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml">armnn::QuantizedLstmQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00586">WorkloadData.hpp:586</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_adbdc0563cc7d8b6c1e3c2fb6f13871bf"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#adbdc0563cc7d8b6c1e3c2fb6f13871bf">armnn::IWorkloadFactory::CreateLogSoftmax</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateLogSoftmax(const LogSoftmaxQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01405">WorkloadFactory.cpp:1405</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a7eb321c47cd90d2cc3823e74596f1239"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a7eb321c47cd90d2cc3823e74596f1239">armnn::IWorkloadFactory::CreateResizeBilinear</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateResizeBilinear(const ResizeBilinearQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01536">WorkloadFactory.cpp:1536</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8hpp_source.xhtml#l00021">WorkloadFactory.hpp:21</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor.xhtml">armnn::ConvertBf16ToFp32QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00421">WorkloadData.hpp:421</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a21344e9f338e1d4c3d26825002a02754"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a21344e9f338e1d4c3d26825002a02754">armnn::IWorkloadFactory::CreateStridedSlice</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateStridedSlice(const StridedSliceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01590">WorkloadFactory.cpp:1590</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_aa06423ce3f34e4ec2d336889f8c0d79a"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#aa06423ce3f34e4ec2d336889f8c0d79a">armnn::IWorkloadFactory::CreateStack</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateStack(const StackQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01584">WorkloadFactory.cpp:1584</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_ab6bd7aaf685d4e956d780f8655a6f174"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#ab6bd7aaf685d4e956d780f8655a6f174">armnn::IWorkloadFactory::CreateLstm</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateLstm(const LstmQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01411">WorkloadFactory.cpp:1411</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_ac043991b839903b2ba9da884e4020848"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#ac043991b839903b2ba9da884e4020848">armnn::IWorkloadFactory::CreateSubTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateSubTensorHandle(ITensorHandle &amp;parent, TensorShape const &amp;subTensorShape, unsigned int const *subTensorOrigin) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a42581f3d1c22e64b7f3676ea20acab0e"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a42581f3d1c22e64b7f3676ea20acab0e">armnn::IWorkloadFactory::CreateFakeQuantization</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateFakeQuantization(const FakeQuantizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01356">WorkloadFactory.cpp:1356</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_ab5ceda49651dcd53fb7eb05658b5a0cb"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#ab5ceda49651dcd53fb7eb05658b5a0cb">armnn::IWorkloadFactory::CreateQuantizedLstm</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateQuantizedLstm(const QuantizedLstmQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01519">WorkloadFactory.cpp:1519</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stack_queue_descriptor.xhtml">armnn::StackQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00124">WorkloadData.hpp:124</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_ab17bf35d906f8daad42be0a0799c72ab"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#ab17bf35d906f8daad42be0a0799c72ab">armnn::IWorkloadFactory::CreateQLstm</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateQLstm(const QLstmQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01513">WorkloadFactory.cpp:1513</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a963bd7acce29a83d96daeb2cea34f2f7"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a963bd7acce29a83d96daeb2cea34f2f7">armnn::IWorkloadFactory::CreateConstant</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateConstant(const ConstantQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01272">WorkloadFactory.cpp:1272</a></div></div>
<div class="ttc" id="structarmnn_1_1_rsqrt_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml">armnn::RsqrtQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00474">WorkloadData.hpp:474</a></div></div>
<div class="ttc" id="structarmnn_1_1_merge_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_merge_queue_descriptor.xhtml">armnn::MergeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00501">WorkloadData.hpp:501</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a12d2c4e0f0b0d6b36d8a3e14bf69f9e4"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a12d2c4e0f0b0d6b36d8a3e14bf69f9e4">armnn::IWorkloadFactory::CreateElementwiseUnary</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateElementwiseUnary(const ElementwiseUnaryQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01344">WorkloadFactory.cpp:1344</a></div></div>
<div class="ttc" id="structarmnn_1_1_addition_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00222">WorkloadData.hpp:222</a></div></div>
<div class="ttc" id="structarmnn_1_1_minimum_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_minimum_queue_descriptor.xhtml">armnn::MinimumQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00452">WorkloadData.hpp:452</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_aab62208f96483015c29ad58549efedd8"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#aab62208f96483015c29ad58549efedd8">armnn::IWorkloadFactory::~IWorkloadFactory</a></div><div class="ttdeci">virtual ~IWorkloadFactory()</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8hpp_source.xhtml#l00024">WorkloadFactory.hpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_ae3ba329a833bbb63961eb64d6477d691"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#ae3ba329a833bbb63961eb64d6477d691">armnn::IWorkloadFactory::CreateAbs</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateAbs(const AbsQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01224">WorkloadFactory.cpp:1224</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">armnn::FullyConnectedQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00147">WorkloadData.hpp:147</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a4458d75c0db21c6abc941cd93a6a24c5"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">armnn::IWorkloadFactory::CreateActivation</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateActivation(const ActivationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01230">WorkloadFactory.cpp:1230</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a2459b9d4f72d78eab86f9ec09384c491"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a2459b9d4f72d78eab86f9ec09384c491">armnn::IWorkloadFactory::CreateRsqrt</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateRsqrt(const RsqrtQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01548">WorkloadFactory.cpp:1548</a></div></div>
<div class="ttc" id="structarmnn_1_1_prelu_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_prelu_queue_descriptor.xhtml">armnn::PreluQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00511">WorkloadData.hpp:511</a></div></div>
<div class="ttc" id="structarmnn_1_1_equal_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_equal_queue_descriptor.xhtml">armnn::EqualQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00269">WorkloadData.hpp:269</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a96217a8bbb66811608ce729fd49a3dd2"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a96217a8bbb66811608ce729fd49a3dd2">armnn::IWorkloadFactory::CreateTranspose</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateTranspose(const TransposeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01608">WorkloadFactory.cpp:1608</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_queue_descriptor.xhtml">armnn::BatchToSpaceNdQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00441">WorkloadData.hpp:441</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_queue_descriptor.xhtml">armnn::SoftmaxQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00077">WorkloadData.hpp:77</a></div></div>
<div class="ttc" id="structarmnn_1_1_division_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_division_queue_descriptor.xhtml">armnn::DivisionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00234">WorkloadData.hpp:234</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a20bb773c7fd6253418bdedac1312cd19"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a20bb773c7fd6253418bdedac1312cd19">armnn::IWorkloadFactory::CreateDivision</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateDivision(const DivisionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01338">WorkloadFactory.cpp:1338</a></div></div>
<div class="ttc" id="structarmnn_1_1_subtraction_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">armnn::SubtractionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00240">WorkloadData.hpp:240</a></div></div>
<div class="ttc" id="_tensor_fwd_8hpp_xhtml"><div class="ttname"><a href="_tensor_fwd_8hpp.xhtml">TensorFwd.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a147654e5d9af7cec3ecd957c6bd4161e"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a147654e5d9af7cec3ecd957c6bd4161e">armnn::IWorkloadFactory::CreateConvertFp32ToBf16</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateConvertFp32ToBf16(const ConvertFp32ToBf16QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01290">WorkloadFactory.cpp:1290</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pad_queue_descriptor.xhtml">armnn::PadQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00258">WorkloadData.hpp:258</a></div></div>
<div class="ttc" id="structarmnn_1_1_concat_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_concat_queue_descriptor.xhtml">armnn::ConcatQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00102">WorkloadData.hpp:102</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a3fe27b35296a25984ab97319fd9a13d6"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a3fe27b35296a25984ab97319fd9a13d6">armnn::IWorkloadFactory::CreateMaximum</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateMaximum(const MaximumQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01417">WorkloadFactory.cpp:1417</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a32bb8d6cf5fc028bf501252767c08b21"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a32bb8d6cf5fc028bf501252767c08b21">armnn::IWorkloadFactory::CreateConcat</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateConcat(const ConcatQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01266">WorkloadFactory.cpp:1266</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875"><div class="ttname"><a href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::LogSeverity::Info</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">armnn::SpaceToDepthQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00359">WorkloadData.hpp:359</a></div></div>
<div class="ttc" id="structarmnn_1_1_abs_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_abs_queue_descriptor.xhtml">armnn::AbsQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00623">WorkloadData.hpp:623</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_aa83593035de93eb4b6dddb9dc8f5ced6"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#aa83593035de93eb4b6dddb9dc8f5ced6">armnn::IWorkloadFactory::CreateInput</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateInput(const InputQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const =0</div></div>
<div class="ttc" id="structarmnn_1_1_resize_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_queue_descriptor.xhtml">armnn::ResizeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00303">WorkloadData.hpp:303</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_acc3239cb7dd9434551a70d8534387069"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#acc3239cb7dd9434551a70d8534387069">armnn::IWorkloadFactory::CreateMerge</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateMerge(const MergeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01441">WorkloadFactory.cpp:1441</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_queue_descriptor.xhtml">armnn::SpaceToBatchNdQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00354">WorkloadData.hpp:354</a></div></div>
<div class="ttc" id="structarmnn_1_1_floor_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_floor_queue_descriptor.xhtml">armnn::FloorQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00364">WorkloadData.hpp:364</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_af8ecac7ffd75e39c5a651932c5eaa8d2"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#af8ecac7ffd75e39c5a651932c5eaa8d2">armnn::IWorkloadFactory::CreateConvertBf16ToFp32</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateConvertBf16ToFp32(const ConvertBf16ToFp32QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01278">WorkloadFactory.cpp:1278</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a096bb62d44fadf079ea4463379d4e6aa"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a096bb62d44fadf079ea4463379d4e6aa">armnn::IWorkloadFactory::CreateEqual</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateEqual(const EqualQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01350">WorkloadFactory.cpp:1350</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15e6119396b9db114f07302da82f8429"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15e6119396b9db114f07302da82f8429">armnn::IWorkloadFactory::CreateRank</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateRank(const RankQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01524">WorkloadFactory.cpp:1524</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_ad0da07faa15302377aa97be89c57677c"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#ad0da07faa15302377aa97be89c57677c">armnn::IWorkloadFactory::CreateDetectionPostProcess</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateDetectionPostProcess(const DetectionPostProcessQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01332">WorkloadFactory.cpp:1332</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_bilinear_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_bilinear_queue_descriptor.xhtml">armnn::ResizeBilinearQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00298">WorkloadData.hpp:298</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a44e7aebc021646becc3f32722e22553e"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a44e7aebc021646becc3f32722e22553e">armnn::IWorkloadFactory::CreateSpaceToBatchNd</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateSpaceToBatchNd(const SpaceToBatchNdQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01572">WorkloadFactory.cpp:1572</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a84377c94a59c589dbf419f838c4b9119"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a84377c94a59c589dbf419f838c4b9119">armnn::IWorkloadFactory::CreateResize</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateResize(const ResizeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01542">WorkloadFactory.cpp:1542</a></div></div>
<div class="ttc" id="structarmnn_1_1_fake_quantization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fake_quantization_queue_descriptor.xhtml">armnn::FakeQuantizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00308">WorkloadData.hpp:308</a></div></div>
<div class="ttc" id="_optional_8hpp_xhtml"><div class="ttname"><a href="_optional_8hpp.xhtml">Optional.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_queue_descriptor.xhtml">armnn::LstmQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00369">WorkloadData.hpp:369</a></div></div>
<div class="ttc" id="structarmnn_1_1_greater_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_greater_queue_descriptor.xhtml">armnn::GreaterQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00458">WorkloadData.hpp:458</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00015">ITensorHandle.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a1942c254ba89d17803e5a636aa927d90"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a1942c254ba89d17803e5a636aa927d90">armnn::IWorkloadFactory::CreateQuantize</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateQuantize(const QuantizeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01507">WorkloadFactory.cpp:1507</a></div></div>
<div class="ttc" id="structarmnn_1_1_comparison_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_comparison_queue_descriptor.xhtml">armnn::ComparisonQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00638">WorkloadData.hpp:638</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_ab37f39b9e3e224ccde6b36adc876bb19"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#ab37f39b9e3e224ccde6b36adc876bb19">armnn::IWorkloadFactory::CreateSwitch</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateSwitch(const SwitchQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01602">WorkloadFactory.cpp:1602</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_ab0c956e4a638d0a2777ecb71953f7e27"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#ab0c956e4a638d0a2777ecb71953f7e27">armnn::IWorkloadFactory::CreatePad</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreatePad(const PadQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01477">WorkloadFactory.cpp:1477</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">armnn::ConvertFp16ToFp32QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00431">WorkloadData.hpp:431</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a74dc9ec1a223eab8b072368b2dacee87"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">armnn::IWorkloadFactory::IsLayerSupported</a></div><div class="ttdeci">static bool IsLayerSupported(const BackendId &amp;backendId, const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l00042">WorkloadFactory.cpp:42</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a185c215631e1b01a6d41232410de4c46"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a185c215631e1b01a6d41232410de4c46">armnn::IWorkloadFactory::CreateNormalization</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateNormalization(const NormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01465">WorkloadFactory.cpp:1465</a></div></div>
<div class="ttc" id="structarmnn_1_1_rank_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_rank_queue_descriptor.xhtml">armnn::RankQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00293">WorkloadData.hpp:293</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a4f9d9c79a100a0d057027d8524373962"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a4f9d9c79a100a0d057027d8524373962">armnn::IWorkloadFactory::CreateReshape</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateReshape(const ReshapeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01530">WorkloadFactory.cpp:1530</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15c140be4ddceffee16436f009d3ed94"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">armnn::IWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a2dcee0bc4bbae1f745324aed0f841a0a"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a2dcee0bc4bbae1f745324aed0f841a0a">armnn::IWorkloadFactory::CreatePermute</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreatePermute(const PermuteQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01483">WorkloadFactory.cpp:1483</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a40c882d6ffadc328ab14502b16d5e90c"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a40c882d6ffadc328ab14502b16d5e90c">armnn::IWorkloadFactory::CreateFill</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateFill(const FillQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01362">WorkloadFactory.cpp:1362</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a3fa12033e9be37c529ac54a83ab43b36"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a3fa12033e9be37c529ac54a83ab43b36">armnn::IWorkloadFactory::CreateComparison</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateComparison(const ComparisonQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01260">WorkloadFactory.cpp:1260</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">armnn::ConvertFp32ToFp16QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00436">WorkloadData.hpp:436</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a6e95afd9a55700cbf6f9e8db8089f2f2"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a6e95afd9a55700cbf6f9e8db8089f2f2">armnn::IWorkloadFactory::CreatePooling2d</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreatePooling2d(const Pooling2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01489">WorkloadFactory.cpp:1489</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">armnn::TransposeConvolution2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00516">WorkloadData.hpp:516</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">armnn::Convolution2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00174">WorkloadData.hpp:174</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a9bdc3801e1e964046730d49c0e11d1ce"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a9bdc3801e1e964046730d49c0e11d1ce">armnn::IWorkloadFactory::CreateSpaceToDepth</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateSpaceToDepth(const SpaceToDepthQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01578">WorkloadFactory.cpp:1578</a></div></div>
<div class="ttc" id="structarmnn_1_1_mem_copy_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">armnn::MemCopyQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00058">WorkloadData.hpp:58</a></div></div>
<div class="ttc" id="structarmnn_1_1_fill_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fill_queue_descriptor.xhtml">armnn::FillQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00141">WorkloadData.hpp:141</a></div></div>
<div class="ttc" id="structarmnn_1_1_slice_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_slice_queue_descriptor.xhtml">armnn::SliceQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00628">WorkloadData.hpp:628</a></div></div>
<div class="ttc" id="_workload_8hpp_xhtml"><div class="ttname"><a href="_workload_8hpp.xhtml">Workload.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_depth_to_space_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depth_to_space_queue_descriptor.xhtml">armnn::DepthToSpaceQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00633">WorkloadData.hpp:633</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a91fe56cae7e970d90f6e7f54427e7d44"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a91fe56cae7e970d90f6e7f54427e7d44">armnn::IWorkloadFactory::CreateGather</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateGather(const GatherQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01380">WorkloadFactory.cpp:1380</a></div></div>
<div class="ttc" id="structarmnn_1_1_l2_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">armnn::L2NormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00327">WorkloadData.hpp:327</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a2b414a001b6b31d00bfe4056fd6740c5"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a2b414a001b6b31d00bfe4056fd6740c5">armnn::IWorkloadFactory::CreateConvertFp32ToFp16</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateConvertFp32ToFp16(const ConvertFp32ToFp16QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01296">WorkloadFactory.cpp:1296</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a8851ca32bea910cf9376d05527e3dbef"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a8851ca32bea910cf9376d05527e3dbef">armnn::IWorkloadFactory::CreateMinimum</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateMinimum(const MinimumQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01453">WorkloadFactory.cpp:1453</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_queue_descriptor.xhtml">armnn::TransposeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00529">WorkloadData.hpp:529</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_strided_slice_queue_descriptor.xhtml">armnn::StridedSliceQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00446">WorkloadData.hpp:446</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">armnn::QLstmQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00534">WorkloadData.hpp:534</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_queue_descriptor.xhtml">armnn::ArgMinMaxQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00135">WorkloadData.hpp:135</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a3c3a47828ee252dca111605c9be4b072"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a3c3a47828ee252dca111605c9be4b072">armnn::IWorkloadFactory::CreateDepthToSpace</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateDepthToSpace(const DepthToSpaceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01314">WorkloadFactory.cpp:1314</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a86658e2fc02a32acd4de20ef92242347"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a86658e2fc02a32acd4de20ef92242347">armnn::IWorkloadFactory::CreateSlice</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateSlice(const SliceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01554">WorkloadFactory.cpp:1554</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_acf187617ed4cdd6625b396d6b194923e"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">armnn::IWorkloadFactory::CreateAddition</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateAddition(const AdditionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01236">WorkloadFactory.cpp:1236</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">armnn::BatchNormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00275">WorkloadData.hpp:275</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a12cccba82124cc4993868a3173a65167"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a12cccba82124cc4993868a3173a65167">armnn::IWorkloadFactory::CreateTransposeConvolution2d</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateTransposeConvolution2d(const TransposeConvolution2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01614">WorkloadFactory.cpp:1614</a></div></div>
<div class="ttc" id="structarmnn_1_1_mem_import_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mem_import_queue_descriptor.xhtml">armnn::MemImportQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00066">WorkloadData.hpp:66</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_ac63f8f12f80efbe37b789d1540649470"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#ac63f8f12f80efbe37b789d1540649470">armnn::IWorkloadFactory::CreateMean</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateMean(const MeanQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01423">WorkloadFactory.cpp:1423</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor.xhtml">armnn::ConvertFp32ToBf16QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00426">WorkloadData.hpp:426</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_adb279112eb265e5531c4ac2194b6c898"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#adb279112eb265e5531c4ac2194b6c898">armnn::IWorkloadFactory::CreateOutput</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateOutput(const OutputQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01471">WorkloadFactory.cpp:1471</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a8a843d44d2e81df87e414df3b3e688de"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a8a843d44d2e81df87e414df3b3e688de">armnn::IWorkloadFactory::CreateSoftmax</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateSoftmax(const SoftmaxQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01560">WorkloadFactory.cpp:1560</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="structarmnn_1_1_switch_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_switch_queue_descriptor.xhtml">armnn::SwitchQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00506">WorkloadData.hpp:506</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_a76fb13a018f8e01087a7ae0eb23509e1"><div class="ttname"><a href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a></div><div class="ttdeci">#define ARMNN_DEPRECATED_MSG(message)</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00043">Deprecated.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a1c193739520e08f686b347ff795ad2fe"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a1c193739520e08f686b347ff795ad2fe">armnn::IWorkloadFactory::CreateFullyConnected</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateFullyConnected(const FullyConnectedQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01374">WorkloadFactory.cpp:1374</a></div></div>
<div class="ttc" id="structarmnn_1_1_pre_compiled_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pre_compiled_queue_descriptor.xhtml">armnn::PreCompiledQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00484">WorkloadData.hpp:484</a></div></div>
<div class="ttc" id="structarmnn_1_1_dequantize_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_dequantize_queue_descriptor.xhtml">armnn::DequantizeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00496">WorkloadData.hpp:496</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">armnn::Pooling2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00168">WorkloadData.hpp:168</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_accb9759dfd2880efe0f8d2705ddee448"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#accb9759dfd2880efe0f8d2705ddee448">armnn::IWorkloadFactory::CreateDepthwiseConvolution2d</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateDepthwiseConvolution2d(const DepthwiseConvolution2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01320">WorkloadFactory.cpp:1320</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_aa1a45333dc35cb5ba9ab71fca4f359e4"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#aa1a45333dc35cb5ba9ab71fca4f359e4">armnn::IWorkloadFactory::CreateFloor</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateFloor(const FloorQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01368">WorkloadFactory.cpp:1368</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_af0c99a5e2a6e4a67fec8b8c5906a3552"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#af0c99a5e2a6e4a67fec8b8c5906a3552">armnn::IWorkloadFactory::CreateMemImport</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateMemImport(const MemImportQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01435">WorkloadFactory.cpp:1435</a></div></div>
<div class="ttc" id="structarmnn_1_1_mean_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mean_queue_descriptor.xhtml">armnn::MeanQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00252">WorkloadData.hpp:252</a></div></div>
<div class="ttc" id="structarmnn_1_1_log_softmax_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">armnn::LogSoftmaxQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00332">WorkloadData.hpp:332</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_i_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_i_tensor_handle_8hpp.xhtml">ITensorHandle.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a439305cf0a71fc85a0b93cc063100f91"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a439305cf0a71fc85a0b93cc063100f91">armnn::IWorkloadFactory::CreateSubtraction</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateSubtraction(const SubtractionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01596">WorkloadFactory.cpp:1596</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reshape_queue_descriptor.xhtml">armnn::ReshapeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00349">WorkloadData.hpp:349</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a012306477c38a533edd29c422227cd8c"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a012306477c38a533edd29c422227cd8c">armnn::IWorkloadFactory::CreatePreCompiled</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreatePreCompiled(const PreCompiledQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01495">WorkloadFactory.cpp:1495</a></div></div>
<div class="ttc" id="structarmnn_1_1_debug_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_debug_queue_descriptor.xhtml">armnn::DebugQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00463">WorkloadData.hpp:463</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">armnn::ElementwiseUnaryQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00643">WorkloadData.hpp:643</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a83e0a21747c1ce29b2083c1e3b1d88af"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a83e0a21747c1ce29b2083c1e3b1d88af">armnn::IWorkloadFactory::CreateConvertFp16ToFp32</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateConvertFp16ToFp32(const ConvertFp16ToFp32QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01284">WorkloadFactory.cpp:1284</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">armnn::DepthwiseConvolution2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00189">WorkloadData.hpp:189</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00130">WorkloadData.hpp:130</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a2184995027cd2c9f9980206de9658855"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a2184995027cd2c9f9980206de9658855">armnn::IWorkloadFactory::CreateConvolution2d</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateConvolution2d(const Convolution2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01302">WorkloadFactory.cpp:1302</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_adf4a93f605e4e7dad6aee0b4d2159171"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#adf4a93f605e4e7dad6aee0b4d2159171">armnn::IWorkloadFactory::CreatePrelu</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreatePrelu(const PreluQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01501">WorkloadFactory.cpp:1501</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_normalization_queue_descriptor.xhtml">armnn::NormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00216">WorkloadData.hpp:216</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a37f4eba7877deb34f4d8d64c9bcb9ab5"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a37f4eba7877deb34f4d8d64c9bcb9ab5">armnn::IWorkloadFactory::SupportsSubTensors</a></div><div class="ttdeci">virtual bool SupportsSubTensors() const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a3243806bf6c89df8952cc0a3601e538b"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a3243806bf6c89df8952cc0a3601e538b">armnn::IWorkloadFactory::CreateDequantize</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateDequantize(const DequantizeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01326">WorkloadFactory.cpp:1326</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="_workload_factory_8hpp.xhtml">WorkloadFactory.hpp</a></li>
    <li class="footer">Generated on Tue Aug 25 2020 12:29:42 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
