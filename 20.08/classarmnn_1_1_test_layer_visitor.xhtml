<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: TestLayerVisitor Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_test_layer_visitor.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="classarmnn_1_1_test_layer_visitor-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">TestLayerVisitor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_test_layer_visitor_8hpp_source.xhtml">TestLayerVisitor.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for TestLayerVisitor:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_test_layer_visitor.png" usemap="#TestLayerVisitor_map" alt=""/>
  <map id="TestLayerVisitor_map" name="TestLayerVisitor_map">
<area href="classarmnn_1_1_layer_visitor_base.xhtml" alt="LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;" shape="rect" coords="0,56,255,80"/>
<area href="classarmnn_1_1_i_layer_visitor.xhtml" alt="ILayerVisitor" shape="rect" coords="0,0,255,24"/>
<area href="classarmnn_1_1_test_batch_normalization_layer_visitor.xhtml" alt="TestBatchNormalizationLayerVisitor" shape="rect" coords="265,168,520,192"/>
<area href="classarmnn_1_1_test_constant_layer_visitor.xhtml" alt="TestConstantLayerVisitor" shape="rect" coords="265,224,520,248"/>
<area href="classarmnn_1_1_test_convolution2d_layer_visitor.xhtml" alt="TestConvolution2dLayerVisitor" shape="rect" coords="265,280,520,304"/>
<area href="classarmnn_1_1_test_depthwise_convolution2d_layer_visitor.xhtml" alt="TestDepthwiseConvolution2dLayerVisitor" shape="rect" coords="265,336,520,360"/>
<area href="classarmnn_1_1_test_fully_connected_layer_vistor.xhtml" alt="TestFullyConnectedLayerVistor" shape="rect" coords="265,392,520,416"/>
<area href="classarmnn_1_1_test_input_layer_visitor.xhtml" alt="TestInputLayerVisitor" shape="rect" coords="265,448,520,472"/>
<area href="classarmnn_1_1_test_lstm_layer_visitor.xhtml" alt="TestLstmLayerVisitor" shape="rect" coords="265,504,520,528"/>
<area href="classarmnn_1_1_test_output_layer_visitor.xhtml" alt="TestOutputLayerVisitor" shape="rect" coords="265,560,520,584"/>
<area href="classarmnn_1_1_test_q_lstm_layer_visitor.xhtml" alt="TestQLstmLayerVisitor" shape="rect" coords="265,616,520,640"/>
<area href="classarmnn_1_1_test_quantized_lstm_layer_visitor.xhtml" alt="TestQuantizedLstmLayerVisitor" shape="rect" coords="265,672,520,696"/>
<area href="class_test_activation_layer_visitor.xhtml" alt="TestActivationLayerVisitor" shape="rect" coords="265,728,520,752"/>
<area href="class_test_addition_layer_visitor.xhtml" alt="TestAdditionLayerVisitor" shape="rect" coords="265,784,520,808"/>
<area href="class_test_arg_min_max_layer_visitor.xhtml" alt="TestArgMinMaxLayerVisitor" shape="rect" coords="265,840,520,864"/>
<area href="class_test_batch_to_space_nd_layer_visitor.xhtml" alt="TestBatchToSpaceNdLayerVisitor" shape="rect" coords="265,896,520,920"/>
<area href="class_test_comparison_layer_visitor.xhtml" alt="TestComparisonLayerVisitor" shape="rect" coords="265,952,520,976"/>
<area href="class_test_concat_layer_visitor.xhtml" alt="TestConcatLayerVisitor" shape="rect" coords="265,1008,520,1032"/>
<area href="class_test_depth_to_space_layer_visitor.xhtml" alt="TestDepthToSpaceLayerVisitor" shape="rect" coords="265,1064,520,1088"/>
<area href="class_test_dequantize_layer_visitor.xhtml" alt="TestDequantizeLayerVisitor" shape="rect" coords="265,1120,520,1144"/>
<area href="class_test_division_layer_visitor.xhtml" alt="TestDivisionLayerVisitor" shape="rect" coords="265,1176,520,1200"/>
<area href="class_test_elementwise_unary_layer_visitor.xhtml" alt="TestElementwiseUnaryLayerVisitor" shape="rect" coords="265,1232,520,1256"/>
<area href="class_test_fill_layer_visitor.xhtml" alt="TestFillLayerVisitor" shape="rect" coords="265,1288,520,1312"/>
<area href="class_test_floor_layer_visitor.xhtml" alt="TestFloorLayerVisitor" shape="rect" coords="265,1344,520,1368"/>
<area href="class_test_gather_layer_visitor.xhtml" alt="TestGatherLayerVisitor" shape="rect" coords="265,1400,520,1424"/>
<area href="class_test_instance_normalization_layer_visitor.xhtml" alt="TestInstanceNormalizationLayerVisitor" shape="rect" coords="265,1456,520,1480"/>
<area href="class_test_l2_normalization_layer_visitor.xhtml" alt="TestL2NormalizationLayerVisitor" shape="rect" coords="265,1512,520,1536"/>
<area href="class_test_log_softmax_layer_visitor.xhtml" alt="TestLogSoftmaxLayerVisitor" shape="rect" coords="265,1568,520,1592"/>
<area href="class_test_maximum_layer_visitor.xhtml" alt="TestMaximumLayerVisitor" shape="rect" coords="265,1624,520,1648"/>
<area href="class_test_mean_layer_visitor.xhtml" alt="TestMeanLayerVisitor" shape="rect" coords="265,1680,520,1704"/>
<area href="class_test_merge_layer_visitor.xhtml" alt="TestMergeLayerVisitor" shape="rect" coords="265,1736,520,1760"/>
<area href="class_test_minimum_layer_visitor.xhtml" alt="TestMinimumLayerVisitor" shape="rect" coords="265,1792,520,1816"/>
<area href="class_test_multiplication_layer_visitor.xhtml" alt="TestMultiplicationLayerVisitor" shape="rect" coords="265,1848,520,1872"/>
<area href="class_test_normalization_layer_visitor.xhtml" alt="TestNormalizationLayerVisitor" shape="rect" coords="265,1904,520,1928"/>
<area href="class_test_pad_layer_visitor.xhtml" alt="TestPadLayerVisitor" shape="rect" coords="265,1960,520,1984"/>
<area href="class_test_permute_layer_visitor.xhtml" alt="TestPermuteLayerVisitor" shape="rect" coords="265,2016,520,2040"/>
<area href="class_test_pooling2d_layer_visitor.xhtml" alt="TestPooling2dLayerVisitor" shape="rect" coords="265,2072,520,2096"/>
<area href="class_test_prelu_layer_visitor.xhtml" alt="TestPreluLayerVisitor" shape="rect" coords="265,2128,520,2152"/>
<area href="class_test_quantize_layer_visitor.xhtml" alt="TestQuantizeLayerVisitor" shape="rect" coords="265,2184,520,2208"/>
<area href="class_test_rank_layer_visitor.xhtml" alt="TestRankLayerVisitor" shape="rect" coords="265,2240,520,2264"/>
<area href="class_test_reshape_layer_visitor.xhtml" alt="TestReshapeLayerVisitor" shape="rect" coords="265,2296,520,2320"/>
<area href="class_test_resize_layer_visitor.xhtml" alt="TestResizeLayerVisitor" shape="rect" coords="265,2352,520,2376"/>
<area href="class_test_slice_layer_visitor.xhtml" alt="TestSliceLayerVisitor" shape="rect" coords="265,2408,520,2432"/>
<area href="class_test_softmax_layer_visitor.xhtml" alt="TestSoftmaxLayerVisitor" shape="rect" coords="265,2464,520,2488"/>
<area href="class_test_space_to_batch_nd_layer_visitor.xhtml" alt="TestSpaceToBatchNdLayerVisitor" shape="rect" coords="265,2520,520,2544"/>
<area href="class_test_space_to_depth_layer_visitor.xhtml" alt="TestSpaceToDepthLayerVisitor" shape="rect" coords="265,2576,520,2600"/>
<area href="class_test_splitter_layer_visitor.xhtml" alt="TestSplitterLayerVisitor" shape="rect" coords="265,2632,520,2656"/>
<area href="class_test_stack_layer_visitor.xhtml" alt="TestStackLayerVisitor" shape="rect" coords="265,2688,520,2712"/>
<area href="class_test_stand_in_layer_visitor.xhtml" alt="TestStandInLayerVisitor" shape="rect" coords="265,2744,520,2768"/>
<area href="class_test_strided_slice_layer_visitor.xhtml" alt="TestStridedSliceLayerVisitor" shape="rect" coords="265,2800,520,2824"/>
<area href="class_test_subtraction_layer_visitor.xhtml" alt="TestSubtractionLayerVisitor" shape="rect" coords="265,2856,520,2880"/>
<area href="class_test_switch_layer_visitor.xhtml" alt="TestSwitchLayerVisitor" shape="rect" coords="265,2912,520,2936"/>
<area href="class_test_transpose_layer_visitor.xhtml" alt="TestTransposeLayerVisitor" shape="rect" coords="265,2968,520,2992"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7bca6e8733a25190cb5b2731d31c195f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a7bca6e8733a25190cb5b2731d31c195f">TestLayerVisitor</a> (const char *name)</td></tr>
<tr class="separator:a7bca6e8733a25190cb5b2731d31c195f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_layer_visitor_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_layer_visitor_base')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a></td></tr>
<tr class="memitem:acb663f7919f9566c3dcc8b6478999d34 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acb663f7919f9566c3dcc8b6478999d34">VisitAbsLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:acb663f7919f9566c3dcc8b6478999d34 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an absolute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#acb663f7919f9566c3dcc8b6478999d34">More...</a><br /></td></tr>
<tr class="separator:acb663f7919f9566c3dcc8b6478999d34 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30b99e5202fc77b02f92d5c44e5ca86d inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a30b99e5202fc77b02f92d5c44e5ca86d">VisitActivationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a30b99e5202fc77b02f92d5c44e5ca86d inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a30b99e5202fc77b02f92d5c44e5ca86d">More...</a><br /></td></tr>
<tr class="separator:a30b99e5202fc77b02f92d5c44e5ca86d inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c9f3396207de48925016a2eee6aa12b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0c9f3396207de48925016a2eee6aa12b">VisitAdditionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a0c9f3396207de48925016a2eee6aa12b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an addition layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a0c9f3396207de48925016a2eee6aa12b">More...</a><br /></td></tr>
<tr class="separator:a0c9f3396207de48925016a2eee6aa12b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a719076848950255b929636c97aaaede4 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a719076848950255b929636c97aaaede4">VisitArgMinMaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a719076848950255b929636c97aaaede4 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an arg min max layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a719076848950255b929636c97aaaede4">More...</a><br /></td></tr>
<tr class="separator:a719076848950255b929636c97aaaede4 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0ae25ba5f3c494d1fb32f06cd57af10 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab0ae25ba5f3c494d1fb32f06cd57af10">VisitBatchNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ab0ae25ba5f3c494d1fb32f06cd57af10 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ab0ae25ba5f3c494d1fb32f06cd57af10">More...</a><br /></td></tr>
<tr class="separator:ab0ae25ba5f3c494d1fb32f06cd57af10 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62aac266e23bd680633e62832f56bc11 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a62aac266e23bd680633e62832f56bc11">VisitBatchToSpaceNdLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a62aac266e23bd680633e62832f56bc11 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a62aac266e23bd680633e62832f56bc11">More...</a><br /></td></tr>
<tr class="separator:a62aac266e23bd680633e62832f56bc11 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95dc828296e6d05c0bf0b691d4dc6a3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a95dc828296e6d05c0bf0b691d4dc6a3f">VisitComparisonLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a95dc828296e6d05c0bf0b691d4dc6a3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Comparison layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a95dc828296e6d05c0bf0b691d4dc6a3f">More...</a><br /></td></tr>
<tr class="separator:a95dc828296e6d05c0bf0b691d4dc6a3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d4f84683c4a00dfb5eecb6b165d41b9 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2d4f84683c4a00dfb5eecb6b165d41b9">VisitConcatLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">ConcatDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a2d4f84683c4a00dfb5eecb6b165d41b9 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a2d4f84683c4a00dfb5eecb6b165d41b9">More...</a><br /></td></tr>
<tr class="separator:a2d4f84683c4a00dfb5eecb6b165d41b9 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90698dba3e90ced6f562cda146bf15e3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a90698dba3e90ced6f562cda146bf15e3">VisitConstantLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a90698dba3e90ced6f562cda146bf15e3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a layer with no inputs and a single output, which always corresponds to the passed in constant tensor should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a90698dba3e90ced6f562cda146bf15e3">More...</a><br /></td></tr>
<tr class="separator:a90698dba3e90ced6f562cda146bf15e3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff3099f516e132f4d8818a54fa1ee767 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aff3099f516e132f4d8818a54fa1ee767">VisitConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;, const char *) override</td></tr>
<tr class="memdesc:aff3099f516e132f4d8818a54fa1ee767 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#aff3099f516e132f4d8818a54fa1ee767">More...</a><br /></td></tr>
<tr class="separator:aff3099f516e132f4d8818a54fa1ee767 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3aaff3b6165f8de16522bc4a1ed32a0 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ad3aaff3b6165f8de16522bc4a1ed32a0">VisitDepthToSpaceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ad3aaff3b6165f8de16522bc4a1ed32a0 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a depth to space layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ad3aaff3b6165f8de16522bc4a1ed32a0">More...</a><br /></td></tr>
<tr class="separator:ad3aaff3b6165f8de16522bc4a1ed32a0 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70050fc50ee44a439665f914d5fe9684 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a70050fc50ee44a439665f914d5fe9684">VisitDepthwiseConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;, const char *) override</td></tr>
<tr class="memdesc:a70050fc50ee44a439665f914d5fe9684 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D depthwise convolution layer with biases should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a70050fc50ee44a439665f914d5fe9684">More...</a><br /></td></tr>
<tr class="separator:a70050fc50ee44a439665f914d5fe9684 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa27cc900d32dcc4a92f59e3bab4f4653 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aa27cc900d32dcc4a92f59e3bab4f4653">VisitDequantizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:aa27cc900d32dcc4a92f59e3bab4f4653 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a Dequantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#aa27cc900d32dcc4a92f59e3bab4f4653">More...</a><br /></td></tr>
<tr class="separator:aa27cc900d32dcc4a92f59e3bab4f4653 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88bad2eef809ccf6f2129f9ed4a6f3a7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a88bad2eef809ccf6f2129f9ed4a6f3a7">VisitDetectionPostProcessLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a88bad2eef809ccf6f2129f9ed4a6f3a7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a Detection PostProcess layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a88bad2eef809ccf6f2129f9ed4a6f3a7">More...</a><br /></td></tr>
<tr class="separator:a88bad2eef809ccf6f2129f9ed4a6f3a7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7450859464a381eafaedb33adc582f75 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a7450859464a381eafaedb33adc582f75">VisitDivisionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a7450859464a381eafaedb33adc582f75 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a division layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a7450859464a381eafaedb33adc582f75">More...</a><br /></td></tr>
<tr class="separator:a7450859464a381eafaedb33adc582f75 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d02f4bfaffcb16e340e9b8c20bc5e35 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9d02f4bfaffcb16e340e9b8c20bc5e35">VisitElementwiseUnaryLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a9d02f4bfaffcb16e340e9b8c20bc5e35 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a9d02f4bfaffcb16e340e9b8c20bc5e35">More...</a><br /></td></tr>
<tr class="separator:a9d02f4bfaffcb16e340e9b8c20bc5e35 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3249cd1186dc7e700a0ec0884fb9d5fa inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3249cd1186dc7e700a0ec0884fb9d5fa">VisitEqualLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a3249cd1186dc7e700a0ec0884fb9d5fa inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an Equal layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a3249cd1186dc7e700a0ec0884fb9d5fa">More...</a><br /></td></tr>
<tr class="separator:a3249cd1186dc7e700a0ec0884fb9d5fa inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae343d79924ac474939c3e38a8b80004e inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae343d79924ac474939c3e38a8b80004e">VisitFillLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ae343d79924ac474939c3e38a8b80004e inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a fill layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ae343d79924ac474939c3e38a8b80004e">More...</a><br /></td></tr>
<tr class="separator:ae343d79924ac474939c3e38a8b80004e inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a060c3a3f978fec03212afaff1fe1648d inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a060c3a3f978fec03212afaff1fe1648d">VisitFloorLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a060c3a3f978fec03212afaff1fe1648d inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a floor layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a060c3a3f978fec03212afaff1fe1648d">More...</a><br /></td></tr>
<tr class="separator:a060c3a3f978fec03212afaff1fe1648d inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9049cf6d72d4b67fff93670f21c09da3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9049cf6d72d4b67fff93670f21c09da3">VisitFullyConnectedLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;, const char *) override</td></tr>
<tr class="memdesc:a9049cf6d72d4b67fff93670f21c09da3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a9049cf6d72d4b67fff93670f21c09da3">More...</a><br /></td></tr>
<tr class="separator:a9049cf6d72d4b67fff93670f21c09da3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7639178bd8c29ffa83162dfd108b725 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae7639178bd8c29ffa83162dfd108b725">VisitGatherLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:ae7639178bd8c29ffa83162dfd108b725 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ae7639178bd8c29ffa83162dfd108b725">More...</a><br /></td></tr>
<tr class="separator:ae7639178bd8c29ffa83162dfd108b725 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea011723381847939ee1773d7c6fac25 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aea011723381847939ee1773d7c6fac25">VisitGatherLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:aea011723381847939ee1773d7c6fac25 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Gather layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#aea011723381847939ee1773d7c6fac25">More...</a><br /></td></tr>
<tr class="separator:aea011723381847939ee1773d7c6fac25 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a28dbfcd1e83bc8158d78feb93d4a0c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2a28dbfcd1e83bc8158d78feb93d4a0c">VisitGreaterLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a2a28dbfcd1e83bc8158d78feb93d4a0c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Greater layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a2a28dbfcd1e83bc8158d78feb93d4a0c">More...</a><br /></td></tr>
<tr class="separator:a2a28dbfcd1e83bc8158d78feb93d4a0c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c23f9e9d8427775925d071feee5dbd1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6c23f9e9d8427775925d071feee5dbd1">VisitInputLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>, const char *) override</td></tr>
<tr class="memdesc:a6c23f9e9d8427775925d071feee5dbd1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an InputLayer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a6c23f9e9d8427775925d071feee5dbd1">More...</a><br /></td></tr>
<tr class="separator:a6c23f9e9d8427775925d071feee5dbd1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58f90a911e6827702c478cabaeac57fe inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a58f90a911e6827702c478cabaeac57fe">VisitInstanceNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a58f90a911e6827702c478cabaeac57fe inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an instance normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a58f90a911e6827702c478cabaeac57fe">More...</a><br /></td></tr>
<tr class="separator:a58f90a911e6827702c478cabaeac57fe inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae68e2b431ea3d2822f19ad4ac806fdaa inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ae68e2b431ea3d2822f19ad4ac806fdaa">VisitL2NormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ae68e2b431ea3d2822f19ad4ac806fdaa inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that an L2 normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ae68e2b431ea3d2822f19ad4ac806fdaa">More...</a><br /></td></tr>
<tr class="separator:ae68e2b431ea3d2822f19ad4ac806fdaa inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d4d2e5580385ee664830720698d112c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4d2e5580385ee664830720698d112c">VisitLogSoftmaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8d4d2e5580385ee664830720698d112c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a log softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4d2e5580385ee664830720698d112c">More...</a><br /></td></tr>
<tr class="separator:a8d4d2e5580385ee664830720698d112c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf1a238ec5b6bb172bc4cd3811f08b28 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aaf1a238ec5b6bb172bc4cd3811f08b28">VisitLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:aaf1a238ec5b6bb172bc4cd3811f08b28 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an Lstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#aaf1a238ec5b6bb172bc4cd3811f08b28">More...</a><br /></td></tr>
<tr class="separator:aaf1a238ec5b6bb172bc4cd3811f08b28 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a778e1b2219e3eb2d790d6e6e653a9f25 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a778e1b2219e3eb2d790d6e6e653a9f25">VisitMaximumLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a778e1b2219e3eb2d790d6e6e653a9f25 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Maximum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a778e1b2219e3eb2d790d6e6e653a9f25">More...</a><br /></td></tr>
<tr class="separator:a778e1b2219e3eb2d790d6e6e653a9f25 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0180a15e542f4ef240fadc09fe4b2e3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0180a15e542f4ef240fadc09fe4b2e3f">VisitMeanLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a0180a15e542f4ef240fadc09fe4b2e3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Mean layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a0180a15e542f4ef240fadc09fe4b2e3f">More...</a><br /></td></tr>
<tr class="separator:a0180a15e542f4ef240fadc09fe4b2e3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafb62c879f0c78bfdc3c4e4f2cb82e68 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aafb62c879f0c78bfdc3c4e4f2cb82e68">VisitMergeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:aafb62c879f0c78bfdc3c4e4f2cb82e68 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a merge layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#aafb62c879f0c78bfdc3c4e4f2cb82e68">More...</a><br /></td></tr>
<tr class="separator:aafb62c879f0c78bfdc3c4e4f2cb82e68 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acef69a3870409ca9a6130db91047e729 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acef69a3870409ca9a6130db91047e729">VisitMergerLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="namespacearmnn.xhtml#a003d213dd28b0b8c0f26fbf268ccb975">MergerDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:acef69a3870409ca9a6130db91047e729 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a merger layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#acef69a3870409ca9a6130db91047e729">More...</a><br /></td></tr>
<tr class="separator:acef69a3870409ca9a6130db91047e729 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e24e9a7bf52efc1699c126435574e95 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1e24e9a7bf52efc1699c126435574e95">VisitMinimumLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a1e24e9a7bf52efc1699c126435574e95 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Minimum layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a1e24e9a7bf52efc1699c126435574e95">More...</a><br /></td></tr>
<tr class="separator:a1e24e9a7bf52efc1699c126435574e95 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac57d22126a9131108214df9177addade inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac57d22126a9131108214df9177addade">VisitMultiplicationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:ac57d22126a9131108214df9177addade inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a multiplication layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ac57d22126a9131108214df9177addade">More...</a><br /></td></tr>
<tr class="separator:ac57d22126a9131108214df9177addade inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3150ff2299a2e193952300b8c9edd1e1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3150ff2299a2e193952300b8c9edd1e1">VisitNormalizationLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a3150ff2299a2e193952300b8c9edd1e1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a3150ff2299a2e193952300b8c9edd1e1">More...</a><br /></td></tr>
<tr class="separator:a3150ff2299a2e193952300b8c9edd1e1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc39ddb06acfd91cf3cfb0fcd9337005 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acc39ddb06acfd91cf3cfb0fcd9337005">VisitOutputLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>, const char *) override</td></tr>
<tr class="memdesc:acc39ddb06acfd91cf3cfb0fcd9337005 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function an output layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#acc39ddb06acfd91cf3cfb0fcd9337005">More...</a><br /></td></tr>
<tr class="separator:acc39ddb06acfd91cf3cfb0fcd9337005 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a240e1b725cc204bb468b6b402e1670 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a240e1b725cc204bb468b6b402e1670">VisitPadLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8a240e1b725cc204bb468b6b402e1670 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a pad layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a8a240e1b725cc204bb468b6b402e1670">More...</a><br /></td></tr>
<tr class="separator:a8a240e1b725cc204bb468b6b402e1670 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a275f4c270ce472abc8701f6475ff7f38 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a275f4c270ce472abc8701f6475ff7f38">VisitPermuteLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a275f4c270ce472abc8701f6475ff7f38 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a275f4c270ce472abc8701f6475ff7f38">More...</a><br /></td></tr>
<tr class="separator:a275f4c270ce472abc8701f6475ff7f38 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e369658cb00178eeb9136f1c912fd3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a5e369658cb00178eeb9136f1c912fd3f">VisitPooling2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a5e369658cb00178eeb9136f1c912fd3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a5e369658cb00178eeb9136f1c912fd3f">More...</a><br /></td></tr>
<tr class="separator:a5e369658cb00178eeb9136f1c912fd3f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79c933bea6fb9986c3baa171be98da5c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a79c933bea6fb9986c3baa171be98da5c">VisitPreluLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a79c933bea6fb9986c3baa171be98da5c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a PReLU activation layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a79c933bea6fb9986c3baa171be98da5c">More...</a><br /></td></tr>
<tr class="separator:a79c933bea6fb9986c3baa171be98da5c inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a6db421f0be147916cb4894ad3885d1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8a6db421f0be147916cb4894ad3885d1">VisitQuantizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a8a6db421f0be147916cb4894ad3885d1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a quantize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a8a6db421f0be147916cb4894ad3885d1">More...</a><br /></td></tr>
<tr class="separator:a8a6db421f0be147916cb4894ad3885d1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab80f8f2c2202a4651c63757b307a21b7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab80f8f2c2202a4651c63757b307a21b7">VisitQLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:ab80f8f2c2202a4651c63757b307a21b7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a QLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ab80f8f2c2202a4651c63757b307a21b7">More...</a><br /></td></tr>
<tr class="separator:ab80f8f2c2202a4651c63757b307a21b7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fdb21a22a95af72177b4e909741b5c7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2fdb21a22a95af72177b4e909741b5c7">VisitQuantizedLstmLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">QuantizedLstmInputParams</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a2fdb21a22a95af72177b4e909741b5c7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a QuantizedLstm layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a2fdb21a22a95af72177b4e909741b5c7">More...</a><br /></td></tr>
<tr class="separator:a2fdb21a22a95af72177b4e909741b5c7 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e6452322927acf6fe4e38ca9cc6d117 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a0e6452322927acf6fe4e38ca9cc6d117">VisitRankLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a0e6452322927acf6fe4e38ca9cc6d117 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a rank layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a0e6452322927acf6fe4e38ca9cc6d117">More...</a><br /></td></tr>
<tr class="separator:a0e6452322927acf6fe4e38ca9cc6d117 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ebd504c48864d63917836e0dc335725 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9ebd504c48864d63917836e0dc335725">VisitReshapeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a9ebd504c48864d63917836e0dc335725 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a9ebd504c48864d63917836e0dc335725">More...</a><br /></td></tr>
<tr class="separator:a9ebd504c48864d63917836e0dc335725 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d4c5571a4b3db2badf7f1dce3467391 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4c5571a4b3db2badf7f1dce3467391">VisitResizeBilinearLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">ResizeBilinearDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8d4c5571a4b3db2badf7f1dce3467391 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a8d4c5571a4b3db2badf7f1dce3467391">More...</a><br /></td></tr>
<tr class="separator:a8d4c5571a4b3db2badf7f1dce3467391 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49c296c5d0f9efb76f165954cf40c281 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a49c296c5d0f9efb76f165954cf40c281">VisitResizeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a49c296c5d0f9efb76f165954cf40c281 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a49c296c5d0f9efb76f165954cf40c281">More...</a><br /></td></tr>
<tr class="separator:a49c296c5d0f9efb76f165954cf40c281 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a62605ac51992ce0913cc119b59546b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a6a62605ac51992ce0913cc119b59546b">VisitRsqrtLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a6a62605ac51992ce0913cc119b59546b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a Reciprocal of square root layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a6a62605ac51992ce0913cc119b59546b">More...</a><br /></td></tr>
<tr class="separator:a6a62605ac51992ce0913cc119b59546b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c023b3170bed9368b65730bc7fff60b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a1c023b3170bed9368b65730bc7fff60b">VisitSliceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a1c023b3170bed9368b65730bc7fff60b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a1c023b3170bed9368b65730bc7fff60b">More...</a><br /></td></tr>
<tr class="separator:a1c023b3170bed9368b65730bc7fff60b inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd8b0b2e365bbeabceddc35a1cb52916 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#abd8b0b2e365bbeabceddc35a1cb52916">VisitSoftmaxLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:abd8b0b2e365bbeabceddc35a1cb52916 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#abd8b0b2e365bbeabceddc35a1cb52916">More...</a><br /></td></tr>
<tr class="separator:abd8b0b2e365bbeabceddc35a1cb52916 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9478c4f41840a2e2c12b7f336e725a8a inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a9478c4f41840a2e2c12b7f336e725a8a">VisitSpaceToBatchNdLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a9478c4f41840a2e2c12b7f336e725a8a inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a9478c4f41840a2e2c12b7f336e725a8a">More...</a><br /></td></tr>
<tr class="separator:a9478c4f41840a2e2c12b7f336e725a8a inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdedda623455cc7a0f982d6f4e96d53a inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#acdedda623455cc7a0f982d6f4e96d53a">VisitSpaceToDepthLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:acdedda623455cc7a0f982d6f4e96d53a inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a space to depth layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#acdedda623455cc7a0f982d6f4e96d53a">More...</a><br /></td></tr>
<tr class="separator:acdedda623455cc7a0f982d6f4e96d53a inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8689a80f8939de6323319aba5806ee9e inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8689a80f8939de6323319aba5806ee9e">VisitSplitterLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8689a80f8939de6323319aba5806ee9e inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a8689a80f8939de6323319aba5806ee9e">More...</a><br /></td></tr>
<tr class="separator:a8689a80f8939de6323319aba5806ee9e inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b47d411d147aa420f7a69356d84fb80 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a8b47d411d147aa420f7a69356d84fb80">VisitStackLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a8b47d411d147aa420f7a69356d84fb80 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a stack layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a8b47d411d147aa420f7a69356d84fb80">More...</a><br /></td></tr>
<tr class="separator:a8b47d411d147aa420f7a69356d84fb80 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c15053a7e295099a1a34c4add5a03b8 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a3c15053a7e295099a1a34c4add5a03b8">VisitStandInLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a3c15053a7e295099a1a34c4add5a03b8 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a StandInLayer should call back to when its Accept(ILaterVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a3c15053a7e295099a1a34c4add5a03b8">More...</a><br /></td></tr>
<tr class="separator:a3c15053a7e295099a1a34c4add5a03b8 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31862ce4ffaddde96ebe0afcf04f3577 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a31862ce4ffaddde96ebe0afcf04f3577">VisitStridedSliceLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a31862ce4ffaddde96ebe0afcf04f3577 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a31862ce4ffaddde96ebe0afcf04f3577">More...</a><br /></td></tr>
<tr class="separator:a31862ce4ffaddde96ebe0afcf04f3577 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac42c3a57a82260c8315d4f0320620934 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ac42c3a57a82260c8315d4f0320620934">VisitSubtractionLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:ac42c3a57a82260c8315d4f0320620934 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a subtraction layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#ac42c3a57a82260c8315d4f0320620934">More...</a><br /></td></tr>
<tr class="separator:ac42c3a57a82260c8315d4f0320620934 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a877d400155151a5afba9f0b17fbcf8f3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a877d400155151a5afba9f0b17fbcf8f3">VisitSwitchLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const char *) override</td></tr>
<tr class="memdesc:a877d400155151a5afba9f0b17fbcf8f3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function a switch layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a877d400155151a5afba9f0b17fbcf8f3">More...</a><br /></td></tr>
<tr class="separator:a877d400155151a5afba9f0b17fbcf8f3 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dfb04de9aa0b8b55c70fe96af13e1e1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a4dfb04de9aa0b8b55c70fe96af13e1e1">VisitTransposeConvolution2dLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;, const char *) override</td></tr>
<tr class="memdesc:a4dfb04de9aa0b8b55c70fe96af13e1e1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a 2D transpose convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a4dfb04de9aa0b8b55c70fe96af13e1e1">More...</a><br /></td></tr>
<tr class="separator:a4dfb04de9aa0b8b55c70fe96af13e1e1 inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cb213b083367f4fe9bed2916206525f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#a2cb213b083367f4fe9bed2916206525f">VisitTransposeLayer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;, const char *) override</td></tr>
<tr class="memdesc:a2cb213b083367f4fe9bed2916206525f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that a transpose layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked.  <a href="classarmnn_1_1_layer_visitor_base.xhtml#a2cb213b083367f4fe9bed2916206525f">More...</a><br /></td></tr>
<tr class="separator:a2cb213b083367f4fe9bed2916206525f inherit pub_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_layer_visitor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_layer_visitor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a></td></tr>
<tr class="memitem:a463965a96896bf0d261b44eea5172c7b inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a463965a96896bf0d261b44eea5172c7b">StartVisit</a> ()</td></tr>
<tr class="separator:a463965a96896bf0d261b44eea5172c7b inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4549b1bbb63fa26700d74854e388784f inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a4549b1bbb63fa26700d74854e388784f">FinishVisit</a> ()</td></tr>
<tr class="separator:a4549b1bbb63fa26700d74854e388784f inherit pub_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a91d4162aba5f047ac80adaf0abf9c804"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a91d4162aba5f047ac80adaf0abf9c804">~TestLayerVisitor</a> ()</td></tr>
<tr class="separator:a91d4162aba5f047ac80adaf0abf9c804"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50d9ed2d05fac25795824c880f0eee6b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a50d9ed2d05fac25795824c880f0eee6b">CheckLayerName</a> (const char *name)</td></tr>
<tr class="separator:a50d9ed2d05fac25795824c880f0eee6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fb243351836fe2feebd36e7e3869154"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a3fb243351836fe2feebd36e7e3869154">CheckLayerPointer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer)</td></tr>
<tr class="separator:a3fb243351836fe2feebd36e7e3869154"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab49c9a185af94e39ae9cd81aa8ec926c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">CheckConstTensors</a> (const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;expected, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;actual)</td></tr>
<tr class="separator:ab49c9a185af94e39ae9cd81aa8ec926c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d389b5affe2059991cfd9184b8e0b47"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a2d389b5affe2059991cfd9184b8e0b47">CheckOptionalConstTensors</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;expected, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;actual)</td></tr>
<tr class="separator:a2d389b5affe2059991cfd9184b8e0b47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_layer_visitor_base"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_layer_visitor_base')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml">LayerVisitorBase&lt; VisitorNoThrowPolicy &gt;</a></td></tr>
<tr class="memitem:aec6644c81f84f086262dfd06088acd99 inherit pro_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#aec6644c81f84f086262dfd06088acd99">LayerVisitorBase</a> ()</td></tr>
<tr class="separator:aec6644c81f84f086262dfd06088acd99 inherit pro_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab59e5e8c65aa44857c27db70fc412baa inherit pro_methods_classarmnn_1_1_layer_visitor_base"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_visitor_base.xhtml#ab59e5e8c65aa44857c27db70fc412baa">~LayerVisitorBase</a> ()</td></tr>
<tr class="separator:ab59e5e8c65aa44857c27db70fc412baa inherit pro_methods_classarmnn_1_1_layer_visitor_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_layer_visitor"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_layer_visitor')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml">ILayerVisitor</a></td></tr>
<tr class="memitem:a27fa880bce96ac7355284a7681f2377e inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a27fa880bce96ac7355284a7681f2377e">ILayerVisitor</a> ()</td></tr>
<tr class="separator:a27fa880bce96ac7355284a7681f2377e inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ad7aeeaf26228ef11c15fa5d4507d8a inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_visitor.xhtml#a7ad7aeeaf26228ef11c15fa5d4507d8a">~ILayerVisitor</a> ()</td></tr>
<tr class="separator:a7ad7aeeaf26228ef11c15fa5d4507d8a inherit pro_methods_classarmnn_1_1_i_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00013">13</a> of file <a class="el" href="_test_layer_visitor_8hpp_source.xhtml">TestLayerVisitor.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a91d4162aba5f047ac80adaf0abf9c804"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91d4162aba5f047ac80adaf0abf9c804">&#9670;&nbsp;</a></span>~TestLayerVisitor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml">TestLayerVisitor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00016">16</a> of file <a class="el" href="_test_layer_visitor_8hpp_source.xhtml">TestLayerVisitor.hpp</a>.</p>

<p class="reference">References <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00033">TestLayerVisitor::CheckConstTensors()</a>, <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00012">TestLayerVisitor::CheckLayerName()</a>, <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00028">TestLayerVisitor::CheckLayerPointer()</a>, and <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00051">TestLayerVisitor::CheckOptionalConstTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<a id="a7bca6e8733a25190cb5b2731d31c195f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bca6e8733a25190cb5b2731d31c195f">&#9670;&nbsp;</a></span>TestLayerVisitor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml">TestLayerVisitor</a> </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00030">30</a> of file <a class="el" href="_test_layer_visitor_8hpp_source.xhtml">TestLayerVisitor.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                                                : m_LayerName(name)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keywordflow">if</span> (name == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            m_LayerName = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ab49c9a185af94e39ae9cd81aa8ec926c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab49c9a185af94e39ae9cd81aa8ec926c">&#9670;&nbsp;</a></span>CheckConstTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckConstTensors </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>expected</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>actual</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="_test_layer_visitor_8cpp_source.xhtml">TestLayerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00266">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00276">BaseTensor&lt; MemoryType &gt;::GetMemoryArea()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00273">BaseTensor&lt; MemoryType &gt;::GetNumBytes()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00272">BaseTensor&lt; MemoryType &gt;::GetNumDimensions()</a>, and <a class="el" href="_tensor_8hpp_source.xhtml#l00274">BaseTensor&lt; MemoryType &gt;::GetNumElements()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00061">TestLstmLayerVisitor::CheckConstTensorPtrs()</a>, <a class="el" href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00110">TestQLstmLayerVisitor::CheckConstTensorPtrs()</a>, <a class="el" href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00208">TestQuantizedLstmLayerVisitor::CheckConstTensorPtrs()</a>, <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00051">TestLayerVisitor::CheckOptionalConstTensors()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00142">TestBatchNormalizationLayerVisitor::VisitBatchNormalizationLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00179">TestConstantLayerVisitor::VisitConstantLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00030">TestConvolution2dLayerVisitor::VisitConvolution2dLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00067">TestDepthwiseConvolution2dLayerVisitor::VisitDepthwiseConvolution2dLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00104">TestFullyConnectedLayerVistor::VisitFullyConnectedLayer()</a>, and <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00016">TestLayerVisitor::~TestLayerVisitor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    BOOST_CHECK(expected.GetInfo() == actual.GetInfo());</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    BOOST_CHECK(expected.GetNumDimensions() == actual.GetNumDimensions());</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    BOOST_CHECK(expected.GetNumElements() == actual.GetNumElements());</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    BOOST_CHECK(expected.GetNumBytes() == actual.GetNumBytes());</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">if</span> (expected.GetNumBytes() == actual.GetNumBytes())</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="comment">//check data is the same byte by byte</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* expectedPtr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(expected.GetMemoryArea());</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* actualPtr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(actual.GetMemoryArea());</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; expected.GetNumBytes(); i++)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            BOOST_CHECK(*(expectedPtr + i) == *(actualPtr + i));</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a50d9ed2d05fac25795824c880f0eee6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50d9ed2d05fac25795824c880f0eee6b">&#9670;&nbsp;</a></span>CheckLayerName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckLayerName </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00012">12</a> of file <a class="el" href="_test_layer_visitor_8cpp_source.xhtml">TestLayerVisitor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00142">TestBatchNormalizationLayerVisitor::VisitBatchNormalizationLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00179">TestConstantLayerVisitor::VisitConstantLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00030">TestConvolution2dLayerVisitor::VisitConvolution2dLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00067">TestDepthwiseConvolution2dLayerVisitor::VisitDepthwiseConvolution2dLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00104">TestFullyConnectedLayerVistor::VisitFullyConnectedLayer()</a>, <a class="el" href="_test_input_output_layer_visitor_8hpp_source.xhtml#l00030">TestInputLayerVisitor::VisitInputLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00203">TestLstmLayerVisitor::VisitLstmLayer()</a>, <a class="el" href="_test_input_output_layer_visitor_8hpp_source.xhtml#l00051">TestOutputLayerVisitor::VisitOutputLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00235">TestQLstmLayerVisitor::VisitQLstmLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00266">TestQuantizedLstmLayerVisitor::VisitQuantizedLstmLayer()</a>, and <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00016">TestLayerVisitor::~TestLayerVisitor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;{</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    <span class="keywordflow">if</span> (name == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;        BOOST_CHECK(m_LayerName == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    }</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_LayerName == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    {</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        BOOST_CHECK(name == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    }</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        BOOST_CHECK_EQUAL(m_LayerName, name);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    }</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3fb243351836fe2feebd36e7e3869154"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fb243351836fe2feebd36e7e3869154">&#9670;&nbsp;</a></span>CheckLayerPointer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckLayerPointer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00028">28</a> of file <a class="el" href="_test_layer_visitor_8cpp_source.xhtml">TestLayerVisitor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00142">TestBatchNormalizationLayerVisitor::VisitBatchNormalizationLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00179">TestConstantLayerVisitor::VisitConstantLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00030">TestConvolution2dLayerVisitor::VisitConvolution2dLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00067">TestDepthwiseConvolution2dLayerVisitor::VisitDepthwiseConvolution2dLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00104">TestFullyConnectedLayerVistor::VisitFullyConnectedLayer()</a>, <a class="el" href="_test_input_output_layer_visitor_8hpp_source.xhtml#l00030">TestInputLayerVisitor::VisitInputLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00203">TestLstmLayerVisitor::VisitLstmLayer()</a>, <a class="el" href="_test_input_output_layer_visitor_8hpp_source.xhtml#l00051">TestOutputLayerVisitor::VisitOutputLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00235">TestQLstmLayerVisitor::VisitQLstmLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00266">TestQuantizedLstmLayerVisitor::VisitQuantizedLstmLayer()</a>, and <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00016">TestLayerVisitor::~TestLayerVisitor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    BOOST_CHECK(layer != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2d389b5affe2059991cfd9184b8e0b47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d389b5affe2059991cfd9184b8e0b47">&#9670;&nbsp;</a></span>CheckOptionalConstTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckOptionalConstTensors </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>expected</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>actual</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="_test_layer_visitor_8cpp_source.xhtml">TestLayerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00033">TestLayerVisitor::CheckConstTensors()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00030">TestConvolution2dLayerVisitor::VisitConvolution2dLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00067">TestDepthwiseConvolution2dLayerVisitor::VisitDepthwiseConvolution2dLayer()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00104">TestFullyConnectedLayerVistor::VisitFullyConnectedLayer()</a>, and <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00016">TestLayerVisitor::~TestLayerVisitor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    BOOST_CHECK(expected.has_value() == actual.has_value());</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">if</span> (expected.has_value() &amp;&amp; actual.has_value())</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">CheckConstTensors</a>(expected.value(), actual.value());</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_ab49c9a185af94e39ae9cd81aa8ec926c"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">armnn::TestLayerVisitor::CheckConstTensors</a></div><div class="ttdeci">void CheckConstTensors(const ConstTensor &amp;expected, const ConstTensor &amp;actual)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8cpp_source.xhtml#l00033">TestLayerVisitor.cpp:33</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/test/<a class="el" href="_test_layer_visitor_8hpp_source.xhtml">TestLayerVisitor.hpp</a></li>
<li>src/armnn/test/<a class="el" href="_test_layer_visitor_8cpp_source.xhtml">TestLayerVisitor.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml">TestLayerVisitor</a></li>
    <li class="footer">Generated on Tue Aug 25 2020 12:29:51 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
