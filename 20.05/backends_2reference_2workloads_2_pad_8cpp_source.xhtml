<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/workloads/Pad.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('backends_2reference_2workloads_2_pad_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Pad.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="backends_2reference_2workloads_2_pad_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_pad_8hpp.xhtml">Pad.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_workload_data_8hpp.xhtml">backendsCommon/WorkloadData.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_buffer_array_view_8hpp.xhtml">TensorBufferArrayView.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_encoders_8hpp.xhtml">Encoders.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;boost/numeric/conversion/cast.hpp&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a28e115f5d28500324b53fae9e6c00b77">   22</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a28e115f5d28500324b53fae9e6c00b77">Pad</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo,</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;         std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; m_padList,</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;         <span class="keyword">const</span> T* inputData,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;         T* outData,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;         <span class="keyword">const</span> <span class="keywordtype">float</span> padValue)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numOutputElements = outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>();</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape = outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numInputDimensions = inputShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">    #ifndef NDEBUG</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numOutputDimensions = outputShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    assert(numInputDimensions == numOutputDimensions);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputBatches = 0;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels = 0;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = 0;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth = 0;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannels = 0;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputHeight = 0;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputWidth = 0;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    T convertedPadValue = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(padValue);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numOutputElements; ++i)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;       outData[i] = convertedPadValue;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">switch</span>(numInputDimensions) {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            inputWidth = inputShape[0];</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> w = 0; w &lt; inputWidth ; w++)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                outData[w+std::get&lt;0&gt;(m_padList[0])] = inputData[w];</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">case</span> 2  :</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            inputHeight = inputShape[0];</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            inputWidth = inputShape[1];</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            outputHeight = outputShape[0];</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            outputWidth = outputShape[1];</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> h = 0; h &lt; inputHeight; h++)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> w = 0; w &lt; inputWidth ; w++)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    outData[(h+std::get&lt;0&gt;(m_padList[0]))*outputWidth</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    + (w+std::get&lt;0&gt;(m_padList[1]))] = inputData[h * inputWidth + w];</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">case</span> 3  :</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            inputChannels = inputShape[0];</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            inputHeight = inputShape[1];</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            inputWidth = inputShape[2];</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            outputChannels = outputShape[0];</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            outputHeight = outputShape[1];</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            outputWidth = outputShape[2];</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; inputChannels; c++)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> h = 0; h &lt; inputHeight; h++)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> w = 0; w &lt; inputWidth ; w++)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                        outData[(c+std::get&lt;0&gt;(m_padList[0]))*outputHeight*outputWidth</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                        + (h+std::get&lt;0&gt;(m_padList[1]))*outputWidth</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                        + (w+std::get&lt;0&gt;(m_padList[2]))] = inputData[c * inputHeight * inputWidth</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                                                      + h * inputWidth</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                                                      + w];</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">case</span> 4  :</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            inputBatches = inputShape[0];</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            inputChannels = inputShape[1];</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            inputHeight = inputShape[2];</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            inputWidth = inputShape[3];</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            outputChannels = outputShape[1];</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            outputHeight = outputShape[2];</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            outputWidth = outputShape[3];</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> b = 0; b &lt; inputBatches; b++)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; inputChannels; c++)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> h = 0; h &lt; inputHeight; h++)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> w = 0; w &lt; inputWidth ; w++)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                        {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                            outData[(b+std::get&lt;0&gt;(m_padList[0])) * outputChannels * outputHeight * outputWidth</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                   + (c+std::get&lt;0&gt;(m_padList[1])) * outputHeight * outputWidth</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                   + (h+std::get&lt;0&gt;(m_padList[2])) * outputWidth</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                   + (w+std::get&lt;0&gt;(m_padList[3]))] = inputData[b * inputChannels * inputHeight</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                                                                * inputWidth</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                                                             + c * inputHeight * inputWidth</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                                                             + h * inputWidth</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                                                             + w];</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        default :</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a37fe5e5b5f650430dc0e71d69977bebd">Pad&lt;BFloat16&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                            std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; m_PadList,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_b_float16.xhtml">BFloat16</a>* inputData,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                            <a class="code" href="classarmnn_1_1_b_float16.xhtml">BFloat16</a>* outData,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                            <span class="keyword">const</span> <span class="keywordtype">float</span> padValue);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a09fc687543b371ddab280203dc989bd9">Pad&lt;float&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                         std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; m_PadList,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                         <span class="keyword">const</span> <span class="keywordtype">float</span>* inputData,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                         <span class="keywordtype">float</span>* outData,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                         <span class="keyword">const</span> <span class="keywordtype">float</span> padValue);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a1b165f49b29968defb57e2d9b8628b9f">Pad&lt;Half&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; m_PadList,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                        <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">Half</a>* inputData,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                        <a class="code" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">Half</a>* outData,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">float</span> padValue);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a7e27cbebab8cde65c84d7a00efa025cd">Pad&lt;uint8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                           std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; m_PadList,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                           <span class="keyword">const</span> uint8_t* inputData,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                           uint8_t* outData,</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                           <span class="keyword">const</span> <span class="keywordtype">float</span> padValue);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a3cb52712f446bff4391ffac8814718fd">Pad&lt;int8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                          std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; m_PadList,</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                          <span class="keyword">const</span> int8_t* inputData,</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                          int8_t* outData,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                          <span class="keyword">const</span> <span class="keywordtype">float</span> padValue);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a68b05cecb5ebbbc3b8d1fd94a66df4af">Pad&lt;int16_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                           std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; m_PadList,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                           <span class="keyword">const</span> int16_t* inputData,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                           int16_t* outData,</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                           <span class="keyword">const</span> <span class="keywordtype">float</span> padValue);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;} <span class="comment">//namespace armnn</span></div><div class="ttc" id="_workload_data_8hpp_xhtml"><div class="ttname"><a href="_workload_data_8hpp.xhtml">WorkloadData.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00088">Tensor.hpp:88</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_b_float16_xhtml"><div class="ttname"><a href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a></div><div class="ttdef"><b>Definition:</b> <a href="_b_float16_8hpp_source.xhtml#l00014">BFloat16.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="_tensor_buffer_array_view_8hpp_xhtml"><div class="ttname"><a href="_tensor_buffer_array_view_8hpp.xhtml">TensorBufferArrayView.hpp</a></div></div>
<div class="ttc" id="_encoders_8hpp_xhtml"><div class="ttname"><a href="_encoders_8hpp.xhtml">Encoders.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a28e115f5d28500324b53fae9e6c00b77"><div class="ttname"><a href="namespacearmnn.xhtml#a28e115f5d28500324b53fae9e6c00b77">armnn::Pad</a></div><div class="ttdeci">void Pad(const TensorInfo &amp;inputInfo, const TensorInfo &amp;outputInfo, std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt;&gt; m_padList, const T *inputData, T *outData, const float padValue)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_pad_8cpp_source.xhtml#l00022">Pad.cpp:22</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a3cb52712f446bff4391ffac8814718fd"><div class="ttname"><a href="namespacearmnn.xhtml#a3cb52712f446bff4391ffac8814718fd">armnn::Pad&lt; int8_t &gt;</a></div><div class="ttdeci">template void Pad&lt; int8_t &gt;(const TensorInfo &amp;inputInfo, const TensorInfo &amp;outputInfo, std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt;&gt; m_PadList, const int8_t *inputData, int8_t *outData, const float padValue)</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a37fe5e5b5f650430dc0e71d69977bebd"><div class="ttname"><a href="namespacearmnn.xhtml#a37fe5e5b5f650430dc0e71d69977bebd">armnn::Pad&lt; BFloat16 &gt;</a></div><div class="ttdeci">template void Pad&lt; BFloat16 &gt;(const TensorInfo &amp;inputInfo, const TensorInfo &amp;outputInfo, std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt;&gt; m_PadList, const BFloat16 *inputData, BFloat16 *outData, const float padValue)</div></div>
<div class="ttc" id="_pad_8hpp_xhtml"><div class="ttname"><a href="_pad_8hpp.xhtml">Pad.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a68b05cecb5ebbbc3b8d1fd94a66df4af"><div class="ttname"><a href="namespacearmnn.xhtml#a68b05cecb5ebbbc3b8d1fd94a66df4af">armnn::Pad&lt; int16_t &gt;</a></div><div class="ttdeci">template void Pad&lt; int16_t &gt;(const TensorInfo &amp;inputInfo, const TensorInfo &amp;outputInfo, std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt;&gt; m_PadList, const int16_t *inputData, int16_t *outData, const float padValue)</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00043">Tensor.hpp:43</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1b165f49b29968defb57e2d9b8628b9f"><div class="ttname"><a href="namespacearmnn.xhtml#a1b165f49b29968defb57e2d9b8628b9f">armnn::Pad&lt; Half &gt;</a></div><div class="ttdeci">template void Pad&lt; Half &gt;(const TensorInfo &amp;inputInfo, const TensorInfo &amp;outputInfo, std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt;&gt; m_PadList, const Half *inputData, Half *outData, const float padValue)</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a09fc687543b371ddab280203dc989bd9"><div class="ttname"><a href="namespacearmnn.xhtml#a09fc687543b371ddab280203dc989bd9">armnn::Pad&lt; float &gt;</a></div><div class="ttdeci">template void Pad&lt; float &gt;(const TensorInfo &amp;inputInfo, const TensorInfo &amp;outputInfo, std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt;&gt; m_PadList, const float *inputData, float *outData, const float padValue)</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0f38fa92b2468d5378258a2b074c1a31"><div class="ttname"><a href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a></div><div class="ttdeci">half_float::half Half</div><div class="ttdef"><b>Definition:</b> <a href="_half_8hpp_source.xhtml#l00016">Half.hpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7e27cbebab8cde65c84d7a00efa025cd"><div class="ttname"><a href="namespacearmnn.xhtml#a7e27cbebab8cde65c84d7a00efa025cd">armnn::Pad&lt; uint8_t &gt;</a></div><div class="ttdeci">template void Pad&lt; uint8_t &gt;(const TensorInfo &amp;inputInfo, const TensorInfo &amp;outputInfo, std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt;&gt; m_PadList, const uint8_t *inputData, uint8_t *outData, const float padValue)</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00093">Tensor.hpp:93</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="dir_d2f3b8e2e64df3181ebe92efcc0a3012.xhtml">workloads</a></li><li class="navelem"><a class="el" href="backends_2reference_2workloads_2_pad_8cpp.xhtml">Pad.cpp</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:43 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
