<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: TensorShape Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_tensor_shape.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_tensor_shape-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">TensorShape Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a76d053cd9b4373d90682ad646dad334c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a> ()</td></tr>
<tr class="memdesc:a76d053cd9b4373d90682ad646dad334c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Empty (invalid) constructor.  <a href="#a76d053cd9b4373d90682ad646dad334c">More...</a><br /></td></tr>
<tr class="separator:a76d053cd9b4373d90682ad646dad334c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a767390dbf62191471253b7541143bb04"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml#a767390dbf62191471253b7541143bb04">TensorShape</a> (unsigned int numDimensions)</td></tr>
<tr class="separator:a767390dbf62191471253b7541143bb04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c3de06b2e467f9663079dbb619e4732"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml#a1c3de06b2e467f9663079dbb619e4732">TensorShape</a> (unsigned int numDimensions, const unsigned int *dimensionSizes)</td></tr>
<tr class="separator:a1c3de06b2e467f9663079dbb619e4732"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab18f5c64d49bbc1f7a97d031c5e79e3d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml#ab18f5c64d49bbc1f7a97d031c5e79e3d">TensorShape</a> (std::initializer_list&lt; unsigned int &gt; dimensionSizeList)</td></tr>
<tr class="separator:ab18f5c64d49bbc1f7a97d031c5e79e3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe2c91b98905750c515790c88f329670"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml#abe2c91b98905750c515790c88f329670">TensorShape</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;other)</td></tr>
<tr class="separator:abe2c91b98905750c515790c88f329670"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ca6f42172d27e9799da3e3f7840ac31"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml#a0ca6f42172d27e9799da3e3f7840ac31">operator=</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;other)</td></tr>
<tr class="separator:a0ca6f42172d27e9799da3e3f7840ac31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e6dab22049a4432e8306a301dceff52"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml#a6e6dab22049a4432e8306a301dceff52">operator[]</a> (unsigned int i) const</td></tr>
<tr class="separator:a6e6dab22049a4432e8306a301dceff52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bd5fcf80a3838d0922354989762d7c8"><td class="memItemLeft" align="right" valign="top">unsigned int &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml#a0bd5fcf80a3838d0922354989762d7c8">operator[]</a> (unsigned int i)</td></tr>
<tr class="separator:a0bd5fcf80a3838d0922354989762d7c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07e348fae6036aecdaf41e738d1ae9ff"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml#a07e348fae6036aecdaf41e738d1ae9ff">operator==</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;other) const</td></tr>
<tr class="separator:a07e348fae6036aecdaf41e738d1ae9ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77d202fcd47612eb5a4d6d23a7d4b349"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml#a77d202fcd47612eb5a4d6d23a7d4b349">operator!=</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;other) const</td></tr>
<tr class="separator:a77d202fcd47612eb5a4d6d23a7d4b349"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a157e27d41e9f6b21f0d3c025fa47dc24"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a> () const</td></tr>
<tr class="separator:a157e27d41e9f6b21f0d3c025fa47dc24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8846406ac37fbd2204f0be16ee05d5b7"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a> () const</td></tr>
<tr class="separator:a8846406ac37fbd2204f0be16ee05d5b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00020">20</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a76d053cd9b4373d90682ad646dad334c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76d053cd9b4373d90682ad646dad334c">&#9670;&nbsp;</a></span>TensorShape() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Empty (invalid) constructor. </p>

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00024">24</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; : m_NumDimensions(0)</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a767390dbf62191471253b7541143bb04"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a767390dbf62191471253b7541143bb04">&#9670;&nbsp;</a></span>TensorShape() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numDimensions</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_types_8hpp_source.xhtml#l00018">armnn::MaxNumOfTensorDimensions</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; : m_NumDimensions(numDimensions)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">if</span> (numDimensions &lt; 1)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Tensor numDimensions must be greater than 0&quot;</span>);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">if</span> (numDimensions &gt; <a class="code" href="namespacearmnn.xhtml#abdcd184ed3bd648bb31d385040cafd5d">MaxNumOfTensorDimensions</a>)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Tensor numDimensions must be less than or equal to MaxNumOfTensorDimensions&quot;</span>);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    std::fill(m_Dimensions.begin(), m_Dimensions.begin() + m_NumDimensions, 0);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_abdcd184ed3bd648bb31d385040cafd5d"><div class="ttname"><a href="namespacearmnn.xhtml#abdcd184ed3bd648bb31d385040cafd5d">armnn::MaxNumOfTensorDimensions</a></div><div class="ttdeci">constexpr unsigned int MaxNumOfTensorDimensions</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00018">Types.hpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1c3de06b2e467f9663079dbb619e4732"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c3de06b2e467f9663079dbb619e4732">&#9670;&nbsp;</a></span>TensorShape() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numDimensions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int *&#160;</td>
          <td class="paramname"><em>dimensionSizes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_types_8hpp_source.xhtml#l00018">armnn::MaxNumOfTensorDimensions</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; : m_NumDimensions(numDimensions)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">if</span> (numDimensions &lt; 1)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Tensor numDimensions must be greater than 0&quot;</span>);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">if</span> (numDimensions &gt; <a class="code" href="namespacearmnn.xhtml#abdcd184ed3bd648bb31d385040cafd5d">MaxNumOfTensorDimensions</a>)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Tensor numDimensions must be less than or equal to MaxNumOfTensorDimensions&quot;</span>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">if</span> (dimensionSizes == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Tensor dimensionSizes must not be NULL&quot;</span>);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    std::copy(dimensionSizes, dimensionSizes + numDimensions, m_Dimensions.begin());</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_abdcd184ed3bd648bb31d385040cafd5d"><div class="ttname"><a href="namespacearmnn.xhtml#abdcd184ed3bd648bb31d385040cafd5d">armnn::MaxNumOfTensorDimensions</a></div><div class="ttdeci">constexpr unsigned int MaxNumOfTensorDimensions</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00018">Types.hpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab18f5c64d49bbc1f7a97d031c5e79e3d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab18f5c64d49bbc1f7a97d031c5e79e3d">&#9670;&nbsp;</a></span>TensorShape() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; unsigned int &gt;&#160;</td>
          <td class="paramname"><em>dimensionSizeList</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00066">66</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; : <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>(boost::numeric_cast&lt;unsigned int&gt;(dimensionSizeList.size()), dimensionSizeList.begin())</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a76d053cd9b4373d90682ad646dad334c"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">armnn::TensorShape::TensorShape</a></div><div class="ttdeci">TensorShape()</div><div class="ttdoc">Empty (invalid) constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00024">Tensor.cpp:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abe2c91b98905750c515790c88f329670"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe2c91b98905750c515790c88f329670">&#9670;&nbsp;</a></span>TensorShape() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00071">71</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; : m_NumDimensions(other.m_NumDimensions)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    std::copy(other.m_Dimensions.cbegin(), other.m_Dimensions.cbegin() + other.m_NumDimensions, m_Dimensions.begin());</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a157e27d41e9f6b21f0d3c025fa47dc24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a157e27d41e9f6b21f0d3c025fa47dc24">&#9670;&nbsp;</a></span>GetNumDimensions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumDimensions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00043">43</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00107">TensorShape::GetNumElements()</a>.</p>

<p class="reference">Referenced by <a class="el" href="backends_2reference_2workloads_2_batch_to_space_n_d_8cpp_source.xhtml#l00035">armnn::BatchToSpaceNd()</a>, <a class="el" href="_tensor_test_8cpp_source.xhtml#l00024">armnn::boost_test_print_type()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00157">ShapesAreBroadcastCompatible::CalcInputSize()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00164">armnnDeserializer::CheckShape()</a>, <a class="el" href="_cl_stack_workload_8cpp_source.xhtml#l00048">ClStackWorkload::ClStackWorkload()</a>, <a class="el" href="_prototxt_conversions_8cpp_source.xhtml#l00034">armnnUtils::ConvertTensorShapeToString()</a>, <a class="el" href="_workload_utils_8hpp_source.xhtml#l00047">armnn::CopyTensorContentsGeneric()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00599">OnnxParser::CreateNetworkFromString()</a>, <a class="el" href="_ref_l2_normalization_workload_8cpp_source.xhtml#l00028">RefL2NormalizationWorkload::Execute()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00085">armnnUtils::ExpandDims()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00072">ExpandTensorShapeTo3dForPermute()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00140">armnnUtils::GetNumElementsAfter()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00113">armnnUtils::GetNumElementsBetween()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00035">ArgMinMaxLayer::InferOutputShapes()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00035">PreluLayer::InferOutputShapes()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00034">ComparisonLayer::InferOutputShapes()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00033">StackLayer::InferOutputShapes()</a>, <a class="el" href="_log_softmax_8cpp_source.xhtml#l00030">armnn::LogSoftmax()</a>, <a class="el" href="_neon_stack_workload_8cpp_source.xhtml#l00050">NeonStackWorkload::NeonStackWorkload()</a>, <a class="el" href="_types_utils_8hpp_source.xhtml#l00263">armnn::operator&lt;&lt;()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l01467">armnnTfParser::OutputShapeOfExpandDims()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l02462">armnnTfParser::OutputShapeOfSqueeze()</a>, <a class="el" href="backends_2reference_2workloads_2_pad_8cpp_source.xhtml#l00022">armnn::Pad()</a>, <a class="el" href="_permute_8cpp_source.xhtml#l00098">armnnUtils::Permuted()</a>, <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00187">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::RunTest()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00164">ShapesAreBroadcastCompatible::ShapesAreBroadcastCompatible()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00141">ShapesAreSameRank::ShapesAreSameRank()</a>, <a class="el" href="backends_2reference_2workloads_2_slice_8cpp_source.xhtml#l00016">armnn::Slice()</a>, <a class="el" href="backends_2reference_2workloads_2_softmax_8cpp_source.xhtml#l00017">armnn::Softmax()</a>, <a class="el" href="_tensor_buffer_array_view_8hpp_source.xhtml#l00022">TensorBufferArrayView&lt; DataType &gt;::TensorBufferArrayView()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00514">TfParser::TfParser()</a>, <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml#l00098">armnnUtils::TransposeTensorShape()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00873">StackQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00616">ArgMinMaxQueueDescriptor::Validate()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01458">SerializerVisitor::VisitQuantizedLstmLayer()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00829">SerializerVisitor::VisitReshapeLayer()</a>, and <a class="el" href="_serializer_8cpp_source.xhtml#l01183">SerializerVisitor::VisitStackLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{ <span class="keywordflow">return</span> m_NumDimensions; }</div></div><!-- fragment -->
</div>
</div>
<a id="a8846406ac37fbd2204f0be16ee05d5b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8846406ac37fbd2204f0be16ee05d5b7">&#9670;&nbsp;</a></span>GetNumElements()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumElements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00192">CHECK_LOCATION</a>.</p>

<p class="reference">Referenced by <a class="el" href="_depth_to_space_8cpp_source.xhtml#l00018">armnn::DepthToSpace()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00058">armnnUtils::FindMinMax()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00043">TensorShape::GetNumDimensions()</a>, and <a class="el" href="_transpose_convolution2d_8cpp_source.xhtml#l00015">armnn::TransposeConvolution2dImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">if</span> (m_NumDimensions == 0)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> count = 1;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; m_NumDimensions; i++)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        count *= m_Dimensions[i];</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">return</span> count;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a77d202fcd47612eb5a4d6d23a7d4b349"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77d202fcd47612eb5a4d6d23a7d4b349">&#9670;&nbsp;</a></span>operator!=()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00102">102</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0ca6f42172d27e9799da3e3f7840ac31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ca6f42172d27e9799da3e3f7840ac31">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00077">77</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    m_NumDimensions = other.m_NumDimensions;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    std::copy(other.m_Dimensions.cbegin(), other.m_Dimensions.cbegin() + other.m_NumDimensions, m_Dimensions.begin());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a07e348fae6036aecdaf41e738d1ae9ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07e348fae6036aecdaf41e738d1ae9ff">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00096">96</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_8hpp_source.xhtml#l00098">TensorInfo::HasMultipleQuantizationScales()</a>.</p>
<div class="fragment"><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> ((m_NumDimensions == other.m_NumDimensions) &amp;&amp;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        std::equal(m_Dimensions.cbegin(), m_Dimensions.cbegin() + m_NumDimensions, other.m_Dimensions.cbegin()));</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6e6dab22049a4432e8306a301dceff52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e6dab22049a4432e8306a301dceff52">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int operator[] </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    CheckDimensionIndex(i);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">return</span> m_Dimensions.at(i);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0bd5fcf80a3838d0922354989762d7c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0bd5fcf80a3838d0922354989762d7c8">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int &amp; operator[] </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00090">90</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    CheckDimensionIndex(i);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> m_Dimensions.at(i);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>include/armnn/<a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a></li>
<li>src/armnn/<a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:54 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
