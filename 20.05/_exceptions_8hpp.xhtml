<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: include/armnn/Exceptions.hpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_exceptions_8hpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#namespaces">Namespaces</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Exceptions.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;sstream&gt;</code><br />
<code>#include &lt;stdexcept&gt;</code><br />
<code>#include &lt;string&gt;</code><br />
</div>
<p><a href="_exceptions_8hpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_check_location.xhtml">CheckLocation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_exception.xhtml">Exception</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for all ArmNN exceptions so that users can filter to just those.  <a href="classarmnn_1_1_exception.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_backend_unavailable_exception.xhtml">BackendUnavailableException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class for non-fatal exceptions raised while initialising a backend.  <a href="classarmnn_1_1_backend_unavailable_exception.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_runtime_unavailable_exception.xhtml">ClRuntimeUnavailableException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_file_not_found_exception.xhtml">FileNotFoundException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_unimplemented_exception.xhtml">UnimplementedException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_validation_exception.xhtml">LayerValidationException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_graph_validation_exception.xhtml">GraphValidationException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_bad_optional_access_exception.xhtml">BadOptionalAccessException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_memory_import_exception.xhtml">MemoryImportException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_memory_export_exception.xhtml">MemoryExportException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_timeout_exception.xhtml">TimeoutException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_backend_profiling_exception.xhtml">BackendProfilingException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_polymorphic_downcast_exception.xhtml">PolymorphicDowncastException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearmnn"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn.xhtml">armnn</a></td></tr>
<tr class="memdesc:namespacearmnn"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copyright (c) 2020 ARM Limited. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:aa3be76aec4ce713822a5ea1ecbb7bc61"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>()&#160;&#160;&#160;<a class="el" href="structarmnn_1_1_check_location.xhtml">armnn::CheckLocation</a>(__func__, __FILE__, __LINE__)</td></tr>
<tr class="separator:aa3be76aec4ce713822a5ea1ecbb7bc61"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ae4ab3bf0697ad13316a6bcba0a8fade5"><td class="memTemplParams" colspan="2">template&lt;typename ExceptionType &gt; </td></tr>
<tr class="memitem:ae4ab3bf0697ad13316a6bcba0a8fade5"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn.xhtml#ae4ab3bf0697ad13316a6bcba0a8fade5">ConditionalThrow</a> (bool condition, const std::string &amp;message)</td></tr>
<tr class="separator:ae4ab3bf0697ad13316a6bcba0a8fade5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ed414c05eb6d4c89e0e4a475a0479c0"><td class="memTemplParams" colspan="2">template&lt;typename ExceptionType &gt; </td></tr>
<tr class="memitem:a6ed414c05eb6d4c89e0e4a475a0479c0"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn.xhtml#a6ed414c05eb6d4c89e0e4a475a0479c0">ConditionalThrow</a> (bool condition)</td></tr>
<tr class="separator:a6ed414c05eb6d4c89e0e4a475a0479c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae57b7f9e2cb7080bf10b28d1f72b558e"><td class="memTemplParams" colspan="2">template&lt;typename ExceptionType , typename ComparedType &gt; </td></tr>
<tr class="memitem:ae57b7f9e2cb7080bf10b28d1f72b558e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn.xhtml#ae57b7f9e2cb7080bf10b28d1f72b558e">ConditionalThrowIfNotEqual</a> (const std::string &amp;message, const ComparedType &amp;leftHandSide, const ComparedType &amp;rightHandSide)</td></tr>
<tr class="memdesc:ae57b7f9e2cb7080bf10b28d1f72b558e"><td class="mdescLeft">&#160;</td><td class="mdescRight">ComparedType must support: operator==(const ComparedType&amp;) operator&lt;&lt;(ostream&amp;, const ComparedType&amp;)  <a href="namespacearmnn.xhtml#ae57b7f9e2cb7080bf10b28d1f72b558e">More...</a><br /></td></tr>
<tr class="separator:ae57b7f9e2cb7080bf10b28d1f72b558e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="aa3be76aec4ce713822a5ea1ecbb7bc61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3be76aec4ce713822a5ea1ecbb7bc61">&#9670;&nbsp;</a></span>CHECK_LOCATION</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CHECK_LOCATION</td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>&#160;&#160;&#160;<a class="el" href="structarmnn_1_1_check_location.xhtml">armnn::CheckLocation</a>(__func__, __FILE__, __LINE__)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_exceptions_8hpp_source.xhtml#l00192">192</a> of file <a class="el" href="_exceptions_8hpp_source.xhtml">Exceptions.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_caffe_parser_8cpp_source.xhtml#l00612">CaffeParserBase::AddConvLayerWithDepthwiseConv()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l00420">CaffeParserBase::AddConvLayerWithSplits()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00420">armnnTfParser::CalcPadding()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l02137">armnnTfParser::CalculatePaddedOutputTensorInfo()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l02105">armnnTfParser::CheckPaddingTensor()</a>, <a class="el" href="_send_timeline_packet_8cpp_source.xhtml#l00014">SendTimelinePacket::Commit()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02594">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00932">armnnTfParser::ConvertTfTensorDataType()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00119">CreateNetworkImpl&lt; IParser &gt;::Create()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00608">TfLiteParser::CreateNetworkFromBinary()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l03614">TfParser::CreateNetworkFromBinaryFile()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01790">CaffeParser::CreateNetworkFromBinaryFile()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01770">CaffeParserBase::CreateNetworkFromString()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00599">OnnxParser::CreateNetworkFromString()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l03594">TfParser::CreateNetworkFromString()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01734">CaffeParserBase::CreateNetworkFromTextFile()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l03559">TfParser::CreateNetworkFromTextFile()</a>, <a class="el" href="_cl_pad_workload_8cpp_source.xhtml#l00039">ClPadWorkload::Execute()</a>, <a class="el" href="_cl_addition_workload_8cpp_source.xhtml#l00032">ClAdditionWorkload::Execute()</a>, <a class="el" href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00029">ClConvertFp16ToFp32Workload::Execute()</a>, <a class="el" href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00029">ClConvertFp32ToFp16Workload::Execute()</a>, <a class="el" href="_cl_subtraction_workload_8cpp_source.xhtml#l00032">ClSubtractionWorkload::Execute()</a>, <a class="el" href="_cl_activation_workload_8cpp_source.xhtml#l00046">ClActivationWorkload::Execute()</a>, <a class="el" href="_cl_lstm_float_workload_8cpp_source.xhtml#l00250">ClLstmFloatWorkload::Execute()</a>, <a class="el" href="_cl_neg_workload_8cpp_source.xhtml#l00039">ClNegWorkload::Execute()</a>, <a class="el" href="_cl_prelu_workload_8cpp_source.xhtml#l00042">ClPreluWorkload::Execute()</a>, <a class="el" href="_cl_quantize_workload_8cpp_source.xhtml#l00043">ClQuantizeWorkload::Execute()</a>, <a class="el" href="_cl_rsqrt_workload_8cpp_source.xhtml#l00039">ClRsqrtWorkload::Execute()</a>, <a class="el" href="_cl_abs_workload_8cpp_source.xhtml#l00040">ClAbsWorkload::Execute()</a>, <a class="el" href="_cl_batch_to_space_nd_workload_8cpp_source.xhtml#l00039">ClBatchToSpaceNdWorkload::Execute()</a>, <a class="el" href="_cl_floor_float_workload_8cpp_source.xhtml#l00034">ClFloorFloatWorkload::Execute()</a>, <a class="el" href="_cl_instance_normalization_workload_8cpp_source.xhtml#l00053">ClInstanceNormalizationWorkload::Execute()</a>, <a class="el" href="_cl_maximum_workload_8cpp_source.xhtml#l00052">ClMaximumWorkload::Execute()</a>, <a class="el" href="_cl_minimum_workload_8cpp_source.xhtml#l00052">ClMinimumWorkload::Execute()</a>, <a class="el" href="_cl_normalization_float_workload_8cpp_source.xhtml#l00049">ClNormalizationFloatWorkload::Execute()</a>, <a class="el" href="_cl_resize_workload_8cpp_source.xhtml#l00071">ClResizeWorkload::Execute()</a>, <a class="el" href="_cl_reshape_workload_8cpp_source.xhtml#l00035">ClReshapeWorkload::Execute()</a>, <a class="el" href="_cl_space_to_depth_workload_8cpp_source.xhtml#l00037">ClSpaceToDepthWorkload::Execute()</a>, <a class="el" href="_ref_comparison_workload_8cpp_source.xhtml#l00039">RefComparisonWorkload::Execute()</a>, <a class="el" href="_ref_elementwise_unary_workload_8cpp_source.xhtml#l00041">RefElementwiseUnaryWorkload::Execute()</a>, <a class="el" href="_cl_arg_min_max_workload_8cpp_source.xhtml#l00075">ClArgMinMaxWorkload::Execute()</a>, <a class="el" href="_cl_comparison_workload_8cpp_source.xhtml#l00056">ClComparisonWorkload::Execute()</a>, <a class="el" href="_cl_slice_workload_8cpp_source.xhtml#l00051">ClSliceWorkload::Execute()</a>, <a class="el" href="_cl_l2_normalization_float_workload_8cpp_source.xhtml#l00047">ClL2NormalizationFloatWorkload::Execute()</a>, <a class="el" href="_cl_depth_to_space_workload_8cpp_source.xhtml#l00060">ClDepthToSpaceWorkload::Execute()</a>, <a class="el" href="_cl_multiplication_workload_8cpp_source.xhtml#l00052">ClMultiplicationWorkload::Execute()</a>, <a class="el" href="_cl_division_float_workload_8cpp_source.xhtml#l00040">ClDivisionFloatWorkload::Execute()</a>, <a class="el" href="_cl_quantized_lstm_workload_8cpp_source.xhtml#l00136">ClQuantizedLstmWorkload::Execute()</a>, <a class="el" href="_cl_strided_slice_workload_8cpp_source.xhtml#l00090">ClStridedSliceWorkload::Execute()</a>, <a class="el" href="_cl_space_to_batch_nd_workload_8cpp_source.xhtml#l00078">ClSpaceToBatchNdWorkload::Execute()</a>, <a class="el" href="_cl_pooling2d_workload_8cpp_source.xhtml#l00054">ClPooling2dWorkload::Execute()</a>, <a class="el" href="_cl_softmax_workload_8cpp_source.xhtml#l00042">ClSoftmaxWorkload::Execute()</a>, <a class="el" href="_cl_batch_normalization_float_workload_8cpp_source.xhtml#l00092">ClBatchNormalizationFloatWorkload::Execute()</a>, <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00148">ClDepthwiseConvolutionWorkload::Execute()</a>, <a class="el" href="_cl_fully_connected_workload_8cpp_source.xhtml#l00084">ClFullyConnectedWorkload::Execute()</a>, <a class="el" href="_cl_convolution2d_workload_8cpp_source.xhtml#l00110">ClConvolution2dWorkload::Execute()</a>, <a class="el" href="_cl_permute_workload_8cpp_source.xhtml#l00045">ClPermuteWorkload::Execute()</a>, <a class="el" href="_cl_transpose_workload_8cpp_source.xhtml#l00043">ClTransposeWorkload::Execute()</a>, <a class="el" href="_cl_transpose_convolution2d_workload_8cpp_source.xhtml#l00098">ClTransposeConvolution2dWorkload::Execute()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00085">armnnUtils::ExpandDims()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01534">CaffeParserBase::GetArmnnOutputSlotForCaffeTop()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00045">ClWorkloadFactory::GetBackendId()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00025">armnn::GetBiasDataType()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l00297">CaffeParserBase::GetBindingInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03071">TfLiteParser::GetBuffer()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00054">BackendRegistry::GetFactory()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l01791">OnnxParser::GetInputs()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l00340">CaffeParserBase::GetInputs()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00766">Deserializer::GetNetworkInputBindingInfo()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l01763">OnnxParser::GetNetworkInputBindingInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03140">TfLiteParser::GetNetworkInputBindingInfo()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00784">Deserializer::GetNetworkOutputBindingInfo()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l01777">OnnxParser::GetNetworkOutputBindingInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03170">TfLiteParser::GetNetworkOutputBindingInfo()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l03698">TfParser::GetNetworkOutputBindingInfo()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02179">Deserializer::GetNormalizationDescriptor()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00107">TensorShape::GetNumElements()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l01574">armnnDeserializer::GetOriginsDescriptor()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00639">Deserializer::GetOutputs()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l01816">OnnxParser::GetOutputs()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02934">TfLiteParser::GetOutputTensorIds()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l00316">LoadedNetwork::GetOutputTensorInfo()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00152">armnnUtils::GetPerAxisParams()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02616">Deserializer::GetQLstmDescriptor()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00038">armnnUtils::GetTensorInfo()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00019">armnnUtils::GetTensorShape()</a>, <a class="el" href="_caffe_preprocessor_8cpp_source.xhtml#l00029">CaffePreprocessor::GetTestCaseData()</a>, <a class="el" href="_yolo_database_8cpp_source.xhtml#l00074">YoloDatabase::GetTestCaseData()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00372">Layer::InferOutputShapes()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00706">Deserializer::LoadGraphFromBinary()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02833">TfLiteParser::LoadModelFromBinary()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00542">OnnxParser::LoadModelFromBinaryFile()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02809">TfLiteParser::LoadModelFromFile()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00579">OnnxParser::LoadModelFromString()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00507">OnnxParser::LoadModelFromTextFile()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01633">CaffeParserBase::LoadNetParam()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00449">OnnxParser::OnnxParser()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l01467">armnnTfParser::OutputShapeOfExpandDims()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l01958">Deserializer::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01493">TfLiteParser::OutputShapeOfSqueeze()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l02462">armnnTfParser::OutputShapeOfSqueeze()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01339">CaffeParserBase::ParseBatchNormLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01278">CaffeParserBase::ParseConcatLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l00702">CaffeParserBase::ParseConvLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01478">CaffeParserBase::ParseDropoutLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01231">CaffeParserBase::ParseEltwiseLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l00365">CaffeParserBase::ParseInputLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01028">CaffeParserBase::ParseLRNLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l00884">CaffeParserBase::ParsePoolingLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01405">CaffeParserBase::ParseScaleLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01457">CaffeParserBase::ParseSplitLayer()</a>, <a class="el" href="_image_tensor_generator_8hpp_source.xhtml#l00091">PrepareImageTensor&lt; float &gt;()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00019">armnnUtils::ProcessConcatInputTensorInfo()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00019">BackendRegistry::Register()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01573">CaffeParserBase::ResolveInPlaceLayers()</a>, <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00187">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::RunTest()</a>, <a class="el" href="_send_timeline_packet_8cpp_source.xhtml#l00122">SendTimelinePacket::SendTimelineMessageDirectoryPackage()</a>, <a class="el" href="_send_timeline_packet_8hpp_source.xhtml#l00025">SendTimelinePacket::SendTimelinePacket()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01552">CaffeParserBase::SetArmnnOutputSlotForCaffeTop()</a>, <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00121">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::Setup()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00514">TfParser::TfParser()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00578">armnnDeserializer::ToConstTensor()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00501">armnnDeserializer::ToTensorInfo()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01510">CaffeParserBase::TrackBindingPoint()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00050">ElementwiseBaseLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00032">QuantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00031">ActivationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00032">ConvertFp32ToFp16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00033">AbsLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00033">ConvertFp32ToBf16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00032">DequantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00036">MemImportLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00037">DebugLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00032">L2NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00032">FakeQuantizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00030">MergeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00036">MemCopyLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00030">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00032">NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00033">ConvertBf16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00032">InstanceNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00032">FloorLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00033">RsqrtLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00061">StackLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00044">BatchToSpaceNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00032">SoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00033">ConvertFp16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00056">ResizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00103">Pooling2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00036">SliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00041">MeanLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00032">LogSoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00032">GatherLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00043">TransposeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00039">ReshapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00043">PermuteLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00072">ArgMinMaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00037">DetectionPostProcessLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00043">ElementwiseUnaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00083">StridedSliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00058">ComparisonLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00122">DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00064">FullyConnectedLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00062">SpaceToDepthLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00069">SpaceToBatchNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00060">DepthToSpaceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00097">PreluLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00097">TransposeConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00115">Convolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00245">ConcatLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00051">BatchNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00094">QuantizedLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00166">LstmLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00168">QLstmLayer::ValidateTensorShapesFromInputs()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_2b72cc348e06937955e62ebdd8a13436.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_exceptions_8hpp.xhtml">Exceptions.hpp</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:47 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
