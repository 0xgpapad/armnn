<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnQuantizer/test/QuantizationDataSetTests.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_quantization_data_set_tests_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">QuantizationDataSetTests.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_quantization_data_set_tests_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;boost/test/unit_test.hpp&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;../QuantizationDataSet.hpp&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="_quantization_data_set_tests_8cpp.xhtml#a3f662379b0269b73ca7edd271a7a9bfc">   14</a></span>&#160;<span class="preprocessor">#define BOOST_FILESYSTEM_NO_DEPRECATED</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;boost/filesystem/operations.hpp&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;boost/filesystem/fstream.hpp&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;boost/filesystem/path.hpp&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;boost/optional/optional.hpp&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearmnn_quantizer.xhtml">armnnQuantizer</a>;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">struct </span>CsvTestHelper {</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    CsvTestHelper()</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        BOOST_TEST_MESSAGE(<span class="stringliteral">&quot;setup fixture&quot;</span>);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    }</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    ~CsvTestHelper()</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        BOOST_TEST_MESSAGE(<span class="stringliteral">&quot;teardown fixture&quot;</span>);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        TearDown();</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    std::string CreateTempCsvFile(std::map&lt;<span class="keywordtype">int</span>, std::vector&lt;float&gt;&gt; csvData)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        boost::filesystem::path fileDir = boost::filesystem::temp_directory_path();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        boost::filesystem::path p{fileDir / boost::filesystem::unique_path(<span class="stringliteral">&quot;%%%%-%%%%-%%%%.csv&quot;</span>)};</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        boost::filesystem::path tensorInput1{fileDir / boost::filesystem::unique_path(<span class="stringliteral">&quot;input_0_0.raw&quot;</span>)};</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        boost::filesystem::path tensorInput2{fileDir / boost::filesystem::unique_path(<span class="stringliteral">&quot;input_1_0.raw&quot;</span>)};</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        boost::filesystem::path tensorInput3{fileDir / boost::filesystem::unique_path(<span class="stringliteral">&quot;input_2_0.raw&quot;</span>)};</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            boost::filesystem::ofstream ofs{p};</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            boost::filesystem::ofstream ofs1{tensorInput1};</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            boost::filesystem::ofstream ofs2{tensorInput2};</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            boost::filesystem::ofstream ofs3{tensorInput3};</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> entry : csvData.at(0))</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                ofs1 &lt;&lt; entry &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> entry : csvData.at(1))</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                ofs2 &lt;&lt; entry &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> entry : csvData.at(2))</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                ofs3 &lt;&lt; entry &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            ofs &lt;&lt; <span class="stringliteral">&quot;0, 0, &quot;</span> &lt;&lt; tensorInput1.c_str() &lt;&lt; std::endl;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            ofs &lt;&lt; <span class="stringliteral">&quot;2, 0, &quot;</span> &lt;&lt; tensorInput3.c_str() &lt;&lt; std::endl;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            ofs &lt;&lt; <span class="stringliteral">&quot;1, 0, &quot;</span> &lt;&lt; tensorInput2.c_str() &lt;&lt; std::endl;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            ofs.close();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            ofs1.close();</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            ofs2.close();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            ofs3.close();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">catch</span> (std::exception &amp;e)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            std::cerr &lt;&lt; <span class="stringliteral">&quot;Unable to write to file at location [&quot;</span> &lt;&lt; p.c_str() &lt;&lt; <span class="stringliteral">&quot;] : &quot;</span> &lt;&lt; e.what() &lt;&lt; std::endl;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            BOOST_TEST(<span class="keyword">false</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        m_CsvFile = p;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">return</span> p.string();</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordtype">void</span> TearDown()</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;       RemoveCsvFile();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordtype">void</span> RemoveCsvFile()</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">if</span> (m_CsvFile)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">try</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                boost::filesystem::remove(*m_CsvFile);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">catch</span> (std::exception &amp;e)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                std::cerr &lt;&lt; <span class="stringliteral">&quot;Unable to delete file [&quot;</span> &lt;&lt; *m_CsvFile &lt;&lt; <span class="stringliteral">&quot;] : &quot;</span> &lt;&lt; e.what() &lt;&lt; std::endl;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                BOOST_TEST(<span class="keyword">false</span>);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    boost::optional&lt;boost::filesystem::path&gt; m_CsvFile;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;};</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<a class="code" href="_output_shape_of_squeeze_8cpp.xhtml#ae3a6cb217a792718f2bd0e8f45e3ca9e">BOOST_AUTO_TEST_SUITE</a>(QuantizationDataSetTests)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="_quantization_data_set_tests_8cpp.xhtml#aafab10e950eee34163e7f86aacc668fd">  114</a></span>&#160;<a class="code" href="_quantization_data_set_tests_8cpp.xhtml#aafab10e950eee34163e7f86aacc668fd">BOOST_FIXTURE_TEST_CASE</a>(CheckDataSet, CsvTestHelper)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    std::map&lt;int, std::vector&lt;float&gt;&gt; csvData;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    csvData.insert(std::pair&lt;<span class="keywordtype">int</span>, std::vector&lt;float&gt;&gt;(0, { 0.111111f, 0.222222f, 0.333333f }));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    csvData.insert(std::pair&lt;<span class="keywordtype">int</span>, std::vector&lt;float&gt;&gt;(1, { 0.444444f, 0.555555f, 0.666666f }));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    csvData.insert(std::pair&lt;<span class="keywordtype">int</span>, std::vector&lt;float&gt;&gt;(2, { 0.777777f, 0.888888f, 0.999999f }));</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    std::string myCsvFile = CsvTestHelper::CreateTempCsvFile(csvData);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml">QuantizationDataSet</a> dataSet(myCsvFile);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    BOOST_TEST(!dataSet.<a class="code" href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#a8e12342fc420701fbffd97025421575a">IsEmpty</a>());</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">int</span> csvRow = 0;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">for</span>(<a class="code" href="classarmnn_quantizer_1_1_quantization_input.xhtml">armnnQuantizer::QuantizationInput</a> input : dataSet)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        BOOST_TEST(input.GetPassId() == csvRow);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        BOOST_TEST(input.GetLayerBindingIds().size() == 1);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        BOOST_TEST(input.GetLayerBindingIds()[0] == 0);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        BOOST_TEST(input.GetDataForEntry(0).size() == 3);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="comment">// Check that QuantizationInput data for binding ID 0 corresponds to float values</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="comment">// used for populating the CSV file using by QuantizationDataSet</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        BOOST_TEST(input.GetDataForEntry(0).at(0) == csvData.at(csvRow).at(0));</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        BOOST_TEST(input.GetDataForEntry(0).at(1) == csvData.at(csvRow).at(1));</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        BOOST_TEST(input.GetDataForEntry(0).at(2) == csvData.at(csvRow).at(2));</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        ++csvRow;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<a class="code" href="_quantization_data_set_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END</a>();</div><div class="ttc" id="_output_shape_of_squeeze_8cpp_xhtml_ae3a6cb217a792718f2bd0e8f45e3ca9e"><div class="ttname"><a href="_output_shape_of_squeeze_8cpp.xhtml#ae3a6cb217a792718f2bd0e8f45e3ca9e">BOOST_AUTO_TEST_SUITE</a></div><div class="ttdeci">BOOST_AUTO_TEST_SUITE(TensorflowLiteParser)</div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_quantization_data_set_xhtml"><div class="ttname"><a href="classarmnn_quantizer_1_1_quantization_data_set.xhtml">armnnQuantizer::QuantizationDataSet</a></div><div class="ttdoc">QuantizationDataSet is a structure which is created after parsing a quantization CSV file...</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_data_set_8hpp_source.xhtml#l00018">QuantizationDataSet.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_quantization_data_set_xhtml_a8e12342fc420701fbffd97025421575a"><div class="ttname"><a href="classarmnn_quantizer_1_1_quantization_data_set.xhtml#a8e12342fc420701fbffd97025421575a">armnnQuantizer::QuantizationDataSet::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_data_set_8hpp_source.xhtml#l00029">QuantizationDataSet.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_quantizer_1_1_quantization_input_xhtml"><div class="ttname"><a href="classarmnn_quantizer_1_1_quantization_input.xhtml">armnnQuantizer::QuantizationInput</a></div><div class="ttdoc">QuantizationInput for specific pass ID, can list a corresponding raw data file for each LayerBindingI...</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_input_8hpp_source.xhtml#l00016">QuantizationInput.hpp:16</a></div></div>
<div class="ttc" id="_quantization_data_set_tests_8cpp_xhtml_af7f71af5c6c124222dd1c42c5df892f4"><div class="ttname"><a href="_quantization_data_set_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END</a></div><div class="ttdeci">BOOST_AUTO_TEST_SUITE_END()</div></div>
<div class="ttc" id="namespacearmnn_quantizer_xhtml"><div class="ttname"><a href="namespacearmnn_quantizer.xhtml">armnnQuantizer</a></div><div class="ttdef"><b>Definition:</b> <a href="src_2armnn_quantizer_2_command_line_processor_8cpp_source.xhtml#l00014">CommandLineProcessor.cpp:14</a></div></div>
<div class="ttc" id="_quantization_data_set_tests_8cpp_xhtml_aafab10e950eee34163e7f86aacc668fd"><div class="ttname"><a href="_quantization_data_set_tests_8cpp.xhtml#aafab10e950eee34163e7f86aacc668fd">BOOST_FIXTURE_TEST_CASE</a></div><div class="ttdeci">BOOST_FIXTURE_TEST_CASE(CheckDataSet, CsvTestHelper)</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_data_set_tests_8cpp_source.xhtml#l00114">QuantizationDataSetTests.cpp:114</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0de8a5774692585e465aba8075a97653.xhtml">armnnQuantizer</a></li><li class="navelem"><a class="el" href="dir_3709aa41a3b61b199034060afb4293ad.xhtml">test</a></li><li class="navelem"><a class="el" href="_quantization_data_set_tests_8cpp.xhtml">QuantizationDataSetTests.cpp</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:42 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
