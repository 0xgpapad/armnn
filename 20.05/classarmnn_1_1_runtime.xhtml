<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: Runtime Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_runtime.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classarmnn_1_1_runtime-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Runtime Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_runtime_8hpp_source.xhtml">Runtime.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Runtime:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_runtime.png" usemap="#Runtime_map" alt=""/>
  <map id="Runtime_map" name="Runtime_map">
<area href="classarmnn_1_1_i_runtime.xhtml" alt="IRuntime" shape="rect" coords="0,0,104,24"/>
<area href="classarmnn_1_1profiling_1_1_i_report_structure.xhtml" alt="IReportStructure" shape="rect" coords="114,0,218,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae225e29e38b44860a32d766053a383dc"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#ae225e29e38b44860a32d766053a383dc">LoadNetwork</a> (<a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> &amp;networkIdOut, <a class="el" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> network) override</td></tr>
<tr class="memdesc:ae225e29e38b44860a32d766053a383dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Loads a complete network into the <a class="el" href="classarmnn_1_1_runtime.xhtml">Runtime</a>.  <a href="#ae225e29e38b44860a32d766053a383dc">More...</a><br /></td></tr>
<tr class="separator:ae225e29e38b44860a32d766053a383dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a115d6e9020c106d938a431e92141456e"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#a115d6e9020c106d938a431e92141456e">LoadNetwork</a> (<a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> &amp;networkIdOut, <a class="el" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> network, std::string &amp;errorMessage) override</td></tr>
<tr class="memdesc:a115d6e9020c106d938a431e92141456e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load a complete network into the <a class="el" href="classarmnn_1_1_i_runtime.xhtml">IRuntime</a>.  <a href="#a115d6e9020c106d938a431e92141456e">More...</a><br /></td></tr>
<tr class="separator:a115d6e9020c106d938a431e92141456e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1ca93de061aac0fb5b59082f1b8984e"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#aa1ca93de061aac0fb5b59082f1b8984e">LoadNetwork</a> (<a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> &amp;networkIdOut, <a class="el" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> network, std::string &amp;errorMessage, const <a class="el" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> &amp;networkProperties) override</td></tr>
<tr class="separator:aa1ca93de061aac0fb5b59082f1b8984e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d0ddcd74d6f6438283e511480b64cc1"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#a7d0ddcd74d6f6438283e511480b64cc1">GetInputTensorInfo</a> (<a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerId) const override</td></tr>
<tr class="separator:a7d0ddcd74d6f6438283e511480b64cc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d5d285b79758564ee68f234e02dd2b2"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#a1d5d285b79758564ee68f234e02dd2b2">GetOutputTensorInfo</a> (<a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId, <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerId) const override</td></tr>
<tr class="separator:a1d5d285b79758564ee68f234e02dd2b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3be3cca4ac08a262383b96868f7123d"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#ad3be3cca4ac08a262383b96868f7123d">EnqueueWorkload</a> (<a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId, const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;inputTensors, const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;outputTensors) override</td></tr>
<tr class="memdesc:ad3be3cca4ac08a262383b96868f7123d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluates a network using input in inputTensors and outputs filled into outputTensors.  <a href="#ad3be3cca4ac08a262383b96868f7123d">More...</a><br /></td></tr>
<tr class="separator:ad3be3cca4ac08a262383b96868f7123d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae54a3b358f009aec340d443d038805a4"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#ae54a3b358f009aec340d443d038805a4">UnloadNetwork</a> (<a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId) override</td></tr>
<tr class="memdesc:ae54a3b358f009aec340d443d038805a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unloads a network from the <a class="el" href="classarmnn_1_1_runtime.xhtml">Runtime</a>.  <a href="#ae54a3b358f009aec340d443d038805a4">More...</a><br /></td></tr>
<tr class="separator:ae54a3b358f009aec340d443d038805a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25505c77f282c0295765d81c86514539"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarmnn_1_1_i_device_spec.xhtml">IDeviceSpec</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#a25505c77f282c0295765d81c86514539">GetDeviceSpec</a> () const override</td></tr>
<tr class="separator:a25505c77f282c0295765d81c86514539"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bcf6ecfacedc0567e1c044f1b0823f0"><td class="memItemLeft" align="right" valign="top">virtual const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_profiler.xhtml">IProfiler</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#a4bcf6ecfacedc0567e1c044f1b0823f0">GetProfiler</a> (<a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId) const override</td></tr>
<tr class="memdesc:a4bcf6ecfacedc0567e1c044f1b0823f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the profiler corresponding to the given network id.  <a href="#a4bcf6ecfacedc0567e1c044f1b0823f0">More...</a><br /></td></tr>
<tr class="separator:a4bcf6ecfacedc0567e1c044f1b0823f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb2506e9166cd0467deaa9651fdade77"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#abb2506e9166cd0467deaa9651fdade77">RegisterDebugCallback</a> (<a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> networkId, const <a class="el" href="namespacearmnn.xhtml#a15f3ad9b5e4e3d46b0a6dda246a7bc28">DebugCallbackFunction</a> &amp;func) override</td></tr>
<tr class="memdesc:abb2506e9166cd0467deaa9651fdade77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers a callback function to debug layers performing custom computations on intermediate tensors.  <a href="#abb2506e9166cd0467deaa9651fdade77">More...</a><br /></td></tr>
<tr class="separator:abb2506e9166cd0467deaa9651fdade77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a013ec7e08ae653e003956b4c9b5d0748"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#a013ec7e08ae653e003956b4c9b5d0748">Runtime</a> (const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">CreationOptions</a> &amp;<a class="el" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>)</td></tr>
<tr class="memdesc:a013ec7e08ae653e003956b4c9b5d0748"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a runtime for workload execution.  <a href="#a013ec7e08ae653e003956b4c9b5d0748">More...</a><br /></td></tr>
<tr class="separator:a013ec7e08ae653e003956b4c9b5d0748"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acedafca2d2711908fe94f2ef71286437"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#acedafca2d2711908fe94f2ef71286437">~Runtime</a> ()</td></tr>
<tr class="separator:acedafca2d2711908fe94f2ef71286437"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ceb8f6be0ed677e54b1892994080c22"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#a1ceb8f6be0ed677e54b1892994080c22">ReportStructure</a> () override</td></tr>
<tr class="separator:a1ceb8f6be0ed677e54b1892994080c22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1profiling_1_1_i_report_structure"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1profiling_1_1_i_report_structure')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1profiling_1_1_i_report_structure.xhtml">IReportStructure</a></td></tr>
<tr class="memitem:a57192ec0b837a6f6db6ae9d0123d68fe inherit pub_methods_classarmnn_1_1profiling_1_1_i_report_structure"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_report_structure.xhtml#a57192ec0b837a6f6db6ae9d0123d68fe">~IReportStructure</a> ()</td></tr>
<tr class="separator:a57192ec0b837a6f6db6ae9d0123d68fe inherit pub_methods_classarmnn_1_1profiling_1_1_i_report_structure"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a01fa2d4db2c1b4ee5269a31e514f37ec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#a01fa2d4db2c1b4ee5269a31e514f37ec">RuntimeLoadedNetworksReserve</a> (<a class="el" href="classarmnn_1_1_runtime.xhtml">armnn::Runtime</a> *runtime)</td></tr>
<tr class="separator:a01fa2d4db2c1b4ee5269a31e514f37ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a118109df27aff774f331aab8e47cf706"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">profiling::ProfilingService</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_runtime.xhtml#a118109df27aff774f331aab8e47cf706">GetProfilingService</a> (<a class="el" href="classarmnn_1_1_runtime.xhtml">armnn::Runtime</a> *runtime)</td></tr>
<tr class="separator:a118109df27aff774f331aab8e47cf706"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_methods_classarmnn_1_1_i_runtime"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarmnn_1_1_i_runtime')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_runtime.xhtml">IRuntime</a></td></tr>
<tr class="memitem:a4646ef5dbce8d3aae30fc99638226069 inherit pub_static_methods_classarmnn_1_1_i_runtime"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_1_1_i_runtime.xhtml">IRuntime</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_runtime.xhtml#a4646ef5dbce8d3aae30fc99638226069">CreateRaw</a> (const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">CreationOptions</a> &amp;<a class="el" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>)</td></tr>
<tr class="separator:a4646ef5dbce8d3aae30fc99638226069 inherit pub_static_methods_classarmnn_1_1_i_runtime"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad44ecd3700748dc30dc4bbe34ba5bde7 inherit pub_static_methods_classarmnn_1_1_i_runtime"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">Create</a> (const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">CreationOptions</a> &amp;<a class="el" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>)</td></tr>
<tr class="separator:ad44ecd3700748dc30dc4bbe34ba5bde7 inherit pub_static_methods_classarmnn_1_1_i_runtime"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a978f3d0d34a944b40240bd130d61e3b6 inherit pub_static_methods_classarmnn_1_1_i_runtime"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_runtime.xhtml#a978f3d0d34a944b40240bd130d61e3b6">Destroy</a> (<a class="el" href="classarmnn_1_1_i_runtime.xhtml">IRuntime</a> *runtime)</td></tr>
<tr class="separator:a978f3d0d34a944b40240bd130d61e3b6 inherit pub_static_methods_classarmnn_1_1_i_runtime"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_runtime"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_runtime')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_runtime.xhtml">IRuntime</a></td></tr>
<tr class="memitem:ad728a798fda08188df91623caebd527c inherit pro_methods_classarmnn_1_1_i_runtime"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_runtime.xhtml#ad728a798fda08188df91623caebd527c">~IRuntime</a> ()</td></tr>
<tr class="separator:ad728a798fda08188df91623caebd527c inherit pro_methods_classarmnn_1_1_i_runtime"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_runtime_8hpp_source.xhtml#l00030">30</a> of file <a class="el" href="_runtime_8hpp_source.xhtml">Runtime.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a013ec7e08ae653e003956b4c9b5d0748"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a013ec7e08ae653e003956b4c9b5d0748">&#9670;&nbsp;</a></span>Runtime()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_runtime.xhtml">Runtime</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">CreationOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>options</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a runtime for workload execution. </p>

<p class="definition">Definition at line <a class="el" href="_runtime_8cpp_source.xhtml#l00171">171</a> of file <a class="el" href="_runtime_8cpp_source.xhtml">Runtime.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_service_8cpp_source.xhtml#l00205">ProfilingService::AddBackendProfilingContext()</a>, <a class="el" href="_device_spec_8hpp_source.xhtml#l00030">DeviceSpec::AddSupportedBackends()</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00163">ARMNN_LOG</a>, <a class="el" href="_version_8hpp_source.xhtml#l00022">ARMNN_VERSION</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00053">ProfilingService::ConfigureProfilingService()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00054">BackendRegistry::GetFactory()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00019">armnn::GetTimeDuration()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00014">armnn::GetTimeNow()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00059">IRuntime::CreationOptions::m_DynamicBackendsPath</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00074">IRuntime::CreationOptions::ExternalProfilingOptions::m_EnableProfiling</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00083">IRuntime::CreationOptions::m_ProfilingOptions</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime::CreationOptions::ExternalProfilingOptions::m_TimelineEnabled</a>, and <a class="el" href="_backend_registry_8cpp_source.xhtml#l00104">BackendRegistry::SetProfilingService()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8hpp_source.xhtml#l00071">Runtime::GetDeviceSpec()</a>.</p>
<div class="fragment"><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    : m_NetworkIdCounter(0),</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      m_ProfilingService(*<span class="keyword">this</span>)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;{</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) &lt;&lt; <span class="stringliteral">&quot;ArmNN v&quot;</span> &lt;&lt; <a class="code" href="_version_8hpp.xhtml#a50bf0553d5c4b76d18a3d37e155b4d11">ARMNN_VERSION</a> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>.m_ProfilingOptions.m_TimelineEnabled &amp;&amp; !<a class="code" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>.m_ProfilingOptions.m_EnableProfiling )</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>(<span class="stringliteral">&quot;It is not possible to enable timeline reporting without profiling being enabled&quot;</span>);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="comment">// Load any available/compatible dynamic backend before the runtime</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">// goes through the backend registry</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    LoadDynamicBackends(<a class="code" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>.m_DynamicBackendsPath);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> supportedBackends;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; <span class="keywordtype">id</span> : <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>().GetBackendIds())</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="comment">// Store backend contexts for the supported ones</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">try</span> {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keyword">auto</span> factoryFun = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#afc0c63ca8db8957b58826f6d7bd231b2">GetFactory</a>(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keyword">auto</span> backend = factoryFun();</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(backend.get() != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keyword">auto</span> context = backend-&gt;CreateBackendContext(<a class="code" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="comment">// backends are allowed to return nullptrs if they</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="comment">// don&#39;t wish to create a backend specific context</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">if</span> (context)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                m_BackendContexts.emplace(std::make_pair(<span class="keywordtype">id</span>, std::move(context)));</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            supportedBackends.emplace(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            unique_ptr&lt;armnn::profiling::IBackendProfiling&gt; profilingIface =</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                std::make_unique&lt;armnn::profiling::BackendProfiling&gt;(<a class="code" href="classarmnn_1_1profiling_1_1_backend_profiling.xhtml">armnn::profiling::BackendProfiling</a>(</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    <a class="code" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>, m_ProfilingService, <span class="keywordtype">id</span>));</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="comment">// Backends may also provide a profiling context. Ask for it now.</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keyword">auto</span> profilingContext = backend-&gt;CreateBackendProfilingContext(<a class="code" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>, profilingIface);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="comment">// Backends that don&#39;t support profiling will return a null profiling context.</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keywordflow">if</span> (profilingContext)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="comment">// Pass the context onto the profiling service.</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                m_ProfilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ab156998ddd9e58d2f79567bfb70e122c">AddBackendProfilingContext</a>(<span class="keywordtype">id</span>, profilingContext);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_unavailable_exception.xhtml">BackendUnavailableException</a>&amp;)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="comment">// Ignore backends which are unavailable</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a00341f4ceb455800e7d1c46b9d0f3f4a">SetProfilingService</a>(m_ProfilingService);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="comment">// pass configuration info to the profiling service</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    m_ProfilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a004992fdba75e298495d6b628234a4bd">ConfigureProfilingService</a>(<a class="code" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>.m_ProfilingOptions);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    m_DeviceSpec.<a class="code" href="classarmnn_1_1_device_spec.xhtml#a35b48a741948fd9b2fca9698a698fdae">AddSupportedBackends</a>(supportedBackends);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) &lt;&lt; <span class="stringliteral">&quot;Initialization time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    &lt;&lt; std::fixed &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(start_time).count() &lt;&lt; <span class="stringliteral">&quot; ms\n&quot;</span>;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_device_spec_xhtml_a35b48a741948fd9b2fca9698a698fdae"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml#a35b48a741948fd9b2fca9698a698fdae">armnn::DeviceSpec::AddSupportedBackends</a></div><div class="ttdeci">void AddSupportedBackends(const BackendIdSet &amp;backendIds, bool isDynamic=false)</div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00030">DeviceSpec.hpp:30</a></div></div>
<div class="ttc" id="_version_8hpp_xhtml_a50bf0553d5c4b76d18a3d37e155b4d11"><div class="ttname"><a href="_version_8hpp.xhtml#a50bf0553d5c4b76d18a3d37e155b4d11">ARMNN_VERSION</a></div><div class="ttdeci">#define ARMNN_VERSION</div><div class="ttdoc">ARMNN_VERSION: &quot;X.Y.Z&quot; where: X = Major version number Y = Minor version number Z = Patch version num...</div><div class="ttdef"><b>Definition:</b> <a href="_version_8hpp_source.xhtml#l00022">Version.hpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_afc0c63ca8db8957b58826f6d7bd231b2"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#afc0c63ca8db8957b58826f6d7bd231b2">armnn::BackendRegistry::GetFactory</a></div><div class="ttdeci">FactoryFunction GetFactory(const BackendId &amp;id) const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00054">BackendRegistry.cpp:54</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a441621f00fd5665898c81a5ae3473c6b"><div class="ttname"><a href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a></div><div class="ttdeci">std::chrono::duration&lt; double, std::milli &gt; GetTimeDuration(std::chrono::high_resolution_clock::time_point start_time)</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00019">Timer.hpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00191">BackendId.hpp:191</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00163">Logging.hpp:163</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac895f6f6897ce335b7b433201bae0b48"><div class="ttname"><a href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a></div><div class="ttdeci">std::chrono::high_resolution_clock::time_point GetTimeNow()</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00014">Timer.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_backend_profiling_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_backend_profiling.xhtml">armnn::profiling::BackendProfiling</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_profiling_8hpp_source.xhtml#l00017">BackendProfiling.hpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a00341f4ceb455800e7d1c46b9d0f3f4a"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a00341f4ceb455800e7d1c46b9d0f3f4a">armnn::BackendRegistry::SetProfilingService</a></div><div class="ttdeci">void SetProfilingService(armnn::Optional&lt; profiling::ProfilingService &amp;&gt; profilingService)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00104">BackendRegistry.cpp:104</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_ab156998ddd9e58d2f79567bfb70e122c"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ab156998ddd9e58d2f79567bfb70e122c">armnn::profiling::ProfilingService::AddBackendProfilingContext</a></div><div class="ttdeci">void AddBackendProfilingContext(const BackendId backendId, std::shared_ptr&lt; armnn::profiling::IBackendProfilingContext &gt; profilingContext)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00205">ProfilingService.cpp:205</a></div></div>
<div class="ttc" id="_file_only_profiling_decorator_tests_8cpp_xhtml_a6560146509197f3e197d8d36f76c1347"><div class="ttname"><a href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a></div><div class="ttdeci">armnn::Runtime::CreationOptions::ExternalProfilingOptions options</div><div class="ttdef"><b>Definition:</b> <a href="_file_only_profiling_decorator_tests_8cpp_source.xhtml#l00106">FileOnlyProfilingDecoratorTests.cpp:106</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a004992fdba75e298495d6b628234a4bd"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a004992fdba75e298495d6b628234a4bd">armnn::profiling::ProfilingService::ConfigureProfilingService</a></div><div class="ttdeci">ProfilingState ConfigureProfilingService(const ExternalProfilingOptions &amp;options, bool resetProfilingService=false)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00053">ProfilingService.cpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_unavailable_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_unavailable_exception.xhtml">armnn::BackendUnavailableException</a></div><div class="ttdoc">Class for non-fatal exceptions raised while initialising a backend. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00068">Exceptions.hpp:68</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acedafca2d2711908fe94f2ef71286437"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acedafca2d2711908fe94f2ef71286437">&#9670;&nbsp;</a></span>~Runtime()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_runtime.xhtml">Runtime</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_runtime_8cpp_source.xhtml#l00235">235</a> of file <a class="el" href="_runtime_8cpp_source.xhtml">Runtime.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00163">ARMNN_LOG</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="_device_spec_8hpp_source.xhtml#l00039">DeviceSpec::ClearDynamicBackends()</a>, <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00313">DynamicBackendUtils::DeregisterDynamicBackends()</a>, <a class="el" href="_device_spec_8hpp_source.xhtml#l00048">DeviceSpec::GetDynamicBackends()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00019">armnn::GetTimeDuration()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00014">armnn::GetTimeNow()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00104">BackendRegistry::SetProfilingService()</a>, and <a class="el" href="_runtime_8cpp_source.xhtml#l00105">Runtime::UnloadNetwork()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8hpp_source.xhtml#l00071">Runtime::GetDeviceSpec()</a>.</p>
<div class="fragment"><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;{</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    std::vector&lt;int&gt; networkIDs;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="comment">// Coverity fix: The following code may throw an exception of type std::length_error.</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        std::transform(m_LoadedNetworks.begin(), m_LoadedNetworks.end(),</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                       std::back_inserter(networkIDs),</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                       [](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;pair) { <span class="keywordflow">return</span> pair.first; });</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; e)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="comment">// Coverity fix: BOOST_LOG_TRIVIAL (typically used to report errors) may throw an</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="comment">// exception of type std::length_error.</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="comment">// Using stderr instead in this context as there is no point in nesting try-catch blocks here.</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;WARNING: An error has occurred when getting the IDs of the networks to unload: &quot;</span> &lt;&lt; e.what()</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                  &lt;&lt; <span class="stringliteral">&quot;\nSome of the loaded networks may not be unloaded&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="comment">// We then proceed to unload all the networks which IDs have been appended to the list</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="comment">// up to the point the exception was thrown (if any).</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> networkID : networkIDs)</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <span class="comment">// Coverity fix: UnloadNetwork() may throw an exception of type std::length_error,</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            <span class="comment">// boost::log::v2s_mt_posix::odr_violation or boost::log::v2s_mt_posix::system_error</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <a class="code" href="classarmnn_1_1_runtime.xhtml#ae54a3b358f009aec340d443d038805a4">UnloadNetwork</a>(networkID);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; e)</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        {</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <span class="comment">// Coverity fix: BOOST_LOG_TRIVIAL (typically used to report errors) may throw an</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            <span class="comment">// exception of type std::length_error.</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="comment">// Using stderr instead in this context as there is no point in nesting try-catch blocks here.</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            std::cerr &lt;&lt; <span class="stringliteral">&quot;WARNING: An error has occurred when unloading network &quot;</span> &lt;&lt; networkID &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; e.what()</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                      &lt;&lt; std::endl;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="comment">// Clear all dynamic backends.</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a7e786263f454b19c40b78c4092a4af5b">DynamicBackendUtils::DeregisterDynamicBackends</a>(m_DeviceSpec.<a class="code" href="classarmnn_1_1_device_spec.xhtml#a2a52bc9548350a186cdb8f9565eed4f0">GetDynamicBackends</a>());</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    m_DeviceSpec.<a class="code" href="classarmnn_1_1_device_spec.xhtml#a5051d926510964d87440330c0469d9c5">ClearDynamicBackends</a>();</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    m_BackendContexts.clear();</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a00341f4ceb455800e7d1c46b9d0f3f4a">SetProfilingService</a>(<a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>());</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) &lt;&lt; <span class="stringliteral">&quot;Shutdown time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    &lt;&lt; std::fixed &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(start_time).count() &lt;&lt; <span class="stringliteral">&quot; ms\n&quot;</span>;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a441621f00fd5665898c81a5ae3473c6b"><div class="ttname"><a href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a></div><div class="ttdeci">std::chrono::duration&lt; double, std::milli &gt; GetTimeDuration(std::chrono::high_resolution_clock::time_point start_time)</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00019">Timer.hpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_a7e786263f454b19c40b78c4092a4af5b"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#a7e786263f454b19c40b78c4092a4af5b">armnn::DynamicBackendUtils::DeregisterDynamicBackends</a></div><div class="ttdeci">static void DeregisterDynamicBackends(const BackendIdSet &amp;dynamicBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00313">DynamicBackendUtils.cpp:313</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00163">Logging.hpp:163</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac895f6f6897ce335b7b433201bae0b48"><div class="ttname"><a href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a></div><div class="ttdeci">std::chrono::high_resolution_clock::time_point GetTimeNow()</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00014">Timer.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a00341f4ceb455800e7d1c46b9d0f3f4a"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a00341f4ceb455800e7d1c46b9d0f3f4a">armnn::BackendRegistry::SetProfilingService</a></div><div class="ttdeci">void SetProfilingService(armnn::Optional&lt; profiling::ProfilingService &amp;&gt; profilingService)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00104">BackendRegistry.cpp:104</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml_a2a52bc9548350a186cdb8f9565eed4f0"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml#a2a52bc9548350a186cdb8f9565eed4f0">armnn::DeviceSpec::GetDynamicBackends</a></div><div class="ttdeci">const BackendIdSet &amp; GetDynamicBackends() const</div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00048">DeviceSpec.hpp:48</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml_a5051d926510964d87440330c0469d9c5"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml#a5051d926510964d87440330c0469d9c5">armnn::DeviceSpec::ClearDynamicBackends</a></div><div class="ttdeci">void ClearDynamicBackends()</div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00039">DeviceSpec.hpp:39</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_ae54a3b358f009aec340d443d038805a4"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#ae54a3b358f009aec340d443d038805a4">armnn::Runtime::UnloadNetwork</a></div><div class="ttdeci">virtual Status UnloadNetwork(NetworkId networkId) override</div><div class="ttdoc">Unloads a network from the Runtime. </div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00105">Runtime.cpp:105</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ad3be3cca4ac08a262383b96868f7123d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3be3cca4ac08a262383b96868f7123d">&#9670;&nbsp;</a></span>EnqueueWorkload()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> EnqueueWorkload </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>outputTensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Evaluates a network using input in inputTensors and outputs filled into outputTensors. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_runtime.xhtml#aec0dc8016a3b1e444dfc1ffb5f15195c">IRuntime</a>.</p>

<p class="definition">Definition at line <a class="el" href="_runtime_8cpp_source.xhtml#l00302">302</a> of file <a class="el" href="_runtime_8cpp_source.xhtml">Runtime.cpp</a>.</p>

<p class="reference">References <a class="el" href="_loaded_network_8cpp_source.xhtml#l00451">LoadedNetwork::EnqueueWorkload()</a>, and <a class="el" href="_loaded_network_8cpp_source.xhtml#l00702">LoadedNetwork::FreeWorkingMemory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_tests_8cpp_source.xhtml#l00366">BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00312">VerifyPostOptimisationStructureTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;{</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <a class="code" href="classarmnn_1_1_loaded_network.xhtml">LoadedNetwork</a>* loadedNetwork = GetLoadedNetworkPtr(networkId);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keyword">static</span> thread_local <a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> lastId = networkId;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordflow">if</span> (lastId != networkId)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        LoadedNetworkFuncSafe(lastId, [](<a class="code" href="classarmnn_1_1_loaded_network.xhtml">LoadedNetwork</a>* network)</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            {</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                network-&gt;<a class="code" href="classarmnn_1_1_loaded_network.xhtml#aaf8558a23ae9be6e7ea165989f1fa808">FreeWorkingMemory</a>();</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            });</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    }</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    lastId=networkId;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">return</span> loadedNetwork-&gt;<a class="code" href="classarmnn_1_1_loaded_network.xhtml#a878c3febb600fd2ccf3b5cb1f9a61e27">EnqueueWorkload</a>(inputTensors, outputTensors);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_loaded_network_xhtml_aaf8558a23ae9be6e7ea165989f1fa808"><div class="ttname"><a href="classarmnn_1_1_loaded_network.xhtml#aaf8558a23ae9be6e7ea165989f1fa808">armnn::LoadedNetwork::FreeWorkingMemory</a></div><div class="ttdeci">void FreeWorkingMemory()</div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8cpp_source.xhtml#l00702">LoadedNetwork.cpp:702</a></div></div>
<div class="ttc" id="classarmnn_1_1_loaded_network_xhtml_a878c3febb600fd2ccf3b5cb1f9a61e27"><div class="ttname"><a href="classarmnn_1_1_loaded_network.xhtml#a878c3febb600fd2ccf3b5cb1f9a61e27">armnn::LoadedNetwork::EnqueueWorkload</a></div><div class="ttdeci">Status EnqueueWorkload(const InputTensors &amp;inputTensors, const OutputTensors &amp;outputTensors)</div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8cpp_source.xhtml#l00451">LoadedNetwork.cpp:451</a></div></div>
<div class="ttc" id="classarmnn_1_1_loaded_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_loaded_network.xhtml">armnn::LoadedNetwork</a></div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8hpp_source.xhtml#l00034">LoadedNetwork.hpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a25505c77f282c0295765d81c86514539"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25505c77f282c0295765d81c86514539">&#9670;&nbsp;</a></span>GetDeviceSpec()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarmnn_1_1_i_device_spec.xhtml">IDeviceSpec</a>&amp; GetDeviceSpec </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_runtime.xhtml#a6f2ccbdacfac6eb983c519976a5ece54">IRuntime</a>.</p>

<p class="definition">Definition at line <a class="el" href="_runtime_8hpp_source.xhtml#l00071">71</a> of file <a class="el" href="_runtime_8hpp_source.xhtml">Runtime.hpp</a>.</p>

<p class="reference">References <a class="el" href="_runtime_8cpp_source.xhtml#l00144">Runtime::GetProfiler()</a>, <a class="el" href="_test_utils_8cpp_source.xhtml#l00025">Runtime::GetProfilingService</a>, <a class="el" href="_file_only_profiling_decorator_tests_8cpp_source.xhtml#l00106">options</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00321">Runtime::RegisterDebugCallback()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00156">Runtime::ReportStructure()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00171">Runtime::Runtime()</a>, <a class="el" href="_runtime_tests_8cpp_source.xhtml#l00029">Runtime::RuntimeLoadedNetworksReserve</a>, and <a class="el" href="_runtime_8cpp_source.xhtml#l00235">Runtime::~Runtime()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_tests_8cpp_source.xhtml#l00038">BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00312">VerifyPostOptimisationStructureTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{ <span class="keywordflow">return</span> m_DeviceSpec; }</div></div><!-- fragment -->
</div>
</div>
<a id="a7d0ddcd74d6f6438283e511480b64cc1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d0ddcd74d6f6438283e511480b64cc1">&#9670;&nbsp;</a></span>GetInputTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> GetInputTensorInfo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>layerId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_runtime.xhtml#a41ac6ca444d41e6147f48a71def60d61">IRuntime</a>.</p>

<p class="definition">Definition at line <a class="el" href="_runtime_8cpp_source.xhtml#l00291">291</a> of file <a class="el" href="_runtime_8cpp_source.xhtml">Runtime.cpp</a>.</p>

<p class="reference">References <a class="el" href="_loaded_network_8cpp_source.xhtml#l00302">LoadedNetwork::GetInputTensorInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_tests_8cpp_source.xhtml#l00366">BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00312">VerifyPostOptimisationStructureTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">return</span> GetLoadedNetworkPtr(networkId)-&gt;<a class="code" href="classarmnn_1_1_loaded_network.xhtml#af616683424cb40d83b5a923db7f06f11">GetInputTensorInfo</a>(layerId);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_loaded_network_xhtml_af616683424cb40d83b5a923db7f06f11"><div class="ttname"><a href="classarmnn_1_1_loaded_network.xhtml#af616683424cb40d83b5a923db7f06f11">armnn::LoadedNetwork::GetInputTensorInfo</a></div><div class="ttdeci">TensorInfo GetInputTensorInfo(LayerBindingId layerId) const</div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8cpp_source.xhtml#l00302">LoadedNetwork.cpp:302</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1d5d285b79758564ee68f234e02dd2b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d5d285b79758564ee68f234e02dd2b2">&#9670;&nbsp;</a></span>GetOutputTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> GetOutputTensorInfo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>layerId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_runtime.xhtml#a52b521ba6b78d819895a7dbaae83ed86">IRuntime</a>.</p>

<p class="definition">Definition at line <a class="el" href="_runtime_8cpp_source.xhtml#l00296">296</a> of file <a class="el" href="_runtime_8cpp_source.xhtml">Runtime.cpp</a>.</p>

<p class="reference">References <a class="el" href="_loaded_network_8cpp_source.xhtml#l00316">LoadedNetwork::GetOutputTensorInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_tests_8cpp_source.xhtml#l00366">BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00312">VerifyPostOptimisationStructureTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;{</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">return</span> GetLoadedNetworkPtr(networkId)-&gt;<a class="code" href="classarmnn_1_1_loaded_network.xhtml#a2b6b57945bc68f659e08d28c8a015e91">GetOutputTensorInfo</a>(layerId);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_loaded_network_xhtml_a2b6b57945bc68f659e08d28c8a015e91"><div class="ttname"><a href="classarmnn_1_1_loaded_network.xhtml#a2b6b57945bc68f659e08d28c8a015e91">armnn::LoadedNetwork::GetOutputTensorInfo</a></div><div class="ttdeci">TensorInfo GetOutputTensorInfo(LayerBindingId layerId) const</div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8cpp_source.xhtml#l00316">LoadedNetwork.cpp:316</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4bcf6ecfacedc0567e1c044f1b0823f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bcf6ecfacedc0567e1c044f1b0823f0">&#9670;&nbsp;</a></span>GetProfiler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_profiler.xhtml">IProfiler</a> &gt; GetProfiler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the profiler corresponding to the given network id. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">networkId</td><td>The id of the network for which to get the profile. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the requested profiler, or nullptr if not found. </dd></dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_runtime.xhtml#a76eaa5bd91bd3958ddbe1fe6f082888a">IRuntime</a>.</p>

<p class="definition">Definition at line <a class="el" href="_runtime_8cpp_source.xhtml#l00144">144</a> of file <a class="el" href="_runtime_8cpp_source.xhtml">Runtime.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8hpp_source.xhtml#l00071">Runtime::GetDeviceSpec()</a>.</p>
<div class="fragment"><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">auto</span> it = m_LoadedNetworks.find(networkId);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">if</span> (it != m_LoadedNetworks.end())</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">auto</span>&amp; loadedNetwork = it-&gt;second;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">return</span> loadedNetwork-&gt;GetProfiler();</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae225e29e38b44860a32d766053a383dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae225e29e38b44860a32d766053a383dc">&#9670;&nbsp;</a></span>LoadNetwork() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> LoadNetwork </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> &amp;&#160;</td>
          <td class="paramname"><em>networkIdOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a>&#160;</td>
          <td class="paramname"><em>network</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Loads a complete network into the <a class="el" href="classarmnn_1_1_runtime.xhtml">Runtime</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">networkIdOut</td><td>- Unique identifier for the network is returned in this reference. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">network</td><td>- Complete network to load into the <a class="el" href="classarmnn_1_1_runtime.xhtml">Runtime</a>. The runtime takes ownership of the network once passed in. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b" title="enumeration ">armnn::Status</a> </dd></dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_runtime.xhtml#acf44b518011359b594bf20fe444d1165">IRuntime</a>.</p>

<p class="definition">Definition at line <a class="el" href="_runtime_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_runtime_8cpp_source.xhtml">Runtime.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_tests_8cpp_source.xhtml#l00038">BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00312">VerifyPostOptimisationStructureTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    std::string ignoredErrorMessage;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_runtime.xhtml#ae225e29e38b44860a32d766053a383dc">LoadNetwork</a>(networkIdOut, std::move(inNetwork), ignoredErrorMessage);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_runtime_xhtml_ae225e29e38b44860a32d766053a383dc"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#ae225e29e38b44860a32d766053a383dc">armnn::Runtime::LoadNetwork</a></div><div class="ttdeci">virtual Status LoadNetwork(NetworkId &amp;networkIdOut, IOptimizedNetworkPtr network) override</div><div class="ttdoc">Loads a complete network into the Runtime. </div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00046">Runtime.cpp:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a115d6e9020c106d938a431e92141456e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a115d6e9020c106d938a431e92141456e">&#9670;&nbsp;</a></span>LoadNetwork() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> LoadNetwork </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> &amp;&#160;</td>
          <td class="paramname"><em>networkIdOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a>&#160;</td>
          <td class="paramname"><em>network</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>errorMessage</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load a complete network into the <a class="el" href="classarmnn_1_1_i_runtime.xhtml">IRuntime</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">networkIdOut</td><td>Unique identifier for the network is returned in this reference. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">network</td><td>Complete network to load into the <a class="el" href="classarmnn_1_1_i_runtime.xhtml">IRuntime</a>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">errorMessage</td><td>Error message if there were any errors. The runtime takes ownership of the network once passed in. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b" title="enumeration ">armnn::Status</a> </dd></dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_runtime.xhtml#a59c572133d8ff0136c8e13c98694fd30">IRuntime</a>.</p>

<p class="definition">Definition at line <a class="el" href="_runtime_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_runtime_8cpp_source.xhtml">Runtime.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> networkProperties;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_runtime.xhtml#ae225e29e38b44860a32d766053a383dc">LoadNetwork</a>(networkIdOut, std::move(inNetwork), errorMessage, networkProperties);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00027">IRuntime.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_xhtml_ae225e29e38b44860a32d766053a383dc"><div class="ttname"><a href="classarmnn_1_1_runtime.xhtml#ae225e29e38b44860a32d766053a383dc">armnn::Runtime::LoadNetwork</a></div><div class="ttdeci">virtual Status LoadNetwork(NetworkId &amp;networkIdOut, IOptimizedNetworkPtr network) override</div><div class="ttdoc">Loads a complete network into the Runtime. </div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00046">Runtime.cpp:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa1ca93de061aac0fb5b59082f1b8984e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1ca93de061aac0fb5b59082f1b8984e">&#9670;&nbsp;</a></span>LoadNetwork() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> LoadNetwork </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> &amp;&#160;</td>
          <td class="paramname"><em>networkIdOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a>&#160;</td>
          <td class="paramname"><em>network</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>errorMessage</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> &amp;&#160;</td>
          <td class="paramname"><em>networkProperties</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_runtime.xhtml#a7cc77101a5437bf82fb7891c5c4a7e69">IRuntime</a>.</p>

<p class="definition">Definition at line <a class="el" href="_runtime_8cpp_source.xhtml#l00060">60</a> of file <a class="el" href="_runtime_8cpp_source.xhtml">Runtime.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Failure</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l00083">LoadedNetwork::MakeLoadedNetwork()</a>, and <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Success</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="classarmnn_1_1_i_optimized_network.xhtml">IOptimizedNetwork</a>* rawNetwork = inNetwork.release();</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    networkIdOut = GenerateNetworkId();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; context : m_BackendContexts)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        context.second-&gt;BeforeLoadNetwork(networkIdOut);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    unique_ptr&lt;LoadedNetwork&gt; loadedNetwork = <a class="code" href="classarmnn_1_1_loaded_network.xhtml#a46fb984b2559006ee8940a7f3e142e18">LoadedNetwork::MakeLoadedNetwork</a>(</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        std::unique_ptr&lt;OptimizedNetwork&gt;(PolymorphicDowncast&lt;OptimizedNetwork*&gt;(rawNetwork)),</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        errorMessage,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        networkProperties,</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        m_ProfilingService);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">if</span> (!loadedNetwork)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">Status::Failure</a>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        std::lock_guard&lt;std::mutex&gt; lockGuard(m_Mutex);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="comment">// Stores the network</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        m_LoadedNetworks[networkIdOut] = std::move(loadedNetwork);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; context : m_BackendContexts)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        context.second-&gt;AfterLoadNetwork(networkIdOut);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">if</span> (m_ProfilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a70db5b1cdd0d22c1fa912c6e8b9089ce">IsProfilingEnabled</a>())</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        m_ProfilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a6c2d955d387944f5b7ad37ebb435a37f">IncrementCounterValue</a>(armnn::profiling::NETWORK_LOADS);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Status::Success</a>;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a6c2d955d387944f5b7ad37ebb435a37f"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a6c2d955d387944f5b7ad37ebb435a37f">armnn::profiling::ProfilingService::IncrementCounterValue</a></div><div class="ttdeci">uint32_t IncrementCounterValue(uint16_t counterUid) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00302">ProfilingService.cpp:302</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_optimized_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_optimized_network.xhtml">armnn::IOptimizedNetwork</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00575">INetwork.hpp:575</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a70db5b1cdd0d22c1fa912c6e8b9089ce"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a70db5b1cdd0d22c1fa912c6e8b9089ce">armnn::profiling::ProfilingService::IsProfilingEnabled</a></div><div class="ttdeci">bool IsProfilingEnabled() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00048">ProfilingService.cpp:48</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a></div></div>
<div class="ttc" id="classarmnn_1_1_loaded_network_xhtml_a46fb984b2559006ee8940a7f3e142e18"><div class="ttname"><a href="classarmnn_1_1_loaded_network.xhtml#a46fb984b2559006ee8940a7f3e142e18">armnn::LoadedNetwork::MakeLoadedNetwork</a></div><div class="ttdeci">static std::unique_ptr&lt; LoadedNetwork &gt; MakeLoadedNetwork(std::unique_ptr&lt; OptimizedNetwork &gt; net, std::string &amp;errorMessage, const INetworkProperties &amp;networkProperties, profiling::ProfilingService &amp;profilingService)</div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8cpp_source.xhtml#l00083">LoadedNetwork.cpp:83</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abb2506e9166cd0467deaa9651fdade77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb2506e9166cd0467deaa9651fdade77">&#9670;&nbsp;</a></span>RegisterDebugCallback()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void RegisterDebugCallback </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a15f3ad9b5e4e3d46b0a6dda246a7bc28">DebugCallbackFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Registers a callback function to debug layers performing custom computations on intermediate tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">networkId</td><td>The id of the network to register the callback. </td></tr>
    <tr><td class="paramname">func</td><td>callback function to pass to the debug layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_runtime.xhtml#a70a22690ce44dfc49511b30456764169">IRuntime</a>.</p>

<p class="definition">Definition at line <a class="el" href="_runtime_8cpp_source.xhtml#l00321">321</a> of file <a class="el" href="_runtime_8cpp_source.xhtml">Runtime.cpp</a>.</p>

<p class="reference">References <a class="el" href="_device_spec_8hpp_source.xhtml#l00030">DeviceSpec::AddSupportedBackends()</a>, <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00262">DynamicBackendUtils::CreateDynamicBackends()</a>, <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00080">DynamicBackendUtils::GetBackendPaths()</a>, <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00175">DynamicBackendUtils::GetSharedObjects()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l00792">LoadedNetwork::RegisterDebugCallback()</a>, and <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00325">DynamicBackendUtils::RegisterDynamicBackends()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8hpp_source.xhtml#l00071">Runtime::GetDeviceSpec()</a>.</p>
<div class="fragment"><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;{</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <a class="code" href="classarmnn_1_1_loaded_network.xhtml">LoadedNetwork</a>* loadedNetwork = GetLoadedNetworkPtr(networkId);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    loadedNetwork-&gt;<a class="code" href="classarmnn_1_1_loaded_network.xhtml#a091ea8d2d804c8902f3120fdf2a36512">RegisterDebugCallback</a>(func);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_loaded_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_loaded_network.xhtml">armnn::LoadedNetwork</a></div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8hpp_source.xhtml#l00034">LoadedNetwork.hpp:34</a></div></div>
<div class="ttc" id="classarmnn_1_1_loaded_network_xhtml_a091ea8d2d804c8902f3120fdf2a36512"><div class="ttname"><a href="classarmnn_1_1_loaded_network.xhtml#a091ea8d2d804c8902f3120fdf2a36512">armnn::LoadedNetwork::RegisterDebugCallback</a></div><div class="ttdeci">void RegisterDebugCallback(const DebugCallbackFunction &amp;func)</div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8cpp_source.xhtml#l00792">LoadedNetwork.cpp:792</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1ceb8f6be0ed677e54b1892994080c22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ceb8f6be0ed677e54b1892994080c22">&#9670;&nbsp;</a></span>ReportStructure()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ReportStructure </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_report_structure.xhtml#a1b2e4f65128eba3d60e783721031381b">IReportStructure</a>.</p>

<p class="definition">Definition at line <a class="el" href="_runtime_8cpp_source.xhtml#l00156">156</a> of file <a class="el" href="_runtime_8cpp_source.xhtml">Runtime.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8hpp_source.xhtml#l00071">Runtime::GetDeviceSpec()</a>.</p>
<div class="fragment"><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;{</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// No-op for the time being, but this may be useful in future to have the profilingService available</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// if (profilingService.IsProfilingEnabled()){}</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    LoadedNetworks::iterator it = m_LoadedNetworks.begin();</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">while</span> (it != m_LoadedNetworks.end())</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keyword">auto</span>&amp; loadedNetwork = it-&gt;second;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        loadedNetwork-&gt;SendNetworkStructure();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="comment">// Increment the Iterator to point to next entry</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        it++;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae54a3b358f009aec340d443d038805a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae54a3b358f009aec340d443d038805a4">&#9670;&nbsp;</a></span>UnloadNetwork()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> UnloadNetwork </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unloads a network from the <a class="el" href="classarmnn_1_1_runtime.xhtml">Runtime</a>. </p>
<p>At the moment this only removes the network from the m_Impl-&gt;m_Network. This might need more work in the future to be AndroidNN compliant. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">networkId</td><td>Unique identifier for the network to be unloaded. Generated in <a class="el" href="classarmnn_1_1_runtime.xhtml#ae225e29e38b44860a32d766053a383dc" title="Loads a complete network into the Runtime. ">LoadNetwork()</a>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b" title="enumeration ">armnn::Status</a> </dd></dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_runtime.xhtml#a43a7ee9625c9c3f4140fa02c92199fd1">IRuntime</a>.</p>

<p class="definition">Definition at line <a class="el" href="_runtime_8cpp_source.xhtml#l00105">105</a> of file <a class="el" href="_runtime_8cpp_source.xhtml">Runtime.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00163">ARMNN_LOG</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407aad42f6697b035b7580e4fef93be20b4d">armnn::debug</a>, <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Failure</a>, <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Success</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::warning</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_tests_8cpp_source.xhtml#l00038">BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="_runtime_8cpp_source.xhtml#l00235">Runtime::~Runtime()</a>.</p>
<div class="fragment"><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordtype">bool</span> unloadOk = <span class="keyword">true</span>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; context : m_BackendContexts)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        unloadOk &amp;= context.second-&gt;BeforeUnloadNetwork(networkId);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">if</span> (!unloadOk)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">warning</a>) &lt;&lt; <span class="stringliteral">&quot;Runtime::UnloadNetwork(): failed to unload &quot;</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                              <span class="stringliteral">&quot;network with ID:&quot;</span> &lt;&lt; networkId &lt;&lt; <span class="stringliteral">&quot; because BeforeUnloadNetwork failed&quot;</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">Status::Failure</a>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        std::lock_guard&lt;std::mutex&gt; lockGuard(m_Mutex);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">if</span> (m_LoadedNetworks.erase(networkId) == 0)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">warning</a>) &lt;&lt; <span class="stringliteral">&quot;WARNING: Runtime::UnloadNetwork(): &quot;</span> &lt;&lt; networkId &lt;&lt; <span class="stringliteral">&quot; not found!&quot;</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">Status::Failure</a>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">if</span> (m_ProfilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a70db5b1cdd0d22c1fa912c6e8b9089ce">IsProfilingEnabled</a>())</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            m_ProfilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a6c2d955d387944f5b7ad37ebb435a37f">IncrementCounterValue</a>(armnn::profiling::NETWORK_UNLOADS);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; context : m_BackendContexts)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        context.second-&gt;AfterUnloadNetwork(networkId);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407aad42f6697b035b7580e4fef93be20b4d">debug</a>) &lt;&lt; <span class="stringliteral">&quot;Runtime::UnloadNetwork(): Unloaded network with ID: &quot;</span> &lt;&lt; networkId;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Status::Success</a>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407aad42f6697b035b7580e4fef93be20b4d"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407aad42f6697b035b7580e4fef93be20b4d">armnn::BoostLogSeverityMapping::debug</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00163">Logging.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a6c2d955d387944f5b7ad37ebb435a37f"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a6c2d955d387944f5b7ad37ebb435a37f">armnn::profiling::ProfilingService::IncrementCounterValue</a></div><div class="ttdeci">uint32_t IncrementCounterValue(uint16_t counterUid) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00302">ProfilingService.cpp:302</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::BoostLogSeverityMapping::warning</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a70db5b1cdd0d22c1fa912c6e8b9089ce"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a70db5b1cdd0d22c1fa912c6e8b9089ce">armnn::profiling::ProfilingService::IsProfilingEnabled</a></div><div class="ttdeci">bool IsProfilingEnabled() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00048">ProfilingService.cpp:48</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="a118109df27aff774f331aab8e47cf706"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a118109df27aff774f331aab8e47cf706">&#9670;&nbsp;</a></span>GetProfilingService</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">profiling::ProfilingService</a>&amp; GetProfilingService </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_runtime.xhtml">armnn::Runtime</a> *&#160;</td>
          <td class="paramname"><em>runtime</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_utils_8cpp_source.xhtml#l00025">25</a> of file <a class="el" href="_test_utils_8cpp_source.xhtml">TestUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8hpp_source.xhtml#l00071">Runtime::GetDeviceSpec()</a>.</p>
<div class="fragment"><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">return</span> runtime-&gt;m_ProfilingService;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a01fa2d4db2c1b4ee5269a31e514f37ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01fa2d4db2c1b4ee5269a31e514f37ec">&#9670;&nbsp;</a></span>RuntimeLoadedNetworksReserve</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void RuntimeLoadedNetworksReserve </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_runtime.xhtml">armnn::Runtime</a> *&#160;</td>
          <td class="paramname"><em>runtime</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_runtime_tests_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="_runtime_tests_8cpp_source.xhtml">RuntimeTests.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8hpp_source.xhtml#l00071">Runtime::GetDeviceSpec()</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    runtime-&gt;m_LoadedNetworks.reserve(1);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/<a class="el" href="_runtime_8hpp_source.xhtml">Runtime.hpp</a></li>
<li>src/armnn/<a class="el" href="_runtime_8cpp_source.xhtml">Runtime.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_runtime.xhtml">Runtime</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:54 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
