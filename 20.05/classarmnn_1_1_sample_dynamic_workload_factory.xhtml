<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: SampleDynamicWorkloadFactory Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_sample_dynamic_workload_factory.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_1_1_sample_dynamic_workload_factory-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SampleDynamicWorkloadFactory Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml">SampleDynamicWorkloadFactory.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for SampleDynamicWorkloadFactory:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_sample_dynamic_workload_factory.png" usemap="#SampleDynamicWorkloadFactory_map" alt=""/>
  <map id="SampleDynamicWorkloadFactory_map" name="SampleDynamicWorkloadFactory_map">
<area href="classarmnn_1_1_i_workload_factory.xhtml" alt="IWorkloadFactory" shape="rect" coords="0,0,199,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a45ed6052be045e15e81d1377b1a92f24"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#a45ed6052be045e15e81d1377b1a92f24">SampleDynamicWorkloadFactory</a> (const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_sample_memory_manager.xhtml">SampleMemoryManager</a> &gt; &amp;memoryManager)</td></tr>
<tr class="separator:a45ed6052be045e15e81d1377b1a92f24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95614d4751bdcb17307e50a091635efb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#a95614d4751bdcb17307e50a091635efb">SampleDynamicWorkloadFactory</a> ()</td></tr>
<tr class="separator:a95614d4751bdcb17307e50a091635efb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1be7b0504ec103774af49b1ff1fbb6f5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#a1be7b0504ec103774af49b1ff1fbb6f5">~SampleDynamicWorkloadFactory</a> ()</td></tr>
<tr class="separator:a1be7b0504ec103774af49b1ff1fbb6f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2cd7e29596b68884bfaade25f8f0dc0"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">GetBackendId</a> () const override</td></tr>
<tr class="separator:ae2cd7e29596b68884bfaade25f8f0dc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed0a782f32856bde72bc10d9381dc11e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">SupportsSubTensors</a> () const override</td></tr>
<tr class="separator:aed0a782f32856bde72bc10d9381dc11e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7ed41b965e30999ff8250e09d7b5abe"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#af7ed41b965e30999ff8250e09d7b5abe">CreateSubTensorHandle</a> (<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &amp;parent, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> const &amp;subTensorShape, unsigned int const *subTensorOrigin) const override</td></tr>
<tr class="separator:af7ed41b965e30999ff8250e09d7b5abe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7239477811c44d4398f0c2d291d9ea76"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, const bool IsMemoryManaged=<a class="el" href="_ref_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a>) const override</td></tr>
<tr class="separator:a7239477811c44d4398f0c2d291d9ea76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaed323bbcbaded57334783e4732ee3ed"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout, const bool IsMemoryManaged=<a class="el" href="_ref_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a>) const override</td></tr>
<tr class="separator:aaed323bbcbaded57334783e4732ee3ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9da9a34fb99114f9d1fb705171a9a6ee"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#a9da9a34fb99114f9d1fb705171a9a6ee">CreateAddition</a> (const <a class="el" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a9da9a34fb99114f9d1fb705171a9a6ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b06edab4eef1822445e4201a1262635"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">CreateInput</a> (const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">InputQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a7b06edab4eef1822445e4201a1262635"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d463f116733f47ce2bab08e430d1ba2"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">CreateOutput</a> (const <a class="el" href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">OutputQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a5d463f116733f47ce2bab08e430d1ba2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_workload_factory"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_workload_factory')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td></tr>
<tr class="memitem:aab62208f96483015c29ad58549efedd8 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aab62208f96483015c29ad58549efedd8">~IWorkloadFactory</a> ()</td></tr>
<tr class="separator:aab62208f96483015c29ad58549efedd8 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3ba329a833bbb63961eb64d6477d691 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ae3ba329a833bbb63961eb64d6477d691">CreateAbs</a> (const <a class="el" href="structarmnn_1_1_abs_queue_descriptor.xhtml">AbsQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ae3ba329a833bbb63961eb64d6477d691 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4458d75c0db21c6abc941cd93a6a24c5 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">CreateActivation</a> (const <a class="el" href="structarmnn_1_1_activation_queue_descriptor.xhtml">ActivationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a4458d75c0db21c6abc941cd93a6a24c5 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac47803c9faacfb7c10219253b99f61ca inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac47803c9faacfb7c10219253b99f61ca">CreateArgMinMax</a> (const <a class="el" href="structarmnn_1_1_arg_min_max_queue_descriptor.xhtml">ArgMinMaxQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ac47803c9faacfb7c10219253b99f61ca inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe1e0d40e23195022c0bc10a8aab55ea inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#abe1e0d40e23195022c0bc10a8aab55ea">CreateBatchNormalization</a> (const <a class="el" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">BatchNormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:abe1e0d40e23195022c0bc10a8aab55ea inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af00ce13ef7dabd17cc4186d0a4991757 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af00ce13ef7dabd17cc4186d0a4991757">CreateBatchToSpaceNd</a> (const <a class="el" href="structarmnn_1_1_batch_to_space_nd_queue_descriptor.xhtml">BatchToSpaceNdQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:af00ce13ef7dabd17cc4186d0a4991757 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fa12033e9be37c529ac54a83ab43b36 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3fa12033e9be37c529ac54a83ab43b36">CreateComparison</a> (const <a class="el" href="structarmnn_1_1_comparison_queue_descriptor.xhtml">ComparisonQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a3fa12033e9be37c529ac54a83ab43b36 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32bb8d6cf5fc028bf501252767c08b21 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a32bb8d6cf5fc028bf501252767c08b21">CreateConcat</a> (const <a class="el" href="structarmnn_1_1_concat_queue_descriptor.xhtml">ConcatQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a32bb8d6cf5fc028bf501252767c08b21 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a963bd7acce29a83d96daeb2cea34f2f7 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a963bd7acce29a83d96daeb2cea34f2f7">CreateConstant</a> (const <a class="el" href="structarmnn_1_1_constant_queue_descriptor.xhtml">ConstantQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a963bd7acce29a83d96daeb2cea34f2f7 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8ecac7ffd75e39c5a651932c5eaa8d2 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af8ecac7ffd75e39c5a651932c5eaa8d2">CreateConvertBf16ToFp32</a> (const <a class="el" href="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor.xhtml">ConvertBf16ToFp32QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:af8ecac7ffd75e39c5a651932c5eaa8d2 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83e0a21747c1ce29b2083c1e3b1d88af inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a83e0a21747c1ce29b2083c1e3b1d88af">CreateConvertFp16ToFp32</a> (const <a class="el" href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">ConvertFp16ToFp32QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a83e0a21747c1ce29b2083c1e3b1d88af inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a147654e5d9af7cec3ecd957c6bd4161e inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a147654e5d9af7cec3ecd957c6bd4161e">CreateConvertFp32ToBf16</a> (const <a class="el" href="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor.xhtml">ConvertFp32ToBf16QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a147654e5d9af7cec3ecd957c6bd4161e inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b414a001b6b31d00bfe4056fd6740c5 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2b414a001b6b31d00bfe4056fd6740c5">CreateConvertFp32ToFp16</a> (const <a class="el" href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">ConvertFp32ToFp16QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a2b414a001b6b31d00bfe4056fd6740c5 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2184995027cd2c9f9980206de9658855 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2184995027cd2c9f9980206de9658855">CreateConvolution2d</a> (const <a class="el" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a2184995027cd2c9f9980206de9658855 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00346a3754d9411bba2e29dc1f996ac6 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a00346a3754d9411bba2e29dc1f996ac6">CreateDebug</a> (const <a class="el" href="structarmnn_1_1_debug_queue_descriptor.xhtml">DebugQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a00346a3754d9411bba2e29dc1f996ac6 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c3a47828ee252dca111605c9be4b072 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3c3a47828ee252dca111605c9be4b072">CreateDepthToSpace</a> (const <a class="el" href="structarmnn_1_1_depth_to_space_queue_descriptor.xhtml">DepthToSpaceQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a3c3a47828ee252dca111605c9be4b072 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accb9759dfd2880efe0f8d2705ddee448 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#accb9759dfd2880efe0f8d2705ddee448">CreateDepthwiseConvolution2d</a> (const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">DepthwiseConvolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:accb9759dfd2880efe0f8d2705ddee448 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3243806bf6c89df8952cc0a3601e538b inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3243806bf6c89df8952cc0a3601e538b">CreateDequantize</a> (const <a class="el" href="structarmnn_1_1_dequantize_queue_descriptor.xhtml">DequantizeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a3243806bf6c89df8952cc0a3601e538b inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0da07faa15302377aa97be89c57677c inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ad0da07faa15302377aa97be89c57677c">CreateDetectionPostProcess</a> (const <a class="el" href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">DetectionPostProcessQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ad0da07faa15302377aa97be89c57677c inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20bb773c7fd6253418bdedac1312cd19 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a20bb773c7fd6253418bdedac1312cd19">CreateDivision</a> (const <a class="el" href="structarmnn_1_1_division_queue_descriptor.xhtml">DivisionQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a20bb773c7fd6253418bdedac1312cd19 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12d2c4e0f0b0d6b36d8a3e14bf69f9e4 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a12d2c4e0f0b0d6b36d8a3e14bf69f9e4">CreateElementwiseUnary</a> (const <a class="el" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a12d2c4e0f0b0d6b36d8a3e14bf69f9e4 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a096bb62d44fadf079ea4463379d4e6aa inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a096bb62d44fadf079ea4463379d4e6aa">CreateEqual</a> (const <a class="el" href="structarmnn_1_1_equal_queue_descriptor.xhtml">EqualQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a096bb62d44fadf079ea4463379d4e6aa inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42581f3d1c22e64b7f3676ea20acab0e inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a42581f3d1c22e64b7f3676ea20acab0e">CreateFakeQuantization</a> (const <a class="el" href="structarmnn_1_1_fake_quantization_queue_descriptor.xhtml">FakeQuantizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a42581f3d1c22e64b7f3676ea20acab0e inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1a45333dc35cb5ba9ab71fca4f359e4 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa1a45333dc35cb5ba9ab71fca4f359e4">CreateFloor</a> (const <a class="el" href="structarmnn_1_1_floor_queue_descriptor.xhtml">FloorQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:aa1a45333dc35cb5ba9ab71fca4f359e4 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c193739520e08f686b347ff795ad2fe inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a1c193739520e08f686b347ff795ad2fe">CreateFullyConnected</a> (const <a class="el" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">FullyConnectedQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a1c193739520e08f686b347ff795ad2fe inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91fe56cae7e970d90f6e7f54427e7d44 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a91fe56cae7e970d90f6e7f54427e7d44">CreateGather</a> (const <a class="el" href="structarmnn_1_1_gather_queue_descriptor.xhtml">GatherQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a91fe56cae7e970d90f6e7f54427e7d44 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e779d1b00a9e885497364ebd0dc24ef inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a4e779d1b00a9e885497364ebd0dc24ef">CreateGreater</a> (const <a class="el" href="structarmnn_1_1_greater_queue_descriptor.xhtml">GreaterQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a4e779d1b00a9e885497364ebd0dc24ef inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96a3123d8a8290b01582d955cdcd75d5 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a96a3123d8a8290b01582d955cdcd75d5">CreateInstanceNormalization</a> (const <a class="el" href="structarmnn_1_1_instance_normalization_queue_descriptor.xhtml">InstanceNormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a96a3123d8a8290b01582d955cdcd75d5 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c86f886e36ce943f1ebc241a37f0413 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3c86f886e36ce943f1ebc241a37f0413">CreateL2Normalization</a> (const <a class="el" href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">L2NormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a3c86f886e36ce943f1ebc241a37f0413 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbdc0563cc7d8b6c1e3c2fb6f13871bf inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#adbdc0563cc7d8b6c1e3c2fb6f13871bf">CreateLogSoftmax</a> (const <a class="el" href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">LogSoftmaxQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:adbdc0563cc7d8b6c1e3c2fb6f13871bf inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6bd7aaf685d4e956d780f8655a6f174 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab6bd7aaf685d4e956d780f8655a6f174">CreateLstm</a> (const <a class="el" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ab6bd7aaf685d4e956d780f8655a6f174 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fe27b35296a25984ab97319fd9a13d6 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3fe27b35296a25984ab97319fd9a13d6">CreateMaximum</a> (const <a class="el" href="structarmnn_1_1_maximum_queue_descriptor.xhtml">MaximumQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a3fe27b35296a25984ab97319fd9a13d6 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac63f8f12f80efbe37b789d1540649470 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac63f8f12f80efbe37b789d1540649470">CreateMean</a> (const <a class="el" href="structarmnn_1_1_mean_queue_descriptor.xhtml">MeanQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:ac63f8f12f80efbe37b789d1540649470 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87bf54bcdc865fd5d4f86194b3899d09 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a87bf54bcdc865fd5d4f86194b3899d09">CreateMemCopy</a> (const <a class="el" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">MemCopyQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a87bf54bcdc865fd5d4f86194b3899d09 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0c99a5e2a6e4a67fec8b8c5906a3552 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af0c99a5e2a6e4a67fec8b8c5906a3552">CreateMemImport</a> (const <a class="el" href="structarmnn_1_1_mem_import_queue_descriptor.xhtml">MemImportQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:af0c99a5e2a6e4a67fec8b8c5906a3552 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc3239cb7dd9434551a70d8534387069 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#acc3239cb7dd9434551a70d8534387069">CreateMerge</a> (const <a class="el" href="structarmnn_1_1_merge_queue_descriptor.xhtml">MergeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:acc3239cb7dd9434551a70d8534387069 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addb710d76098d55ad2f56117b73a9f48 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#addb710d76098d55ad2f56117b73a9f48">CreateMerger</a> (const <a class="el" href="namespacearmnn.xhtml#a308ba160745ba35e1de8d698d0139eb4">MergerQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:addb710d76098d55ad2f56117b73a9f48 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8851ca32bea910cf9376d05527e3dbef inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a8851ca32bea910cf9376d05527e3dbef">CreateMinimum</a> (const <a class="el" href="structarmnn_1_1_minimum_queue_descriptor.xhtml">MinimumQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a8851ca32bea910cf9376d05527e3dbef inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a756955d7436dd8f6e63cdf6367eb1694 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a756955d7436dd8f6e63cdf6367eb1694">CreateMultiplication</a> (const <a class="el" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a756955d7436dd8f6e63cdf6367eb1694 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a185c215631e1b01a6d41232410de4c46 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a185c215631e1b01a6d41232410de4c46">CreateNormalization</a> (const <a class="el" href="structarmnn_1_1_normalization_queue_descriptor.xhtml">NormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a185c215631e1b01a6d41232410de4c46 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0c956e4a638d0a2777ecb71953f7e27 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab0c956e4a638d0a2777ecb71953f7e27">CreatePad</a> (const <a class="el" href="structarmnn_1_1_pad_queue_descriptor.xhtml">PadQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:ab0c956e4a638d0a2777ecb71953f7e27 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dcee0bc4bbae1f745324aed0f841a0a inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2dcee0bc4bbae1f745324aed0f841a0a">CreatePermute</a> (const <a class="el" href="structarmnn_1_1_permute_queue_descriptor.xhtml">PermuteQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a2dcee0bc4bbae1f745324aed0f841a0a inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e95afd9a55700cbf6f9e8db8089f2f2 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a6e95afd9a55700cbf6f9e8db8089f2f2">CreatePooling2d</a> (const <a class="el" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">Pooling2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a6e95afd9a55700cbf6f9e8db8089f2f2 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a012306477c38a533edd29c422227cd8c inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a012306477c38a533edd29c422227cd8c">CreatePreCompiled</a> (const <a class="el" href="structarmnn_1_1_pre_compiled_queue_descriptor.xhtml">PreCompiledQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a012306477c38a533edd29c422227cd8c inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf4a93f605e4e7dad6aee0b4d2159171 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#adf4a93f605e4e7dad6aee0b4d2159171">CreatePrelu</a> (const <a class="el" href="structarmnn_1_1_prelu_queue_descriptor.xhtml">PreluQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:adf4a93f605e4e7dad6aee0b4d2159171 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1942c254ba89d17803e5a636aa927d90 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a1942c254ba89d17803e5a636aa927d90">CreateQuantize</a> (const <a class="el" href="structarmnn_1_1_quantize_queue_descriptor.xhtml">QuantizeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a1942c254ba89d17803e5a636aa927d90 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab17bf35d906f8daad42be0a0799c72ab inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab17bf35d906f8daad42be0a0799c72ab">CreateQLstm</a> (const <a class="el" href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">QLstmQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ab17bf35d906f8daad42be0a0799c72ab inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5ceda49651dcd53fb7eb05658b5a0cb inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab5ceda49651dcd53fb7eb05658b5a0cb">CreateQuantizedLstm</a> (const <a class="el" href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml">QuantizedLstmQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ab5ceda49651dcd53fb7eb05658b5a0cb inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f9d9c79a100a0d057027d8524373962 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a4f9d9c79a100a0d057027d8524373962">CreateReshape</a> (const <a class="el" href="structarmnn_1_1_reshape_queue_descriptor.xhtml">ReshapeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a4f9d9c79a100a0d057027d8524373962 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84377c94a59c589dbf419f838c4b9119 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a84377c94a59c589dbf419f838c4b9119">CreateResize</a> (const <a class="el" href="structarmnn_1_1_resize_queue_descriptor.xhtml">ResizeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a84377c94a59c589dbf419f838c4b9119 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7eb321c47cd90d2cc3823e74596f1239 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a7eb321c47cd90d2cc3823e74596f1239">CreateResizeBilinear</a> (const <a class="el" href="structarmnn_1_1_resize_bilinear_queue_descriptor.xhtml">ResizeBilinearQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a7eb321c47cd90d2cc3823e74596f1239 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2459b9d4f72d78eab86f9ec09384c491 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2459b9d4f72d78eab86f9ec09384c491">CreateRsqrt</a> (const <a class="el" href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml">RsqrtQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a2459b9d4f72d78eab86f9ec09384c491 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86658e2fc02a32acd4de20ef92242347 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a86658e2fc02a32acd4de20ef92242347">CreateSlice</a> (const <a class="el" href="structarmnn_1_1_slice_queue_descriptor.xhtml">SliceQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a86658e2fc02a32acd4de20ef92242347 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a843d44d2e81df87e414df3b3e688de inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a8a843d44d2e81df87e414df3b3e688de">CreateSoftmax</a> (const <a class="el" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">SoftmaxQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a8a843d44d2e81df87e414df3b3e688de inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44e7aebc021646becc3f32722e22553e inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a44e7aebc021646becc3f32722e22553e">CreateSpaceToBatchNd</a> (const <a class="el" href="structarmnn_1_1_space_to_batch_nd_queue_descriptor.xhtml">SpaceToBatchNdQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a44e7aebc021646becc3f32722e22553e inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bdc3801e1e964046730d49c0e11d1ce inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9bdc3801e1e964046730d49c0e11d1ce">CreateSpaceToDepth</a> (const <a class="el" href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">SpaceToDepthQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a9bdc3801e1e964046730d49c0e11d1ce inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a439305cf0a71fc85a0b93cc063100f91 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a439305cf0a71fc85a0b93cc063100f91">CreateSubtraction</a> (const <a class="el" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a439305cf0a71fc85a0b93cc063100f91 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac306abe0073a04300f2d96d0b5eb6218 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac306abe0073a04300f2d96d0b5eb6218">CreateSplitter</a> (const <a class="el" href="structarmnn_1_1_splitter_queue_descriptor.xhtml">SplitterQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ac306abe0073a04300f2d96d0b5eb6218 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa06423ce3f34e4ec2d336889f8c0d79a inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa06423ce3f34e4ec2d336889f8c0d79a">CreateStack</a> (const <a class="el" href="structarmnn_1_1_stack_queue_descriptor.xhtml">StackQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:aa06423ce3f34e4ec2d336889f8c0d79a inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21344e9f338e1d4c3d26825002a02754 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a21344e9f338e1d4c3d26825002a02754">CreateStridedSlice</a> (const <a class="el" href="structarmnn_1_1_strided_slice_queue_descriptor.xhtml">StridedSliceQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a21344e9f338e1d4c3d26825002a02754 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab37f39b9e3e224ccde6b36adc876bb19 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab37f39b9e3e224ccde6b36adc876bb19">CreateSwitch</a> (const <a class="el" href="structarmnn_1_1_switch_queue_descriptor.xhtml">SwitchQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:ab37f39b9e3e224ccde6b36adc876bb19 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96217a8bbb66811608ce729fd49a3dd2 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a96217a8bbb66811608ce729fd49a3dd2">CreateTranspose</a> (const <a class="el" href="structarmnn_1_1_transpose_queue_descriptor.xhtml">TransposeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a96217a8bbb66811608ce729fd49a3dd2 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12cccba82124cc4993868a3173a65167 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a12cccba82124cc4993868a3173a65167">CreateTransposeConvolution2d</a> (const <a class="el" href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">TransposeConvolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a12cccba82124cc4993868a3173a65167 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a7d94ea841143b76fe08ccb308839bfd7"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#a7d94ea841143b76fe08ccb308839bfd7">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a7d94ea841143b76fe08ccb308839bfd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classarmnn_1_1_i_workload_factory"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarmnn_1_1_i_workload_factory')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td></tr>
<tr class="memitem:a74dc9ec1a223eab8b072368b2dacee87 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;backendId, const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a74dc9ec1a223eab8b072368b2dacee87 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d94ea841143b76fe08ccb308839bfd7 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a7d94ea841143b76fe08ccb308839bfd7">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a7d94ea841143b76fe08ccb308839bfd7 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00016">16</a> of file <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml">SampleDynamicWorkloadFactory.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a45ed6052be045e15e81d1377b1a92f24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45ed6052be045e15e81d1377b1a92f24">&#9670;&nbsp;</a></span>SampleDynamicWorkloadFactory() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a> </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_sample_memory_manager.xhtml">SampleMemoryManager</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00022">22</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    : m_MemoryManager(memoryManager)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a95614d4751bdcb17307e50a091635efb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95614d4751bdcb17307e50a091635efb">&#9670;&nbsp;</a></span>SampleDynamicWorkloadFactory() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00027">27</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    : m_MemoryManager(<span class="keyword">new</span> SampleMemoryManager())</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1be7b0504ec103774af49b1ff1fbb6f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1be7b0504ec103774af49b1ff1fbb6f5">&#9670;&nbsp;</a></span>~SampleDynamicWorkloadFactory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00022">22</a> of file <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml">SampleDynamicWorkloadFactory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00032">SampleDynamicWorkloadFactory::GetBackendId()</a>, and <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00037">SampleDynamicWorkloadFactory::IsLayerSupported()</a>.</p>
<div class="fragment"><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a9da9a34fb99114f9d1fb705171a9a6ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9da9a34fb99114f9d1fb705171a9a6ee">&#9670;&nbsp;</a></span>CreateAddition()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateAddition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00057">57</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00032">SampleDynamicWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;SampleDynamicAdditionWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7b06edab4eef1822445e4201a1262635"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b06edab4eef1822445e4201a1262635">&#9670;&nbsp;</a></span>CreateInput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateInput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">InputQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa83593035de93eb4b6dddb9dc8f5ced6">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00063">63</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00032">SampleDynamicWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;CopyMemGenericWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5d463f116733f47ce2bab08e430d1ba2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d463f116733f47ce2bab08e430d1ba2">&#9670;&nbsp;</a></span>CreateOutput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateOutput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">OutputQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#adb279112eb265e5531c4ac2194b6c898">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00069">69</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00032">SampleDynamicWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;CopyMemGenericWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af7ed41b965e30999ff8250e09d7b5abe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7ed41b965e30999ff8250e09d7b5abe">&#9670;&nbsp;</a></span>CreateSubTensorHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&gt; CreateSubTensorHandle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> const &amp;&#160;</td>
          <td class="paramname"><em>subTensorShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int const *&#160;</td>
          <td class="paramname"><em>subTensorOrigin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac043991b839903b2ba9da884e4020848">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00032">32</a> of file <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml">SampleDynamicWorkloadFactory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00057">SampleDynamicWorkloadFactory::CreateAddition()</a>, <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00063">SampleDynamicWorkloadFactory::CreateInput()</a>, <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00069">SampleDynamicWorkloadFactory::CreateOutput()</a>, <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00044">SampleDynamicWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(parent, subTensorShape, subTensorOrigin);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    }</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7239477811c44d4398f0c2d291d9ea76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7239477811c44d4398f0c2d291d9ea76">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code><a class="el" href="_ref_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00044">44</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00032">SampleDynamicWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ScopedCpuTensorHandle&gt;(tensorInfo);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaed323bbcbaded57334783e4732ee3ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaed323bbcbaded57334783e4732ee3ed">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>dataLayout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code><a class="el" href="_ref_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af0b0226f767fd570877710b84c7caa2a">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00050">50</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ScopedCpuTensorHandle&gt;(tensorInfo);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae2cd7e29596b68884bfaade25f8f0dc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2cd7e29596b68884bfaade25f8f0dc0">&#9670;&nbsp;</a></span>GetBackendId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp; GetBackendId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9f7e4296485d2812e7996089149c96d1">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00022">SampleDynamicWorkloadFactory::~SampleDynamicWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">return</span> s_Id;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7d94ea841143b76fe08ccb308839bfd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d94ea841143b76fe08ccb308839bfd7">&#9670;&nbsp;</a></span>IsLayerSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_workload_factory_8cpp_source.xhtml#l00045">IWorkloadFactory::IsLayerSupported()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00022">SampleDynamicWorkloadFactory::~SampleDynamicWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IWorkloadFactory::IsLayerSupported</a>(s_Id, layer, dataType, outReasonIfUnsupported);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a74dc9ec1a223eab8b072368b2dacee87"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">armnn::IWorkloadFactory::IsLayerSupported</a></div><div class="ttdeci">static bool IsLayerSupported(const BackendId &amp;backendId, const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l00045">WorkloadFactory.cpp:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aed0a782f32856bde72bc10d9381dc11e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed0a782f32856bde72bc10d9381dc11e">&#9670;&nbsp;</a></span>SupportsSubTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SupportsSubTensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a37f4eba7877deb34f4d8d64c9bcb9ab5">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00030">30</a> of file <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml">SampleDynamicWorkloadFactory.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/dynamic/sample/<a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml">SampleDynamicWorkloadFactory.hpp</a></li>
<li>src/dynamic/sample/<a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:54 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
