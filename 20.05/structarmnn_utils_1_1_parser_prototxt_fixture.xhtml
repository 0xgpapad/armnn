<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: ParserPrototxtFixture&lt; TParser &gt; Struct Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('structarmnn_utils_1_1_parser_prototxt_fixture.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="structarmnn_utils_1_1_parser_prototxt_fixture-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ParserPrototxtFixture&lt; TParser &gt; Struct Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5c8880d78e094c184ccdbb5a32ec257a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a5c8880d78e094c184ccdbb5a32ec257a">ParserPrototxtFixture</a> ()</td></tr>
<tr class="separator:a5c8880d78e094c184ccdbb5a32ec257a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3387a6894de9ea024d19391004a3b9f"><td class="memTemplParams" colspan="2">template&lt;std::size_t NumOutputDimensions&gt; </td></tr>
<tr class="memitem:ac3387a6894de9ea024d19391004a3b9f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#ac3387a6894de9ea024d19391004a3b9f">RunTest</a> (const std::vector&lt; float &gt; &amp;inputData, const std::vector&lt; float &gt; &amp;expectedOutputData)</td></tr>
<tr class="memdesc:ac3387a6894de9ea024d19391004a3b9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Executes the network with the given input tensor and checks the result against the given output tensor.  <a href="#ac3387a6894de9ea024d19391004a3b9f">More...</a><br /></td></tr>
<tr class="separator:ac3387a6894de9ea024d19391004a3b9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f52e74218733c22d3605233ef985ad4"><td class="memTemplParams" colspan="2">template&lt;std::size_t NumOutputDimensions&gt; </td></tr>
<tr class="memitem:a2f52e74218733c22d3605233ef985ad4"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2f52e74218733c22d3605233ef985ad4">RunComparisonTest</a> (const std::map&lt; std::string, std::vector&lt; float &gt;&gt; &amp;inputData, const std::map&lt; std::string, std::vector&lt; uint8_t &gt;&gt; &amp;expectedOutputData)</td></tr>
<tr class="memdesc:a2f52e74218733c22d3605233ef985ad4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Executes the network with the given input tensor and checks the result against the given output tensor.  <a href="#a2f52e74218733c22d3605233ef985ad4">More...</a><br /></td></tr>
<tr class="separator:a2f52e74218733c22d3605233ef985ad4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99d60b479a3ce38c09a5663898bfc216"><td class="memTemplParams" colspan="2">template&lt;std::size_t NumOutputDimensions, typename T  = float&gt; </td></tr>
<tr class="memitem:a99d60b479a3ce38c09a5663898bfc216"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a99d60b479a3ce38c09a5663898bfc216">RunTest</a> (const std::map&lt; std::string, std::vector&lt; float &gt;&gt; &amp;inputData, const std::map&lt; std::string, std::vector&lt; T &gt;&gt; &amp;expectedOutputData)</td></tr>
<tr class="memdesc:a99d60b479a3ce38c09a5663898bfc216"><td class="mdescLeft">&#160;</td><td class="mdescRight">Executes the network with the given input tensors and checks the results against the given output tensors.  <a href="#a99d60b479a3ce38c09a5663898bfc216">More...</a><br /></td></tr>
<tr class="separator:a99d60b479a3ce38c09a5663898bfc216"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a2bb4ea256fbbf6d53068ca93bb4bc95c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2bb4ea256fbbf6d53068ca93bb4bc95c">SetupSingleInputSingleOutput</a> (const std::string &amp;inputName, const std::string &amp;outputName)</td></tr>
<tr class="memdesc:a2bb4ea256fbbf6d53068ca93bb4bc95c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parses and loads the network defined by the m_Prototext string.  <a href="#a2bb4ea256fbbf6d53068ca93bb4bc95c">More...</a><br /></td></tr>
<tr class="separator:a2bb4ea256fbbf6d53068ca93bb4bc95c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c3ab4f16dbc19e127766bae14824a60"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a7c3ab4f16dbc19e127766bae14824a60">SetupSingleInputSingleOutput</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;inputTensorShape, const std::string &amp;inputName, const std::string &amp;outputName)</td></tr>
<tr class="separator:a7c3ab4f16dbc19e127766bae14824a60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacdd35e3ab19837fb66d97ae6d14fce9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aacdd35e3ab19837fb66d97ae6d14fce9">SetupSingleInputSingleOutput</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;inputTensorShape, const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;outputTensorShape, const std::string &amp;inputName, const std::string &amp;outputName)</td></tr>
<tr class="separator:aacdd35e3ab19837fb66d97ae6d14fce9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a500efa02714545912d65fab4e48f2920"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a500efa02714545912d65fab4e48f2920">Setup</a> (const std::map&lt; std::string, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &gt; &amp;inputShapes, const std::vector&lt; std::string &gt; &amp;requestedOutputs)</td></tr>
<tr class="separator:a500efa02714545912d65fab4e48f2920"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a769404f2985a027a0d626fedfd4de1e9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">Setup</a> ()</td></tr>
<tr class="separator:a769404f2985a027a0d626fedfd4de1e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a831d13496f4d19677209c61edfa9eca5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a831d13496f4d19677209c61edfa9eca5">SetupOptimizedNetwork</a> (const std::map&lt; std::string, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &gt; &amp;inputShapes, const std::vector&lt; std::string &gt; &amp;requestedOutputs)</td></tr>
<tr class="separator:a831d13496f4d19677209c61edfa9eca5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a5ca0f757171382fbf7fa5b05b447b024"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a5ca0f757171382fbf7fa5b05b447b024">m_Prototext</a></td></tr>
<tr class="separator:a5ca0f757171382fbf7fa5b05b447b024"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d1364ba09a94795405d6f70c11a79b8"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; TParser, void(*)(TParser *parser)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a8d1364ba09a94795405d6f70c11a79b8">m_Parser</a></td></tr>
<tr class="separator:a8d1364ba09a94795405d6f70c11a79b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefd699eb0838261fbe9770d511f63f24"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a></td></tr>
<tr class="separator:aefd699eb0838261fbe9770d511f63f24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b81fa34e5ca505b9880755f702fafe7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a></td></tr>
<tr class="separator:a0b81fa34e5ca505b9880755f702fafe7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2da3f1bce243a9798902db85891fd733"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2da3f1bce243a9798902db85891fd733">m_SingleOutputShape</a></td></tr>
<tr class="memdesc:a2da3f1bce243a9798902db85891fd733"><td class="mdescLeft">&#160;</td><td class="mdescRight">This will store the output shape so it don't need to be passed to the single-input-single-output overload of <a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#ac3387a6894de9ea024d19391004a3b9f" title="Executes the network with the given input tensor and checks the result against the given output tenso...">RunTest()</a>.  <a href="#a2da3f1bce243a9798902db85891fd733">More...</a><br /></td></tr>
<tr class="separator:a2da3f1bce243a9798902db85891fd733"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a2f8365158b7c75e43897fbe804b7fc4f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">m_SingleInputName</a></td></tr>
<tr class="memdesc:a2f8365158b7c75e43897fbe804b7fc4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the single-input-single-output overload of <a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">Setup()</a> is called, these will store the input and output name so they don't need to be passed to the single-input-single-output overload of <a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#ac3387a6894de9ea024d19391004a3b9f" title="Executes the network with the given input tensor and checks the result against the given output tenso...">RunTest()</a>.  <a href="#a2f8365158b7c75e43897fbe804b7fc4f">More...</a><br /></td></tr>
<tr class="separator:a2f8365158b7c75e43897fbe804b7fc4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add32b4d209a5b5d6ea6db94b9894ad75"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">m_SingleOutputName</a></td></tr>
<tr class="separator:add32b4d209a5b5d6ea6db94b9894ad75"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename TParser&gt;<br />
struct armnnUtils::ParserPrototxtFixture&lt; TParser &gt;</h3>


<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00024">24</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a5c8880d78e094c184ccdbb5a32ec257a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c8880d78e094c184ccdbb5a32ec257a">&#9670;&nbsp;</a></span>ParserPrototxtFixture()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml">ParserPrototxtFixture</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00026">26</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        : <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a8d1364ba09a94795405d6f70c11a79b8">m_Parser</a>(TParser::Create())</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        , <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a>()))</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        , <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>(-1)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00031">Runtime.cpp:31</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a8d1364ba09a94795405d6f70c11a79b8"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a8d1364ba09a94795405d6f70c11a79b8">armnnUtils::ParserPrototxtFixture::m_Parser</a></div><div class="ttdeci">std::unique_ptr&lt; TParser, void(*)(TParser *parser)&gt; m_Parser</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00069">ParserPrototxtFixture.hpp:69</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a0b81fa34e5ca505b9880755f702fafe7"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">armnnUtils::ParserPrototxtFixture::m_NetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_NetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00071">ParserPrototxtFixture.hpp:71</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">armnnUtils::ParserPrototxtFixture::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00070">ParserPrototxtFixture.hpp:70</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00042">IRuntime.hpp:42</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a2f52e74218733c22d3605233ef985ad4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f52e74218733c22d3605233ef985ad4">&#9670;&nbsp;</a></span>RunComparisonTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RunComparisonTest </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, std::vector&lt; float &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>inputData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, std::vector&lt; uint8_t &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>expectedOutputData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Executes the network with the given input tensor and checks the result against the given output tensor. </p>
<p>Calls RunTest with output type of uint8_t for checking comparison operators. </p>

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00178">178</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00026">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::ParserPrototxtFixture()</a>.</p>
<div class="fragment"><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    RunTest&lt;NumOutputDimensions, uint8_t&gt;(inputData, expectedOutputData);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac3387a6894de9ea024d19391004a3b9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3387a6894de9ea024d19391004a3b9f">&#9670;&nbsp;</a></span>RunTest() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RunTest </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>expectedOutputData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Executes the network with the given input tensor and checks the result against the given output tensor. </p>
<p>This overload assumes that the network has a single input and a single output. </p>

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00170">170</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00026">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::ParserPrototxtFixture()</a>.</p>
<div class="fragment"><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;{</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    RunTest&lt;NumOutputDimensions&gt;({ { <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">m_SingleInputName</a>, inputData } }, { { <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">m_SingleOutputName</a>, expectedOutputData } });</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div><div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a2f8365158b7c75e43897fbe804b7fc4f"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">armnnUtils::ParserPrototxtFixture::m_SingleInputName</a></div><div class="ttdeci">std::string m_SingleInputName</div><div class="ttdoc">If the single-input-single-output overload of Setup() is called, these will store the input and outpu...</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00076">ParserPrototxtFixture.hpp:76</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_add32b4d209a5b5d6ea6db94b9894ad75"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">armnnUtils::ParserPrototxtFixture::m_SingleOutputName</a></div><div class="ttdeci">std::string m_SingleOutputName</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00077">ParserPrototxtFixture.hpp:77</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a99d60b479a3ce38c09a5663898bfc216"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99d60b479a3ce38c09a5663898bfc216">&#9670;&nbsp;</a></span>RunTest() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RunTest </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, std::vector&lt; float &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>inputData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, std::vector&lt; T &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>expectedOutputData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Executes the network with the given input tensors and checks the results against the given output tensors. </p>
<p>This overload supports multiple inputs and multiple outputs, identified by name. </p>

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00187">187</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;{</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// Sets up the armnn input tensors from the given vectors.</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : inputData)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a8d1364ba09a94795405d6f70c11a79b8">m_Parser</a>-&gt;GetNetworkInputBindingInfo(it.first);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        inputTensors.push_back({ bindingInfo.first, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(bindingInfo.second, it.second.data()) });</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// Allocates storage for the output tensors to be written to and sets up the armnn output tensors.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    std::map&lt;std::string, boost::multi_array&lt;T, NumOutputDimensions&gt;&gt; outputStorage;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a8d1364ba09a94795405d6f70c11a79b8">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(it.first);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        outputStorage.emplace(it.first, MakeTensor&lt;T, NumOutputDimensions&gt;(bindingInfo.second));</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        outputTensors.push_back(</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            { bindingInfo.first, <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(bindingInfo.second, outputStorage.at(it.first).data()) });</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;EnqueueWorkload(<a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, inputTensors, outputTensors);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">// Compares each output tensor to the expected values.</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a8d1364ba09a94795405d6f70c11a79b8">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(it.first);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">if</span> (bindingInfo.second.GetNumElements() != it.second.size())</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                boost::str(boost::format(<span class="stringliteral">&quot;Output tensor %1% is expected to have %2% elements. &quot;</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                         <span class="stringliteral">&quot;%3% elements supplied. %4%&quot;</span>) %</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                         it.first %</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                         bindingInfo.second.GetNumElements() %</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                         it.second.size() %</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                         <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="comment">// If the expected output shape is set, the output tensor checks will be carried out.</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2da3f1bce243a9798902db85891fd733">m_SingleOutputShape</a>.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() != 0)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            <span class="keywordflow">if</span> (bindingInfo.second.GetShape().GetNumDimensions() == NumOutputDimensions &amp;&amp;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                bindingInfo.second.GetShape().GetNumDimensions() == <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2da3f1bce243a9798902db85891fd733">m_SingleOutputShape</a>.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>())</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2da3f1bce243a9798902db85891fd733">m_SingleOutputShape</a>.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); ++i)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2da3f1bce243a9798902db85891fd733">m_SingleOutputShape</a>[i] != bindingInfo.second.GetShape()[i])</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                boost::str(boost::format(<span class="stringliteral">&quot;Output tensor %1% is expected to have %2% shape. &quot;</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                                         <span class="stringliteral">&quot;%3% shape supplied. %4%&quot;</span>) %</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                                         it.first %</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                                         bindingInfo.second.GetShape() %</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                                         <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2da3f1bce243a9798902db85891fd733">m_SingleOutputShape</a> %</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                                         <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                        boost::str(boost::format(<span class="stringliteral">&quot;Output tensor %1% is expected to have %2% dimensions. &quot;</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                                 <span class="stringliteral">&quot;%3% dimensions supplied. %4%&quot;</span>) %</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                                 it.first %</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                                 bindingInfo.second.GetShape().GetNumDimensions() %</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                                 NumOutputDimensions %</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                                 <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keyword">auto</span> outputExpected = MakeTensor&lt;T, NumOutputDimensions&gt;(bindingInfo.second, it.second);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;T, uint8_t&gt;::value)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            BOOST_TEST(<a class="code" href="_tensor_helpers_8hpp.xhtml#a0b8fbb443d2cf34a41f6aaae934e3dcb">CompareTensors</a>(outputExpected, outputStorage[it.first], <span class="keyword">true</span>));</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        }</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            BOOST_TEST(<a class="code" href="_tensor_helpers_8hpp.xhtml#a0b8fbb443d2cf34a41f6aaae934e3dcb">CompareTensors</a>(outputExpected, outputStorage[it.first]));</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;}</div><div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a2da3f1bce243a9798902db85891fd733"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2da3f1bce243a9798902db85891fd733">armnnUtils::ParserPrototxtFixture::m_SingleOutputShape</a></div><div class="ttdeci">armnn::TensorShape m_SingleOutputShape</div><div class="ttdoc">This will store the output shape so it don&amp;#39;t need to be passed to the single-input-single-output over...</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00082">ParserPrototxtFixture.hpp:82</a></div></div>
<div class="ttc" id="_tensor_helpers_8hpp_xhtml_a0b8fbb443d2cf34a41f6aaae934e3dcb"><div class="ttname"><a href="_tensor_helpers_8hpp.xhtml#a0b8fbb443d2cf34a41f6aaae934e3dcb">CompareTensors</a></div><div class="ttdeci">boost::test_tools::predicate_result CompareTensors(const boost::multi_array&lt; T, n &gt; &amp;a, const boost::multi_array&lt; T, n &gt; &amp;b, bool compareBoolean=false)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_helpers_8hpp_source.xhtml#l00075">TensorHelpers.hpp:75</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00225">Tensor.hpp:225</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a8d1364ba09a94795405d6f70c11a79b8"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a8d1364ba09a94795405d6f70c11a79b8">armnnUtils::ParserPrototxtFixture::m_Parser</a></div><div class="ttdeci">std::unique_ptr&lt; TParser, void(*)(TParser *parser)&gt; m_Parser</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00069">ParserPrototxtFixture.hpp:69</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00199">Tensor.hpp:199</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00226">Tensor.hpp:226</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a0b81fa34e5ca505b9880755f702fafe7"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">armnnUtils::ParserPrototxtFixture::m_NetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_NetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00071">ParserPrototxtFixture.hpp:71</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00192">Exceptions.hpp:192</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">armnnUtils::ParserPrototxtFixture::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00070">ParserPrototxtFixture.hpp:70</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00146">Tensor.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00043">Tensor.hpp:43</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a500efa02714545912d65fab4e48f2920"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a500efa02714545912d65fab4e48f2920">&#9670;&nbsp;</a></span>Setup() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Setup </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputShapes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>requestedOutputs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00121">121</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network =</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a8d1364ba09a94795405d6f70c11a79b8">m_Parser</a>-&gt;CreateNetworkFromString(<a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a5ca0f757171382fbf7fa5b05b447b024">m_Prototext</a>.c_str(), inputShapes, requestedOutputs);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">auto</span> optimized = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, { <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a> }, <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;GetDeviceSpec());</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a> ret = <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;LoadNetwork(<a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, move(optimized), errorMessage);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">if</span> (ret != <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a>)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(boost::str(</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            boost::format(<span class="stringliteral">&quot;LoadNetwork failed with error: &#39;%1%&#39; %2%&quot;</span>)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                            % errorMessage</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                            % <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a5ca0f757171382fbf7fa5b05b447b024"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a5ca0f757171382fbf7fa5b05b447b024">armnnUtils::ParserPrototxtFixture::m_Prototext</a></div><div class="ttdeci">std::string m_Prototext</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00068">ParserPrototxtFixture.hpp:68</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a8d1364ba09a94795405d6f70c11a79b8"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a8d1364ba09a94795405d6f70c11a79b8">armnnUtils::ParserPrototxtFixture::m_Parser</a></div><div class="ttdeci">std::unique_ptr&lt; TParser, void(*)(TParser *parser)&gt; m_Parser</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00069">ParserPrototxtFixture.hpp:69</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01003">Network.cpp:1003</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00026">Types.hpp:26</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a0b81fa34e5ca505b9880755f702fafe7"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">armnnUtils::ParserPrototxtFixture::m_NetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_NetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00071">ParserPrototxtFixture.hpp:71</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00192">Exceptions.hpp:192</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">armnnUtils::ParserPrototxtFixture::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00070">ParserPrototxtFixture.hpp:70</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00101">INetwork.hpp:101</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a769404f2985a027a0d626fedfd4de1e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a769404f2985a027a0d626fedfd4de1e9">&#9670;&nbsp;</a></span>Setup() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Setup </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00140">140</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="armnn_tf_parser_2test_2_minimum_8cpp_source.xhtml#l00067">BOOST_FIXTURE_TEST_CASE()</a>, <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00026">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::ParserPrototxtFixture()</a>, and <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00086">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::SetupSingleInputSingleOutput()</a>.</p>
<div class="fragment"><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network =</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a8d1364ba09a94795405d6f70c11a79b8">m_Parser</a>-&gt;CreateNetworkFromString(<a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a5ca0f757171382fbf7fa5b05b447b024">m_Prototext</a>.c_str());</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">auto</span> optimized = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, { <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a> }, <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;GetDeviceSpec());</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a> ret = <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;LoadNetwork(<a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, move(optimized), errorMessage);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span> (ret != <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a>)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(boost::str(</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            boost::format(<span class="stringliteral">&quot;LoadNetwork failed with error: &#39;%1%&#39; %2%&quot;</span>)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                            % errorMessage</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                            % <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a5ca0f757171382fbf7fa5b05b447b024"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a5ca0f757171382fbf7fa5b05b447b024">armnnUtils::ParserPrototxtFixture::m_Prototext</a></div><div class="ttdeci">std::string m_Prototext</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00068">ParserPrototxtFixture.hpp:68</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a8d1364ba09a94795405d6f70c11a79b8"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a8d1364ba09a94795405d6f70c11a79b8">armnnUtils::ParserPrototxtFixture::m_Parser</a></div><div class="ttdeci">std::unique_ptr&lt; TParser, void(*)(TParser *parser)&gt; m_Parser</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00069">ParserPrototxtFixture.hpp:69</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01003">Network.cpp:1003</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00026">Types.hpp:26</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a0b81fa34e5ca505b9880755f702fafe7"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">armnnUtils::ParserPrototxtFixture::m_NetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_NetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00071">ParserPrototxtFixture.hpp:71</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00192">Exceptions.hpp:192</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">armnnUtils::ParserPrototxtFixture::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00070">ParserPrototxtFixture.hpp:70</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00101">INetwork.hpp:101</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a831d13496f4d19677209c61edfa9eca5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a831d13496f4d19677209c61edfa9eca5">&#9670;&nbsp;</a></span>SetupOptimizedNetwork()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a> SetupOptimizedNetwork </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputShapes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>requestedOutputs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00158">158</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_assert_8cpp_source.xhtml#l00101">BOOST_FIXTURE_TEST_CASE()</a>, and <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00026">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::ParserPrototxtFixture()</a>.</p>
<div class="fragment"><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network =</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a8d1364ba09a94795405d6f70c11a79b8">m_Parser</a>-&gt;CreateNetworkFromString(<a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a5ca0f757171382fbf7fa5b05b447b024">m_Prototext</a>.c_str(), inputShapes, requestedOutputs);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">auto</span> optimized = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, { <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a> }, <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;GetDeviceSpec());</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">return</span> optimized;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a5ca0f757171382fbf7fa5b05b447b024"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a5ca0f757171382fbf7fa5b05b447b024">armnnUtils::ParserPrototxtFixture::m_Prototext</a></div><div class="ttdeci">std::string m_Prototext</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00068">ParserPrototxtFixture.hpp:68</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a8d1364ba09a94795405d6f70c11a79b8"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a8d1364ba09a94795405d6f70c11a79b8">armnnUtils::ParserPrototxtFixture::m_Parser</a></div><div class="ttdeci">std::unique_ptr&lt; TParser, void(*)(TParser *parser)&gt; m_Parser</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00069">ParserPrototxtFixture.hpp:69</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01003">Network.cpp:1003</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">armnnUtils::ParserPrototxtFixture::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00070">ParserPrototxtFixture.hpp:70</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00101">INetwork.hpp:101</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2bb4ea256fbbf6d53068ca93bb4bc95c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bb4ea256fbbf6d53068ca93bb4bc95c">&#9670;&nbsp;</a></span>SetupSingleInputSingleOutput() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetupSingleInputSingleOutput </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>inputName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>outputName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parses and loads the network defined by the m_Prototext string. </p>

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00086">86</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_assert_8cpp_source.xhtml#l00095">BOOST_FIXTURE_TEST_CASE()</a>, and <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00026">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::ParserPrototxtFixture()</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// Stores the input and output name so they don&#39;t need to be passed to the single-input-single-output RunTest().</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">m_SingleInputName</a> = inputName;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">m_SingleOutputName</a> = outputName;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">Setup</a>({ }, { outputName });</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div><div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a2f8365158b7c75e43897fbe804b7fc4f"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">armnnUtils::ParserPrototxtFixture::m_SingleInputName</a></div><div class="ttdeci">std::string m_SingleInputName</div><div class="ttdoc">If the single-input-single-output overload of Setup() is called, these will store the input and outpu...</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00076">ParserPrototxtFixture.hpp:76</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_add32b4d209a5b5d6ea6db94b9894ad75"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">armnnUtils::ParserPrototxtFixture::m_SingleOutputName</a></div><div class="ttdeci">std::string m_SingleOutputName</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00077">ParserPrototxtFixture.hpp:77</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a769404f2985a027a0d626fedfd4de1e9"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">armnnUtils::ParserPrototxtFixture::Setup</a></div><div class="ttdeci">void Setup()</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00140">ParserPrototxtFixture.hpp:140</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7c3ab4f16dbc19e127766bae14824a60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c3ab4f16dbc19e127766bae14824a60">&#9670;&nbsp;</a></span>SetupSingleInputSingleOutput() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetupSingleInputSingleOutput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>inputName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>outputName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00096">96</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Stores the input and output name so they don&#39;t need to be passed to the single-input-single-output RunTest().</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">m_SingleInputName</a> = inputName;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">m_SingleOutputName</a> = outputName;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">Setup</a>({ { inputName, inputTensorShape } }, { outputName });</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a2f8365158b7c75e43897fbe804b7fc4f"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">armnnUtils::ParserPrototxtFixture::m_SingleInputName</a></div><div class="ttdeci">std::string m_SingleInputName</div><div class="ttdoc">If the single-input-single-output overload of Setup() is called, these will store the input and outpu...</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00076">ParserPrototxtFixture.hpp:76</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_add32b4d209a5b5d6ea6db94b9894ad75"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">armnnUtils::ParserPrototxtFixture::m_SingleOutputName</a></div><div class="ttdeci">std::string m_SingleOutputName</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00077">ParserPrototxtFixture.hpp:77</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a769404f2985a027a0d626fedfd4de1e9"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">armnnUtils::ParserPrototxtFixture::Setup</a></div><div class="ttdeci">void Setup()</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00140">ParserPrototxtFixture.hpp:140</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aacdd35e3ab19837fb66d97ae6d14fce9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacdd35e3ab19837fb66d97ae6d14fce9">&#9670;&nbsp;</a></span>SetupSingleInputSingleOutput() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetupSingleInputSingleOutput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>outputTensorShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>inputName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>outputName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00107">107</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="comment">// Stores the input name, the output name and the output tensor shape</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">// so they don&#39;t need to be passed to the single-input-single-output RunTest().</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">m_SingleInputName</a> = inputName;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">m_SingleOutputName</a> = outputName;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2da3f1bce243a9798902db85891fd733">m_SingleOutputShape</a> = outputTensorShape;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">Setup</a>({ { inputName, inputTensorShape } }, { outputName });</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a2da3f1bce243a9798902db85891fd733"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2da3f1bce243a9798902db85891fd733">armnnUtils::ParserPrototxtFixture::m_SingleOutputShape</a></div><div class="ttdeci">armnn::TensorShape m_SingleOutputShape</div><div class="ttdoc">This will store the output shape so it don&amp;#39;t need to be passed to the single-input-single-output over...</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00082">ParserPrototxtFixture.hpp:82</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a2f8365158b7c75e43897fbe804b7fc4f"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">armnnUtils::ParserPrototxtFixture::m_SingleInputName</a></div><div class="ttdeci">std::string m_SingleInputName</div><div class="ttdoc">If the single-input-single-output overload of Setup() is called, these will store the input and outpu...</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00076">ParserPrototxtFixture.hpp:76</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_add32b4d209a5b5d6ea6db94b9894ad75"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">armnnUtils::ParserPrototxtFixture::m_SingleOutputName</a></div><div class="ttdeci">std::string m_SingleOutputName</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00077">ParserPrototxtFixture.hpp:77</a></div></div>
<div class="ttc" id="structarmnn_utils_1_1_parser_prototxt_fixture_xhtml_a769404f2985a027a0d626fedfd4de1e9"><div class="ttname"><a href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">armnnUtils::ParserPrototxtFixture::Setup</a></div><div class="ttdeci">void Setup()</div><div class="ttdef"><b>Definition:</b> <a href="_parser_prototxt_fixture_8hpp_source.xhtml#l00140">ParserPrototxtFixture.hpp:140</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a0b81fa34e5ca505b9880755f702fafe7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b81fa34e5ca505b9880755f702fafe7">&#9670;&nbsp;</a></span>m_NetworkIdentifier</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a> m_NetworkIdentifier</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00071">71</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00187">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::RunTest()</a>, and <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00121">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::Setup()</a>.</p>

</div>
</div>
<a id="a8d1364ba09a94795405d6f70c11a79b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d1364ba09a94795405d6f70c11a79b8">&#9670;&nbsp;</a></span>m_Parser</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;TParser, void(*)(TParser* parser)&gt; m_Parser</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00069">69</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00187">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::RunTest()</a>, <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00121">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::Setup()</a>, and <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00158">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::SetupOptimizedNetwork()</a>.</p>

</div>
</div>
<a id="a5ca0f757171382fbf7fa5b05b447b024"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ca0f757171382fbf7fa5b05b447b024">&#9670;&nbsp;</a></span>m_Prototext</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string m_Prototext</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00068">68</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00121">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::Setup()</a>, and <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00158">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::SetupOptimizedNetwork()</a>.</p>

</div>
</div>
<a id="aefd699eb0838261fbe9770d511f63f24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefd699eb0838261fbe9770d511f63f24">&#9670;&nbsp;</a></span>m_Runtime</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a> m_Runtime</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00070">70</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00187">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::RunTest()</a>, <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00121">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::Setup()</a>, and <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00158">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::SetupOptimizedNetwork()</a>.</p>

</div>
</div>
<a id="a2f8365158b7c75e43897fbe804b7fc4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f8365158b7c75e43897fbe804b7fc4f">&#9670;&nbsp;</a></span>m_SingleInputName</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string m_SingleInputName</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>If the single-input-single-output overload of <a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">Setup()</a> is called, these will store the input and output name so they don't need to be passed to the single-input-single-output overload of <a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#ac3387a6894de9ea024d19391004a3b9f" title="Executes the network with the given input tensor and checks the result against the given output tenso...">RunTest()</a>. </p>

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00076">76</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00170">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::RunTest()</a>, and <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00086">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::SetupSingleInputSingleOutput()</a>.</p>

</div>
</div>
<a id="add32b4d209a5b5d6ea6db94b9894ad75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add32b4d209a5b5d6ea6db94b9894ad75">&#9670;&nbsp;</a></span>m_SingleOutputName</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string m_SingleOutputName</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00077">77</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00170">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::RunTest()</a>, and <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00086">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::SetupSingleInputSingleOutput()</a>.</p>

</div>
</div>
<a id="a2da3f1bce243a9798902db85891fd733"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2da3f1bce243a9798902db85891fd733">&#9670;&nbsp;</a></span>m_SingleOutputShape</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> m_SingleOutputShape</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This will store the output shape so it don't need to be passed to the single-input-single-output overload of <a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml#ac3387a6894de9ea024d19391004a3b9f" title="Executes the network with the given input tensor and checks the result against the given output tenso...">RunTest()</a>. </p>

<p class="definition">Definition at line <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00082">82</a> of file <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00187">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::RunTest()</a>, and <a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml#l00107">ParserPrototxtFixture&lt; armnnOnnxParser::IOnnxParser &gt;::SetupSingleInputSingleOutput()</a>.</p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li>src/armnnUtils/<a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn_utils.xhtml">armnnUtils</a></li><li class="navelem"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml">ParserPrototxtFixture</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:56 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
