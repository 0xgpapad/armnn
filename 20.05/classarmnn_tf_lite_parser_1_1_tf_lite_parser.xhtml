<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: TfLiteParser Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">TfLiteParser Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for TfLiteParser:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_tf_lite_parser_1_1_tf_lite_parser.png" usemap="#TfLiteParser_map" alt=""/>
  <map id="TfLiteParser_map" name="TfLiteParser_map">
<area href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml" alt="ITfLiteParser" shape="rect" coords="0,0,84,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:abfc86471394295357a23b3addd0b5b1c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> = std::unique_ptr&lt; tflite::ModelT &gt;</td></tr>
<tr class="separator:abfc86471394295357a23b3addd0b5b1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a988cb5e216eb87d854414c6a0282eeb4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a988cb5e216eb87d854414c6a0282eeb4">SubgraphPtr</a> = std::unique_ptr&lt; tflite::SubGraphT &gt;</td></tr>
<tr class="separator:a988cb5e216eb87d854414c6a0282eeb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadad81a95152fe5aad839db352d4012c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#aadad81a95152fe5aad839db352d4012c">OperatorPtr</a> = std::unique_ptr&lt; tflite::OperatorT &gt;</td></tr>
<tr class="separator:aadad81a95152fe5aad839db352d4012c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab80edc19da7460a95a0ac05902f244b7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ab80edc19da7460a95a0ac05902f244b7">OperatorCodePtr</a> = std::unique_ptr&lt; tflite::OperatorCodeT &gt;</td></tr>
<tr class="separator:ab80edc19da7460a95a0ac05902f244b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ab952e29d01028931f75f997ad7cbd4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a4ab952e29d01028931f75f997ad7cbd4">TensorPtr</a> = std::unique_ptr&lt; tflite::TensorT &gt;</td></tr>
<tr class="separator:a4ab952e29d01028931f75f997ad7cbd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3486e6c1a291aa67efd8b280ffb83cc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> = const tflite::TensorT *</td></tr>
<tr class="separator:ac3486e6c1a291aa67efd8b280ffb83cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd8bee7fb9b86485a60bc7ee05114270"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> = std::vector&lt; <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> &gt;</td></tr>
<tr class="separator:abd8bee7fb9b86485a60bc7ee05114270"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7553cea300edaeb5722990f99f042ef0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a> = std::pair&lt; size_t, <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> &gt;</td></tr>
<tr class="separator:a7553cea300edaeb5722990f99f042ef0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86428e0c674542488c7292dfbe2ce381"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> = std::vector&lt; <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a> &gt;</td></tr>
<tr class="separator:a86428e0c674542488c7292dfbe2ce381"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab93d9fb8a272789623edfa0b214c40f9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ab93d9fb8a272789623edfa0b214c40f9">BufferPtr</a> = std::unique_ptr&lt; tflite::BufferT &gt;</td></tr>
<tr class="separator:ab93d9fb8a272789623edfa0b214c40f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaafbda6e6816876b3d7963cfe64dd2f8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">BufferRawPtr</a> = const tflite::BufferT *</td></tr>
<tr class="separator:aaafbda6e6816876b3d7963cfe64dd2f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a012b24cafd443425314d4f9e06cec6c1"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a012b24cafd443425314d4f9e06cec6c1">CreateNetworkFromBinaryFile</a> (const char *graphFile) override</td></tr>
<tr class="memdesc:a012b24cafd443425314d4f9e06cec6c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a flatbuffers binary file on disk.  <a href="#a012b24cafd443425314d4f9e06cec6c1">More...</a><br /></td></tr>
<tr class="separator:a012b24cafd443425314d4f9e06cec6c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8ee09f5e3e78ecfdf00acfdc37588dc"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ae8ee09f5e3e78ecfdf00acfdc37588dc">CreateNetworkFromBinary</a> (const std::vector&lt; uint8_t &gt; &amp;binaryContent) override</td></tr>
<tr class="memdesc:ae8ee09f5e3e78ecfdf00acfdc37588dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a flatbuffers binary.  <a href="#ae8ee09f5e3e78ecfdf00acfdc37588dc">More...</a><br /></td></tr>
<tr class="separator:ae8ee09f5e3e78ecfdf00acfdc37588dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91ba75587a31033088cb4f156e847efb"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a91ba75587a31033088cb4f156e847efb">GetNetworkInputBindingInfo</a> (size_t subgraphId, const std::string &amp;name) const override</td></tr>
<tr class="memdesc:a91ba75587a31033088cb4f156e847efb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve binding info (layer id and tensor info) for the network input identified by the given layer name and subgraph id.  <a href="#a91ba75587a31033088cb4f156e847efb">More...</a><br /></td></tr>
<tr class="separator:a91ba75587a31033088cb4f156e847efb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a475b7cb5db683bb6fbb1c3fae40cb2b3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a475b7cb5db683bb6fbb1c3fae40cb2b3">GetNetworkOutputBindingInfo</a> (size_t subgraphId, const std::string &amp;name) const override</td></tr>
<tr class="memdesc:a475b7cb5db683bb6fbb1c3fae40cb2b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve binding info (layer id and tensor info) for the network output identified by the given layer name and subgraph id.  <a href="#a475b7cb5db683bb6fbb1c3fae40cb2b3">More...</a><br /></td></tr>
<tr class="separator:a475b7cb5db683bb6fbb1c3fae40cb2b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae18739116b52dbab31bbf490450beb90"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ae18739116b52dbab31bbf490450beb90">GetSubgraphCount</a> () const override</td></tr>
<tr class="memdesc:ae18739116b52dbab31bbf490450beb90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of subgraphs in the parsed model.  <a href="#ae18739116b52dbab31bbf490450beb90">More...</a><br /></td></tr>
<tr class="separator:ae18739116b52dbab31bbf490450beb90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58501692772880e7ef55485a4c95aab9"><td class="memItemLeft" align="right" valign="top">virtual std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a58501692772880e7ef55485a4c95aab9">GetSubgraphInputTensorNames</a> (size_t subgraphId) const override</td></tr>
<tr class="memdesc:a58501692772880e7ef55485a4c95aab9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the input tensor names for a given subgraph.  <a href="#a58501692772880e7ef55485a4c95aab9">More...</a><br /></td></tr>
<tr class="separator:a58501692772880e7ef55485a4c95aab9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab97e69d07f06e392bd0cc2e5bcbf1be6"><td class="memItemLeft" align="right" valign="top">virtual std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ab97e69d07f06e392bd0cc2e5bcbf1be6">GetSubgraphOutputTensorNames</a> (size_t subgraphId) const override</td></tr>
<tr class="memdesc:ab97e69d07f06e392bd0cc2e5bcbf1be6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the output tensor names for a given subgraph.  <a href="#ab97e69d07f06e392bd0cc2e5bcbf1be6">More...</a><br /></td></tr>
<tr class="separator:ab97e69d07f06e392bd0cc2e5bcbf1be6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ed4853234865d838da50085da99b2a6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a2ed4853234865d838da50085da99b2a6">TfLiteParser</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="structarmnn_tf_lite_parser_1_1_i_tf_lite_parser_1_1_tf_lite_parser_options.xhtml">ITfLiteParser::TfLiteParserOptions</a> &gt; &amp;<a class="el" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>())</td></tr>
<tr class="separator:a2ed4853234865d838da50085da99b2a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af022366efc39da82d47a5fa390be50f5"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#af022366efc39da82d47a5fa390be50f5">~TfLiteParser</a> ()</td></tr>
<tr class="separator:af022366efc39da82d47a5fa390be50f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ac5411554ab8c02ca286af52c98f6bd87"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ac5411554ab8c02ca286af52c98f6bd87">LoadModelFromFile</a> (const char *fileName)</td></tr>
<tr class="separator:ac5411554ab8c02ca286af52c98f6bd87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a858104f225c302988fba35c1cb299066"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a858104f225c302988fba35c1cb299066">LoadModelFromBinary</a> (const uint8_t *binaryContent, size_t len)</td></tr>
<tr class="separator:a858104f225c302988fba35c1cb299066"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b49afca01112a4f4d023726ccd38876"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a4b49afca01112a4f4d023726ccd38876">GetInputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:a4b49afca01112a4f4d023726ccd38876"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84ad865bb9b5fa0e4841aa35a14a14d8"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a84ad865bb9b5fa0e4841aa35a14a14d8">GetOutputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:a84ad865bb9b5fa0e4841aa35a14a14d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abda91b07a94d0f498b76655e03647d9a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abda91b07a94d0f498b76655e03647d9a">GetSubgraphInputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex)</td></tr>
<tr class="separator:abda91b07a94d0f498b76655e03647d9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afba7f99227765786c4ed9cb2acc09739"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#afba7f99227765786c4ed9cb2acc09739">GetSubgraphOutputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex)</td></tr>
<tr class="separator:afba7f99227765786c4ed9cb2acc09739"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b4b0b88a5e79a88b8b60db76398f575"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; int32_t &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a8b4b0b88a5e79a88b8b60db76398f575">GetInputTensorIds</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:a8b4b0b88a5e79a88b8b60db76398f575"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe6c475f92d02dd1eb12acd746e4736f"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; int32_t &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#afe6c475f92d02dd1eb12acd746e4736f">GetOutputTensorIds</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:afe6c475f92d02dd1eb12acd746e4736f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5336d7700f4a5bcc272fbc9216541222"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">BufferRawPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a5336d7700f4a5bcc272fbc9216541222">GetBuffer</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t bufferIndex)</td></tr>
<tr class="separator:a5336d7700f4a5bcc272fbc9216541222"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0a90d432c9c41f9846f41f11c9e54c9"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#aa0a90d432c9c41f9846f41f11c9e54c9">OutputShapeOfSqueeze</a> (const std::vector&lt; uint32_t &gt; &amp;squeezeDims, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;inputTensorInfo)</td></tr>
<tr class="separator:aa0a90d432c9c41f9846f41f11c9e54c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaebfa9a01a0bb8a0935114ff0140cc45"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#aaebfa9a01a0bb8a0935114ff0140cc45">OutputShapeOfReshape</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;inputTensorInfo, const std::vector&lt; int32_t &gt; &amp;targetDimsIn)</td></tr>
<tr class="separator:aaebfa9a01a0bb8a0935114ff0140cc45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classarmnn_tf_lite_parser_1_1_i_tf_lite_parser"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarmnn_tf_lite_parser_1_1_i_tf_lite_parser')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml">ITfLiteParser</a></td></tr>
<tr class="memitem:acf8cc929eadbabf197b36f7364d3d2cb inherit pub_static_methods_classarmnn_tf_lite_parser_1_1_i_tf_lite_parser"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml">ITfLiteParser</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#acf8cc929eadbabf197b36f7364d3d2cb">CreateRaw</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="structarmnn_tf_lite_parser_1_1_i_tf_lite_parser_1_1_tf_lite_parser_options.xhtml">TfLiteParserOptions</a> &gt; &amp;<a class="el" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>())</td></tr>
<tr class="separator:acf8cc929eadbabf197b36f7364d3d2cb inherit pub_static_methods_classarmnn_tf_lite_parser_1_1_i_tf_lite_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9932449a89a62cfcfd72a4fedbee1ab7 inherit pub_static_methods_classarmnn_tf_lite_parser_1_1_i_tf_lite_parser"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearmnn_tf_lite_parser.xhtml#af69bedce3c37be895f75146016ba8a17">ITfLiteParserPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#a9932449a89a62cfcfd72a4fedbee1ab7">Create</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="structarmnn_tf_lite_parser_1_1_i_tf_lite_parser_1_1_tf_lite_parser_options.xhtml">TfLiteParserOptions</a> &gt; &amp;<a class="el" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>())</td></tr>
<tr class="separator:a9932449a89a62cfcfd72a4fedbee1ab7 inherit pub_static_methods_classarmnn_tf_lite_parser_1_1_i_tf_lite_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29a2a153962a701843d5c8ae953cb032 inherit pub_static_methods_classarmnn_tf_lite_parser_1_1_i_tf_lite_parser"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#a29a2a153962a701843d5c8ae953cb032">Destroy</a> (<a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml">ITfLiteParser</a> *parser)</td></tr>
<tr class="separator:a29a2a153962a701843d5c8ae953cb032 inherit pub_static_methods_classarmnn_tf_lite_parser_1_1_i_tf_lite_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_classarmnn_tf_lite_parser_1_1_i_tf_lite_parser"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_tf_lite_parser_1_1_i_tf_lite_parser')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml">ITfLiteParser</a></td></tr>
<tr class="memitem:a13235fd3261f0637807bc8e8970124b0 inherit pro_methods_classarmnn_tf_lite_parser_1_1_i_tf_lite_parser"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#a13235fd3261f0637807bc8e8970124b0">~ITfLiteParser</a> ()</td></tr>
<tr class="separator:a13235fd3261f0637807bc8e8970124b0 inherit pro_methods_classarmnn_tf_lite_parser_1_1_i_tf_lite_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00019">19</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ab93d9fb8a272789623edfa0b214c40f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab93d9fb8a272789623edfa0b214c40f9">&#9670;&nbsp;</a></span>BufferPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ab93d9fb8a272789623edfa0b214c40f9">BufferPtr</a> =  std::unique_ptr&lt;tflite::BufferT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00032">32</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="aaafbda6e6816876b3d7963cfe64dd2f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaafbda6e6816876b3d7963cfe64dd2f8">&#9670;&nbsp;</a></span>BufferRawPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">BufferRawPtr</a> =  const tflite::BufferT *</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00033">33</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="abfc86471394295357a23b3addd0b5b1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfc86471394295357a23b3addd0b5b1c">&#9670;&nbsp;</a></span>ModelPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> =  std::unique_ptr&lt;tflite::ModelT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00023">23</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="ab80edc19da7460a95a0ac05902f244b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab80edc19da7460a95a0ac05902f244b7">&#9670;&nbsp;</a></span>OperatorCodePtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ab80edc19da7460a95a0ac05902f244b7">OperatorCodePtr</a> =  std::unique_ptr&lt;tflite::OperatorCodeT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00026">26</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="aadad81a95152fe5aad839db352d4012c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aadad81a95152fe5aad839db352d4012c">&#9670;&nbsp;</a></span>OperatorPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#aadad81a95152fe5aad839db352d4012c">OperatorPtr</a> =  std::unique_ptr&lt;tflite::OperatorT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00025">25</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a988cb5e216eb87d854414c6a0282eeb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a988cb5e216eb87d854414c6a0282eeb4">&#9670;&nbsp;</a></span>SubgraphPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a988cb5e216eb87d854414c6a0282eeb4">SubgraphPtr</a> =  std::unique_ptr&lt;tflite::SubGraphT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00024">24</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a7553cea300edaeb5722990f99f042ef0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7553cea300edaeb5722990f99f042ef0">&#9670;&nbsp;</a></span>TensorIdRawPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a> =  std::pair&lt;size_t, <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00030">30</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a86428e0c674542488c7292dfbe2ce381"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86428e0c674542488c7292dfbe2ce381">&#9670;&nbsp;</a></span>TensorIdRawPtrVector</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> =  std::vector&lt;<a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00031">31</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a4ab952e29d01028931f75f997ad7cbd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ab952e29d01028931f75f997ad7cbd4">&#9670;&nbsp;</a></span>TensorPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a4ab952e29d01028931f75f997ad7cbd4">TensorPtr</a> =  std::unique_ptr&lt;tflite::TensorT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00027">27</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="ac3486e6c1a291aa67efd8b280ffb83cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3486e6c1a291aa67efd8b280ffb83cc">&#9670;&nbsp;</a></span>TensorRawPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> =  const tflite::TensorT *</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00028">28</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="abd8bee7fb9b86485a60bc7ee05114270"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd8bee7fb9b86485a60bc7ee05114270">&#9670;&nbsp;</a></span>TensorRawPtrVector</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> =  std::vector&lt;<a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00029">29</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a2ed4853234865d838da50085da99b2a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ed4853234865d838da50085da99b2a6">&#9670;&nbsp;</a></span>TfLiteParser()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml">TfLiteParser</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="structarmnn_tf_lite_parser_1_1_i_tf_lite_parser_1_1_tf_lite_parser_options.xhtml">ITfLiteParser::TfLiteParserOptions</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>options</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>()</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00489">489</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00125">CHECK_MODEL</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#afcc1c3a20bd2860e0ddd21674389246f">IConnectableLayer::GetName()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00092">TensorInfo::GetNumDimensions()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00088">TensorInfo::GetShape()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00786">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00090">TensorInfo::SetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00501">armnnDeserializer::ToTensorInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03234">ITfLiteParser::CreateRaw()</a>, and <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00063">TfLiteParser::~TfLiteParser()</a>.</p>
<div class="fragment"><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;: m_Options(options)</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;, m_Network(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;, m_ParserFunctions(tflite::BuiltinOperator_MAX+1, &amp;TfLiteParser::ParseUnsupportedOperator)</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;{</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="comment">// register supported operators</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ADD]                     = &amp;TfLiteParser::ParseAdd;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_AVERAGE_POOL_2D]         = &amp;TfLiteParser::ParseAveragePool2D;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_BATCH_TO_SPACE_ND]       = &amp;TfLiteParser::ParseBatchToSpaceND;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CONCATENATION]           = &amp;TfLiteParser::ParseConcatenation;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CONV_2D]                 = &amp;TfLiteParser::ParseConv2D;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CUSTOM]                  = &amp;TfLiteParser::ParseCustomOperator;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DEPTHWISE_CONV_2D]       = &amp;TfLiteParser::ParseDepthwiseConv2D;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DEQUANTIZE]              = &amp;TfLiteParser::ParseDequantize;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_EXP]                     = &amp;TfLiteParser::ParseExp;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_FULLY_CONNECTED]         = &amp;TfLiteParser::ParseFullyConnected;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LOGISTIC]                = &amp;TfLiteParser::ParseLogistic;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_L2_NORMALIZATION]        = &amp;TfLiteParser::ParseL2Normalization;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MAX_POOL_2D]             = &amp;TfLiteParser::ParseMaxPool2D;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MAXIMUM]                 = &amp;TfLiteParser::ParseMaximum;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MEAN]                    = &amp;TfLiteParser::ParseMean;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MINIMUM]                 = &amp;TfLiteParser::ParseMinimum;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MUL]                     = &amp;TfLiteParser::ParseMul;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PACK]                    = &amp;TfLiteParser::ParsePack;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PAD]                     = &amp;TfLiteParser::ParsePad;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_QUANTIZE]                = &amp;TfLiteParser::ParseQuantize;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RELU]                    = &amp;TfLiteParser::ParseRelu;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RELU6]                   = &amp;TfLiteParser::ParseRelu6;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RESHAPE]                 = &amp;TfLiteParser::ParseReshape;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RESIZE_BILINEAR]         = &amp;TfLiteParser::ParseResizeBilinear;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RESIZE_NEAREST_NEIGHBOR] = &amp;TfLiteParser::ParseResizeNearestNeighbor;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SLICE]                   = &amp;TfLiteParser::ParseSlice;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SOFTMAX]                 = &amp;TfLiteParser::ParseSoftmax;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SPACE_TO_BATCH_ND]       = &amp;TfLiteParser::ParseSpaceToBatchND;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SPLIT]                   = &amp;TfLiteParser::ParseSplit;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SPLIT_V]                 = &amp;TfLiteParser::ParseSplitV;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SQUEEZE]                 = &amp;TfLiteParser::ParseSqueeze;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_STRIDED_SLICE]           = &amp;TfLiteParser::ParseStridedSlice;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SUB]                     = &amp;TfLiteParser::ParseSub;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_TANH]                    = &amp;TfLiteParser::ParseTanH;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_TRANSPOSE]               = &amp;TfLiteParser::ParseTranspose;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_TRANSPOSE_CONV]          = &amp;TfLiteParser::ParseTransposeConv;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_UNPACK]                  = &amp;TfLiteParser::ParseUnpack;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="comment">// register supported custom operators</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    m_CustomParserFunctions[<span class="stringliteral">&quot;TFLite_Detection_PostProcess&quot;</span>]      = &amp;TfLiteParser::ParseDetectionPostProcess;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af022366efc39da82d47a5fa390be50f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af022366efc39da82d47a5fa390be50f5">&#9670;&nbsp;</a></span>~TfLiteParser()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml">TfLiteParser</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00063">63</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03071">TfLiteParser::GetBuffer()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02852">TfLiteParser::GetInputs()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02924">TfLiteParser::GetInputTensorIds()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02871">TfLiteParser::GetOutputs()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02934">TfLiteParser::GetOutputTensorIds()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02891">TfLiteParser::GetSubgraphInputs()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02908">TfLiteParser::GetSubgraphOutputs()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02833">TfLiteParser::LoadModelFromBinary()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02809">TfLiteParser::LoadModelFromFile()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01493">TfLiteParser::OutputShapeOfSqueeze()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00489">TfLiteParser::TfLiteParser()</a>.</p>
<div class="fragment"><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ae8ee09f5e3e78ecfdf00acfdc37588dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8ee09f5e3e78ecfdf00acfdc37588dc">&#9670;&nbsp;</a></span>CreateNetworkFromBinary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromBinary </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>binaryContent</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create the network from a flatbuffers binary. </p>

<p>Implements <a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#a7dd0134440a006226f95d547f0b3e89c">ITfLiteParser</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00608">608</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00163">ARMNN_LOG</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00420">armnnTfParser::CalcPadding()</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00192">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00125">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00260">CHECK_SUPPORTED_FUSED_ACTIVATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00155">CHECK_TENSOR</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00032">CHECK_VALID_SIZE</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03071">TfLiteParser::GetBuffer()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02852">TfLiteParser::GetInputs()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02924">TfLiteParser::GetInputTensorIds()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00214">TensorInfo::GetNumBytes()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00092">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00093">TensorInfo::GetNumElements()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02871">TfLiteParser::GetOutputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02934">TfLiteParser::GetOutputTensorIds()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00088">TensorInfo::GetShape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02833">TfLiteParser::LoadModelFromBinary()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00144">SoftmaxDescriptor::m_Beta</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00446">Convolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00498">DepthwiseConvolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01189">TransposeConvolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00688">BatchToSpaceNdDescriptor::m_BlockShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00813">SpaceToBatchNdDescriptor::m_BlockShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00690">BatchToSpaceNdDescriptor::m_Crops</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00377">Pooling2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00448">Convolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00500">DepthwiseConvolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00614">L2NormalizationDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00692">BatchToSpaceNdDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00818">SpaceToBatchNdDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01191">TransposeConvolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00442">Convolution2dDescriptor::m_DilationX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00494">DepthwiseConvolution2dDescriptor::m_DilationX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00444">Convolution2dDescriptor::m_DilationY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00496">DepthwiseConvolution2dDescriptor::m_DilationY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00106">ElementwiseUnaryDescriptor::m_Operation</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00373">Pooling2dDescriptor::m_OutputShapeRounding</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00363">Pooling2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00436">Convolution2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00488">DepthwiseConvolution2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01183">TransposeConvolution2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00375">Pooling2dDescriptor::m_PaddingMethod</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00357">Pooling2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00430">Convolution2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00482">DepthwiseConvolution2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01177">TransposeConvolution2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00816">SpaceToBatchNdDescriptor::m_PadList</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00359">Pooling2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00432">Convolution2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00484">DepthwiseConvolution2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01179">TransposeConvolution2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00361">Pooling2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00434">Convolution2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00486">DepthwiseConvolution2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01181">TransposeConvolution2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00367">Pooling2dDescriptor::m_PoolHeight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00355">Pooling2dDescriptor::m_PoolType</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00365">Pooling2dDescriptor::m_PoolWidth</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00369">Pooling2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00438">Convolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00490">DepthwiseConvolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01185">TransposeConvolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00371">Pooling2dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00440">Convolution2dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00492">DepthwiseConvolution2dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01187">TransposeConvolution2dDescriptor::m_StrideY</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00033">armnn::numeric_cast()</a>, <a class="el" href="_file_only_profiling_decorator_tests_8cpp_source.xhtml#l00106">options</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00090">TensorInfo::SetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00501">armnnDeserializer::ToTensorInfo()</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>
<div class="fragment"><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;{</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    ResetParser();</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    m_Model = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a858104f225c302988fba35c1cb299066">LoadModelFromBinary</a>(binaryContent.data(), binaryContent.size());</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel();</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_xhtml_a858104f225c302988fba35c1cb299066"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a858104f225c302988fba35c1cb299066">armnnTfLiteParser::TfLiteParser::LoadModelFromBinary</a></div><div class="ttdeci">static ModelPtr LoadModelFromBinary(const uint8_t *binaryContent, size_t len)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l02833">TfLiteParser.cpp:2833</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a012b24cafd443425314d4f9e06cec6c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a012b24cafd443425314d4f9e06cec6c1">&#9670;&nbsp;</a></span>CreateNetworkFromBinaryFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromBinaryFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>graphFile</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create the network from a flatbuffers binary file on disk. </p>

<p>Implements <a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#ad92bc619ba8c78c9a4200d6635fde326">ITfLiteParser</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00601">601</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02809">TfLiteParser::LoadModelFromFile()</a>.</p>
<div class="fragment"><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;{</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    ResetParser();</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    m_Model = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ac5411554ab8c02ca286af52c98f6bd87">LoadModelFromFile</a>(graphFile);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel();</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_xhtml_ac5411554ab8c02ca286af52c98f6bd87"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#ac5411554ab8c02ca286af52c98f6bd87">armnnTfLiteParser::TfLiteParser::LoadModelFromFile</a></div><div class="ttdeci">static ModelPtr LoadModelFromFile(const char *fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l02809">TfLiteParser.cpp:2809</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5336d7700f4a5bcc272fbc9216541222"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5336d7700f4a5bcc272fbc9216541222">&#9670;&nbsp;</a></span>GetBuffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">TfLiteParser::BufferRawPtr</a> GetBuffer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>bufferIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03071">3071</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00211">CHECK_BUFFER</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00239">CHECK_BUFFER_SIZE</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00192">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00173">CHECK_TENSOR_PTR</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00095">TensorInfo::GetDataType()</a>, <a class="el" href="_types_utils_8hpp_source.xhtml#l00168">armnn::GetDataTypeName()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>, and <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02594">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00608">TfLiteParser::CreateNetworkFromBinary()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01493">TfLiteParser::OutputShapeOfSqueeze()</a>, and <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00063">TfLiteParser::~TfLiteParser()</a>.</p>
<div class="fragment"><div class="line"><a name="l03072"></a><span class="lineno"> 3072</span>&#160;{</div><div class="line"><a name="l03073"></a><span class="lineno"> 3073</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a7c88d54e3f895030c70330a4c9d76a7a">CHECK_BUFFER</a>(model, bufferIndex);</div><div class="line"><a name="l03074"></a><span class="lineno"> 3074</span>&#160;    <span class="keywordflow">return</span> model-&gt;buffers[bufferIndex].get();</div><div class="line"><a name="l03075"></a><span class="lineno"> 3075</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a7c88d54e3f895030c70330a4c9d76a7a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a7c88d54e3f895030c70330a4c9d76a7a">CHECK_BUFFER</a></div><div class="ttdeci">#define CHECK_BUFFER(MODEL, BUFFER_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00211">TfLiteParser.cpp:211</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4b49afca01112a4f4d023726ccd38876"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b49afca01112a4f4d023726ccd38876">&#9670;&nbsp;</a></span>GetInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TfLiteParser::TensorRawPtrVector</a> GetInputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02852">2852</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00125">CHECK_MODEL</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02594">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00608">TfLiteParser::CreateNetworkFromBinary()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01493">TfLiteParser::OutputShapeOfSqueeze()</a>, and <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00063">TfLiteParser::~TfLiteParser()</a>.</p>
<div class="fragment"><div class="line"><a name="l02855"></a><span class="lineno"> 2855</span>&#160;{</div><div class="line"><a name="l02856"></a><span class="lineno"> 2856</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l02857"></a><span class="lineno"> 2857</span>&#160;</div><div class="line"><a name="l02858"></a><span class="lineno"> 2858</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l02859"></a><span class="lineno"> 2859</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l02860"></a><span class="lineno"> 2860</span>&#160;</div><div class="line"><a name="l02861"></a><span class="lineno"> 2861</span>&#160;    <span class="keywordtype">size_t</span> inputCount = operatorPtr-&gt;inputs.size();</div><div class="line"><a name="l02862"></a><span class="lineno"> 2862</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> result(inputCount);</div><div class="line"><a name="l02863"></a><span class="lineno"> 2863</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i&lt;inputCount; ++i)</div><div class="line"><a name="l02864"></a><span class="lineno"> 2864</span>&#160;    {</div><div class="line"><a name="l02865"></a><span class="lineno"> 2865</span>&#160;        uint32_t inputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(operatorPtr-&gt;inputs[i]);</div><div class="line"><a name="l02866"></a><span class="lineno"> 2866</span>&#160;        result[i] = subgraphPtr-&gt;tensors[inputId].get();</div><div class="line"><a name="l02867"></a><span class="lineno"> 2867</span>&#160;    }</div><div class="line"><a name="l02868"></a><span class="lineno"> 2868</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l02869"></a><span class="lineno"> 2869</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00125">TfLiteParser.cpp:125</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_xhtml_abd8bee7fb9b86485a60bc7ee05114270"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abd8bee7fb9b86485a60bc7ee05114270">armnnTfLiteParser::TfLiteParser::TensorRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorRawPtr &gt; TensorRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00029">TfLiteParser.hpp:29</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8b4b0b88a5e79a88b8b60db76398f575"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b4b0b88a5e79a88b8b60db76398f575">&#9670;&nbsp;</a></span>GetInputTensorIds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; int32_t &gt; &amp; GetInputTensorIds </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02924">2924</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00125">CHECK_MODEL</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02594">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00608">TfLiteParser::CreateNetworkFromBinary()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01493">TfLiteParser::OutputShapeOfSqueeze()</a>, and <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00063">TfLiteParser::~TfLiteParser()</a>.</p>
<div class="fragment"><div class="line"><a name="l02927"></a><span class="lineno"> 2927</span>&#160;{</div><div class="line"><a name="l02928"></a><span class="lineno"> 2928</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l02929"></a><span class="lineno"> 2929</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l02930"></a><span class="lineno"> 2930</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l02931"></a><span class="lineno"> 2931</span>&#160;    <span class="keywordflow">return</span> operatorPtr-&gt;inputs;</div><div class="line"><a name="l02932"></a><span class="lineno"> 2932</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00125">TfLiteParser.cpp:125</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a91ba75587a31033088cb4f156e847efb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91ba75587a31033088cb4f156e847efb">&#9670;&nbsp;</a></span>GetNetworkInputBindingInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> GetNetworkInputBindingInfo </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieve binding info (layer id and tensor info) for the network input identified by the given layer name and subgraph id. </p>

<p>Implements <a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#a5a276dd9f2bb03bd0ea4424c5e5512ef">ITfLiteParser</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03140">3140</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00192">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00080">CHECK_SUBGRAPH</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02891">TfLiteParser::GetSubgraphInputs()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00501">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l03142"></a><span class="lineno"> 3142</span>&#160;{</div><div class="line"><a name="l03143"></a><span class="lineno"> 3143</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l03144"></a><span class="lineno"> 3144</span>&#160;    <span class="keyword">auto</span> inputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abda91b07a94d0f498b76655e03647d9a">GetSubgraphInputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l03145"></a><span class="lineno"> 3145</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span> &amp; input : inputs)</div><div class="line"><a name="l03146"></a><span class="lineno"> 3146</span>&#160;    {</div><div class="line"><a name="l03147"></a><span class="lineno"> 3147</span>&#160;        <span class="keywordflow">if</span> (input.second-&gt;name == name)</div><div class="line"><a name="l03148"></a><span class="lineno"> 3148</span>&#160;        {</div><div class="line"><a name="l03149"></a><span class="lineno"> 3149</span>&#160;            <span class="keyword">auto</span> bindingId = GenerateLayerBindingId(subgraphId, input.first);</div><div class="line"><a name="l03150"></a><span class="lineno"> 3150</span>&#160;            <span class="keywordflow">return</span> std::make_pair(bindingId, <a class="code" href="namespacearmnn_deserializer.xhtml#aa28868b7dc87dc4d957db6c775a591c1">ToTensorInfo</a>(input.second));</div><div class="line"><a name="l03151"></a><span class="lineno"> 3151</span>&#160;        }</div><div class="line"><a name="l03152"></a><span class="lineno"> 3152</span>&#160;    }</div><div class="line"><a name="l03153"></a><span class="lineno"> 3153</span>&#160;</div><div class="line"><a name="l03154"></a><span class="lineno"> 3154</span>&#160;    std::stringstream bindings;</div><div class="line"><a name="l03155"></a><span class="lineno"> 3155</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span> &amp; input : inputs)</div><div class="line"><a name="l03156"></a><span class="lineno"> 3156</span>&#160;    {</div><div class="line"><a name="l03157"></a><span class="lineno"> 3157</span>&#160;        bindings &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; input.second-&gt;name &lt;&lt; <span class="stringliteral">&quot;&#39; &quot;</span>;</div><div class="line"><a name="l03158"></a><span class="lineno"> 3158</span>&#160;    }</div><div class="line"><a name="l03159"></a><span class="lineno"> 3159</span>&#160;</div><div class="line"><a name="l03160"></a><span class="lineno"> 3160</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l03161"></a><span class="lineno"> 3161</span>&#160;        boost::str(</div><div class="line"><a name="l03162"></a><span class="lineno"> 3162</span>&#160;            boost::format(<span class="stringliteral">&quot;No input binding found for subgraph:%1% and name:%2%. &quot;</span></div><div class="line"><a name="l03163"></a><span class="lineno"> 3163</span>&#160;                          <span class="stringliteral">&quot;Possible inputs are: [%3%] %4%&quot;</span>) %</div><div class="line"><a name="l03164"></a><span class="lineno"> 3164</span>&#160;            subgraphId %</div><div class="line"><a name="l03165"></a><span class="lineno"> 3165</span>&#160;            name %</div><div class="line"><a name="l03166"></a><span class="lineno"> 3166</span>&#160;            bindings.str() %</div><div class="line"><a name="l03167"></a><span class="lineno"> 3167</span>&#160;            <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l03168"></a><span class="lineno"> 3168</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_xhtml_abda91b07a94d0f498b76655e03647d9a"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abda91b07a94d0f498b76655e03647d9a">armnnTfLiteParser::TfLiteParser::GetSubgraphInputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphInputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l02891">TfLiteParser.cpp:2891</a></div></div>
<div class="ttc" id="namespacearmnn_deserializer_xhtml_aa28868b7dc87dc4d957db6c775a591c1"><div class="ttname"><a href="namespacearmnn_deserializer.xhtml#aa28868b7dc87dc4d957db6c775a591c1">armnnDeserializer::ToTensorInfo</a></div><div class="ttdeci">armnn::TensorInfo ToTensorInfo(Deserializer::TensorRawPtr tensorPtr)</div><div class="ttdef"><b>Definition:</b> <a href="_deserializer_8cpp_source.xhtml#l00501">Deserializer.cpp:501</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00080">TfLiteParser.cpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00192">Exceptions.hpp:192</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a475b7cb5db683bb6fbb1c3fae40cb2b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a475b7cb5db683bb6fbb1c3fae40cb2b3">&#9670;&nbsp;</a></span>GetNetworkOutputBindingInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> GetNetworkOutputBindingInfo </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieve binding info (layer id and tensor info) for the network output identified by the given layer name and subgraph id. </p>

<p>Implements <a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#a5da770529a8e9a75a6efd878f6307740">ITfLiteParser</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03170">3170</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00192">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00080">CHECK_SUBGRAPH</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02908">TfLiteParser::GetSubgraphOutputs()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00501">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l03172"></a><span class="lineno"> 3172</span>&#160;{</div><div class="line"><a name="l03173"></a><span class="lineno"> 3173</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l03174"></a><span class="lineno"> 3174</span>&#160;    <span class="keyword">auto</span> outputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#afba7f99227765786c4ed9cb2acc09739">GetSubgraphOutputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l03175"></a><span class="lineno"> 3175</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputs.size(); ++i)</div><div class="line"><a name="l03176"></a><span class="lineno"> 3176</span>&#160;    {</div><div class="line"><a name="l03177"></a><span class="lineno"> 3177</span>&#160;        <span class="keyword">auto</span> <span class="keyword">const</span> output = outputs[i];</div><div class="line"><a name="l03178"></a><span class="lineno"> 3178</span>&#160;        <span class="keywordflow">if</span> (output.second-&gt;name == name)</div><div class="line"><a name="l03179"></a><span class="lineno"> 3179</span>&#160;        {</div><div class="line"><a name="l03180"></a><span class="lineno"> 3180</span>&#160;            <span class="keyword">auto</span> bindingId = GenerateLayerBindingId(subgraphId, output.first);</div><div class="line"><a name="l03181"></a><span class="lineno"> 3181</span>&#160;            std::vector&lt;unsigned int&gt; shape = m_OverridenOutputShapes.size() &gt; 0 ?</div><div class="line"><a name="l03182"></a><span class="lineno"> 3182</span>&#160;                                                m_OverridenOutputShapes[i] : AsUnsignedVector(output.second-&gt;shape);</div><div class="line"><a name="l03183"></a><span class="lineno"> 3183</span>&#160;            <span class="keywordflow">return</span> std::make_pair(bindingId, <a class="code" href="namespacearmnn_deserializer.xhtml#aa28868b7dc87dc4d957db6c775a591c1">ToTensorInfo</a>(output.second, shape));</div><div class="line"><a name="l03184"></a><span class="lineno"> 3184</span>&#160;        }</div><div class="line"><a name="l03185"></a><span class="lineno"> 3185</span>&#160;    }</div><div class="line"><a name="l03186"></a><span class="lineno"> 3186</span>&#160;</div><div class="line"><a name="l03187"></a><span class="lineno"> 3187</span>&#160;    std::stringstream bindings;</div><div class="line"><a name="l03188"></a><span class="lineno"> 3188</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span> &amp; output : outputs)</div><div class="line"><a name="l03189"></a><span class="lineno"> 3189</span>&#160;    {</div><div class="line"><a name="l03190"></a><span class="lineno"> 3190</span>&#160;        bindings &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; output.second-&gt;name &lt;&lt; <span class="stringliteral">&quot;&#39; &quot;</span>;</div><div class="line"><a name="l03191"></a><span class="lineno"> 3191</span>&#160;    }</div><div class="line"><a name="l03192"></a><span class="lineno"> 3192</span>&#160;</div><div class="line"><a name="l03193"></a><span class="lineno"> 3193</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l03194"></a><span class="lineno"> 3194</span>&#160;        boost::str(</div><div class="line"><a name="l03195"></a><span class="lineno"> 3195</span>&#160;            boost::format(<span class="stringliteral">&quot;No output binding found for subgraph:%1% and name:%2%. &quot;</span></div><div class="line"><a name="l03196"></a><span class="lineno"> 3196</span>&#160;                          <span class="stringliteral">&quot;Possible outputs are: [%3%] %4%&quot;</span>) %</div><div class="line"><a name="l03197"></a><span class="lineno"> 3197</span>&#160;            subgraphId %</div><div class="line"><a name="l03198"></a><span class="lineno"> 3198</span>&#160;            name %</div><div class="line"><a name="l03199"></a><span class="lineno"> 3199</span>&#160;            bindings.str() %</div><div class="line"><a name="l03200"></a><span class="lineno"> 3200</span>&#160;            <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l03201"></a><span class="lineno"> 3201</span>&#160;}</div><div class="ttc" id="namespacearmnn_deserializer_xhtml_aa28868b7dc87dc4d957db6c775a591c1"><div class="ttname"><a href="namespacearmnn_deserializer.xhtml#aa28868b7dc87dc4d957db6c775a591c1">armnnDeserializer::ToTensorInfo</a></div><div class="ttdeci">armnn::TensorInfo ToTensorInfo(Deserializer::TensorRawPtr tensorPtr)</div><div class="ttdef"><b>Definition:</b> <a href="_deserializer_8cpp_source.xhtml#l00501">Deserializer.cpp:501</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00080">TfLiteParser.cpp:80</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_xhtml_afba7f99227765786c4ed9cb2acc09739"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#afba7f99227765786c4ed9cb2acc09739">armnnTfLiteParser::TfLiteParser::GetSubgraphOutputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphOutputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l02908">TfLiteParser.cpp:2908</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00192">Exceptions.hpp:192</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a84ad865bb9b5fa0e4841aa35a14a14d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84ad865bb9b5fa0e4841aa35a14a14d8">&#9670;&nbsp;</a></span>GetOutputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TfLiteParser::TensorRawPtrVector</a> GetOutputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02871">2871</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00125">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00155">CHECK_TENSOR</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02594">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00608">TfLiteParser::CreateNetworkFromBinary()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01493">TfLiteParser::OutputShapeOfSqueeze()</a>, and <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00063">TfLiteParser::~TfLiteParser()</a>.</p>
<div class="fragment"><div class="line"><a name="l02874"></a><span class="lineno"> 2874</span>&#160;{</div><div class="line"><a name="l02875"></a><span class="lineno"> 2875</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l02876"></a><span class="lineno"> 2876</span>&#160;</div><div class="line"><a name="l02877"></a><span class="lineno"> 2877</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l02878"></a><span class="lineno"> 2878</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l02879"></a><span class="lineno"> 2879</span>&#160;</div><div class="line"><a name="l02880"></a><span class="lineno"> 2880</span>&#160;    <span class="keywordtype">size_t</span> outputCount = operatorPtr-&gt;outputs.size();</div><div class="line"><a name="l02881"></a><span class="lineno"> 2881</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> result(outputCount);</div><div class="line"><a name="l02882"></a><span class="lineno"> 2882</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i&lt;outputCount; ++i)</div><div class="line"><a name="l02883"></a><span class="lineno"> 2883</span>&#160;    {</div><div class="line"><a name="l02884"></a><span class="lineno"> 2884</span>&#160;        uint32_t outputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(operatorPtr-&gt;outputs[i]);</div><div class="line"><a name="l02885"></a><span class="lineno"> 2885</span>&#160;        <a class="code" href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a>(model, subgraphIndex, outputId);</div><div class="line"><a name="l02886"></a><span class="lineno"> 2886</span>&#160;        result[i] = subgraphPtr-&gt;tensors[outputId].get();</div><div class="line"><a name="l02887"></a><span class="lineno"> 2887</span>&#160;    }</div><div class="line"><a name="l02888"></a><span class="lineno"> 2888</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l02889"></a><span class="lineno"> 2889</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00125">TfLiteParser.cpp:125</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_xhtml_abd8bee7fb9b86485a60bc7ee05114270"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abd8bee7fb9b86485a60bc7ee05114270">armnnTfLiteParser::TfLiteParser::TensorRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorRawPtr &gt; TensorRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00029">TfLiteParser.hpp:29</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_aa1664dc13adbc85ac12fb584b76bfdae"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a></div><div class="ttdeci">#define CHECK_TENSOR(MODEL, SUBGRAPH_INDEX, TENSOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00155">TfLiteParser.cpp:155</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afe6c475f92d02dd1eb12acd746e4736f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe6c475f92d02dd1eb12acd746e4736f">&#9670;&nbsp;</a></span>GetOutputTensorIds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; int32_t &gt; &amp; GetOutputTensorIds </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02934">2934</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00192">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00125">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00080">CHECK_SUBGRAPH</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">IConnectableLayer::GetNumInputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">IConnectableLayer::GetNumOutputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02891">TfLiteParser::GetSubgraphInputs()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02908">TfLiteParser::GetSubgraphOutputs()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00501">armnnDeserializer::ToTensorInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02594">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00608">TfLiteParser::CreateNetworkFromBinary()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01493">TfLiteParser::OutputShapeOfSqueeze()</a>, and <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00063">TfLiteParser::~TfLiteParser()</a>.</p>
<div class="fragment"><div class="line"><a name="l02937"></a><span class="lineno"> 2937</span>&#160;{</div><div class="line"><a name="l02938"></a><span class="lineno"> 2938</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l02939"></a><span class="lineno"> 2939</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l02940"></a><span class="lineno"> 2940</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l02941"></a><span class="lineno"> 2941</span>&#160;    <span class="keywordflow">return</span> operatorPtr-&gt;outputs;</div><div class="line"><a name="l02942"></a><span class="lineno"> 2942</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00125">TfLiteParser.cpp:125</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae18739116b52dbab31bbf490450beb90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae18739116b52dbab31bbf490450beb90">&#9670;&nbsp;</a></span>GetSubgraphCount()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t GetSubgraphCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the number of subgraphs in the parsed model. </p>

<p>Implements <a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#ad4185c55afdabd36f63cd50a8cafab00">ITfLiteParser</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03203">3203</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l03204"></a><span class="lineno"> 3204</span>&#160;{</div><div class="line"><a name="l03205"></a><span class="lineno"> 3205</span>&#160;    <span class="keywordflow">return</span> m_Model-&gt;subgraphs.size();</div><div class="line"><a name="l03206"></a><span class="lineno"> 3206</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abda91b07a94d0f498b76655e03647d9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abda91b07a94d0f498b76655e03647d9a">&#9670;&nbsp;</a></span>GetSubgraphInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a86428e0c674542488c7292dfbe2ce381">TfLiteParser::TensorIdRawPtrVector</a> GetSubgraphInputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02891">2891</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00080">CHECK_SUBGRAPH</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00155">CHECK_TENSOR</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03140">TfLiteParser::GetNetworkInputBindingInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02934">TfLiteParser::GetOutputTensorIds()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03208">TfLiteParser::GetSubgraphInputTensorNames()</a>, and <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00063">TfLiteParser::~TfLiteParser()</a>.</p>
<div class="fragment"><div class="line"><a name="l02893"></a><span class="lineno"> 2893</span>&#160;{</div><div class="line"><a name="l02894"></a><span class="lineno"> 2894</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(model, subgraphIndex);</div><div class="line"><a name="l02895"></a><span class="lineno"> 2895</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l02896"></a><span class="lineno"> 2896</span>&#160;</div><div class="line"><a name="l02897"></a><span class="lineno"> 2897</span>&#160;    <span class="keywordtype">size_t</span> inputCount = subgraphPtr-&gt;inputs.size();</div><div class="line"><a name="l02898"></a><span class="lineno"> 2898</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> result(inputCount);</div><div class="line"><a name="l02899"></a><span class="lineno"> 2899</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i&lt;inputCount; ++i)</div><div class="line"><a name="l02900"></a><span class="lineno"> 2900</span>&#160;    {</div><div class="line"><a name="l02901"></a><span class="lineno"> 2901</span>&#160;        uint32_t inputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(subgraphPtr-&gt;inputs[i]);</div><div class="line"><a name="l02902"></a><span class="lineno"> 2902</span>&#160;        <a class="code" href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a>(model, subgraphIndex, inputId);</div><div class="line"><a name="l02903"></a><span class="lineno"> 2903</span>&#160;        result[i] = std::make_pair(inputId, subgraphPtr-&gt;tensors[inputId].get());</div><div class="line"><a name="l02904"></a><span class="lineno"> 2904</span>&#160;    }</div><div class="line"><a name="l02905"></a><span class="lineno"> 2905</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l02906"></a><span class="lineno"> 2906</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_aa1664dc13adbc85ac12fb584b76bfdae"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a></div><div class="ttdeci">#define CHECK_TENSOR(MODEL, SUBGRAPH_INDEX, TENSOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00155">TfLiteParser.cpp:155</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00080">TfLiteParser.cpp:80</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_xhtml_a86428e0c674542488c7292dfbe2ce381"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a86428e0c674542488c7292dfbe2ce381">armnnTfLiteParser::TfLiteParser::TensorIdRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorIdRawPtr &gt; TensorIdRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00031">TfLiteParser.hpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a58501692772880e7ef55485a4c95aab9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58501692772880e7ef55485a4c95aab9">&#9670;&nbsp;</a></span>GetSubgraphInputTensorNames()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetSubgraphInputTensorNames </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the input tensor names for a given subgraph. </p>

<p>Implements <a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#a394089772c3eb50f180906c145b5bc11">ITfLiteParser</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03208">3208</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00080">CHECK_SUBGRAPH</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02891">TfLiteParser::GetSubgraphInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l03209"></a><span class="lineno"> 3209</span>&#160;{</div><div class="line"><a name="l03210"></a><span class="lineno"> 3210</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l03211"></a><span class="lineno"> 3211</span>&#160;    <span class="keyword">auto</span> inputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abda91b07a94d0f498b76655e03647d9a">GetSubgraphInputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l03212"></a><span class="lineno"> 3212</span>&#160;    std::vector&lt;std::string&gt; result;</div><div class="line"><a name="l03213"></a><span class="lineno"> 3213</span>&#160;    result.reserve(inputs.size());</div><div class="line"><a name="l03214"></a><span class="lineno"> 3214</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span> &amp; input : inputs)</div><div class="line"><a name="l03215"></a><span class="lineno"> 3215</span>&#160;    {</div><div class="line"><a name="l03216"></a><span class="lineno"> 3216</span>&#160;        result.push_back(input.second-&gt;name);</div><div class="line"><a name="l03217"></a><span class="lineno"> 3217</span>&#160;    }</div><div class="line"><a name="l03218"></a><span class="lineno"> 3218</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l03219"></a><span class="lineno"> 3219</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_xhtml_abda91b07a94d0f498b76655e03647d9a"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abda91b07a94d0f498b76655e03647d9a">armnnTfLiteParser::TfLiteParser::GetSubgraphInputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphInputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l02891">TfLiteParser.cpp:2891</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00080">TfLiteParser.cpp:80</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afba7f99227765786c4ed9cb2acc09739"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afba7f99227765786c4ed9cb2acc09739">&#9670;&nbsp;</a></span>GetSubgraphOutputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a86428e0c674542488c7292dfbe2ce381">TfLiteParser::TensorIdRawPtrVector</a> GetSubgraphOutputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02908">2908</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00080">CHECK_SUBGRAPH</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03170">TfLiteParser::GetNetworkOutputBindingInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02934">TfLiteParser::GetOutputTensorIds()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03221">TfLiteParser::GetSubgraphOutputTensorNames()</a>, and <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00063">TfLiteParser::~TfLiteParser()</a>.</p>
<div class="fragment"><div class="line"><a name="l02910"></a><span class="lineno"> 2910</span>&#160;{</div><div class="line"><a name="l02911"></a><span class="lineno"> 2911</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(model, subgraphIndex);</div><div class="line"><a name="l02912"></a><span class="lineno"> 2912</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l02913"></a><span class="lineno"> 2913</span>&#160;</div><div class="line"><a name="l02914"></a><span class="lineno"> 2914</span>&#160;    <span class="keywordtype">size_t</span> outputCount = subgraphPtr-&gt;outputs.size();</div><div class="line"><a name="l02915"></a><span class="lineno"> 2915</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> result(outputCount);</div><div class="line"><a name="l02916"></a><span class="lineno"> 2916</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i&lt;outputCount; ++i)</div><div class="line"><a name="l02917"></a><span class="lineno"> 2917</span>&#160;    {</div><div class="line"><a name="l02918"></a><span class="lineno"> 2918</span>&#160;        uint32_t outputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(subgraphPtr-&gt;outputs[i]);</div><div class="line"><a name="l02919"></a><span class="lineno"> 2919</span>&#160;        result[i] = std::make_pair(outputId, subgraphPtr-&gt;tensors[outputId].get());</div><div class="line"><a name="l02920"></a><span class="lineno"> 2920</span>&#160;    }</div><div class="line"><a name="l02921"></a><span class="lineno"> 2921</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l02922"></a><span class="lineno"> 2922</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00080">TfLiteParser.cpp:80</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_xhtml_a86428e0c674542488c7292dfbe2ce381"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a86428e0c674542488c7292dfbe2ce381">armnnTfLiteParser::TfLiteParser::TensorIdRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorIdRawPtr &gt; TensorIdRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00031">TfLiteParser.hpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab97e69d07f06e392bd0cc2e5bcbf1be6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab97e69d07f06e392bd0cc2e5bcbf1be6">&#9670;&nbsp;</a></span>GetSubgraphOutputTensorNames()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetSubgraphOutputTensorNames </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the output tensor names for a given subgraph. </p>

<p>Implements <a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#a72c5886e46c21556946d4f62eaf16270">ITfLiteParser</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03221">3221</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00080">CHECK_SUBGRAPH</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02908">TfLiteParser::GetSubgraphOutputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l03222"></a><span class="lineno"> 3222</span>&#160;{</div><div class="line"><a name="l03223"></a><span class="lineno"> 3223</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l03224"></a><span class="lineno"> 3224</span>&#160;    <span class="keyword">auto</span> outputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#afba7f99227765786c4ed9cb2acc09739">GetSubgraphOutputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l03225"></a><span class="lineno"> 3225</span>&#160;    std::vector&lt;std::string&gt; result;</div><div class="line"><a name="l03226"></a><span class="lineno"> 3226</span>&#160;    result.reserve(outputs.size());</div><div class="line"><a name="l03227"></a><span class="lineno"> 3227</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span> &amp; output : outputs)</div><div class="line"><a name="l03228"></a><span class="lineno"> 3228</span>&#160;    {</div><div class="line"><a name="l03229"></a><span class="lineno"> 3229</span>&#160;        result.push_back(output.second-&gt;name);</div><div class="line"><a name="l03230"></a><span class="lineno"> 3230</span>&#160;    }</div><div class="line"><a name="l03231"></a><span class="lineno"> 3231</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l03232"></a><span class="lineno"> 3232</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00080">TfLiteParser.cpp:80</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_xhtml_afba7f99227765786c4ed9cb2acc09739"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#afba7f99227765786c4ed9cb2acc09739">armnnTfLiteParser::TfLiteParser::GetSubgraphOutputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphOutputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l02908">TfLiteParser.cpp:2908</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a858104f225c302988fba35c1cb299066"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a858104f225c302988fba35c1cb299066">&#9670;&nbsp;</a></span>LoadModelFromBinary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">TfLiteParser::ModelPtr</a> LoadModelFromBinary </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>binaryContent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02833">2833</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00192">CHECK_LOCATION</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00608">TfLiteParser::CreateNetworkFromBinary()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02809">TfLiteParser::LoadModelFromFile()</a>, and <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00063">TfLiteParser::~TfLiteParser()</a>.</p>
<div class="fragment"><div class="line"><a name="l02834"></a><span class="lineno"> 2834</span>&#160;{</div><div class="line"><a name="l02835"></a><span class="lineno"> 2835</span>&#160;    <span class="keywordflow">if</span> (binaryContent == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02836"></a><span class="lineno"> 2836</span>&#160;     {</div><div class="line"><a name="l02837"></a><span class="lineno"> 2837</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(boost::str(boost::format(<span class="stringliteral">&quot;Invalid (null) binary content %1%&quot;</span>) %</div><div class="line"><a name="l02838"></a><span class="lineno"> 2838</span>&#160;                                       <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02839"></a><span class="lineno"> 2839</span>&#160;     }</div><div class="line"><a name="l02840"></a><span class="lineno"> 2840</span>&#160;    flatbuffers::Verifier verifier(binaryContent, len);</div><div class="line"><a name="l02841"></a><span class="lineno"> 2841</span>&#160;    <span class="keywordflow">if</span> (verifier.VerifyBuffer&lt;tflite::Model&gt;() == <span class="keyword">false</span>)</div><div class="line"><a name="l02842"></a><span class="lineno"> 2842</span>&#160;    {</div><div class="line"><a name="l02843"></a><span class="lineno"> 2843</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02844"></a><span class="lineno"> 2844</span>&#160;            boost::str(boost::format(<span class="stringliteral">&quot;Buffer doesn&#39;t conform to the expected Tensorflow Lite &quot;</span></div><div class="line"><a name="l02845"></a><span class="lineno"> 2845</span>&#160;                                     <span class="stringliteral">&quot;flatbuffers format. size:%1% %2%&quot;</span>) %</div><div class="line"><a name="l02846"></a><span class="lineno"> 2846</span>&#160;                       len %</div><div class="line"><a name="l02847"></a><span class="lineno"> 2847</span>&#160;                       <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02848"></a><span class="lineno"> 2848</span>&#160;    }</div><div class="line"><a name="l02849"></a><span class="lineno"> 2849</span>&#160;    <span class="keywordflow">return</span> tflite::UnPackModel(binaryContent);</div><div class="line"><a name="l02850"></a><span class="lineno"> 2850</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00192">Exceptions.hpp:192</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac5411554ab8c02ca286af52c98f6bd87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5411554ab8c02ca286af52c98f6bd87">&#9670;&nbsp;</a></span>LoadModelFromFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#abfc86471394295357a23b3addd0b5b1c">TfLiteParser::ModelPtr</a> LoadModelFromFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fileName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02809">2809</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00192">CHECK_LOCATION</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02833">TfLiteParser::LoadModelFromBinary()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00601">TfLiteParser::CreateNetworkFromBinaryFile()</a>, and <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00063">TfLiteParser::~TfLiteParser()</a>.</p>
<div class="fragment"><div class="line"><a name="l02810"></a><span class="lineno"> 2810</span>&#160;{</div><div class="line"><a name="l02811"></a><span class="lineno"> 2811</span>&#160;    <span class="keywordflow">if</span> (fileName == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02812"></a><span class="lineno"> 2812</span>&#160;    {</div><div class="line"><a name="l02813"></a><span class="lineno"> 2813</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(boost::str(boost::format(<span class="stringliteral">&quot;Invalid (null) file name %1%&quot;</span>) %</div><div class="line"><a name="l02814"></a><span class="lineno"> 2814</span>&#160;                                       <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02815"></a><span class="lineno"> 2815</span>&#160;    }</div><div class="line"><a name="l02816"></a><span class="lineno"> 2816</span>&#160;    boost::system::error_code errorCode;</div><div class="line"><a name="l02817"></a><span class="lineno"> 2817</span>&#160;    boost::filesystem::path pathToFile(fileName);</div><div class="line"><a name="l02818"></a><span class="lineno"> 2818</span>&#160;    <span class="keywordflow">if</span> (!boost::filesystem::exists(pathToFile, errorCode))</div><div class="line"><a name="l02819"></a><span class="lineno"> 2819</span>&#160;    {</div><div class="line"><a name="l02820"></a><span class="lineno"> 2820</span>&#160;        std::string locationString = <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString();</div><div class="line"><a name="l02821"></a><span class="lineno"> 2821</span>&#160;        std::string msg = boost::str(boost::format(<span class="stringliteral">&quot;Cannot find the file (%1%) errorCode: %2% %3%&quot;</span>) %</div><div class="line"><a name="l02822"></a><span class="lineno"> 2822</span>&#160;                                     fileName %</div><div class="line"><a name="l02823"></a><span class="lineno"> 2823</span>&#160;                                     errorCode %</div><div class="line"><a name="l02824"></a><span class="lineno"> 2824</span>&#160;                                         locationString);</div><div class="line"><a name="l02825"></a><span class="lineno"> 2825</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_file_not_found_exception.xhtml">FileNotFoundException</a>(msg);</div><div class="line"><a name="l02826"></a><span class="lineno"> 2826</span>&#160;    }</div><div class="line"><a name="l02827"></a><span class="lineno"> 2827</span>&#160;    std::ifstream file(fileName, std::ios::binary);</div><div class="line"><a name="l02828"></a><span class="lineno"> 2828</span>&#160;    std::string fileContent((std::istreambuf_iterator&lt;char&gt;(file)), std::istreambuf_iterator&lt;char&gt;());</div><div class="line"><a name="l02829"></a><span class="lineno"> 2829</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a858104f225c302988fba35c1cb299066">LoadModelFromBinary</a>(reinterpret_cast&lt;const uint8_t *&gt;(fileContent.c_str()),</div><div class="line"><a name="l02830"></a><span class="lineno"> 2830</span>&#160;                               fileContent.size());</div><div class="line"><a name="l02831"></a><span class="lineno"> 2831</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_xhtml_a858104f225c302988fba35c1cb299066"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml#a858104f225c302988fba35c1cb299066">armnnTfLiteParser::TfLiteParser::LoadModelFromBinary</a></div><div class="ttdeci">static ModelPtr LoadModelFromBinary(const uint8_t *binaryContent, size_t len)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l02833">TfLiteParser.cpp:2833</a></div></div>
<div class="ttc" id="classarmnn_1_1_file_not_found_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_file_not_found_exception.xhtml">armnn::FileNotFoundException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00086">Exceptions.hpp:86</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00192">Exceptions.hpp:192</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaebfa9a01a0bb8a0935114ff0140cc45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaebfa9a01a0bb8a0935114ff0140cc45">&#9670;&nbsp;</a></span>OutputShapeOfReshape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> OutputShapeOfReshape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int32_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>targetDimsIn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">1928</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00037">ARMNN_THROW_PARSE_EXCEPTION</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00192">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00125">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00260">CHECK_SUPPORTED_FUSED_ACTIVATION</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00032">CHECK_VALID_SIZE</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00164">armnnDeserializer::CheckShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03071">TfLiteParser::GetBuffer()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00095">TensorInfo::GetDataType()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02852">TfLiteParser::GetInputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02924">TfLiteParser::GetInputTensorIds()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#afcc1c3a20bd2860e0ddd21674389246f">IConnectableLayer::GetName()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00214">TensorInfo::GetNumBytes()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00092">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00093">TensorInfo::GetNumElements()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">IConnectableLayer::GetNumOutputSlots()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02871">TfLiteParser::GetOutputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02934">TfLiteParser::GetOutputTensorIds()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00265">TensorInfo::GetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00248">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00088">TensorInfo::GetShape()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00984">StackDescriptor::m_Axis</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00394">FullyConnectedDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00539">DetectionPostProcessDescriptor::m_DetectionsPerClass</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00988">StackDescriptor::m_InputShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00537">DetectionPostProcessDescriptor::m_MaxClassesPerDetection</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00535">DetectionPostProcessDescriptor::m_MaxDetections</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00759">ResizeDescriptor::m_Method</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00543">DetectionPostProcessDescriptor::m_NmsIouThreshold</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00541">DetectionPostProcessDescriptor::m_NmsScoreThreshold</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00545">DetectionPostProcessDescriptor::m_NumClasses</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00986">StackDescriptor::m_NumInputs</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00555">DetectionPostProcessDescriptor::m_ScaleH</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00553">DetectionPostProcessDescriptor::m_ScaleW</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00549">DetectionPostProcessDescriptor::m_ScaleX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00551">DetectionPostProcessDescriptor::m_ScaleY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00786">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00396">FullyConnectedDescriptor::m_TransposeWeightMatrix</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00547">DetectionPostProcessDescriptor::m_UseRegularNms</a>, <a class="el" href="_types_8hpp_source.xhtml#l00018">armnn::MaxNumOfTensorDimensions</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00033">armnn::numeric_cast()</a>, <a class="el" href="_file_only_profiling_decorator_tests_8cpp_source.xhtml#l00106">options</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00019">armnnUtils::ProcessConcatInputTensorInfo()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00152">OriginsDescriptor::SetConcatAxis()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00090">TensorInfo::SetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00304">ViewsDescriptor::SetViewOriginCoord()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00309">ViewsDescriptor::SetViewSize()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00501">armnnDeserializer::ToTensorInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00063">TfLiteParser::~TfLiteParser()</a>.</p>
<div class="fragment"><div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;{</div><div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;    std::vector&lt;unsigned int&gt; outputDims(targetDimsIn.begin(), targetDimsIn.end());</div><div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> stretchDim = std::find(targetDimsIn.begin(), targetDimsIn.end(), -1);</div><div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;</div><div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;    <span class="keywordflow">if</span> (stretchDim != targetDimsIn.end())</div><div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;    {</div><div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;        <span class="keywordflow">if</span> (std::find(std::next(stretchDim), targetDimsIn.end(), -1) != targetDimsIn.end())</div><div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;        {</div><div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;                boost::str(</div><div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;                    boost::format(<span class="stringliteral">&quot;At most one component of shape can be -1 %1%&quot;</span>) % <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;        }</div><div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;</div><div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;        <span class="keyword">auto</span> targetNumElements =</div><div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">boost::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(</div><div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;                std::accumulate(targetDimsIn.begin(), targetDimsIn.end(), -1, std::multiplies&lt;int32_t&gt;()));</div><div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;</div><div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;        <span class="keyword">auto</span> stretchIndex = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(std::distance(targetDimsIn.begin(), stretchDim));</div><div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;        outputDims[stretchIndex] = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>() / targetNumElements;</div><div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;    }</div><div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;</div><div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(static_cast&lt;unsigned int&gt;(outputDims.size()), outputDims.data());</div><div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;</div><div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> reshapeInfo = inputTensorInfo;</div><div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;    reshapeInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outputShape);</div><div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;</div><div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;    <span class="keywordflow">return</span> reshapeInfo;</div><div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00090">Tensor.hpp:90</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a37fa39012e90d568df7f774cd6d1e956"><div class="ttname"><a href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00033">NumericCast.hpp:33</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00192">Exceptions.hpp:192</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00093">Tensor.hpp:93</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa0a90d432c9c41f9846f41f11c9e54c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0a90d432c9c41f9846f41f11c9e54c9">&#9670;&nbsp;</a></span>OutputShapeOfSqueeze()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> OutputShapeOfSqueeze </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; uint32_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>squeezeDims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01493">1493</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00192">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00125">CHECK_MODEL</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00032">CHECK_VALID_SIZE</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03071">TfLiteParser::GetBuffer()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02852">TfLiteParser::GetInputs()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02924">TfLiteParser::GetInputTensorIds()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00214">TensorInfo::GetNumBytes()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00092">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00093">TensorInfo::GetNumElements()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02871">TfLiteParser::GetOutputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02934">TfLiteParser::GetOutputTensorIds()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00088">TensorInfo::GetShape()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00045">ActivationDescriptor::m_A</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00907">MeanDescriptor::m_Axis</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00047">ActivationDescriptor::m_B</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01053">StridedSliceDescriptor::m_Begin</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01061">StridedSliceDescriptor::m_BeginMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01074">StridedSliceDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01068">StridedSliceDescriptor::m_EllipsisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01055">StridedSliceDescriptor::m_End</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01064">StridedSliceDescriptor::m_EndMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00043">ActivationDescriptor::m_Function</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00909">MeanDescriptor::m_KeepDims</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01071">StridedSliceDescriptor::m_NewAxisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00932">PadDescriptor::m_PadList</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01066">StridedSliceDescriptor::m_ShrinkAxisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01057">StridedSliceDescriptor::m_Stride</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00786">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="_file_only_profiling_decorator_tests_8cpp_source.xhtml#l00106">options</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00090">TensorInfo::SetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00501">armnnDeserializer::ToTensorInfo()</a>, and <a class="el" href="_cl_layer_tests_8cpp_source.xhtml#l00210">true</a>.</p>

<p class="reference">Referenced by <a class="el" href="_output_shape_of_squeeze_8cpp_source.xhtml#l00027">BOOST_FIXTURE_TEST_CASE()</a>, and <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00063">TfLiteParser::~TfLiteParser()</a>.</p>
<div class="fragment"><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;{</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;    <a class="code" href="_verification_helpers_8hpp.xhtml#a479b2821a7a2cbb8fa8eb7f60a47065d">CHECK_VALID_SIZE</a>(squeezeDimsIn.size(), 0, 1, 2, 3, 4);</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;    std::vector&lt;uint32_t&gt; squeezeDims = squeezeDimsIn;</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> uint32_t dimensionSequence[] = { 0, 1, 2, 3 };</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    <span class="keywordflow">if</span> (inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &gt; 4)</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    {</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;        std::stringstream ss;</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;Input tensor has unexpected number of dimensions:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;           &lt;&lt; <span class="stringliteral">&quot; shape:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>() &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;           &lt;&lt; <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString();</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(ss.str());</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;    }</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    <span class="keywordflow">if</span> (squeezeDims.empty())</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    {</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;        squeezeDims.assign(dimensionSequence,</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;                           dimensionSequence+inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>());</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    }</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    std::vector&lt;uint32_t&gt; outputDims;</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    {</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;        <span class="keywordtype">bool</span> skipSqueeze = (std::find(squeezeDims.begin(), squeezeDims.end(), i) == squeezeDims.end());</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;        <span class="keyword">auto</span> currentDimension = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i];</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;        <span class="keywordflow">if</span> (skipSqueeze || currentDimension != 1)</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;        {</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;            outputDims.push_back(currentDimension);</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;        }</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    }</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;    <span class="keywordflow">if</span> (outputDims.size() &gt; 4)</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    {</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;        std::stringstream ss;</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;Output tensor has unexpected number of dimensions:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;           &lt;&lt; <span class="stringliteral">&quot; shape:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>() &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;           &lt;&lt; <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString();</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(ss.str());</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    }</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(static_cast&lt;unsigned int&gt;(outputDims.size()),</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;                                       outputDims.data());</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;    <span class="comment">// we need to preserve the tensor type and the quantization data as well</span></div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outTensorInfo = inputTensorInfo;</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;    outTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outShape);</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;    <span class="keywordflow">return</span> outTensorInfo;</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00088">Tensor.hpp:88</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00090">Tensor.hpp:90</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_a479b2821a7a2cbb8fa8eb7f60a47065d"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#a479b2821a7a2cbb8fa8eb7f60a47065d">CHECK_VALID_SIZE</a></div><div class="ttdeci">#define CHECK_VALID_SIZE(ACTUAL,...)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00032">VerificationHelpers.hpp:32</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00192">Exceptions.hpp:192</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00092">Tensor.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnnTfLiteParser/<a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a></li>
<li>src/armnnTfLiteParser/<a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml">armnnTfLiteParser</a></li><li class="navelem"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser.xhtml">TfLiteParser</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:55 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
