<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/neon/test/NeonCreateWorkloadTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_neon_create_workload_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">NeonCreateWorkloadTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_neon_workload_factory_helper_8hpp_source.xhtml">NeonWorkloadFactoryHelper.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_arm_compute_tensor_utils_8hpp_source.xhtml">aclCommon/ArmComputeTensorUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_polymorphic_downcast_8hpp_source.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_mem_copy_workload_8hpp_source.xhtml">backendsCommon/MemCopyWorkload.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_create_workload_cl_neon_8hpp_source.xhtml">aclCommon/test/CreateWorkloadClNeon.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_neon_workload_factory_8hpp_source.xhtml">neon/NeonWorkloadFactory.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_neon_tensor_handle_8hpp_source.xhtml">neon/NeonTensorHandle.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_neon_workload_utils_8hpp_source.xhtml">neon/workloads/NeonWorkloadUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_neon_workloads_8hpp_source.xhtml">neon/workloads/NeonWorkloads.hpp</a>&gt;</code><br />
</div>
<p><a href="_neon_create_workload_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a7906dccbc8d08250fd4d7a79d4d9c722"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a7906dccbc8d08250fd4d7a79d4d9c722">BOOST_AUTO_TEST_CASE</a> (CreateActivationFloatWorkload)</td></tr>
<tr class="separator:a7906dccbc8d08250fd4d7a79d4d9c722"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91343c247a116b44c01af985c72b1e4d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a91343c247a116b44c01af985c72b1e4d">BOOST_AUTO_TEST_CASE</a> (CreateAdditionFloatWorkload)</td></tr>
<tr class="separator:a91343c247a116b44c01af985c72b1e4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18112ff3922073508feb3c25602eace2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a18112ff3922073508feb3c25602eace2">BOOST_AUTO_TEST_CASE</a> (CreateSubtractionFloatWorkload)</td></tr>
<tr class="separator:a18112ff3922073508feb3c25602eace2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56236d80e962e94cdc3481f0de4d01ba"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a56236d80e962e94cdc3481f0de4d01ba">BOOST_AUTO_TEST_CASE</a> (CreateSubtractionUint8Workload)</td></tr>
<tr class="separator:a56236d80e962e94cdc3481f0de4d01ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa648d27419eef05aace4034b206692bb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#aa648d27419eef05aace4034b206692bb">BOOST_AUTO_TEST_CASE</a> (CreateMultiplicationFloatWorkload)</td></tr>
<tr class="separator:aa648d27419eef05aace4034b206692bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5230b6bd0c53c06b7d6a241b7197085"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#ae5230b6bd0c53c06b7d6a241b7197085">BOOST_AUTO_TEST_CASE</a> (CreateMultiplicationUint8Workload)</td></tr>
<tr class="separator:ae5230b6bd0c53c06b7d6a241b7197085"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c06371a0bca0be0ef80ed2154ff8e34"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a0c06371a0bca0be0ef80ed2154ff8e34">BOOST_AUTO_TEST_CASE</a> (CreateDivisionFloatWorkloadTest)</td></tr>
<tr class="separator:a0c06371a0bca0be0ef80ed2154ff8e34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4e714990000cacf540f2f1da8220120"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#ae4e714990000cacf540f2f1da8220120">BOOST_AUTO_TEST_CASE</a> (CreateBatchNormalizationFloatNchwWorkload)</td></tr>
<tr class="separator:ae4e714990000cacf540f2f1da8220120"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16f59a17052dcf58c1e71a70e5aac96f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a16f59a17052dcf58c1e71a70e5aac96f">BOOST_AUTO_TEST_CASE</a> (CreateBatchNormalizationFloatNhwcWorkload)</td></tr>
<tr class="separator:a16f59a17052dcf58c1e71a70e5aac96f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a2458d4f6ff9103299e72433245db5b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a8a2458d4f6ff9103299e72433245db5b">BOOST_AUTO_TEST_CASE</a> (CreateConvolution2dFloatNchwWorkload)</td></tr>
<tr class="separator:a8a2458d4f6ff9103299e72433245db5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1738342e20abb6bebf8766a796424865"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a1738342e20abb6bebf8766a796424865">BOOST_AUTO_TEST_CASE</a> (CreateConvolution2dFloatNhwcWorkload)</td></tr>
<tr class="separator:a1738342e20abb6bebf8766a796424865"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1d15d5d79ac39eae35bc83bd6ce4475"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#ad1d15d5d79ac39eae35bc83bd6ce4475">BOOST_AUTO_TEST_CASE</a> (CreateDepthWiseConvolution2dFloat32NhwcWorkload)</td></tr>
<tr class="separator:ad1d15d5d79ac39eae35bc83bd6ce4475"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a990cfdd3b638907fc6142c57cae2ab80"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a990cfdd3b638907fc6142c57cae2ab80">BOOST_AUTO_TEST_CASE</a> (CreateFullyConnectedFloatWorkload)</td></tr>
<tr class="separator:a990cfdd3b638907fc6142c57cae2ab80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36eb4714d2187b907f920ec02d2b32c5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a36eb4714d2187b907f920ec02d2b32c5">BOOST_AUTO_TEST_CASE</a> (CreateFullyConnectedQAsymmU8Workload)</td></tr>
<tr class="separator:a36eb4714d2187b907f920ec02d2b32c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada75695cc6dd19b05488205d94e8ef75"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#ada75695cc6dd19b05488205d94e8ef75">BOOST_AUTO_TEST_CASE</a> (CreateFullyConnectedQAsymmS8Workload)</td></tr>
<tr class="separator:ada75695cc6dd19b05488205d94e8ef75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af82ae890dad4e4d4383083c11eb30ab6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#af82ae890dad4e4d4383083c11eb30ab6">BOOST_AUTO_TEST_CASE</a> (CreateNormalizationFloatNchwWorkload)</td></tr>
<tr class="separator:af82ae890dad4e4d4383083c11eb30ab6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a255b57d12f38c675e9b7c3f312b45827"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a255b57d12f38c675e9b7c3f312b45827">BOOST_AUTO_TEST_CASE</a> (CreateNormalizationFloatNhwcWorkload)</td></tr>
<tr class="separator:a255b57d12f38c675e9b7c3f312b45827"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af32a90a1a11f2fabc7eb0508325f99e0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#af32a90a1a11f2fabc7eb0508325f99e0">BOOST_AUTO_TEST_CASE</a> (CreatePooling2dFloatNchwWorkload)</td></tr>
<tr class="separator:af32a90a1a11f2fabc7eb0508325f99e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11ff4c042447da348642135ed106597c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a11ff4c042447da348642135ed106597c">BOOST_AUTO_TEST_CASE</a> (CreatePooling2dFloatNhwcWorkload)</td></tr>
<tr class="separator:a11ff4c042447da348642135ed106597c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a333b09023558637a4d6654368bccfe34"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a333b09023558637a4d6654368bccfe34">BOOST_AUTO_TEST_CASE</a> (CreatePooling2dUint8NchwWorkload)</td></tr>
<tr class="separator:a333b09023558637a4d6654368bccfe34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45f904a90c0b0cadb62097baaf1dce07"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a45f904a90c0b0cadb62097baaf1dce07">BOOST_AUTO_TEST_CASE</a> (CreatePooling2dUint8NhwcWorkload)</td></tr>
<tr class="separator:a45f904a90c0b0cadb62097baaf1dce07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5559e752bd51c12a4bd1b3b50fa5837"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#ac5559e752bd51c12a4bd1b3b50fa5837">BOOST_AUTO_TEST_CASE</a> (CreatePreluFloatWorkload)</td></tr>
<tr class="separator:ac5559e752bd51c12a4bd1b3b50fa5837"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12d17284981e1fff8f0fc76da9293e2c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a12d17284981e1fff8f0fc76da9293e2c">BOOST_AUTO_TEST_CASE</a> (CreatePreluUint8Workload)</td></tr>
<tr class="separator:a12d17284981e1fff8f0fc76da9293e2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e917bb46b0281f715abb63b979ccb41"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a5e917bb46b0281f715abb63b979ccb41">BOOST_AUTO_TEST_CASE</a> (CreateReshapeFloatWorkload)</td></tr>
<tr class="separator:a5e917bb46b0281f715abb63b979ccb41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4153a7dc499db9b5eddfb42976968db"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#aa4153a7dc499db9b5eddfb42976968db">BOOST_AUTO_TEST_CASE</a> (CreateReshapeUint8Workload)</td></tr>
<tr class="separator:aa4153a7dc499db9b5eddfb42976968db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acecd2490c8eb6763c8500e3ae925c190"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#acecd2490c8eb6763c8500e3ae925c190">BOOST_AUTO_TEST_CASE</a> (CreateResizeFloat32NchwWorkload)</td></tr>
<tr class="separator:acecd2490c8eb6763c8500e3ae925c190"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac932bc28ac59c177e36c62e4364735a0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#ac932bc28ac59c177e36c62e4364735a0">BOOST_AUTO_TEST_CASE</a> (CreateResizeUint8NchwWorkload)</td></tr>
<tr class="separator:ac932bc28ac59c177e36c62e4364735a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6699397e086ed473ba164574ffbcd2e4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a6699397e086ed473ba164574ffbcd2e4">BOOST_AUTO_TEST_CASE</a> (CreateResizeFloat32NhwcWorkload)</td></tr>
<tr class="separator:a6699397e086ed473ba164574ffbcd2e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a455f9af7175c5499cd667cc21b6fd96b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a455f9af7175c5499cd667cc21b6fd96b">BOOST_AUTO_TEST_CASE</a> (CreateResizeUint8NhwcWorkload)</td></tr>
<tr class="separator:a455f9af7175c5499cd667cc21b6fd96b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49e154c923e22a5d09ae3afa2dee01b4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a49e154c923e22a5d09ae3afa2dee01b4">BOOST_AUTO_TEST_CASE</a> (CreateSoftmaxFloatWorkload)</td></tr>
<tr class="separator:a49e154c923e22a5d09ae3afa2dee01b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefd296f4bea755c458e645207441a3d0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#aefd296f4bea755c458e645207441a3d0">BOOST_AUTO_TEST_CASE</a> (CreateSoftmaxQAsymmU8Workload)</td></tr>
<tr class="separator:aefd296f4bea755c458e645207441a3d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17b4b33a309ab1aaf6a800bcbffe914c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a17b4b33a309ab1aaf6a800bcbffe914c">BOOST_AUTO_TEST_CASE</a> (CreateSoftmaxQAsymmS8Workload)</td></tr>
<tr class="separator:a17b4b33a309ab1aaf6a800bcbffe914c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c4700174743960fe55fea9802ca7943"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a1c4700174743960fe55fea9802ca7943">BOOST_AUTO_TEST_CASE</a> (CreateSpaceToDepthFloat32Workload)</td></tr>
<tr class="separator:a1c4700174743960fe55fea9802ca7943"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59f3a522fe899842007639e90ced8ef4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a59f3a522fe899842007639e90ced8ef4">BOOST_AUTO_TEST_CASE</a> (CreateSpaceToDepthFloat16Workload)</td></tr>
<tr class="separator:a59f3a522fe899842007639e90ced8ef4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8675faeba30ecf6ea82ed14e7e03e5ab"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a8675faeba30ecf6ea82ed14e7e03e5ab">BOOST_AUTO_TEST_CASE</a> (CreateSpaceToDepthQAsymm8Workload)</td></tr>
<tr class="separator:a8675faeba30ecf6ea82ed14e7e03e5ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43e4abafcf0700a7531d8dc7f27d7eb6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a43e4abafcf0700a7531d8dc7f27d7eb6">BOOST_AUTO_TEST_CASE</a> (CreateSpaceToDepthQSymm16Workload)</td></tr>
<tr class="separator:a43e4abafcf0700a7531d8dc7f27d7eb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68b8acab2ab427a8939b41aa8c5e0ae7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a68b8acab2ab427a8939b41aa8c5e0ae7">BOOST_AUTO_TEST_CASE</a> (CreateSplitterWorkload)</td></tr>
<tr class="separator:a68b8acab2ab427a8939b41aa8c5e0ae7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afebcdbb1621edb19775965935c360131"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#afebcdbb1621edb19775965935c360131">BOOST_AUTO_TEST_CASE</a> (CreateSplitterConcat)</td></tr>
<tr class="separator:afebcdbb1621edb19775965935c360131"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1867af9782d8dc17efb28c13096f5cf"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#ad1867af9782d8dc17efb28c13096f5cf">BOOST_AUTO_TEST_CASE</a> (CreateSingleOutputMultipleInputs)</td></tr>
<tr class="separator:ad1867af9782d8dc17efb28c13096f5cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbe5208a88359f30446c5de9a790d5f3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#adbe5208a88359f30446c5de9a790d5f3">BOOST_AUTO_TEST_CASE</a> (CreateL2NormalizationNchwWorkload)</td></tr>
<tr class="separator:adbe5208a88359f30446c5de9a790d5f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9acbac7fe022ed53ada8e6aa135e4fa"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#af9acbac7fe022ed53ada8e6aa135e4fa">BOOST_AUTO_TEST_CASE</a> (CreateL2NormalizationNhwcWorkload)</td></tr>
<tr class="separator:af9acbac7fe022ed53ada8e6aa135e4fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15cb5d6986ed78434fa442039242b3fe"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a15cb5d6986ed78434fa442039242b3fe">BOOST_AUTO_TEST_CASE</a> (CreateLSTMWorkloadFloatWorkload)</td></tr>
<tr class="separator:a15cb5d6986ed78434fa442039242b3fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8782f9dbea0bfb27baa047d5c961ff3e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a8782f9dbea0bfb27baa047d5c961ff3e">BOOST_AUTO_TEST_CASE</a> (CreateConcatDim0Float32Workload)</td></tr>
<tr class="separator:a8782f9dbea0bfb27baa047d5c961ff3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e908cfa4b2b0d235a7a83bb450af212"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a6e908cfa4b2b0d235a7a83bb450af212">BOOST_AUTO_TEST_CASE</a> (CreateConcatDim1Float32Workload)</td></tr>
<tr class="separator:a6e908cfa4b2b0d235a7a83bb450af212"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15c6731388ff09e4fb01e12100138e40"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a15c6731388ff09e4fb01e12100138e40">BOOST_AUTO_TEST_CASE</a> (CreateConcatDim3Float32Workload)</td></tr>
<tr class="separator:a15c6731388ff09e4fb01e12100138e40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4f6f715f63bf06d9bb87a21e77f2129"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#ab4f6f715f63bf06d9bb87a21e77f2129">BOOST_AUTO_TEST_CASE</a> (CreateConcatDim0Uint8Workload)</td></tr>
<tr class="separator:ab4f6f715f63bf06d9bb87a21e77f2129"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad76e3bac3ab907f6ebf516ca8f40ad49"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#ad76e3bac3ab907f6ebf516ca8f40ad49">BOOST_AUTO_TEST_CASE</a> (CreateConcatDim1Uint8Workload)</td></tr>
<tr class="separator:ad76e3bac3ab907f6ebf516ca8f40ad49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41bdcd447af6e0fe880fd6c746830468"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a41bdcd447af6e0fe880fd6c746830468">BOOST_AUTO_TEST_CASE</a> (CreateConcatDim3Uint8Workload)</td></tr>
<tr class="separator:a41bdcd447af6e0fe880fd6c746830468"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72d6262ab8544dbfa7cfc22910e3011c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a72d6262ab8544dbfa7cfc22910e3011c">BOOST_AUTO_TEST_CASE</a> (CreateStackFloat32Workload)</td></tr>
<tr class="separator:a72d6262ab8544dbfa7cfc22910e3011c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a966e80d9fbe654c47b44265d982d3c33"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a966e80d9fbe654c47b44265d982d3c33">BOOST_AUTO_TEST_CASE</a> (CreateStackUint8Workload)</td></tr>
<tr class="separator:a966e80d9fbe654c47b44265d982d3c33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed3a050eccd0708a65889e9fd33a8cbd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#aed3a050eccd0708a65889e9fd33a8cbd">BOOST_AUTO_TEST_CASE</a> (CreateQuantizedLstmWorkload)</td></tr>
<tr class="separator:aed3a050eccd0708a65889e9fd33a8cbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bfad4da743703b05cfc0a4691759543"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml#a7bfad4da743703b05cfc0a4691759543">BOOST_AUTO_TEST_CASE</a> (CreateQLstmWorkloadTest)</td></tr>
<tr class="separator:a7bfad4da743703b05cfc0a4691759543"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a7906dccbc8d08250fd4d7a79d4d9c722"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7906dccbc8d08250fd4d7a79d4d9c722">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[1/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateActivationFloatWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00089">89</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    NeonCreateActivationWorkloadTest&lt;DataType::Float32&gt;();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a91343c247a116b44c01af985c72b1e4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91343c247a116b44c01af985c72b1e4d">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[2/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateAdditionFloatWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00125">125</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    NeonCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_neon_addition_workload.xhtml">NeonAdditionWorkload</a>,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                                      <a class="code" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a>,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                      <a class="code" href="classarmnn_1_1_addition_layer.xhtml">AdditionLayer</a>,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                      DataType::Float32&gt;();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_addition_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00216">WorkloadData.hpp:216</a></div></div>
<div class="ttc" id="classarmnn_1_1_addition_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_addition_layer.xhtml">armnn::AdditionLayer</a></div><div class="ttdoc">This layer represents an addition operation. </div><div class="ttdef"><b>Definition:</b> <a href="_addition_layer_8hpp_source.xhtml#l00013">AdditionLayer.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_addition_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_addition_workload.xhtml">armnn::NeonAdditionWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_addition_workload_8hpp_source.xhtml#l00020">NeonAdditionWorkload.hpp:20</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a18112ff3922073508feb3c25602eace2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18112ff3922073508feb3c25602eace2">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[3/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateSubtractionFloatWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00143">143</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    NeonCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_neon_subtraction_workload.xhtml">NeonSubtractionWorkload</a>,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                      <a class="code" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a>,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                      <a class="code" href="classarmnn_1_1_subtraction_layer.xhtml">SubtractionLayer</a>,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                      DataType::Float32&gt;();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_neon_subtraction_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_subtraction_workload.xhtml">armnn::NeonSubtractionWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_subtraction_workload_8hpp_source.xhtml#l00022">NeonSubtractionWorkload.hpp:22</a></div></div>
<div class="ttc" id="structarmnn_1_1_subtraction_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">armnn::SubtractionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00234">WorkloadData.hpp:234</a></div></div>
<div class="ttc" id="classarmnn_1_1_subtraction_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_subtraction_layer.xhtml">armnn::SubtractionLayer</a></div><div class="ttdoc">This layer represents a subtraction operation. </div><div class="ttdef"><b>Definition:</b> <a href="_subtraction_layer_8hpp_source.xhtml#l00014">SubtractionLayer.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a56236d80e962e94cdc3481f0de4d01ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56236d80e962e94cdc3481f0de4d01ba">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[4/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateSubtractionUint8Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00151">151</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;{</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    NeonCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_neon_subtraction_workload.xhtml">NeonSubtractionWorkload</a>,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                      <a class="code" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a>,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                      <a class="code" href="classarmnn_1_1_subtraction_layer.xhtml">SubtractionLayer</a>,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                      DataType::QAsymmU8&gt;();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_neon_subtraction_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_subtraction_workload.xhtml">armnn::NeonSubtractionWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_subtraction_workload_8hpp_source.xhtml#l00022">NeonSubtractionWorkload.hpp:22</a></div></div>
<div class="ttc" id="structarmnn_1_1_subtraction_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">armnn::SubtractionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00234">WorkloadData.hpp:234</a></div></div>
<div class="ttc" id="classarmnn_1_1_subtraction_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_subtraction_layer.xhtml">armnn::SubtractionLayer</a></div><div class="ttdoc">This layer represents a subtraction operation. </div><div class="ttdef"><b>Definition:</b> <a href="_subtraction_layer_8hpp_source.xhtml#l00014">SubtractionLayer.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa648d27419eef05aace4034b206692bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa648d27419eef05aace4034b206692bb">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[5/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateMultiplicationFloatWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00169">169</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    NeonCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_neon_multiplication_workload.xhtml">NeonMultiplicationWorkload</a>,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                      <a class="code" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a>,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                      <a class="code" href="classarmnn_1_1_multiplication_layer.xhtml">MultiplicationLayer</a>,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                      DataType::Float32&gt;();</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_multiplication_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">armnn::MultiplicationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00222">WorkloadData.hpp:222</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_multiplication_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_multiplication_workload.xhtml">armnn::NeonMultiplicationWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_multiplication_workload_8hpp_source.xhtml#l00021">NeonMultiplicationWorkload.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1_multiplication_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_multiplication_layer.xhtml">armnn::MultiplicationLayer</a></div><div class="ttdoc">This layer represents a multiplication operation. </div><div class="ttdef"><b>Definition:</b> <a href="_multiplication_layer_8hpp_source.xhtml#l00014">MultiplicationLayer.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae5230b6bd0c53c06b7d6a241b7197085"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5230b6bd0c53c06b7d6a241b7197085">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[6/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateMultiplicationUint8Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00177">177</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;{</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    NeonCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_neon_multiplication_workload.xhtml">NeonMultiplicationWorkload</a>,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                      <a class="code" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a>,</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                      <a class="code" href="classarmnn_1_1_multiplication_layer.xhtml">MultiplicationLayer</a>,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                      DataType::QAsymmU8&gt;();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_multiplication_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">armnn::MultiplicationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00222">WorkloadData.hpp:222</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_multiplication_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_multiplication_workload.xhtml">armnn::NeonMultiplicationWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_multiplication_workload_8hpp_source.xhtml#l00021">NeonMultiplicationWorkload.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1_multiplication_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_multiplication_layer.xhtml">armnn::MultiplicationLayer</a></div><div class="ttdoc">This layer represents a multiplication operation. </div><div class="ttdef"><b>Definition:</b> <a href="_multiplication_layer_8hpp_source.xhtml#l00014">MultiplicationLayer.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0c06371a0bca0be0ef80ed2154ff8e34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c06371a0bca0be0ef80ed2154ff8e34">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[7/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateDivisionFloatWorkloadTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00185">185</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;{</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    NeonCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_neon_division_workload.xhtml">NeonDivisionWorkload</a>,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                      <a class="code" href="structarmnn_1_1_division_queue_descriptor.xhtml">DivisionQueueDescriptor</a>,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                      <a class="code" href="classarmnn_1_1_division_layer.xhtml">DivisionLayer</a>,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                      <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>&gt;();</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_neon_division_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_division_workload.xhtml">armnn::NeonDivisionWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_division_workload_8hpp_source.xhtml#l00019">NeonDivisionWorkload.hpp:19</a></div></div>
<div class="ttc" id="structarmnn_1_1_division_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_division_queue_descriptor.xhtml">armnn::DivisionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00228">WorkloadData.hpp:228</a></div></div>
<div class="ttc" id="classarmnn_1_1_division_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_division_layer.xhtml">armnn::DivisionLayer</a></div><div class="ttdoc">This layer represents a division operation. </div><div class="ttdef"><b>Definition:</b> <a href="_division_layer_8hpp_source.xhtml#l00014">DivisionLayer.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae4e714990000cacf540f2f1da8220120"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4e714990000cacf540f2f1da8220120">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[8/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateBatchNormalizationFloatNchwWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00227">227</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;{</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    NeonCreateBatchNormalizationWorkloadTest&lt;NeonBatchNormalizationWorkload, DataType::Float32&gt;(DataLayout::NCHW);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a16f59a17052dcf58c1e71a70e5aac96f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16f59a17052dcf58c1e71a70e5aac96f">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[9/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateBatchNormalizationFloatNhwcWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00232">232</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    NeonCreateBatchNormalizationWorkloadTest&lt;NeonBatchNormalizationWorkload, DataType::Float32&gt;(DataLayout::NHWC);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8a2458d4f6ff9103299e72433245db5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a2458d4f6ff9103299e72433245db5b">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[10/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateConvolution2dFloatNchwWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00269">269</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    NeonCreateConvolution2dWorkloadTest&lt;DataType::Float32&gt;();</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1738342e20abb6bebf8766a796424865"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1738342e20abb6bebf8766a796424865">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[11/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateConvolution2dFloatNhwcWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00274">274</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;{</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    NeonCreateConvolution2dWorkloadTest&lt;DataType::Float32&gt;(DataLayout::NHWC);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad1d15d5d79ac39eae35bc83bd6ce4475"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1d15d5d79ac39eae35bc83bd6ce4475">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[12/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateDepthWiseConvolution2dFloat32NhwcWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00303">303</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00268">armnn::BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;{</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    NeonCreateDepthWiseConvolutionWorkloadTest&lt;DataType::Float32&gt;(DataLayout::NHWC);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a990cfdd3b638907fc6142c57cae2ab80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a990cfdd3b638907fc6142c57cae2ab80">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[13/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateFullyConnectedFloatWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00343">343</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;{</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    NeonCreateFullyConnectedWorkloadTest&lt;NeonFullyConnectedWorkload, DataType::Float32&gt;();</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a36eb4714d2187b907f920ec02d2b32c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36eb4714d2187b907f920ec02d2b32c5">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[14/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateFullyConnectedQAsymmU8Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00348">348</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;{</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    NeonCreateFullyConnectedWorkloadTest&lt;NeonFullyConnectedWorkload, DataType::QAsymmU8&gt;();</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ada75695cc6dd19b05488205d94e8ef75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada75695cc6dd19b05488205d94e8ef75">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[15/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateFullyConnectedQAsymmS8Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00353">353</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;{</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    NeonCreateFullyConnectedWorkloadTest&lt;NeonFullyConnectedWorkload, DataType::QAsymmS8&gt;();</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af82ae890dad4e4d4383083c11eb30ab6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af82ae890dad4e4d4383083c11eb30ab6">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[16/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateNormalizationFloatNchwWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00391">391</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;{</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    NeonCreateNormalizationWorkloadTest&lt;NeonNormalizationFloatWorkload, DataType::Float32&gt;(DataLayout::NCHW);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a255b57d12f38c675e9b7c3f312b45827"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a255b57d12f38c675e9b7c3f312b45827">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[17/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateNormalizationFloatNhwcWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00396">396</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;{</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    NeonCreateNormalizationWorkloadTest&lt;NeonNormalizationFloatWorkload, DataType::Float32&gt;(DataLayout::NHWC);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af32a90a1a11f2fabc7eb0508325f99e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af32a90a1a11f2fabc7eb0508325f99e0">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[18/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreatePooling2dFloatNchwWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00429">429</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;{</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    NeonCreatePooling2dWorkloadTest&lt;DataType::Float32&gt;(DataLayout::NCHW);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a11ff4c042447da348642135ed106597c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11ff4c042447da348642135ed106597c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[19/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreatePooling2dFloatNhwcWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00434">434</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;{</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    NeonCreatePooling2dWorkloadTest&lt;DataType::Float32&gt;(DataLayout::NHWC);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a333b09023558637a4d6654368bccfe34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a333b09023558637a4d6654368bccfe34">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[20/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreatePooling2dUint8NchwWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00439">439</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;{</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    NeonCreatePooling2dWorkloadTest&lt;DataType::QAsymmU8&gt;(DataLayout::NCHW);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a45f904a90c0b0cadb62097baaf1dce07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45f904a90c0b0cadb62097baaf1dce07">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[21/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreatePooling2dUint8NhwcWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00444">444</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;{</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    NeonCreatePooling2dWorkloadTest&lt;DataType::QAsymmU8&gt;(DataLayout::NHWC);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac5559e752bd51c12a4bd1b3b50fa5837"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5559e752bd51c12a4bd1b3b50fa5837">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[22/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreatePreluFloatWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00482">482</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;{</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    NeonCreatePreluWorkloadTest({ 1, 4, 1, 2 }, { 5, 4, 3, 1 }, { 5, 4, 3, 2 }, DataType::Float32);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a12d17284981e1fff8f0fc76da9293e2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12d17284981e1fff8f0fc76da9293e2c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[23/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreatePreluUint8Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00487">487</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;{</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    NeonCreatePreluWorkloadTest({ 1, 4, 1, 2 }, { 5, 4, 3, 1 }, { 5, 4, 3, 2 }, DataType::QAsymmU8);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a5e917bb46b0281f715abb63b979ccb41"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e917bb46b0281f715abb63b979ccb41">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[24/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateReshapeFloatWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00516">516</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;{</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    NeonCreateReshapeWorkloadTest&lt;DataType::Float32&gt;();</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa4153a7dc499db9b5eddfb42976968db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4153a7dc499db9b5eddfb42976968db">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[25/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateReshapeUint8Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00521">521</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;{</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    NeonCreateReshapeWorkloadTest&lt;DataType::QAsymmU8&gt;();</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="acecd2490c8eb6763c8500e3ae925c190"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acecd2490c8eb6763c8500e3ae925c190">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[26/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateResizeFloat32NchwWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00552">552</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;{</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    NeonCreateResizeWorkloadTest&lt;NeonResizeWorkload, armnn::DataType::Float32&gt;(DataLayout::NCHW);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac932bc28ac59c177e36c62e4364735a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac932bc28ac59c177e36c62e4364735a0">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[27/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateResizeUint8NchwWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00557">557</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;{</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    NeonCreateResizeWorkloadTest&lt;NeonResizeWorkload, armnn::DataType::QAsymmU8&gt;(DataLayout::NCHW);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6699397e086ed473ba164574ffbcd2e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6699397e086ed473ba164574ffbcd2e4">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[28/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateResizeFloat32NhwcWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00562">562</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;{</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    NeonCreateResizeWorkloadTest&lt;NeonResizeWorkload, armnn::DataType::Float32&gt;(DataLayout::NHWC);</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a455f9af7175c5499cd667cc21b6fd96b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a455f9af7175c5499cd667cc21b6fd96b">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[29/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateResizeUint8NhwcWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00567">567</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;{</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    NeonCreateResizeWorkloadTest&lt;NeonResizeWorkload, armnn::DataType::QAsymmU8&gt;(DataLayout::NHWC);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a49e154c923e22a5d09ae3afa2dee01b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49e154c923e22a5d09ae3afa2dee01b4">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[30/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateSoftmaxFloatWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00607">607</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;{</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    NeonCreateSoftmaxWorkloadTest&lt;NeonSoftmaxWorkload, DataType::Float32&gt;();</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aefd296f4bea755c458e645207441a3d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefd296f4bea755c458e645207441a3d0">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[31/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateSoftmaxQAsymmU8Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00612">612</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;{</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    NeonCreateSoftmaxWorkloadTest&lt;NeonSoftmaxWorkload, DataType::QAsymmU8&gt;();</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a17b4b33a309ab1aaf6a800bcbffe914c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17b4b33a309ab1aaf6a800bcbffe914c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[32/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateSoftmaxQAsymmS8Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00617">617</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;{</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    NeonCreateSoftmaxWorkloadTest&lt;NeonSoftmaxWorkload, DataType::QAsymmS8&gt;();</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1c4700174743960fe55fea9802ca7943"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c4700174743960fe55fea9802ca7943">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[33/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateSpaceToDepthFloat32Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00639">639</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;{</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    NeonSpaceToDepthWorkloadTest&lt;NeonSpaceToDepthWorkload, armnn::DataType::Float32&gt;();</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a59f3a522fe899842007639e90ced8ef4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59f3a522fe899842007639e90ced8ef4">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[34/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateSpaceToDepthFloat16Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00644">644</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;{</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    NeonSpaceToDepthWorkloadTest&lt;NeonSpaceToDepthWorkload, armnn::DataType::Float16&gt;();</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8675faeba30ecf6ea82ed14e7e03e5ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8675faeba30ecf6ea82ed14e7e03e5ab">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[35/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateSpaceToDepthQAsymm8Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00649">649</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;{</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    NeonSpaceToDepthWorkloadTest&lt;NeonSpaceToDepthWorkload, armnn::DataType::QAsymmU8&gt;();</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a43e4abafcf0700a7531d8dc7f27d7eb6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43e4abafcf0700a7531d8dc7f27d7eb6">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[36/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateSpaceToDepthQSymm16Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00654">654</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;{</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    NeonSpaceToDepthWorkloadTest&lt;NeonSpaceToDepthWorkload, armnn::DataType::QSymmS16&gt;();</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a68b8acab2ab427a8939b41aa8c5e0ae7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68b8acab2ab427a8939b41aa8c5e0ae7">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[37/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateSplitterWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00659">659</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>.</p>
<div class="fragment"><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;{</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml">NeonWorkloadFactory</a> factory =</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        NeonWorkloadFactoryHelper::GetFactory(NeonWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="keyword">auto</span> workload = CreateSplitterWorkloadTest&lt;NeonSplitterWorkload, DataType::Float32&gt;(factory, graph);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <span class="comment">// Checks that outputs are as we expect them (see definition of CreateSplitterWorkloadTest).</span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <a class="code" href="structarmnn_1_1_splitter_queue_descriptor.xhtml">SplitterQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keyword">auto</span> inputHandle = PolymorphicDowncast&lt;IAclTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    BOOST_TEST(TestNeonTensorHandleInfo(inputHandle, <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({5, 7, 7}, DataType::Float32)));</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="keyword">auto</span> outputHandle0 = PolymorphicDowncast&lt;IAclTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    BOOST_TEST(TestNeonTensorHandleInfo(outputHandle0, <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({1, 7, 7}, DataType::Float32)));</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keyword">auto</span> outputHandle1 = PolymorphicDowncast&lt;IAclTensorHandle*&gt;(queueDescriptor.m_Outputs[1]);</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    BOOST_TEST(TestNeonTensorHandleInfo(outputHandle1, <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({2, 7, 7}, DataType::Float32)));</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="keyword">auto</span> outputHandle2 = PolymorphicDowncast&lt;IAclTensorHandle*&gt;(queueDescriptor.m_Outputs[2]);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    BOOST_TEST(TestNeonTensorHandleInfo(outputHandle2, <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({2, 7, 7}, DataType::Float32)));</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_splitter_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_splitter_queue_descriptor.xhtml">armnn::SplitterQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00083">WorkloadData.hpp:83</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml">armnn::NeonWorkloadFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8hpp_source.xhtml#l00017">NeonWorkloadFactory.hpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afebcdbb1621edb19775965935c360131"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afebcdbb1621edb19775965935c360131">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[38/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateSplitterConcat&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00682">682</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>.</p>
<div class="fragment"><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;{</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="comment">// Tests that it is possible to decide which output of the splitter layer</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="comment">// should be lined to which input of the concat layer.</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="comment">// We tested that is is possible to specify 0th output</span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="comment">// of the splitter to be the 1st input to the concat, and the 1st output of the splitter to be 0th input</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="comment">// of the concat.</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml">NeonWorkloadFactory</a> factory =</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        NeonWorkloadFactoryHelper::GetFactory(NeonWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keyword">auto</span> workloads =</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        CreateSplitterConcatWorkloadTest&lt;<a class="code" href="classarmnn_1_1_neon_splitter_workload.xhtml">NeonSplitterWorkload</a>, <a class="code" href="classarmnn_1_1_neon_concat_workload.xhtml">NeonConcatWorkload</a>,</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;            DataType::Float32&gt;(factory, graph);</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keyword">auto</span> wlSplitter = std::move(workloads.first);</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keyword">auto</span> wlConcat = std::move(workloads.second);</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="comment">//Checks that the index of inputs/outputs matches what we declared on InputDescriptor construction.</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>* sOut0 = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>*<span class="keyword">&gt;</span>(wlSplitter-&gt;GetData().m_Outputs[0]);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>* sOut1 = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>*<span class="keyword">&gt;</span>(wlSplitter-&gt;GetData().m_Outputs[1]);</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>* mIn0 = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>*<span class="keyword">&gt;</span>(wlConcat-&gt;GetData().m_Inputs[0]);</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>* mIn1 = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>*<span class="keyword">&gt;</span>(wlConcat-&gt;GetData().m_Inputs[1]);</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    BOOST_TEST(sOut0);</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    BOOST_TEST(sOut1);</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    BOOST_TEST(mIn0);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    BOOST_TEST(mIn1);</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keywordtype">bool</span> validDataPointers = (sOut0 == mIn1) &amp;&amp; (sOut1 == mIn0);</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    BOOST_TEST(validDataPointers);</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_neon_concat_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_concat_workload.xhtml">armnn::NeonConcatWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_concat_workload_8hpp_source.xhtml#l00022">NeonConcatWorkload.hpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml">armnn::NeonWorkloadFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8hpp_source.xhtml#l00017">NeonWorkloadFactory.hpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_acl_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_tensor_handle_8hpp_source.xhtml#l00016">ArmComputeTensorHandle.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_splitter_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_splitter_workload.xhtml">armnn::NeonSplitterWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_splitter_workload_8hpp_source.xhtml#l00022">NeonSplitterWorkload.hpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad1867af9782d8dc17efb28c13096f5cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1867af9782d8dc17efb28c13096f5cf">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[39/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateSingleOutputMultipleInputs&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00717">717</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00268">armnn::BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>.</p>
<div class="fragment"><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;{</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <span class="comment">// Tests that it is possible to assign multiple (two) different layers to each of the outputs of a splitter layer.</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="comment">// We created a splitter with two outputs. That each of those outputs is used by two different activation layers</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml">NeonWorkloadFactory</a> factory =</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        NeonWorkloadFactoryHelper::GetFactory(NeonWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    std::unique_ptr&lt;NeonSplitterWorkload&gt; wlSplitter;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    std::unique_ptr&lt;NeonActivationWorkload&gt; wlActiv0_0;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    std::unique_ptr&lt;NeonActivationWorkload&gt; wlActiv0_1;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    std::unique_ptr&lt;NeonActivationWorkload&gt; wlActiv1_0;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    std::unique_ptr&lt;NeonActivationWorkload&gt; wlActiv1_1;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    CreateSplitterMultipleInputsOneOutputWorkloadTest&lt;<a class="code" href="classarmnn_1_1_neon_splitter_workload.xhtml">NeonSplitterWorkload</a>,</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        <a class="code" href="classarmnn_1_1_neon_activation_workload.xhtml">NeonActivationWorkload</a>, DataType::Float32&gt;(factory, graph, wlSplitter, wlActiv0_0, wlActiv0_1,</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                                                   wlActiv1_0, wlActiv1_1);</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>* sOut0 = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>*<span class="keyword">&gt;</span>(wlSplitter-&gt;GetData().m_Outputs[0]);</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>* sOut1 = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>*<span class="keyword">&gt;</span>(wlSplitter-&gt;GetData().m_Outputs[1]);</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>* activ0_0Im = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>*<span class="keyword">&gt;</span>(wlActiv0_0-&gt;GetData().m_Inputs[0]);</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>* activ0_1Im = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>*<span class="keyword">&gt;</span>(wlActiv0_1-&gt;GetData().m_Inputs[0]);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>* activ1_0Im = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>*<span class="keyword">&gt;</span>(wlActiv1_0-&gt;GetData().m_Inputs[0]);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>* activ1_1Im = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a>*<span class="keyword">&gt;</span>(wlActiv1_1-&gt;GetData().m_Inputs[0]);</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    BOOST_TEST(sOut0);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    BOOST_TEST(sOut1);</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    BOOST_TEST(activ0_0Im);</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    BOOST_TEST(activ0_1Im);</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    BOOST_TEST(activ1_0Im);</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    BOOST_TEST(activ1_1Im);</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <span class="keywordtype">bool</span> validDataPointers = (sOut0 == activ0_0Im) &amp;&amp; (sOut0 == activ0_1Im) &amp;&amp;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                             (sOut1 == activ1_0Im) &amp;&amp; (sOut1 == activ1_1Im);</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    BOOST_TEST(validDataPointers);</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml">armnn::NeonWorkloadFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8hpp_source.xhtml#l00017">NeonWorkloadFactory.hpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_acl_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_tensor_handle_8hpp_source.xhtml#l00016">ArmComputeTensorHandle.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_activation_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_activation_workload.xhtml">armnn::NeonActivationWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_activation_workload_8hpp_source.xhtml#l00020">NeonActivationWorkload.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_splitter_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_splitter_workload.xhtml">armnn::NeonSplitterWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_splitter_workload_8hpp_source.xhtml#l00022">NeonSplitterWorkload.hpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adbe5208a88359f30446c5de9a790d5f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbe5208a88359f30446c5de9a790d5f3">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[40/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateL2NormalizationNchwWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00806">806</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;{</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    NeonCreateL2NormalizationWorkloadTest&lt;NeonL2NormalizationFloatWorkload, DataType::Float32&gt;(DataLayout::NCHW);</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af9acbac7fe022ed53ada8e6aa135e4fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9acbac7fe022ed53ada8e6aa135e4fa">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[41/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateL2NormalizationNhwcWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00811">811</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;{</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    NeonCreateL2NormalizationWorkloadTest&lt;NeonL2NormalizationFloatWorkload, DataType::Float32&gt;(DataLayout::NHWC);</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a15cb5d6986ed78434fa442039242b3fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15cb5d6986ed78434fa442039242b3fe">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[42/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateLSTMWorkloadFloatWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00834">834</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;{</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    NeonCreateLstmWorkloadTest&lt;NeonLstmFloatWorkload&gt;();</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8782f9dbea0bfb27baa047d5c961ff3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8782f9dbea0bfb27baa047d5c961ff3e">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[43/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateConcatDim0Float32Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00859">859</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;{</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    NeonCreateConcatWorkloadTest&lt;NeonConcatWorkload, armnn::DataType::Float32&gt;({ 4, 3, 2, 5 }, 0);</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6e908cfa4b2b0d235a7a83bb450af212"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e908cfa4b2b0d235a7a83bb450af212">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[44/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateConcatDim1Float32Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00864">864</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;{</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    NeonCreateConcatWorkloadTest&lt;NeonConcatWorkload, armnn::DataType::Float32&gt;({ 2, 6, 2, 5 }, 1);</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a15c6731388ff09e4fb01e12100138e40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15c6731388ff09e4fb01e12100138e40">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[45/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateConcatDim3Float32Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00869">869</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;{</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    NeonCreateConcatWorkloadTest&lt;NeonConcatWorkload, armnn::DataType::Float32&gt;({ 2, 3, 2, 10 }, 3);</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab4f6f715f63bf06d9bb87a21e77f2129"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4f6f715f63bf06d9bb87a21e77f2129">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[46/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateConcatDim0Uint8Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00874">874</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;{</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    NeonCreateConcatWorkloadTest&lt;NeonConcatWorkload, armnn::DataType::QAsymmU8&gt;({ 4, 3, 2, 5 }, 0);</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad76e3bac3ab907f6ebf516ca8f40ad49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad76e3bac3ab907f6ebf516ca8f40ad49">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[47/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateConcatDim1Uint8Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00879">879</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;{</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    NeonCreateConcatWorkloadTest&lt;NeonConcatWorkload, armnn::DataType::QAsymmU8&gt;({ 2, 6, 2, 5 }, 1);</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a41bdcd447af6e0fe880fd6c746830468"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41bdcd447af6e0fe880fd6c746830468">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[48/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateConcatDim3Uint8Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00884">884</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;{</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    NeonCreateConcatWorkloadTest&lt;NeonConcatWorkload, armnn::DataType::QAsymmU8&gt;({ 2, 3, 2, 10 }, 3);</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a72d6262ab8544dbfa7cfc22910e3011c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72d6262ab8544dbfa7cfc22910e3011c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[49/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateStackFloat32Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00917">917</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00268">armnn::BOOST_AUTO_TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;{</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    NeonCreateStackWorkloadTest&lt;armnn::DataType::Float32&gt;({ 3, 4, 5 }, { 3, 4, 2, 5 }, 2, 2);</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a966e80d9fbe654c47b44265d982d3c33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a966e80d9fbe654c47b44265d982d3c33">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[50/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateStackUint8Workload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00929">929</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;{</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    NeonCreateStackWorkloadTest&lt;armnn::DataType::QAsymmU8&gt;({ 3, 4, 5 }, { 3, 4, 2, 5 }, 2, 2);</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aed3a050eccd0708a65889e9fd33a8cbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed3a050eccd0708a65889e9fd33a8cbd">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[51/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateQuantizedLstmWorkload&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00965">965</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;{</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    NeonCreateQuantizedLstmWorkloadTest&lt;NeonQuantizedLstmWorkload&gt;();</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7bfad4da743703b05cfc0a4691759543"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bfad4da743703b05cfc0a4691759543">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[52/52]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CreateQLstmWorkloadTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml#l00992">992</a> of file <a class="el" href="_neon_create_workload_tests_8cpp_source.xhtml">NeonCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>.</p>
<div class="fragment"><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;{</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;    NeonCreateQLstmWorkloadTest&lt;NeonQLstmWorkload&gt;();</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_d86eb514662c7c08e168285f21d00ea1.xhtml">neon</a></li><li class="navelem"><a class="el" href="dir_c3e37ff99b1c352c48e2670d743526e1.xhtml">test</a></li><li class="navelem"><a class="el" href="_neon_create_workload_tests_8cpp.xhtml">NeonCreateWorkloadTests.cpp</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:49 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
