<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: TensorInfo Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_tensor_info.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_tensor_info-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">TensorInfo Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a21c2ae9fa438faf42669dadda628080c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a> ()</td></tr>
<tr class="memdesc:a21c2ae9fa438faf42669dadda628080c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Empty (invalid) constructor.  <a href="#a21c2ae9fa438faf42669dadda628080c">More...</a><br /></td></tr>
<tr class="separator:a21c2ae9fa438faf42669dadda628080c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0f1e7addec3daacb5e656e3031e84b2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#ae0f1e7addec3daacb5e656e3031e84b2">TensorInfo</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType, float quantizationScale=0.0f, int32_t quantizationOffset=0)</td></tr>
<tr class="separator:ae0f1e7addec3daacb5e656e3031e84b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac478f429b6f31e62bc72bdfc9c9ad242"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#ac478f429b6f31e62bc72bdfc9c9ad242">TensorInfo</a> (unsigned int numDimensions, const unsigned int *dimensionSizes, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType, float quantizationScale=0.0f, int32_t quantizationOffset=0)</td></tr>
<tr class="separator:ac478f429b6f31e62bc72bdfc9c9ad242"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac58c3467c7a7998120249cd0b940d221"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#ac58c3467c7a7998120249cd0b940d221">TensorInfo</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType, const std::vector&lt; float &gt; &amp;quantizationScales, unsigned int quantizationDim)</td></tr>
<tr class="separator:ac58c3467c7a7998120249cd0b940d221"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e546b0233ac93ef3ef0e9ee96117c76"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a1e546b0233ac93ef3ef0e9ee96117c76">TensorInfo</a> (unsigned int numDimensions, const unsigned int *dimensionSizes, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType, const std::vector&lt; float &gt; &amp;quantizationScales, unsigned int quantizationDim)</td></tr>
<tr class="separator:a1e546b0233ac93ef3ef0e9ee96117c76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef0989e23ab5fc862df9981d3b371f63"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#aef0989e23ab5fc862df9981d3b371f63">TensorInfo</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;other)</td></tr>
<tr class="separator:aef0989e23ab5fc862df9981d3b371f63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac45c8c0052476cd66ef732de76dd9bc8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#ac45c8c0052476cd66ef732de76dd9bc8">operator=</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;other)</td></tr>
<tr class="separator:ac45c8c0052476cd66ef732de76dd9bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a586e1eec08e847abfeb3de3a4038c5ce"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a586e1eec08e847abfeb3de3a4038c5ce">operator==</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;other) const</td></tr>
<tr class="separator:a586e1eec08e847abfeb3de3a4038c5ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a944e616dc6fdde5287b17f2265307d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a2a944e616dc6fdde5287b17f2265307d">operator!=</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;other) const</td></tr>
<tr class="separator:a2a944e616dc6fdde5287b17f2265307d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b5d0f8a24e9d9238f412260a552acf8"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a> () const</td></tr>
<tr class="separator:a8b5d0f8a24e9d9238f412260a552acf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a350bcc7d86f7d9333340a0a04be078f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a350bcc7d86f7d9333340a0a04be078f6">GetShape</a> ()</td></tr>
<tr class="separator:a350bcc7d86f7d9333340a0a04be078f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe8889e8150beef5fd204b2d87b49298"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;newShape)</td></tr>
<tr class="separator:abe8889e8150beef5fd204b2d87b49298"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a157e27d41e9f6b21f0d3c025fa47dc24"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a> () const</td></tr>
<tr class="separator:a157e27d41e9f6b21f0d3c025fa47dc24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8846406ac37fbd2204f0be16ee05d5b7"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a> () const</td></tr>
<tr class="separator:a8846406ac37fbd2204f0be16ee05d5b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea909c7327109228ef618d459015def3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a> () const</td></tr>
<tr class="separator:aea909c7327109228ef618d459015def3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71975fcec1464d639f1a78f73164d1bd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">SetDataType</a> (<a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> type)</td></tr>
<tr class="separator:a71975fcec1464d639f1a78f73164d1bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af672d1c9e2a120a18926cb645981fbb7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">HasMultipleQuantizationScales</a> () const</td></tr>
<tr class="separator:af672d1c9e2a120a18926cb645981fbb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab85cd8cc10c96a7c99c14042c251fc48"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#ab85cd8cc10c96a7c99c14042c251fc48">HasPerAxisQuantization</a> () const</td></tr>
<tr class="separator:ab85cd8cc10c96a7c99c14042c251fc48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bc11f1fa23ef42532f9fdd04d355270"><td class="memItemLeft" align="right" valign="top">std::vector&lt; float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a8bc11f1fa23ef42532f9fdd04d355270">GetQuantizationScales</a> () const</td></tr>
<tr class="separator:a8bc11f1fa23ef42532f9fdd04d355270"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a8675f9d64c3fb59e6af15362bb6332"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">SetQuantizationScales</a> (const std::vector&lt; float &gt; &amp;scales)</td></tr>
<tr class="separator:a1a8675f9d64c3fb59e6af15362bb6332"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a047ca888c43bd7fb5702853bf72410d0"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a> () const</td></tr>
<tr class="separator:a047ca888c43bd7fb5702853bf72410d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a685739c4eb65a580e075282cfe6787d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a> (float scale)</td></tr>
<tr class="separator:a685739c4eb65a580e075282cfe6787d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a770b51078da02f44a819e9f95d8058b5"><td class="memItemLeft" align="right" valign="top">int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a> () const</td></tr>
<tr class="separator:a770b51078da02f44a819e9f95d8058b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63cbc581012c957f9d68d224ddc3e43c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a> (int32_t offset)</td></tr>
<tr class="separator:a63cbc581012c957f9d68d224ddc3e43c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b8fc85ce966c035d789cf22db5088a1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; unsigned int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">GetQuantizationDim</a> () const</td></tr>
<tr class="separator:a8b8fc85ce966c035d789cf22db5088a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a519efe8ff6dc3aacdfe8a999415e3e4e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">SetQuantizationDim</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; unsigned int &gt; &amp;quantizationDim)</td></tr>
<tr class="separator:a519efe8ff6dc3aacdfe8a999415e3e4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c00efeb540198b33b8558c76e5cc2dd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a7c00efeb540198b33b8558c76e5cc2dd">IsQuantized</a> () const</td></tr>
<tr class="separator:a7c00efeb540198b33b8558c76e5cc2dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22f377fc4e10dc1773a3f979061e85f1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a22f377fc4e10dc1773a3f979061e85f1">IsTypeSpaceMatch</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;other) const</td></tr>
<tr class="memdesc:a22f377fc4e10dc1773a3f979061e85f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check that the types are the same and, if quantize, that the quantization parameters are the same.  <a href="#a22f377fc4e10dc1773a3f979061e85f1">More...</a><br /></td></tr>
<tr class="separator:a22f377fc4e10dc1773a3f979061e85f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcbdfb544ece4c31d0b37715ad0f3be0"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a> () const</td></tr>
<tr class="separator:abcbdfb544ece4c31d0b37715ad0f3be0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00053">53</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a21c2ae9fa438faf42669dadda628080c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21c2ae9fa438faf42669dadda628080c">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Empty (invalid) constructor. </p>

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00137">137</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;: m_DataType(<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae0f1e7addec3daacb5e656e3031e84b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0f1e7addec3daacb5e656e3031e84b2">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>quantizationScale</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>quantizationOffset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00142">142</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00276">TensorInfo::SetQuantizationOffset()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00260">TensorInfo::SetQuantizationScale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    : m_Shape(shape)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    , m_DataType(dataType)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(quantizationScale);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(quantizationOffset);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00260">Tensor.cpp:260</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00276">Tensor.cpp:276</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac478f429b6f31e62bc72bdfc9c9ad242"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac478f429b6f31e62bc72bdfc9c9ad242">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numDimensions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int *&#160;</td>
          <td class="paramname"><em>dimensionSizes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>quantizationScale</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>quantizationOffset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00153">153</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00276">TensorInfo::SetQuantizationOffset()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00260">TensorInfo::SetQuantizationScale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    : m_Shape(numDimensions, dimensionSizes)</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    , m_DataType(dataType)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(quantizationScale);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(quantizationOffset);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00260">Tensor.cpp:260</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00276">Tensor.cpp:276</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac58c3467c7a7998120249cd0b940d221"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac58c3467c7a7998120249cd0b940d221">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>quantizationScales</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>quantizationDim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00165">165</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00286">TensorInfo::SetQuantizationDim()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00243">TensorInfo::SetQuantizationScales()</a>.</p>
<div class="fragment"><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    : m_Shape(shape)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    , m_DataType(dataType)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">SetQuantizationScales</a>(quantizationScales);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">SetQuantizationDim</a>(MakeOptional&lt;unsigned int&gt;(quantizationDim));</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a519efe8ff6dc3aacdfe8a999415e3e4e"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">armnn::TensorInfo::SetQuantizationDim</a></div><div class="ttdeci">void SetQuantizationDim(const Optional&lt; unsigned int &gt; &amp;quantizationDim)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00286">Tensor.cpp:286</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a1a8675f9d64c3fb59e6af15362bb6332"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">armnn::TensorInfo::SetQuantizationScales</a></div><div class="ttdeci">void SetQuantizationScales(const std::vector&lt; float &gt; &amp;scales)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00243">Tensor.cpp:243</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1e546b0233ac93ef3ef0e9ee96117c76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e546b0233ac93ef3ef0e9ee96117c76">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numDimensions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int *&#160;</td>
          <td class="paramname"><em>dimensionSizes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>quantizationScales</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>quantizationDim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00176">176</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00286">TensorInfo::SetQuantizationDim()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00243">TensorInfo::SetQuantizationScales()</a>.</p>
<div class="fragment"><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    : m_Shape(numDimensions, dimensionSizes)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    , m_DataType(dataType)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;{</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">SetQuantizationScales</a>(quantizationScales);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">SetQuantizationDim</a>(MakeOptional&lt;unsigned int&gt;(quantizationDim));</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a519efe8ff6dc3aacdfe8a999415e3e4e"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">armnn::TensorInfo::SetQuantizationDim</a></div><div class="ttdeci">void SetQuantizationDim(const Optional&lt; unsigned int &gt; &amp;quantizationDim)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00286">Tensor.cpp:286</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a1a8675f9d64c3fb59e6af15362bb6332"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">armnn::TensorInfo::SetQuantizationScales</a></div><div class="ttdeci">void SetQuantizationScales(const std::vector&lt; float &gt; &amp;scales)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00243">Tensor.cpp:243</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aef0989e23ab5fc862df9981d3b371f63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef0989e23ab5fc862df9981d3b371f63">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00188">188</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;: m_Shape(other.m_Shape)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;, m_DataType(other.m_DataType)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;, m_Quantization(other.m_Quantization)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aea909c7327109228ef618d459015def3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea909c7327109228ef618d459015def3">&#9670;&nbsp;</a></span>GetDataType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> GetDataType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00095">95</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00130">BiasAndWeightsTypesCompatible::BiasAndWeightsTypesCompatible()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00121">BiasAndWeightsTypesMatch::BiasAndWeightsTypesMatch()</a>, <a class="el" href="_quantizer_test_8cpp_source.xhtml#l00346">armnn::BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_network_tests_8cpp_source.xhtml#l00374">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00054">armnnUtils::CalculateReducedOutputTensoInfo()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00105">armnnUtils::CalculateStridedSliceOutputTensorInfo()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00115">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_layer_support_8cpp_source.xhtml#l00064">armnn::CheckTensorDataTypesEqual()</a>, <a class="el" href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00035">armnn::ClConvertFp16ToFp32WorkloadValidate()</a>, <a class="el" href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00035">armnn::ClConvertFp32ToFp16WorkloadValidate()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00151">armnn::ConvertBf16ToFp32Weight()</a>, <a class="el" href="_convert_fp32_network_to_bf16_8hpp_source.xhtml#l00018">armnn::optimizations::ConvertWeight()</a>, <a class="el" href="_network_quantizer_utils_8cpp_source.xhtml#l00015">armnn::CreateQuantizedConst()</a>, <a class="el" href="_ref_depth_to_space_workload_8cpp_source.xhtml#l00014">RefDepthToSpaceWorkload::Execute()</a>, <a class="el" href="_ref_strided_slice_workload_8cpp_source.xhtml#l00020">RefStridedSliceWorkload::Execute()</a>, <a class="el" href="_ref_slice_workload_8cpp_source.xhtml#l00016">RefSliceWorkload::Execute()</a>, <a class="el" href="_ref_lstm_workload_8cpp_source.xhtml#l00041">RefLstmWorkload::Execute()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00026">BFloat16ToFloat32::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00047">Float16ToFloat32::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00068">Float32ToBFloat16::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00089">Float32ToFloat16::Func()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00025">armnn::GetBiasDataType()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03071">TfLiteParser::GetBuffer()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00274">Layer::GetDataType()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00152">armnnUtils::GetPerAxisParams()</a>, <a class="el" href="_cpu_tensor_handle_8cpp_source.xhtml#l00015">armnn::GetUnpaddedTensorStrides()</a>, <a class="el" href="_neon_workload_utils_8hpp_source.xhtml#l00035">armnn::InitializeArmComputeTensorData()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00051">armnn::InsertConvertBf16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00129">armnn::InsertConvertFp16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00168">armnn::InsertConvertFp32ToBf16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00090">armnn::InsertConvertFp32ToBf16LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00201">armnn::InsertConvertFp32ToFp16LayersAfter()</a>, <a class="el" href="_sample_dynamic_layer_support_8cpp_source.xhtml#l00027">SampleDynamicLayerSupport::IsAdditionSupported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l00399">RefLayerSupport::IsConvertFp16ToFp32Supported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l00434">RefLayerSupport::IsConvertFp32ToFp16Supported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l00454">RefLayerSupport::IsConvolution2dSupported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l00599">RefLayerSupport::IsDepthwiseConvolutionSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00407">NeonLayerSupport::IsFloorSupported()</a>, <a class="el" href="_layer_support_8cpp_source.xhtml#l00282">armnn::IsFloorSupported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l00880">RefLayerSupport::IsFullyConnectedSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00622">ClLayerSupport::IsQLstmSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00619">NeonLayerSupport::IsQLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00764">ClLayerSupport::IsSplitterSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00773">NeonLayerSupport::IsSplitterSupported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l02031">RefLayerSupport::IsTransposeConvolution2dSupported()</a>, <a class="el" href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00048">main()</a>, <a class="el" href="_decoders_8hpp_source.xhtml#l00070">armnn::MakeDecoder()</a>, <a class="el" href="_encoders_8hpp_source.xhtml#l00021">armnn::MakeEncoder()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l01467">armnnTfParser::OutputShapeOfExpandDims()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l02462">armnnTfParser::OutputShapeOfSqueeze()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00015">armnn::PermuteTensor()</a>, <a class="el" href="_convert_fp32_network_to_fp16_8hpp_source.xhtml#l00018">ConvertFp32NetworkToFp16Impl::Run()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00094">TypeAnyOf::TypeAnyOf()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00105">TypeIs::TypeIs()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00616">ArgMinMaxQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00969">FullyConnectedQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01177">Convolution2dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01243">DepthwiseConvolution2dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02312">QuantizeQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02464">EqualQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02054">ConvertBf16ToFp32QueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02077">ConvertFp32ToBf16QueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02123">ConvertFp16ToFp32QueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02100">ConvertFp32ToFp16QueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02488">GreaterQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02538">GatherQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02640">DequantizeQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02766">TransposeConvolution2dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03439">ComparisonQueueDescriptor::Validate()</a>, <a class="el" href="_types_utils_8hpp_source.xhtml#l00296">armnn::VerifyTensorInfoDataType()</a>, <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00313">QuantizerVisitor::VisitInputLayer()</a>, <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00375">QuantizerVisitor::VisitOutputLayer()</a>, and <a class="el" href="_serializer_8cpp_source.xhtml#l01458">SerializerVisitor::VisitQuantizedLstmLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{ <span class="keywordflow">return</span> m_DataType; }</div></div><!-- fragment -->
</div>
</div>
<a id="abcbdfb544ece4c31d0b37715ad0f3be0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcbdfb544ece4c31d0b37715ad0f3be0">&#9670;&nbsp;</a></span>GetNumBytes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumBytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00214">214</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_types_utils_8hpp_source.xhtml#l00115">armnn::GetDataTypeSize()</a>, and <a class="el" href="_tensor_8hpp_source.xhtml#l00093">TensorInfo::GetNumElements()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_tensor_handle_8cpp_source.xhtml#l00053">RefTensorHandle::Allocate()</a>, <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00053">SampleTensorHandle::Allocate()</a>, <a class="el" href="_cpu_tensor_handle_8cpp_source.xhtml#l00091">ScopedCpuTensorHandle::Allocate()</a>, <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00070">ClDepthwiseConvolutionWorkload::ClDepthwiseConvolutionWorkload()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02594">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00215">ConstTensor::ConstTensor()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00608">TfLiteParser::CreateNetworkFromBinary()</a>, <a class="el" href="_ref_reshape_workload_8cpp_source.xhtml#l00015">RefReshapeWorkload::Execute()</a>, <a class="el" href="_ref_tensor_handle_8cpp_source.xhtml#l00045">RefTensorHandle::Manage()</a>, <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00048">SampleTensorHandle::Manage()</a>, <a class="el" href="_ref_tensor_handle_8cpp_source.xhtml#l00074">RefTensorHandle::Map()</a>, <a class="el" href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00072">NeonDepthwiseConvolutionWorkload::NeonDepthwiseConvolutionWorkload()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00449">OnnxParser::OnnxParser()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01493">TfLiteParser::OutputShapeOfSqueeze()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00015">armnn::PermuteTensor()</a>, <a class="el" href="_ref_constant_workload_8cpp_source.xhtml#l00023">RefConstantWorkload::PostAllocationConfigure()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00064">armnn::ReorderWeightChannelsForAcl()</a>, and <a class="el" href="_cpu_tensor_handle_8cpp_source.xhtml#l00066">ScopedCpuTensorHandle::ScopedCpuTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">GetDataTypeSize</a>(m_DataType) * <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>();</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00093">Tensor.hpp:93</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa02b9e06fb20fa3c13da0427e6ee5ab2"><div class="ttname"><a href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">armnn::GetDataTypeSize</a></div><div class="ttdeci">constexpr unsigned int GetDataTypeSize(DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00115">TypesUtils.hpp:115</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a157e27d41e9f6b21f0d3c025fa47dc24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a157e27d41e9f6b21f0d3c025fa47dc24">&#9670;&nbsp;</a></span>GetNumDimensions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumDimensions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00092">92</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arg_min_max_8cpp_source.xhtml#l00015">armnn::ArgMinMax()</a>, <a class="el" href="_parser_helper_test_8cpp_source.xhtml#l00019">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_output_shape_of_squeeze_8cpp_source.xhtml#l00027">BOOST_FIXTURE_TEST_CASE()</a>, <a class="el" href="_tensor_test_8cpp_source.xhtml#l00012">armnn::boost_test_print_type()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l02137">armnnTfParser::CalculatePaddedOutputTensorInfo()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00054">armnnUtils::CalculateReducedOutputTensoInfo()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00105">armnnUtils::CalculateStridedSliceOutputTensorInfo()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l02105">armnnTfParser::CheckPaddingTensor()</a>, <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00154">armnn::ComputeSoftmaxAclAxis()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02594">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_concatenate_8cpp_source.xhtml#l00014">armnn::Concatenate()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00608">TfLiteParser::CreateNetworkFromBinary()</a>, <a class="el" href="_debug_8cpp_source.xhtml#l00020">armnn::Debug()</a>, <a class="el" href="backends_2reference_2workloads_2_gather_8cpp_source.xhtml#l00018">armnn::Gather()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00025">armnn::GetBiasDataType()</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00016">GetTensorShapeAsArray()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l00251">RefLayerSupport::IsBatchToSpaceNdSupported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l01270">RefLayerSupport::IsMeanSupported()</a>, <a class="el" href="_log_softmax_8cpp_source.xhtml#l00030">armnn::LogSoftmax()</a>, <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00193">MakeTensor()</a>, <a class="el" href="backends_2reference_2workloads_2_mean_8cpp_source.xhtml#l00071">armnn::Mean()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l01467">armnnTfParser::OutputShapeOfExpandDims()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01493">TfLiteParser::OutputShapeOfSqueeze()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l02462">armnnTfParser::OutputShapeOfSqueeze()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01278">CaffeParserBase::ParseConcatLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01135">CaffeParserBase::ParseInnerProductLayer()</a>, <a class="el" href="_ref_fully_connected_workload_8cpp_source.xhtml#l00032">RefFullyConnectedWorkload::PostAllocationConfigure()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00019">armnnUtils::ProcessConcatInputTensorInfo()</a>, <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00021">PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00250">ParserFlatbuffersFixture::RunTest()</a>, <a class="el" href="backends_2reference_2workloads_2_softmax_8cpp_source.xhtml#l00017">armnn::Softmax()</a>, <a class="el" href="_splitter_8cpp_source.xhtml#l00021">armnn::Split()</a>, <a class="el" href="_splitter_8hpp_source.xhtml#l00017">armnn::Splitter()</a>, <a class="el" href="backends_2reference_2workloads_2_stack_8cpp_source.xhtml#l00012">armnn::Stack()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l00326">armnnCaffeParser::TensorDescToBlobShape()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00184">TensorNumDimensionsAreCorrect::TensorNumDimensionsAreCorrect()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00489">TfLiteParser::TfLiteParser()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00514">TfParser::TfParser()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00969">FullyConnectedQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02246">MeanQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02290">PadQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01493">InstanceNormalizationQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01522">L2NormalizationQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02365">StridedSliceQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02538">GatherQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03331">SliceQueueDescriptor::Validate()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00041">MeanLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_gather_layer_8cpp_source.xhtml#l00032">GatherLayer::ValidateTensorShapesFromInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{ <span class="keywordflow">return</span> m_Shape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); }</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00043">Tensor.hpp:43</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8846406ac37fbd2204f0be16ee05d5b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8846406ac37fbd2204f0be16ee05d5b7">&#9670;&nbsp;</a></span>GetNumElements()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumElements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00093">93</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_activation_8cpp_source.xhtml#l00095">armnn::Activation()</a>, <a class="el" href="_output_shape_of_squeeze_8cpp_source.xhtml#l00027">BOOST_FIXTURE_TEST_CASE()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02594">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00450">Concat2dTestImpl()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00715">Concat3dTestImpl()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l01399">Concat4dTestImpl()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00151">armnn::ConvertBf16ToFp32Weight()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00932">armnnTfParser::ConvertTfTensorDataType()</a>, <a class="el" href="_convert_fp32_network_to_bf16_8hpp_source.xhtml#l00018">armnn::optimizations::ConvertWeight()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00608">TfLiteParser::CreateNetworkFromBinary()</a>, <a class="el" href="_network_quantizer_utils_8cpp_source.xhtml#l00015">armnn::CreateQuantizedConst()</a>, <a class="el" href="_debug_8cpp_source.xhtml#l00020">armnn::Debug()</a>, <a class="el" href="backends_2reference_2workloads_2_dequantize_8cpp_source.xhtml#l00013">armnn::Dequantize()</a>, <a class="el" href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00141">armnn::DetectionPostProcess()</a>, <a class="el" href="_ref_convert_bf16_to_fp32_workload_8cpp_source.xhtml#l00016">RefConvertBf16ToFp32Workload::Execute()</a>, <a class="el" href="_ref_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00016">RefConvertFp16ToFp32Workload::Execute()</a>, <a class="el" href="_ref_convert_fp32_to_bf16_workload_8cpp_source.xhtml#l00016">RefConvertFp32ToBf16Workload::Execute()</a>, <a class="el" href="_ref_fake_quantization_float32_workload_8cpp_source.xhtml#l00029">RefFakeQuantizationFloat32Workload::Execute()</a>, <a class="el" href="_ref_floor_workload_8cpp_source.xhtml#l00016">RefFloorWorkload::Execute()</a>, <a class="el" href="_sample_dynamic_addition_workload_8cpp_source.xhtml#l00039">SampleDynamicAdditionWorkload::Execute()</a>, <a class="el" href="_ref_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00017">RefConvertFp32ToFp16Workload::Execute()</a>, <a class="el" href="_ref_stack_workload_8cpp_source.xhtml#l00021">RefStackWorkload::Execute()</a>, <a class="el" href="_ref_debug_workload_8cpp_source.xhtml#l00018">RefDebugWorkload&lt; DataType &gt;::Execute()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00026">BFloat16ToFloat32::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00047">Float16ToFloat32::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00068">Float32ToBFloat16::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00089">Float32ToFloat16::Func()</a>, <a class="el" href="backends_2reference_2workloads_2_gather_8cpp_source.xhtml#l00018">armnn::Gather()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00025">armnn::GetBiasDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00214">TensorInfo::GetNumBytes()</a>, <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00223">MakeRandomTensor()</a>, <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00193">MakeTensor()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00449">OnnxParser::OnnxParser()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l01958">Deserializer::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01493">TfLiteParser::OutputShapeOfSqueeze()</a>, <a class="el" href="backends_2reference_2workloads_2_pad_8cpp_source.xhtml#l00022">armnn::Pad()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00239">PermuteOutputForConcat()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00121">PermuteTensorData()</a>, <a class="el" href="_ref_workload_utils_8hpp_source.xhtml#l00108">armnn::Quantize()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00234">QuantizeData()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00149">ShapesAreSameTotalSize::ShapesAreSameTotalSize()</a>, <a class="el" href="_splitter_8hpp_source.xhtml#l00017">armnn::Splitter()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00514">TfParser::TfParser()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00578">armnnDeserializer::ToConstTensor()</a>, and <a class="el" href="_workload_data_8cpp_source.xhtml#l01636">SpaceToBatchNdQueueDescriptor::Validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{ <span class="keywordflow">return</span> m_Shape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>(); }</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorShape::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00107">Tensor.cpp:107</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8b8fc85ce966c035d789cf22db5088a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b8fc85ce966c035d789cf22db5088a1">&#9670;&nbsp;</a></span>GetQuantizationDim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; unsigned int &gt; GetQuantizationDim </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00281">281</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_data_8cpp_source.xhtml#l00025">armnn::GetBiasDataType()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00152">armnnUtils::GetPerAxisParams()</a>, and <a class="el" href="_serializer_8cpp_source.xhtml#l01458">SerializerVisitor::VisitQuantizedLstmLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;{</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">return</span> m_Quantization.m_QuantizationDim;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a770b51078da02f44a819e9f95d8058b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a770b51078da02f44a819e9f95d8058b5">&#9670;&nbsp;</a></span>GetQuantizationOffset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32_t GetQuantizationOffset </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00265">265</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_test_8cpp_source.xhtml#l00123">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_quantizer_test_8cpp_source.xhtml#l00346">armnn::BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00115">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01599">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01736">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01889">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_ref_workload_utils_8hpp_source.xhtml#l00089">armnn::Dequantize()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00025">armnn::GetBiasDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00219">TensorInfo::IsTypeSpaceMatch()</a>, <a class="el" href="_decoders_8hpp_source.xhtml#l00070">armnn::MakeDecoder()</a>, <a class="el" href="_encoders_8hpp_source.xhtml#l00021">armnn::MakeEncoder()</a>, <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00223">MakeRandomTensor()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00084">QuantizationParametersAreEqual::QuantizationParametersAreEqual()</a>, <a class="el" href="_ref_workload_utils_8hpp_source.xhtml#l00108">armnn::Quantize()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00234">QuantizeData()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00201">SimpleConvolution2dTestImpl()</a>, and <a class="el" href="_serializer_8cpp_source.xhtml#l01458">SerializerVisitor::VisitQuantizedLstmLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;{</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">if</span> (!m_Quantization.m_Offset.has_value())</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="comment">// NOTE: old default for backward compatibility</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">return</span> m_Quantization.m_Offset.value();</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a047ca888c43bd7fb5702853bf72410d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a047ca888c43bd7fb5702853bf72410d0">&#9670;&nbsp;</a></span>GetQuantizationScale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float GetQuantizationScale </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00248">248</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, and <a class="el" href="_tensor_8hpp_source.xhtml#l00098">TensorInfo::HasMultipleQuantizationScales()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_test_8cpp_source.xhtml#l00123">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_quantizer_test_8cpp_source.xhtml#l00346">armnn::BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00115">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01599">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01736">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01889">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_ref_workload_utils_8hpp_source.xhtml#l00089">armnn::Dequantize()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00025">armnn::GetBiasDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00219">TensorInfo::IsTypeSpaceMatch()</a>, <a class="el" href="_decoders_8hpp_source.xhtml#l00070">armnn::MakeDecoder()</a>, <a class="el" href="_encoders_8hpp_source.xhtml#l00021">armnn::MakeEncoder()</a>, <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00223">MakeRandomTensor()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00084">QuantizationParametersAreEqual::QuantizationParametersAreEqual()</a>, <a class="el" href="_ref_workload_utils_8hpp_source.xhtml#l00108">armnn::Quantize()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00234">QuantizeData()</a>, <a class="el" href="_quantizer_visitor_8cpp_source.xhtml#l00016">QuantizerVisitor::QuantizerVisitor()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00201">SimpleConvolution2dTestImpl()</a>, and <a class="el" href="_serializer_8cpp_source.xhtml#l01458">SerializerVisitor::VisitQuantizedLstmLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;{</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">if</span> (m_Quantization.m_Scales.empty())</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    {</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="comment">// NOTE: old default for backward compatibility</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">return</span> 1.0f;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(!<a class="code" href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">HasMultipleQuantizationScales</a>());</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">return</span> m_Quantization.m_Scales[0];</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_af672d1c9e2a120a18926cb645981fbb7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">armnn::TensorInfo::HasMultipleQuantizationScales</a></div><div class="ttdeci">bool HasMultipleQuantizationScales() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00098">Tensor.hpp:98</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8bc11f1fa23ef42532f9fdd04d355270"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8bc11f1fa23ef42532f9fdd04d355270">&#9670;&nbsp;</a></span>GetQuantizationScales()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; float &gt; GetQuantizationScales </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00238">238</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_data_8cpp_source.xhtml#l00025">armnn::GetBiasDataType()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00152">armnnUtils::GetPerAxisParams()</a>, and <a class="el" href="_serializer_8cpp_source.xhtml#l01458">SerializerVisitor::VisitQuantizedLstmLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;{</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">return</span> m_Quantization.m_Scales;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8b5d0f8a24e9d9238f412260a552acf8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b5d0f8a24e9d9238f412260a552acf8">&#9670;&nbsp;</a></span>GetShape() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; GetShape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00088">88</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arg_min_max_8cpp_source.xhtml#l00015">armnn::ArgMinMax()</a>, <a class="el" href="_batch_norm_impl_8cpp_source.xhtml#l00018">armnn::BatchNormImpl()</a>, <a class="el" href="backends_2reference_2workloads_2_batch_to_space_n_d_8cpp_source.xhtml#l00035">armnn::BatchToSpaceNd()</a>, <a class="el" href="_tensor_test_8cpp_source.xhtml#l00123">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_quantizer_test_8cpp_source.xhtml#l02477">armnn::BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_output_shape_of_squeeze_8cpp_source.xhtml#l00027">BOOST_FIXTURE_TEST_CASE()</a>, <a class="el" href="_tensor_test_8cpp_source.xhtml#l00012">armnn::boost_test_print_type()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l02137">armnnTfParser::CalculatePaddedOutputTensorInfo()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00054">armnnUtils::CalculateReducedOutputTensoInfo()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00105">armnnUtils::CalculateStridedSliceOutputTensorInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02594">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_concatenate_8cpp_source.xhtml#l00014">armnn::Concatenate()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00272">Concatenate()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00151">armnn::ConvertBf16ToFp32Weight()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00932">armnnTfParser::ConvertTfTensorDataType()</a>, <a class="el" href="_convert_fp32_network_to_bf16_8hpp_source.xhtml#l00018">armnn::optimizations::ConvertWeight()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00134">armnn::ConvertWeightTensorFromArmnnToAcl()</a>, <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00017">armnn::CreateAclNormalizationLayerInfoForL2Normalization()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00608">TfLiteParser::CreateNetworkFromBinary()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00599">OnnxParser::CreateNetworkFromString()</a>, <a class="el" href="_network_quantizer_utils_8cpp_source.xhtml#l00015">armnn::CreateQuantizedConst()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, <a class="el" href="_debug_8cpp_source.xhtml#l00020">armnn::Debug()</a>, <a class="el" href="_depth_to_space_8cpp_source.xhtml#l00018">armnn::DepthToSpace()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01599">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01736">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01889">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00141">armnn::DetectionPostProcess()</a>, <a class="el" href="_ref_lstm_workload_8cpp_source.xhtml#l00041">RefLstmWorkload::Execute()</a>, <a class="el" href="_ref_q_lstm_workload_8cpp_source.xhtml#l00046">RefQLstmWorkload::Execute()</a>, <a class="el" href="_ref_comparison_workload_8cpp_source.xhtml#l00039">RefComparisonWorkload::Execute()</a>, <a class="el" href="_ref_elementwise_unary_workload_8cpp_source.xhtml#l00041">RefElementwiseUnaryWorkload::Execute()</a>, <a class="el" href="_ref_elementwise_workload_8cpp_source.xhtml#l00041">RefElementwiseWorkload&lt; Functor, ParentDescriptor, DebugString &gt;::Execute()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00026">BFloat16ToFloat32::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00047">Float16ToFloat32::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00068">Float32ToBFloat16::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00089">Float32ToFloat16::Func()</a>, <a class="el" href="backends_2reference_2workloads_2_gather_8cpp_source.xhtml#l00018">armnn::Gather()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00122">GetBias()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00025">armnn::GetBiasDataType()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00152">armnnUtils::GetPerAxisParams()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02616">Deserializer::GetQLstmDescriptor()</a>, <a class="el" href="_ref_tensor_handle_8hpp_source.xhtml#l00045">RefTensorHandle::GetShape()</a>, <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml#l00046">SampleTensorHandle::GetShape()</a>, <a class="el" href="_cpu_tensor_handle_8hpp_source.xhtml#l00053">ConstCpuTensorHandle::GetShape()</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00016">GetTensorShapeAsArray()</a>, <a class="el" href="_cpu_tensor_handle_8cpp_source.xhtml#l00015">armnn::GetUnpaddedTensorStrides()</a>, <a class="el" href="_instance_norm_8cpp_source.xhtml#l00018">armnn::InstanceNorm()</a>, <a class="el" href="_layer_support_8cpp_source.xhtml#l00282">armnn::IsFloorSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00701">ClLayerSupport::IsResizeBilinearSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00706">NeonLayerSupport::IsResizeBilinearSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00775">ClLayerSupport::IsSplitterSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00784">NeonLayerSupport::IsSplitterSupported()</a>, <a class="el" href="_log_softmax_8cpp_source.xhtml#l00030">armnn::LogSoftmax()</a>, <a class="el" href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00048">main()</a>, <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00179">MakeTensor()</a>, <a class="el" href="backends_2reference_2workloads_2_mean_8cpp_source.xhtml#l00071">armnn::Mean()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l01467">armnnTfParser::OutputShapeOfExpandDims()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l01958">Deserializer::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01493">TfLiteParser::OutputShapeOfSqueeze()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l02462">armnnTfParser::OutputShapeOfSqueeze()</a>, <a class="el" href="backends_2reference_2workloads_2_pad_8cpp_source.xhtml#l00022">armnn::Pad()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01339">CaffeParserBase::ParseBatchNormLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01278">CaffeParserBase::ParseConcatLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01135">CaffeParserBase::ParseInnerProductLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l00884">CaffeParserBase::ParsePoolingLayer()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l01405">CaffeParserBase::ParseScaleLayer()</a>, <a class="el" href="_permute_8cpp_source.xhtml#l00114">armnnUtils::Permuted()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00171">PermuteInputsForConcat()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00015">armnn::PermuteTensor()</a>, <a class="el" href="_data_layout_utils_8hpp_source.xhtml#l00014">PermuteTensorNchwToNhwc()</a>, <a class="el" href="_data_layout_utils_8hpp_source.xhtml#l00026">PermuteTensorNhwcToNchw()</a>, <a class="el" href="_pooling2d_8cpp_source.xhtml#l00143">armnn::Pooling2d()</a>, <a class="el" href="_ref_depthwise_convolution2d_workload_8cpp_source.xhtml#l00035">RefDepthwiseConvolution2dWorkload::PostAllocationConfigure()</a>, <a class="el" href="_ref_convolution2d_workload_8cpp_source.xhtml#l00033">RefConvolution2dWorkload::PostAllocationConfigure()</a>, <a class="el" href="_ref_fully_connected_workload_8cpp_source.xhtml#l00032">RefFullyConnectedWorkload::PostAllocationConfigure()</a>, <a class="el" href="_ref_transpose_convolution2d_workload_8cpp_source.xhtml#l00036">RefTransposeConvolution2dWorkload::PostAllocationConfigure()</a>, <a class="el" href="_prelu_impl_8cpp_source.xhtml#l00013">armnn::PreluImpl()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00019">armnnUtils::ProcessConcatInputTensorInfo()</a>, <a class="el" href="_ref_convolution2d_workload_8cpp_source.xhtml#l00015">RefConvolution2dWorkload::RefConvolution2dWorkload()</a>, <a class="el" href="_ref_depthwise_convolution2d_workload_8cpp_source.xhtml#l00018">RefDepthwiseConvolution2dWorkload::RefDepthwiseConvolution2dWorkload()</a>, <a class="el" href="_ref_fully_connected_workload_8cpp_source.xhtml#l00015">RefFullyConnectedWorkload::RefFullyConnectedWorkload()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00038">armnn::ReshapeWeightsForAcl()</a>, <a class="el" href="_resize_8cpp_source.xhtml#l00035">armnn::Resize()</a>, <a class="el" href="_permute_as_reshape_8hpp_source.xhtml#l00018">PermuteAsReshapeImpl::Run()</a>, <a class="el" href="_transpose_as_reshape_8hpp_source.xhtml#l00018">TransposeAsReshapeImpl::Run()</a>, <a class="el" href="_optimize_consecutive_reshapes_8hpp_source.xhtml#l00019">OptimizeConsecutiveReshapesImpl::Run()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00029">DepthwiseConvolution2dLayer::SerializeLayerParameters()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00029">Convolution2dLayer::SerializeLayerParameters()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00080">Graph::SerializeToDot()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00164">ShapesAreBroadcastCompatible::ShapesAreBroadcastCompatible()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00141">ShapesAreSameRank::ShapesAreSameRank()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00201">SimpleConvolution2dTestImpl()</a>, <a class="el" href="backends_2reference_2workloads_2_slice_8cpp_source.xhtml#l00016">armnn::Slice()</a>, <a class="el" href="backends_2reference_2workloads_2_softmax_8cpp_source.xhtml#l00017">armnn::Softmax()</a>, <a class="el" href="backends_2reference_2workloads_2_space_to_batch_n_d_8cpp_source.xhtml#l00034">armnn::SpaceToBatchNd()</a>, <a class="el" href="_space_to_depth_8cpp_source.xhtml#l00036">armnn::SpaceToDepth()</a>, <a class="el" href="_splitter_8cpp_source.xhtml#l00021">armnn::Split()</a>, <a class="el" href="_splitter_8hpp_source.xhtml#l00017">armnn::Splitter()</a>, <a class="el" href="backends_2reference_2workloads_2_stack_8cpp_source.xhtml#l00012">armnn::Stack()</a>, <a class="el" href="backends_2reference_2workloads_2_strided_slice_8cpp_source.xhtml#l00091">armnn::StridedSlice()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l00326">armnnCaffeParser::TensorDescToBlobShape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00489">TfLiteParser::TfLiteParser()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00514">TfParser::TfParser()</a>, <a class="el" href="_transpose_convolution2d_end_to_end_test_impl_8hpp_source.xhtml#l00048">TransposeConvolution2dEndToEnd()</a>, <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml#l00113">armnnUtils::TransposeTensorShape()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00616">ArgMinMaxQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01318">PermuteQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01243">DepthwiseConvolution2dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02572">DetectionPostProcessQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01374">ResizeBilinearQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01423">ResizeQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01636">SpaceToBatchNdQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01703">SpaceToDepthQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02818">TransposeQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03331">SliceQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03386">DepthToSpaceQueueDescriptor::Validate()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00050">ElementwiseBaseLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00032">QuantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00031">ActivationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00032">ConvertFp32ToFp16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00032">NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00037">DebugLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00036">SliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00036">MemImportLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00032">FloorLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00044">BatchToSpaceNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00033">AbsLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00032">DequantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00032">InstanceNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00103">Pooling2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00032">SoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00036">MemCopyLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00033">ConvertBf16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00030">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00033">ConvertFp16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00032">FakeQuantizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00056">ResizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00033">ConvertFp32ToBf16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00030">MergeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00061">StackLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00033">RsqrtLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00032">L2NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00032">GatherLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00043">TransposeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00041">MeanLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00032">LogSoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00043">PermuteLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_constant_layer_8cpp_source.xhtml#l00043">ConstantLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00039">ReshapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00037">DetectionPostProcessLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00083">StridedSliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00072">ArgMinMaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00043">ElementwiseUnaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00122">DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00097">TransposeConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00064">FullyConnectedLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00062">SpaceToDepthLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00097">PreluLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00069">SpaceToBatchNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00058">ComparisonLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00060">DepthToSpaceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00115">Convolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00142">SplitterLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00051">BatchNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00094">QuantizedLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00166">LstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00168">QLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_types_utils_8hpp_source.xhtml#l00296">armnn::VerifyTensorInfoDataType()</a>, and <a class="el" href="_serializer_8cpp_source.xhtml#l01458">SerializerVisitor::VisitQuantizedLstmLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{ <span class="keywordflow">return</span> m_Shape; }</div></div><!-- fragment -->
</div>
</div>
<a id="a350bcc7d86f7d9333340a0a04be078f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a350bcc7d86f7d9333340a0a04be078f6">&#9670;&nbsp;</a></span>GetShape() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; GetShape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00089">89</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{ <span class="keywordflow">return</span> m_Shape; }</div></div><!-- fragment -->
</div>
</div>
<a id="af672d1c9e2a120a18926cb645981fbb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af672d1c9e2a120a18926cb645981fbb7">&#9670;&nbsp;</a></span>HasMultipleQuantizationScales()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasMultipleQuantizationScales </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00098">98</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00096">TensorShape::operator==()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#aec48a5a5ab6ecf86c8db0f6d0859fe2f">SetQuantizationOffset()</a>, and <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a522a440dc1e26bed45fd3f68be8484e9">SetQuantizationScale()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_data_8cpp_source.xhtml#l00025">armnn::GetBiasDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00248">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00233">TensorInfo::HasPerAxisQuantization()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00219">TensorInfo::IsTypeSpaceMatch()</a>.</p>
<div class="fragment"><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{ <span class="keywordflow">return</span> m_Quantization.m_Scales.size() &gt; 1; }</div></div><!-- fragment -->
</div>
</div>
<a id="ab85cd8cc10c96a7c99c14042c251fc48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab85cd8cc10c96a7c99c14042c251fc48">&#9670;&nbsp;</a></span>HasPerAxisQuantization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasPerAxisQuantization </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00233">233</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00098">TensorInfo::HasMultipleQuantizationScales()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_data_8cpp_source.xhtml#l00025">armnn::GetBiasDataType()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00152">armnnUtils::GetPerAxisParams()</a>, <a class="el" href="_decoders_8hpp_source.xhtml#l00070">armnn::MakeDecoder()</a>, <a class="el" href="_encoders_8hpp_source.xhtml#l00021">armnn::MakeEncoder()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00113">TypeNotPerAxisQuantized::TypeNotPerAxisQuantized()</a>, and <a class="el" href="_serializer_8cpp_source.xhtml#l01458">SerializerVisitor::VisitQuantizedLstmLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">HasMultipleQuantizationScales</a>() || m_Quantization.m_QuantizationDim.has_value();</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_af672d1c9e2a120a18926cb645981fbb7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">armnn::TensorInfo::HasMultipleQuantizationScales</a></div><div class="ttdeci">bool HasMultipleQuantizationScales() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00098">Tensor.hpp:98</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7c00efeb540198b33b8558c76e5cc2dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c00efeb540198b33b8558c76e5cc2dd">&#9670;&nbsp;</a></span>IsQuantized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQuantized </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00291">291</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_types_utils_8hpp_source.xhtml#l00236">armnn::IsQuantizedType()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_data_8cpp_source.xhtml#l00025">armnn::GetBiasDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00219">TensorInfo::IsTypeSpaceMatch()</a>, and <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00113">TypeNotPerAxisQuantized::TypeNotPerAxisQuantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#ad44c007f21af2d0375e3ef9400a1b275">IsQuantizedType</a>(m_DataType);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad44c007f21af2d0375e3ef9400a1b275"><div class="ttname"><a href="namespacearmnn.xhtml#ad44c007f21af2d0375e3ef9400a1b275">armnn::IsQuantizedType</a></div><div class="ttdeci">constexpr bool IsQuantizedType()</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00236">TypesUtils.hpp:236</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a22f377fc4e10dc1773a3f979061e85f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22f377fc4e10dc1773a3f979061e85f1">&#9670;&nbsp;</a></span>IsTypeSpaceMatch()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTypeSpaceMatch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check that the types are the same and, if quantize, that the quantization parameters are the same. </p>

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00219">219</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00265">TensorInfo::GetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00248">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00098">TensorInfo::HasMultipleQuantizationScales()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00291">TensorInfo::IsQuantized()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00025">armnn::GetBiasDataType()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00245">ClLayerSupport::IsConcatSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00218">NeonLayerSupport::IsConcatSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00775">ClLayerSupport::IsSplitterSupported()</a>, and <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00784">NeonLayerSupport::IsSplitterSupported()</a>.</p>
<div class="fragment"><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;{</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">bool</span> match = <span class="keyword">true</span>;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    match &amp;= m_DataType == other.m_DataType;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a7c00efeb540198b33b8558c76e5cc2dd">IsQuantized</a>() &amp;&amp; !<a class="code" href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">HasMultipleQuantizationScales</a>())</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        match &amp;= <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a>() == other.GetQuantizationScale() &amp;&amp;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                 <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>() == other.GetQuantizationOffset();</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">return</span> match;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_af672d1c9e2a120a18926cb645981fbb7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">armnn::TensorInfo::HasMultipleQuantizationScales</a></div><div class="ttdeci">bool HasMultipleQuantizationScales() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00098">Tensor.hpp:98</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a770b51078da02f44a819e9f95d8058b5"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">armnn::TensorInfo::GetQuantizationOffset</a></div><div class="ttdeci">int32_t GetQuantizationOffset() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00265">Tensor.cpp:265</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a047ca888c43bd7fb5702853bf72410d0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">armnn::TensorInfo::GetQuantizationScale</a></div><div class="ttdeci">float GetQuantizationScale() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00248">Tensor.cpp:248</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a7c00efeb540198b33b8558c76e5cc2dd"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a7c00efeb540198b33b8558c76e5cc2dd">armnn::TensorInfo::IsQuantized</a></div><div class="ttdeci">bool IsQuantized() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00291">Tensor.cpp:291</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2a944e616dc6fdde5287b17f2265307d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a944e616dc6fdde5287b17f2265307d">&#9670;&nbsp;</a></span>operator!=()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00209">209</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac45c8c0052476cd66ef732de76dd9bc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac45c8c0052476cd66ef732de76dd9bc8">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00194">194</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;{</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    m_Shape = other.m_Shape;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    m_DataType = other.m_DataType;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    m_Quantization = other.m_Quantization;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a586e1eec08e847abfeb3de3a4038c5ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a586e1eec08e847abfeb3de3a4038c5ce">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00202">202</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">return</span> ((m_Shape == other.m_Shape) &amp;&amp;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            (m_DataType == other.m_DataType) &amp;&amp;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            (m_Quantization == other.m_Quantization));</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a71975fcec1464d639f1a78f73164d1bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71975fcec1464d639f1a78f73164d1bd">&#9670;&nbsp;</a></span>SetDataType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetDataType </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00096">96</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_test_8cpp_source.xhtml#l00123">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_data_type_utils_8hpp_source.xhtml#l00017">ConvertToDataType()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00051">armnn::InsertConvertBf16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00129">armnn::InsertConvertFp16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00168">armnn::InsertConvertFp32ToBf16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00090">armnn::InsertConvertFp32ToBf16LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00201">armnn::InsertConvertFp32ToFp16LayersAfter()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l01467">armnnTfParser::OutputShapeOfExpandDims()</a>, and <a class="el" href="_convert_fp32_network_to_fp16_8hpp_source.xhtml#l00018">ConvertFp32NetworkToFp16Impl::Run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{ m_DataType = type; }</div></div><!-- fragment -->
</div>
</div>
<a id="a519efe8ff6dc3aacdfe8a999415e3e4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a519efe8ff6dc3aacdfe8a999415e3e4e">&#9670;&nbsp;</a></span>SetQuantizationDim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetQuantizationDim </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>quantizationDim</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00286">286</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_8cpp_source.xhtml#l00165">TensorInfo::TensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;{</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    m_Quantization.m_QuantizationDim = quantizationDim;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a63cbc581012c957f9d68d224ddc3e43c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63cbc581012c957f9d68d224ddc3e43c">&#9670;&nbsp;</a></span>SetQuantizationOffset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetQuantizationOffset </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>offset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00276">276</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00245">AdditionBroadcast1ElementTestImpl()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00162">AdditionBroadcastTestImpl()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00153">ArgMaxChannelTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00188">ArgMaxHeightTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00064">ArgMaxSimpleTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00118">ArgMinChannelTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00091">ArgMinSimpleTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00223">ArgMinWidthTest()</a>, <a class="el" href="_tensor_test_8cpp_source.xhtml#l00123">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00115">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01142">CompareActivationTestImpl()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00307">ConstantLinearActivationTestCommon()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00996">Convolution2d3x3DilationTestCommon()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l02506">DepthwiseConvolution2d3x3DilationTestCommon()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01599">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01736">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01889">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00327">DetectionPostProcessFastNmsQuantizedTest()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00263">DetectionPostProcessRegularNmsQuantizedTest()</a>, <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00148">FullyConnectedLargeTestCommon()</a>, <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00119">GetSoftmaxProfilerJson()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00107">PermuteValueSet1Test()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00157">PermuteValueSet2Test()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00207">PermuteValueSet3Test()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp_source.xhtml#l00583">QuantizeData()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00201">SimpleConvolution2dTestImpl()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00058">SimplePermuteTest()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00058">SimpleTransposeTest()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00142">TensorInfo::TensorInfo()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00107">TransposeValueSet1Test()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00157">TransposeValueSet2Test()</a>, and <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00207">TransposeValueSet3Test()</a>.</p>
<div class="fragment"><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;{</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    m_Quantization.m_Offset = MakeOptional&lt;int32_t&gt;(offset);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a685739c4eb65a580e075282cfe6787d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a685739c4eb65a580e075282cfe6787d6">&#9670;&nbsp;</a></span>SetQuantizationScale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetQuantizationScale </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00260">260</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00245">AdditionBroadcast1ElementTestImpl()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00162">AdditionBroadcastTestImpl()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00153">ArgMaxChannelTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00188">ArgMaxHeightTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00064">ArgMaxSimpleTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00118">ArgMinChannelTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00091">ArgMinSimpleTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00223">ArgMinWidthTest()</a>, <a class="el" href="_tensor_test_8cpp_source.xhtml#l00123">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00023">BoundedReLuTestCommon()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00115">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01142">CompareActivationTestImpl()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02635">ConcatUint16Test()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02497">ConcatUint8Test()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00307">ConstantLinearActivationTestCommon()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00461">Convolution1dTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00996">Convolution2d3x3DilationTestCommon()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l02506">DepthwiseConvolution2d3x3DilationTestCommon()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01599">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01736">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01889">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00327">DetectionPostProcessFastNmsQuantizedTest()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00263">DetectionPostProcessRegularNmsQuantizedTest()</a>, <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml#l00041">ElementwiseTestHelper()</a>, <a class="el" href="_elementwise_unary_test_impl_8hpp_source.xhtml#l00035">ElementwiseUnaryTestHelper()</a>, <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00148">FullyConnectedLargeTestCommon()</a>, <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00071">FullyConnectedTest()</a>, <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00119">GetSoftmaxProfilerJson()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00107">PermuteValueSet1Test()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00157">PermuteValueSet2Test()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00207">PermuteValueSet3Test()</a>, <a class="el" href="_prelu_test_impl_8hpp_source.xhtml#l00023">PreluTest()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp_source.xhtml#l00583">QuantizeData()</a>, <a class="el" href="_reshape_test_impl_8cpp_source.xhtml#l00109">Reshape5dTest()</a>, <a class="el" href="_quantizer_test_8cpp_source.xhtml#l02837">armnn::SetupQuantize()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00392">SimpleActivationTest()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00201">SimpleConvolution2dTestImpl()</a>, <a class="el" href="_floor_test_impl_8cpp_source.xhtml#l00015">SimpleFloorTest()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00058">SimplePermuteTest()</a>, <a class="el" href="_reshape_test_impl_8cpp_source.xhtml#l00057">SimpleReshapeTest()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00058">SimpleTransposeTest()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00142">TensorInfo::TensorInfo()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00107">TransposeValueSet1Test()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00157">TransposeValueSet2Test()</a>, and <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00207">TransposeValueSet3Test()</a>.</p>
<div class="fragment"><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    m_Quantization.m_Scales = { scale };</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1a8675f9d64c3fb59e6af15362bb6332"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a8675f9d64c3fb59e6af15362bb6332">&#9670;&nbsp;</a></span>SetQuantizationScales()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetQuantizationScales </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>scales</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00243">243</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_8cpp_source.xhtml#l00165">TensorInfo::TensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    m_Quantization.m_Scales = scales;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abe8889e8150beef5fd204b2d87b49298"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe8889e8150beef5fd204b2d87b49298">&#9670;&nbsp;</a></span>SetShape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>newShape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00090">90</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_test_8cpp_source.xhtml#l00123">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l02137">armnnTfParser::CalculatePaddedOutputTensorInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00608">TfLiteParser::CreateNetworkFromBinary()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00599">OnnxParser::CreateNetworkFromString()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l01467">armnnTfParser::OutputShapeOfExpandDims()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l01958">Deserializer::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParser::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01493">TfLiteParser::OutputShapeOfSqueeze()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l02462">armnnTfParser::OutputShapeOfSqueeze()</a>, <a class="el" href="_caffe_parser_8cpp_source.xhtml#l00365">CaffeParserBase::ParseInputLayer()</a>, <a class="el" href="_permute_8cpp_source.xhtml#l00114">armnnUtils::Permuted()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00171">PermuteInputsForConcat()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00038">armnn::ReshapeWeightsForAcl()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00489">TfLiteParser::TfLiteParser()</a>, <a class="el" href="_tf_parser_8cpp_source.xhtml#l00514">TfParser::TfParser()</a>, and <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml#l00113">armnnUtils::TransposeTensorShape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{ m_Shape = newShape; }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>include/armnn/<a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a></li>
<li>src/armnn/<a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:54 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
