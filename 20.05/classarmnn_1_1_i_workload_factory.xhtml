<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: IWorkloadFactory Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_i_workload_factory.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_1_1_i_workload_factory-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">IWorkloadFactory Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for IWorkloadFactory:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_i_workload_factory.png" usemap="#IWorkloadFactory_map" alt=""/>
  <map id="IWorkloadFactory_map" name="IWorkloadFactory_map">
<area href="classarmnn_1_1_ref_workload_factory.xhtml" alt="RefWorkloadFactory" shape="rect" coords="0,56,199,80"/>
<area href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml" alt="SampleDynamicWorkloadFactory" shape="rect" coords="209,56,408,80"/>
<area href="classarmnn_1_1_workload_factory_base.xhtml" alt="WorkloadFactoryBase" shape="rect" coords="418,56,617,80"/>
<area href="classarmnn_1_1_cl_workload_factory.xhtml" alt="ClWorkloadFactory" shape="rect" coords="313,112,512,136"/>
<area href="classarmnn_1_1_neon_workload_factory.xhtml" alt="NeonWorkloadFactory" shape="rect" coords="522,112,721,136"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aab62208f96483015c29ad58549efedd8"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aab62208f96483015c29ad58549efedd8">~IWorkloadFactory</a> ()</td></tr>
<tr class="separator:aab62208f96483015c29ad58549efedd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f7e4296485d2812e7996089149c96d1"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9f7e4296485d2812e7996089149c96d1">GetBackendId</a> () const =0</td></tr>
<tr class="separator:a9f7e4296485d2812e7996089149c96d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37f4eba7877deb34f4d8d64c9bcb9ab5"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a37f4eba7877deb34f4d8d64c9bcb9ab5">SupportsSubTensors</a> () const =0</td></tr>
<tr class="separator:a37f4eba7877deb34f4d8d64c9bcb9ab5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac043991b839903b2ba9da884e4020848"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac043991b839903b2ba9da884e4020848">CreateSubTensorHandle</a> (<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &amp;parent, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> const &amp;subTensorShape, unsigned int const *subTensorOrigin) const =0</td></tr>
<tr class="separator:ac043991b839903b2ba9da884e4020848"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa83593035de93eb4b6dddb9dc8f5ced6"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa83593035de93eb4b6dddb9dc8f5ced6">CreateInput</a> (const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">InputQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const =0</td></tr>
<tr class="separator:aa83593035de93eb4b6dddb9dc8f5ced6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15c140be4ddceffee16436f009d3ed94"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, const bool IsMemoryManaged=<a class="el" href="_ref_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a>) const =0</td></tr>
<tr class="separator:a15c140be4ddceffee16436f009d3ed94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0b0226f767fd570877710b84c7caa2a"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af0b0226f767fd570877710b84c7caa2a">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout, const bool IsMemoryManaged=<a class="el" href="_ref_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a>) const =0</td></tr>
<tr class="separator:af0b0226f767fd570877710b84c7caa2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3ba329a833bbb63961eb64d6477d691"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ae3ba329a833bbb63961eb64d6477d691">CreateAbs</a> (const <a class="el" href="structarmnn_1_1_abs_queue_descriptor.xhtml">AbsQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ae3ba329a833bbb63961eb64d6477d691"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4458d75c0db21c6abc941cd93a6a24c5"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">CreateActivation</a> (const <a class="el" href="structarmnn_1_1_activation_queue_descriptor.xhtml">ActivationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a4458d75c0db21c6abc941cd93a6a24c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf187617ed4cdd6625b396d6b194923e"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">CreateAddition</a> (const <a class="el" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:acf187617ed4cdd6625b396d6b194923e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac47803c9faacfb7c10219253b99f61ca"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac47803c9faacfb7c10219253b99f61ca">CreateArgMinMax</a> (const <a class="el" href="structarmnn_1_1_arg_min_max_queue_descriptor.xhtml">ArgMinMaxQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ac47803c9faacfb7c10219253b99f61ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe1e0d40e23195022c0bc10a8aab55ea"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#abe1e0d40e23195022c0bc10a8aab55ea">CreateBatchNormalization</a> (const <a class="el" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">BatchNormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:abe1e0d40e23195022c0bc10a8aab55ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af00ce13ef7dabd17cc4186d0a4991757"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af00ce13ef7dabd17cc4186d0a4991757">CreateBatchToSpaceNd</a> (const <a class="el" href="structarmnn_1_1_batch_to_space_nd_queue_descriptor.xhtml">BatchToSpaceNdQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:af00ce13ef7dabd17cc4186d0a4991757"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fa12033e9be37c529ac54a83ab43b36"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3fa12033e9be37c529ac54a83ab43b36">CreateComparison</a> (const <a class="el" href="structarmnn_1_1_comparison_queue_descriptor.xhtml">ComparisonQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a3fa12033e9be37c529ac54a83ab43b36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32bb8d6cf5fc028bf501252767c08b21"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a32bb8d6cf5fc028bf501252767c08b21">CreateConcat</a> (const <a class="el" href="structarmnn_1_1_concat_queue_descriptor.xhtml">ConcatQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a32bb8d6cf5fc028bf501252767c08b21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a963bd7acce29a83d96daeb2cea34f2f7"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a963bd7acce29a83d96daeb2cea34f2f7">CreateConstant</a> (const <a class="el" href="structarmnn_1_1_constant_queue_descriptor.xhtml">ConstantQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a963bd7acce29a83d96daeb2cea34f2f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8ecac7ffd75e39c5a651932c5eaa8d2"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af8ecac7ffd75e39c5a651932c5eaa8d2">CreateConvertBf16ToFp32</a> (const <a class="el" href="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor.xhtml">ConvertBf16ToFp32QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:af8ecac7ffd75e39c5a651932c5eaa8d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83e0a21747c1ce29b2083c1e3b1d88af"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a83e0a21747c1ce29b2083c1e3b1d88af">CreateConvertFp16ToFp32</a> (const <a class="el" href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">ConvertFp16ToFp32QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a83e0a21747c1ce29b2083c1e3b1d88af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a147654e5d9af7cec3ecd957c6bd4161e"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a147654e5d9af7cec3ecd957c6bd4161e">CreateConvertFp32ToBf16</a> (const <a class="el" href="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor.xhtml">ConvertFp32ToBf16QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a147654e5d9af7cec3ecd957c6bd4161e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b414a001b6b31d00bfe4056fd6740c5"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2b414a001b6b31d00bfe4056fd6740c5">CreateConvertFp32ToFp16</a> (const <a class="el" href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">ConvertFp32ToFp16QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a2b414a001b6b31d00bfe4056fd6740c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2184995027cd2c9f9980206de9658855"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2184995027cd2c9f9980206de9658855">CreateConvolution2d</a> (const <a class="el" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a2184995027cd2c9f9980206de9658855"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00346a3754d9411bba2e29dc1f996ac6"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a00346a3754d9411bba2e29dc1f996ac6">CreateDebug</a> (const <a class="el" href="structarmnn_1_1_debug_queue_descriptor.xhtml">DebugQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a00346a3754d9411bba2e29dc1f996ac6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c3a47828ee252dca111605c9be4b072"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3c3a47828ee252dca111605c9be4b072">CreateDepthToSpace</a> (const <a class="el" href="structarmnn_1_1_depth_to_space_queue_descriptor.xhtml">DepthToSpaceQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a3c3a47828ee252dca111605c9be4b072"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accb9759dfd2880efe0f8d2705ddee448"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#accb9759dfd2880efe0f8d2705ddee448">CreateDepthwiseConvolution2d</a> (const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">DepthwiseConvolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:accb9759dfd2880efe0f8d2705ddee448"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3243806bf6c89df8952cc0a3601e538b"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3243806bf6c89df8952cc0a3601e538b">CreateDequantize</a> (const <a class="el" href="structarmnn_1_1_dequantize_queue_descriptor.xhtml">DequantizeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a3243806bf6c89df8952cc0a3601e538b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0da07faa15302377aa97be89c57677c"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ad0da07faa15302377aa97be89c57677c">CreateDetectionPostProcess</a> (const <a class="el" href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">DetectionPostProcessQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ad0da07faa15302377aa97be89c57677c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20bb773c7fd6253418bdedac1312cd19"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a20bb773c7fd6253418bdedac1312cd19">CreateDivision</a> (const <a class="el" href="structarmnn_1_1_division_queue_descriptor.xhtml">DivisionQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a20bb773c7fd6253418bdedac1312cd19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12d2c4e0f0b0d6b36d8a3e14bf69f9e4"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a12d2c4e0f0b0d6b36d8a3e14bf69f9e4">CreateElementwiseUnary</a> (const <a class="el" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a12d2c4e0f0b0d6b36d8a3e14bf69f9e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a096bb62d44fadf079ea4463379d4e6aa"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a096bb62d44fadf079ea4463379d4e6aa">CreateEqual</a> (const <a class="el" href="structarmnn_1_1_equal_queue_descriptor.xhtml">EqualQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a096bb62d44fadf079ea4463379d4e6aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42581f3d1c22e64b7f3676ea20acab0e"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a42581f3d1c22e64b7f3676ea20acab0e">CreateFakeQuantization</a> (const <a class="el" href="structarmnn_1_1_fake_quantization_queue_descriptor.xhtml">FakeQuantizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a42581f3d1c22e64b7f3676ea20acab0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1a45333dc35cb5ba9ab71fca4f359e4"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa1a45333dc35cb5ba9ab71fca4f359e4">CreateFloor</a> (const <a class="el" href="structarmnn_1_1_floor_queue_descriptor.xhtml">FloorQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:aa1a45333dc35cb5ba9ab71fca4f359e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c193739520e08f686b347ff795ad2fe"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a1c193739520e08f686b347ff795ad2fe">CreateFullyConnected</a> (const <a class="el" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">FullyConnectedQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a1c193739520e08f686b347ff795ad2fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91fe56cae7e970d90f6e7f54427e7d44"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a91fe56cae7e970d90f6e7f54427e7d44">CreateGather</a> (const <a class="el" href="structarmnn_1_1_gather_queue_descriptor.xhtml">GatherQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a91fe56cae7e970d90f6e7f54427e7d44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e779d1b00a9e885497364ebd0dc24ef"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a4e779d1b00a9e885497364ebd0dc24ef">CreateGreater</a> (const <a class="el" href="structarmnn_1_1_greater_queue_descriptor.xhtml">GreaterQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a4e779d1b00a9e885497364ebd0dc24ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96a3123d8a8290b01582d955cdcd75d5"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a96a3123d8a8290b01582d955cdcd75d5">CreateInstanceNormalization</a> (const <a class="el" href="structarmnn_1_1_instance_normalization_queue_descriptor.xhtml">InstanceNormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a96a3123d8a8290b01582d955cdcd75d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c86f886e36ce943f1ebc241a37f0413"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3c86f886e36ce943f1ebc241a37f0413">CreateL2Normalization</a> (const <a class="el" href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">L2NormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a3c86f886e36ce943f1ebc241a37f0413"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbdc0563cc7d8b6c1e3c2fb6f13871bf"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#adbdc0563cc7d8b6c1e3c2fb6f13871bf">CreateLogSoftmax</a> (const <a class="el" href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">LogSoftmaxQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:adbdc0563cc7d8b6c1e3c2fb6f13871bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6bd7aaf685d4e956d780f8655a6f174"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab6bd7aaf685d4e956d780f8655a6f174">CreateLstm</a> (const <a class="el" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ab6bd7aaf685d4e956d780f8655a6f174"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fe27b35296a25984ab97319fd9a13d6"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3fe27b35296a25984ab97319fd9a13d6">CreateMaximum</a> (const <a class="el" href="structarmnn_1_1_maximum_queue_descriptor.xhtml">MaximumQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a3fe27b35296a25984ab97319fd9a13d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac63f8f12f80efbe37b789d1540649470"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac63f8f12f80efbe37b789d1540649470">CreateMean</a> (const <a class="el" href="structarmnn_1_1_mean_queue_descriptor.xhtml">MeanQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:ac63f8f12f80efbe37b789d1540649470"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87bf54bcdc865fd5d4f86194b3899d09"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a87bf54bcdc865fd5d4f86194b3899d09">CreateMemCopy</a> (const <a class="el" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">MemCopyQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a87bf54bcdc865fd5d4f86194b3899d09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0c99a5e2a6e4a67fec8b8c5906a3552"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af0c99a5e2a6e4a67fec8b8c5906a3552">CreateMemImport</a> (const <a class="el" href="structarmnn_1_1_mem_import_queue_descriptor.xhtml">MemImportQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:af0c99a5e2a6e4a67fec8b8c5906a3552"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc3239cb7dd9434551a70d8534387069"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#acc3239cb7dd9434551a70d8534387069">CreateMerge</a> (const <a class="el" href="structarmnn_1_1_merge_queue_descriptor.xhtml">MergeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:acc3239cb7dd9434551a70d8534387069"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addb710d76098d55ad2f56117b73a9f48"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#addb710d76098d55ad2f56117b73a9f48">CreateMerger</a> (const <a class="el" href="namespacearmnn.xhtml#a308ba160745ba35e1de8d698d0139eb4">MergerQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:addb710d76098d55ad2f56117b73a9f48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8851ca32bea910cf9376d05527e3dbef"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a8851ca32bea910cf9376d05527e3dbef">CreateMinimum</a> (const <a class="el" href="structarmnn_1_1_minimum_queue_descriptor.xhtml">MinimumQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a8851ca32bea910cf9376d05527e3dbef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a756955d7436dd8f6e63cdf6367eb1694"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a756955d7436dd8f6e63cdf6367eb1694">CreateMultiplication</a> (const <a class="el" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a756955d7436dd8f6e63cdf6367eb1694"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a185c215631e1b01a6d41232410de4c46"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a185c215631e1b01a6d41232410de4c46">CreateNormalization</a> (const <a class="el" href="structarmnn_1_1_normalization_queue_descriptor.xhtml">NormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a185c215631e1b01a6d41232410de4c46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb279112eb265e5531c4ac2194b6c898"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#adb279112eb265e5531c4ac2194b6c898">CreateOutput</a> (const <a class="el" href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">OutputQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:adb279112eb265e5531c4ac2194b6c898"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0c956e4a638d0a2777ecb71953f7e27"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab0c956e4a638d0a2777ecb71953f7e27">CreatePad</a> (const <a class="el" href="structarmnn_1_1_pad_queue_descriptor.xhtml">PadQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:ab0c956e4a638d0a2777ecb71953f7e27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dcee0bc4bbae1f745324aed0f841a0a"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2dcee0bc4bbae1f745324aed0f841a0a">CreatePermute</a> (const <a class="el" href="structarmnn_1_1_permute_queue_descriptor.xhtml">PermuteQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a2dcee0bc4bbae1f745324aed0f841a0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e95afd9a55700cbf6f9e8db8089f2f2"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a6e95afd9a55700cbf6f9e8db8089f2f2">CreatePooling2d</a> (const <a class="el" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">Pooling2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a6e95afd9a55700cbf6f9e8db8089f2f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a012306477c38a533edd29c422227cd8c"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a012306477c38a533edd29c422227cd8c">CreatePreCompiled</a> (const <a class="el" href="structarmnn_1_1_pre_compiled_queue_descriptor.xhtml">PreCompiledQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a012306477c38a533edd29c422227cd8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf4a93f605e4e7dad6aee0b4d2159171"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#adf4a93f605e4e7dad6aee0b4d2159171">CreatePrelu</a> (const <a class="el" href="structarmnn_1_1_prelu_queue_descriptor.xhtml">PreluQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:adf4a93f605e4e7dad6aee0b4d2159171"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1942c254ba89d17803e5a636aa927d90"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a1942c254ba89d17803e5a636aa927d90">CreateQuantize</a> (const <a class="el" href="structarmnn_1_1_quantize_queue_descriptor.xhtml">QuantizeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a1942c254ba89d17803e5a636aa927d90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab17bf35d906f8daad42be0a0799c72ab"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab17bf35d906f8daad42be0a0799c72ab">CreateQLstm</a> (const <a class="el" href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">QLstmQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ab17bf35d906f8daad42be0a0799c72ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5ceda49651dcd53fb7eb05658b5a0cb"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab5ceda49651dcd53fb7eb05658b5a0cb">CreateQuantizedLstm</a> (const <a class="el" href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml">QuantizedLstmQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ab5ceda49651dcd53fb7eb05658b5a0cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f9d9c79a100a0d057027d8524373962"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a4f9d9c79a100a0d057027d8524373962">CreateReshape</a> (const <a class="el" href="structarmnn_1_1_reshape_queue_descriptor.xhtml">ReshapeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a4f9d9c79a100a0d057027d8524373962"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84377c94a59c589dbf419f838c4b9119"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a84377c94a59c589dbf419f838c4b9119">CreateResize</a> (const <a class="el" href="structarmnn_1_1_resize_queue_descriptor.xhtml">ResizeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a84377c94a59c589dbf419f838c4b9119"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7eb321c47cd90d2cc3823e74596f1239"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a7eb321c47cd90d2cc3823e74596f1239">CreateResizeBilinear</a> (const <a class="el" href="structarmnn_1_1_resize_bilinear_queue_descriptor.xhtml">ResizeBilinearQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a7eb321c47cd90d2cc3823e74596f1239"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2459b9d4f72d78eab86f9ec09384c491"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2459b9d4f72d78eab86f9ec09384c491">CreateRsqrt</a> (const <a class="el" href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml">RsqrtQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a2459b9d4f72d78eab86f9ec09384c491"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86658e2fc02a32acd4de20ef92242347"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a86658e2fc02a32acd4de20ef92242347">CreateSlice</a> (const <a class="el" href="structarmnn_1_1_slice_queue_descriptor.xhtml">SliceQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a86658e2fc02a32acd4de20ef92242347"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a843d44d2e81df87e414df3b3e688de"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a8a843d44d2e81df87e414df3b3e688de">CreateSoftmax</a> (const <a class="el" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">SoftmaxQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a8a843d44d2e81df87e414df3b3e688de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44e7aebc021646becc3f32722e22553e"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a44e7aebc021646becc3f32722e22553e">CreateSpaceToBatchNd</a> (const <a class="el" href="structarmnn_1_1_space_to_batch_nd_queue_descriptor.xhtml">SpaceToBatchNdQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a44e7aebc021646becc3f32722e22553e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bdc3801e1e964046730d49c0e11d1ce"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9bdc3801e1e964046730d49c0e11d1ce">CreateSpaceToDepth</a> (const <a class="el" href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">SpaceToDepthQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a9bdc3801e1e964046730d49c0e11d1ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a439305cf0a71fc85a0b93cc063100f91"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a439305cf0a71fc85a0b93cc063100f91">CreateSubtraction</a> (const <a class="el" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a439305cf0a71fc85a0b93cc063100f91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac306abe0073a04300f2d96d0b5eb6218"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac306abe0073a04300f2d96d0b5eb6218">CreateSplitter</a> (const <a class="el" href="structarmnn_1_1_splitter_queue_descriptor.xhtml">SplitterQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ac306abe0073a04300f2d96d0b5eb6218"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa06423ce3f34e4ec2d336889f8c0d79a"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa06423ce3f34e4ec2d336889f8c0d79a">CreateStack</a> (const <a class="el" href="structarmnn_1_1_stack_queue_descriptor.xhtml">StackQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:aa06423ce3f34e4ec2d336889f8c0d79a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21344e9f338e1d4c3d26825002a02754"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a21344e9f338e1d4c3d26825002a02754">CreateStridedSlice</a> (const <a class="el" href="structarmnn_1_1_strided_slice_queue_descriptor.xhtml">StridedSliceQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a21344e9f338e1d4c3d26825002a02754"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab37f39b9e3e224ccde6b36adc876bb19"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab37f39b9e3e224ccde6b36adc876bb19">CreateSwitch</a> (const <a class="el" href="structarmnn_1_1_switch_queue_descriptor.xhtml">SwitchQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:ab37f39b9e3e224ccde6b36adc876bb19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96217a8bbb66811608ce729fd49a3dd2"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a96217a8bbb66811608ce729fd49a3dd2">CreateTranspose</a> (const <a class="el" href="structarmnn_1_1_transpose_queue_descriptor.xhtml">TransposeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a96217a8bbb66811608ce729fd49a3dd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12cccba82124cc4993868a3173a65167"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a12cccba82124cc4993868a3173a65167">CreateTransposeConvolution2d</a> (const <a class="el" href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">TransposeConvolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a12cccba82124cc4993868a3173a65167"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a74dc9ec1a223eab8b072368b2dacee87"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;backendId, const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a74dc9ec1a223eab8b072368b2dacee87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d94ea841143b76fe08ccb308839bfd7"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a7d94ea841143b76fe08ccb308839bfd7">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a7d94ea841143b76fe08ccb308839bfd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_workload_factory_8hpp_source.xhtml#l00021">21</a> of file <a class="el" href="_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aab62208f96483015c29ad58549efedd8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab62208f96483015c29ad58549efedd8">&#9670;&nbsp;</a></span>~IWorkloadFactory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">24</a> of file <a class="el" href="_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00043">ARMNN_DEPRECATED_MSG</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01201">IWorkloadFactory::CreateAbs()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01207">IWorkloadFactory::CreateActivation()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01213">IWorkloadFactory::CreateAddition()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01219">IWorkloadFactory::CreateArgMinMax()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01225">IWorkloadFactory::CreateBatchNormalization()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01231">IWorkloadFactory::CreateBatchToSpaceNd()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01237">IWorkloadFactory::CreateComparison()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01243">IWorkloadFactory::CreateConcat()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01249">IWorkloadFactory::CreateConstant()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01255">IWorkloadFactory::CreateConvertBf16ToFp32()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01261">IWorkloadFactory::CreateConvertFp16ToFp32()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01267">IWorkloadFactory::CreateConvertFp32ToBf16()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01273">IWorkloadFactory::CreateConvertFp32ToFp16()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01279">IWorkloadFactory::CreateConvolution2d()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01285">IWorkloadFactory::CreateDebug()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01291">IWorkloadFactory::CreateDepthToSpace()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01297">IWorkloadFactory::CreateDepthwiseConvolution2d()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01303">IWorkloadFactory::CreateDequantize()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01309">IWorkloadFactory::CreateDetectionPostProcess()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01315">IWorkloadFactory::CreateDivision()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01321">IWorkloadFactory::CreateElementwiseUnary()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01327">IWorkloadFactory::CreateEqual()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01333">IWorkloadFactory::CreateFakeQuantization()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01339">IWorkloadFactory::CreateFloor()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01345">IWorkloadFactory::CreateFullyConnected()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01351">IWorkloadFactory::CreateGather()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01357">IWorkloadFactory::CreateGreater()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa83593035de93eb4b6dddb9dc8f5ced6">IWorkloadFactory::CreateInput()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01363">IWorkloadFactory::CreateInstanceNormalization()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01370">IWorkloadFactory::CreateL2Normalization()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01376">IWorkloadFactory::CreateLogSoftmax()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01382">IWorkloadFactory::CreateLstm()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01388">IWorkloadFactory::CreateMaximum()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01394">IWorkloadFactory::CreateMean()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01400">IWorkloadFactory::CreateMemCopy()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01406">IWorkloadFactory::CreateMemImport()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01412">IWorkloadFactory::CreateMerge()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01418">IWorkloadFactory::CreateMerger()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01424">IWorkloadFactory::CreateMinimum()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01430">IWorkloadFactory::CreateMultiplication()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01436">IWorkloadFactory::CreateNormalization()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01442">IWorkloadFactory::CreateOutput()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01448">IWorkloadFactory::CreatePad()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01454">IWorkloadFactory::CreatePermute()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01460">IWorkloadFactory::CreatePooling2d()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01466">IWorkloadFactory::CreatePreCompiled()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01472">IWorkloadFactory::CreatePrelu()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01484">IWorkloadFactory::CreateQLstm()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01478">IWorkloadFactory::CreateQuantize()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01490">IWorkloadFactory::CreateQuantizedLstm()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01496">IWorkloadFactory::CreateReshape()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01508">IWorkloadFactory::CreateResize()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01502">IWorkloadFactory::CreateResizeBilinear()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01514">IWorkloadFactory::CreateRsqrt()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01520">IWorkloadFactory::CreateSlice()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01526">IWorkloadFactory::CreateSoftmax()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01538">IWorkloadFactory::CreateSpaceToBatchNd()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01544">IWorkloadFactory::CreateSpaceToDepth()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01532">IWorkloadFactory::CreateSplitter()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01550">IWorkloadFactory::CreateStack()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01556">IWorkloadFactory::CreateStridedSlice()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac043991b839903b2ba9da884e4020848">IWorkloadFactory::CreateSubTensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01562">IWorkloadFactory::CreateSubtraction()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01568">IWorkloadFactory::CreateSwitch()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01574">IWorkloadFactory::CreateTranspose()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01580">IWorkloadFactory::CreateTransposeConvolution2d()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9f7e4296485d2812e7996089149c96d1">IWorkloadFactory::GetBackendId()</a>, <a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::Info</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l00045">IWorkloadFactory::IsLayerSupported()</a>, and <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a37f4eba7877deb34f4d8d64c9bcb9ab5">IWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{ }</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ae3ba329a833bbb63961eb64d6477d691"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3ba329a833bbb63961eb64d6477d691">&#9670;&nbsp;</a></span>CreateAbs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateAbs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_abs_queue_descriptor.xhtml">AbsQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a902422ffa1b0076458972c3be051e44d">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a902422ffa1b0076458972c3be051e44d">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a902422ffa1b0076458972c3be051e44d">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4784c591a49826474956353ab0581708">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01201">1201</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_abs_layer_8cpp_source.xhtml#l00022">AbsLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;{</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4458d75c0db21c6abc941cd93a6a24c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4458d75c0db21c6abc941cd93a6a24c5">&#9670;&nbsp;</a></span>CreateActivation()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateActivation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_queue_descriptor.xhtml">ActivationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#af5f7b0f6273c838b6b7d7de8447524f9">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#af5f7b0f6273c838b6b7d7de8447524f9">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#af5f7b0f6273c838b6b7d7de8447524f9">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a789a347180c49b2403e435857501f623">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01207">1207</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00023">BoundedReLuTestCommon()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00184">BoundedReLuUint8UpperAndLowerBoundTest()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01142">CompareActivationTestImpl()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00307">ConstantLinearActivationTestCommon()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00020">ActivationLayer::CreateWorkload()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00392">SimpleActivationTest()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00792">SqrtNNTest()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;{</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="acf187617ed4cdd6625b396d6b194923e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf187617ed4cdd6625b396d6b194923e">&#9670;&nbsp;</a></span>CreateAddition()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateAddition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a9da9a34fb99114f9d1fb705171a9a6ee">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a9da9a34fb99114f9d1fb705171a9a6ee">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a46e1398968d2f4951ce1fd2b9b70fc5b">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#a9da9a34fb99114f9d1fb705171a9a6ee">SampleDynamicWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ac1f4d42be05893f74b1237c3356c3c0c">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01213">1213</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00454">AdditionAfterMaxPoolTest()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00245">AdditionBroadcast1ElementTestImpl()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00162">AdditionBroadcastTestImpl()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00561">CompareAdditionTest()</a>, <a class="el" href="_addition_layer_8cpp_source.xhtml#l00022">AdditionLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;{</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac47803c9faacfb7c10219253b99f61ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac47803c9faacfb7c10219253b99f61ca">&#9670;&nbsp;</a></span>CreateArgMinMax()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateArgMinMax </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_queue_descriptor.xhtml">ArgMinMaxQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a3fffcec3624e83671b4623e22ca623e5">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a3fffcec3624e83671b4623e22ca623e5">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3fffcec3624e83671b4623e22ca623e5">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4269d65bcf8068290752d75164934a25">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01219">1219</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00024">ArgMinMaxLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;{</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abe1e0d40e23195022c0bc10a8aab55ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe1e0d40e23195022c0bc10a8aab55ea">&#9670;&nbsp;</a></span>CreateBatchNormalization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateBatchNormalization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">BatchNormalizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a9cce78b879d26312fd515270afc1e66a">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a9cce78b879d26312fd515270afc1e66a">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3e5a5e967dfd56b9b1d55ec2739f2edd">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a666c75e9db051b9b07f137a74af8d8b4">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01225">1225</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml#l00587">CompareBatchNormTest()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00021">BatchNormalizationLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;{</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af00ce13ef7dabd17cc4186d0a4991757"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af00ce13ef7dabd17cc4186d0a4991757">&#9670;&nbsp;</a></span>CreateBatchToSpaceNd()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateBatchToSpaceNd </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_queue_descriptor.xhtml">BatchToSpaceNdQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a455fcb54444e8286dbb3714310e4998b">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a52094433136e6cae57398d861cd483f9">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a455fcb54444e8286dbb3714310e4998b">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a1d54b5c774bdac45f22d1ec57d0a9f3f">NeonWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01231">1231</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00031">BatchToSpaceNdLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;{</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3fa12033e9be37c529ac54a83ab43b36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fa12033e9be37c529ac54a83ab43b36">&#9670;&nbsp;</a></span>CreateComparison()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateComparison </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_queue_descriptor.xhtml">ComparisonQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a3d5de4e35ccddc5cfe79e530558d5184">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3d6501ad29a91db467a01ed0e36a96d2">NeonWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01237">1237</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00023">ComparisonLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;{</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a32bb8d6cf5fc028bf501252767c08b21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32bb8d6cf5fc028bf501252767c08b21">&#9670;&nbsp;</a></span>CreateConcat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConcat </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_concat_queue_descriptor.xhtml">ConcatQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a1f89ceb71ffc990170fe834cddb697fa">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a713c3685138355b145f4d17e473bf543">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1f89ceb71ffc990170fe834cddb697fa">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a6c8caa2fb12f36f83fde85da03a87c42">NeonWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01243">1243</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l01916">ConcatDifferentInputOutputQParamTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00272">Concatenate()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02072">ConcatTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02635">ConcatUint16Test()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02352">ConcatUint8DifferentQParamsTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02497">ConcatUint8Test()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;{</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a963bd7acce29a83d96daeb2cea34f2f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a963bd7acce29a83d96daeb2cea34f2f7">&#9670;&nbsp;</a></span>CreateConstant()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConstant </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_constant_queue_descriptor.xhtml">ConstantQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aa6ef3324f715ccf62d235aa54118d174">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a0da6f270ae7ce126b29a8918d858e814">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aa6ef3324f715ccf62d235aa54118d174">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aa6ef3324f715ccf62d235aa54118d174">NeonWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01249">1249</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_constant_layer_8cpp_source.xhtml#l00021">ConstantLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;{</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af8ecac7ffd75e39c5a651932c5eaa8d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8ecac7ffd75e39c5a651932c5eaa8d2">&#9670;&nbsp;</a></span>CreateConvertBf16ToFp32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvertBf16ToFp32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor.xhtml">ConvertBf16ToFp32QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aade1930aedd59e037337410381f7011d">RefWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aade1930aedd59e037337410381f7011d">NeonWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01255">1255</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_convert_bf16_to_fp32_test_impl_8cpp_source.xhtml#l00013">ConvertBf16ToFp32Test()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00022">ConvertBf16ToFp32Layer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;{</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a83e0a21747c1ce29b2083c1e3b1d88af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83e0a21747c1ce29b2083c1e3b1d88af">&#9670;&nbsp;</a></span>CreateConvertFp16ToFp32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvertFp16ToFp32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">ConvertFp16ToFp32QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aefe6a68cb6d7ba517d7988195680c831">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4e3b8d5650cb78c97a2eceb034209187">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aefe6a68cb6d7ba517d7988195680c831">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aefe6a68cb6d7ba517d7988195680c831">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01261">1261</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00022">ConvertFp16ToFp32Layer::CreateWorkload()</a>, <a class="el" href="_convert_fp16_to_fp32_test_impl_8cpp_source.xhtml#l00016">SimpleConvertFp16ToFp32Test()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;{</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a147654e5d9af7cec3ecd957c6bd4161e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a147654e5d9af7cec3ecd957c6bd4161e">&#9670;&nbsp;</a></span>CreateConvertFp32ToBf16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvertFp32ToBf16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor.xhtml">ConvertFp32ToBf16QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a4e70ecb5f981d7c07971bd0740f53c05">RefWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a4e70ecb5f981d7c07971bd0740f53c05">NeonWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01267">1267</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_convert_fp32_to_bf16_test_impl_8cpp_source.xhtml#l00013">ConvertFp32ToBf16Test()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00022">ConvertFp32ToBf16Layer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;{</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2b414a001b6b31d00bfe4056fd6740c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b414a001b6b31d00bfe4056fd6740c5">&#9670;&nbsp;</a></span>CreateConvertFp32ToFp16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvertFp32ToFp16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">ConvertFp32ToFp16QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a33b291201b6716e295afb17c1eb0864e">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a33b291201b6716e295afb17c1eb0864e">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a17042914356fe13b708c3702cb82ab7f">WorkloadFactoryBase</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a33b291201b6716e295afb17c1eb0864e">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01273">1273</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00021">ConvertFp32ToFp16Layer::CreateWorkload()</a>, <a class="el" href="_convert_fp32_to_fp16_test_impl_8cpp_source.xhtml#l00014">SimpleConvertFp32ToFp16Test()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;{</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2184995027cd2c9f9980206de9658855"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2184995027cd2c9f9980206de9658855">&#9670;&nbsp;</a></span>CreateConvolution2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvolution2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a661b8b943d4a28ef6c8fd19bf223c61e">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4a781a9541d2c44c5fec0ffc8434447c">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a004cfce1311cd19d48b6705f4d80aa6c">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a661b8b943d4a28ef6c8fd19bf223c61e">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01279">1279</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01279">CompareConvolution2dTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00461">Convolution1dTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l03346">Convolution2dPerAxisQuantTest()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00049">Convolution2dLayer::CreateWorkload()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00368">SimpleConvolution2dNhwcTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00201">SimpleConvolution2dTestImpl()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;{</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a00346a3754d9411bba2e29dc1f996ac6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00346a3754d9411bba2e29dc1f996ac6">&#9670;&nbsp;</a></span>CreateDebug()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDebug </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_debug_queue_descriptor.xhtml">DebugQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aca1333805c6665111154f10cc72c8234">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ad99e6a9f4e78ba4690429850de69fadd">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aca1333805c6665111154f10cc72c8234">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aca1333805c6665111154f10cc72c8234">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01285">1285</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_debug_layer_8cpp_source.xhtml#l00020">DebugLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;{</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3c3a47828ee252dca111605c9be4b072"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c3a47828ee252dca111605c9be4b072">&#9670;&nbsp;</a></span>CreateDepthToSpace()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDepthToSpace </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depth_to_space_queue_descriptor.xhtml">DepthToSpaceQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#af77fb45622aedb3f2ee36b412fea8735">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1b2165c83d6501e8ede91324c31a95f4">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#af77fb45622aedb3f2ee36b412fea8735">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#af77fb45622aedb3f2ee36b412fea8735">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01291">1291</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00025">DepthToSpaceLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;{</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="accb9759dfd2880efe0f8d2705ddee448"></a>
<h2 class="memtitle"><span class="permalink"><a href="#accb9759dfd2880efe0f8d2705ddee448">&#9670;&nbsp;</a></span>CreateDepthwiseConvolution2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDepthwiseConvolution2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">DepthwiseConvolution2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a48ebe514c1ca3e41edccdd7682bf38ca">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a2314defaf9c8b1ffcf59e7e509a959d6">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a48ebe514c1ca3e41edccdd7682bf38ca">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a48ebe514c1ca3e41edccdd7682bf38ca">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01297">1297</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l02888">CompareDepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00051">DepthwiseConvolution2dLayer::CreateWorkload()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01599">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01736">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l03570">DepthwiseConvolution2dPerAxisQuantTest()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01889">DepthwiseConvolution2dTestImpl()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;{</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3243806bf6c89df8952cc0a3601e538b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3243806bf6c89df8952cc0a3601e538b">&#9670;&nbsp;</a></span>CreateDequantize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDequantize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_dequantize_queue_descriptor.xhtml">DequantizeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ab345edf481dd64a3ced4c0808d4ee844">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1f17745331f928011cc1ea162866b8e7">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#ab345edf481dd64a3ced4c0808d4ee844">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ab345edf481dd64a3ced4c0808d4ee844">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01303">1303</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00019">DequantizeLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;{</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad0da07faa15302377aa97be89c57677c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0da07faa15302377aa97be89c57677c">&#9670;&nbsp;</a></span>CreateDetectionPostProcess()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDetectionPostProcess </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">DetectionPostProcessQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a3a2d9b8e1156605172ada1472e9460cd">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ac8ff2a4e63a9954fd6b3e9fc6dfa9bf0">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3a2d9b8e1156605172ada1472e9460cd">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a3a2d9b8e1156605172ada1472e9460cd">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01309">1309</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00023">DetectionPostProcessLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;{</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a20bb773c7fd6253418bdedac1312cd19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20bb773c7fd6253418bdedac1312cd19">&#9670;&nbsp;</a></span>CreateDivision()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDivision </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_division_queue_descriptor.xhtml">DivisionQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a11cb76f59b65109b8557d43b3cb1bc06">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1c7e383368cb078a1faac0a4e4f763a1">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a94a90252763f05b6c957f68f84e65c66">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a11cb76f59b65109b8557d43b3cb1bc06">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01315">1315</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_division_layer_8cpp_source.xhtml#l00022">DivisionLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;{</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a12d2c4e0f0b0d6b36d8a3e14bf69f9e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12d2c4e0f0b0d6b36d8a3e14bf69f9e4">&#9670;&nbsp;</a></span>CreateElementwiseUnary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateElementwiseUnary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a09f09645c2289d5d47dbea7c011d5f0e">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a447013b9d70a1d74196449d1a3f56acc">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01321">1321</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00023">ElementwiseUnaryLayer::CreateWorkload()</a>, <a class="el" href="_elementwise_unary_test_impl_8cpp_source.xhtml#l00008">CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;{</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a096bb62d44fadf079ea4463379d4e6aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a096bb62d44fadf079ea4463379d4e6aa">&#9670;&nbsp;</a></span>CreateEqual()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateEqual </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_equal_queue_descriptor.xhtml">EqualQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aa31f52c6b8c2092a41acb4890b910d2b">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aa31f52c6b8c2092a41acb4890b910d2b">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aa31f52c6b8c2092a41acb4890b910d2b">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01327">1327</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;{</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a42581f3d1c22e64b7f3676ea20acab0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42581f3d1c22e64b7f3676ea20acab0e">&#9670;&nbsp;</a></span>CreateFakeQuantization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateFakeQuantization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fake_quantization_queue_descriptor.xhtml">FakeQuantizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ac5797618555c747b254667e328f8d5c3">RefWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a5ebad711e7e91ca3fd60eed73686a482">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01333">1333</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00021">FakeQuantizationLayer::CreateWorkload()</a>, <a class="el" href="_fake_quantization_test_impl_8cpp_source.xhtml#l00016">FakeQuantizationTest()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;{</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa1a45333dc35cb5ba9ab71fca4f359e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1a45333dc35cb5ba9ab71fca4f359e4">&#9670;&nbsp;</a></span>CreateFloor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateFloor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_floor_queue_descriptor.xhtml">FloorQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aac4c7cd17cf3dc3a23fd4a21933c60cb">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4101fcf76e3bbc979b2276631617aabe">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aac4c7cd17cf3dc3a23fd4a21933c60cb">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aac4c7cd17cf3dc3a23fd4a21933c60cb">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01339">1339</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_floor_layer_8cpp_source.xhtml#l00021">FloorLayer::CreateWorkload()</a>, <a class="el" href="_floor_test_impl_8cpp_source.xhtml#l00015">SimpleFloorTest()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;{</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1c193739520e08f686b347ff795ad2fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c193739520e08f686b347ff795ad2fe">&#9670;&nbsp;</a></span>CreateFullyConnected()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateFullyConnected </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">FullyConnectedQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a1fdd5dfd04433d84de96c71664cce5a9">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af5ace6034148c3fe048db884058f04cf">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3b1e84836871f27a15add7f08736f139">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1fdd5dfd04433d84de96c71664cce5a9">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01345">1345</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00022">FullyConnectedLayer::CreateWorkload()</a>, <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00024">SimpleFullyConnectedTestImpl()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;{</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a91fe56cae7e970d90f6e7f54427e7d44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91fe56cae7e970d90f6e7f54427e7d44">&#9670;&nbsp;</a></span>CreateGather()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateGather </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_queue_descriptor.xhtml">GatherQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a674b6d6de1db47959ad36831976ca3aa">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ada3f450379ba7b4989344de72a16f1d2">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a674b6d6de1db47959ad36831976ca3aa">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a674b6d6de1db47959ad36831976ca3aa">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01351">1351</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gather_layer_8cpp_source.xhtml#l00021">GatherLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;{</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4e779d1b00a9e885497364ebd0dc24ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e779d1b00a9e885497364ebd0dc24ef">&#9670;&nbsp;</a></span>CreateGreater()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateGreater </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_greater_queue_descriptor.xhtml">GreaterQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a0b7d11f98c9c17dd23a94666fe35f226">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a0b7d11f98c9c17dd23a94666fe35f226">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a0b7d11f98c9c17dd23a94666fe35f226">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01357">1357</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;{</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa83593035de93eb4b6dddb9dc8f5ced6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa83593035de93eb4b6dddb9dc8f5ced6">&#9670;&nbsp;</a></span>CreateInput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a>&gt; CreateInput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">InputQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">SampleDynamicWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a3dcc96078130874f1be15a7148868539">WorkloadFactoryBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>

</div>
</div>
<a id="a96a3123d8a8290b01582d955cdcd75d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96a3123d8a8290b01582d955cdcd75d5">&#9670;&nbsp;</a></span>CreateInstanceNormalization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateInstanceNormalization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_queue_descriptor.xhtml">InstanceNormalizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a5c2f4f703e07407e70c30cc770d02d6b">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a77110c4dd8fe747ba0d441265f781076">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a5c2f4f703e07407e70c30cc770d02d6b">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a5c2f4f703e07407e70c30cc770d02d6b">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01363">1363</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00021">InstanceNormalizationLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;{</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3c86f886e36ce943f1ebc241a37f0413"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c86f886e36ce943f1ebc241a37f0413">&#9670;&nbsp;</a></span>CreateL2Normalization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateL2Normalization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">L2NormalizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a1c511b4b70bc0b6cccbef2285ba292bc">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af12076c82b1b7f0c48c1ed71df206b4d">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a1c511b4b70bc0b6cccbef2285ba292bc">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1c511b4b70bc0b6cccbef2285ba292bc">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01370">1370</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00021">L2NormalizationLayer::CreateWorkload()</a>, <a class="el" href="_l2_normalization_test_impl_8cpp_source.xhtml#l00672">L2Normalization2dShapeTest()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;{</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="adbdc0563cc7d8b6c1e3c2fb6f13871bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbdc0563cc7d8b6c1e3c2fb6f13871bf">&#9670;&nbsp;</a></span>CreateLogSoftmax()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateLogSoftmax </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">LogSoftmaxQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a95c212cdbcf2af9a845f19467c2f2f2e">RefWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a04a3ae3944eb63e7e94c6e9676815864">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01376">1376</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00021">LogSoftmaxLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;{</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab6bd7aaf685d4e956d780f8655a6f174"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6bd7aaf685d4e956d780f8655a6f174">&#9670;&nbsp;</a></span>CreateLstm()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateLstm </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a0dce100ea0fc5c44798736a4d879bd4d">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af6cc3669898b498592dc28600aa6f0cd">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a0dce100ea0fc5c44798736a4d879bd4d">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a0dce100ea0fc5c44798736a4d879bd4d">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01382">1382</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00022">LstmLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;{</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3fe27b35296a25984ab97319fd9a13d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fe27b35296a25984ab97319fd9a13d6">&#9670;&nbsp;</a></span>CreateMaximum()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMaximum </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_maximum_queue_descriptor.xhtml">MaximumQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ae2c6c12059f9cde37ff6bb8f682e9ceb">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a9e67be0a653c173ba94e38137dc4bbde">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#ae2c6c12059f9cde37ff6bb8f682e9ceb">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae2c6c12059f9cde37ff6bb8f682e9ceb">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01388">1388</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_maximum_layer_8cpp_source.xhtml#l00021">MaximumLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;{</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac63f8f12f80efbe37b789d1540649470"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac63f8f12f80efbe37b789d1540649470">&#9670;&nbsp;</a></span>CreateMean()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMean </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_queue_descriptor.xhtml">MeanQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aba5032787777bf0074ce70e2c2423d49">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aabe4842ade5647ac5bbee5e446e49a5c">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aba5032787777bf0074ce70e2c2423d49">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aba5032787777bf0074ce70e2c2423d49">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01394">1394</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mean_layer_8cpp_source.xhtml#l00022">MeanLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;{</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a87bf54bcdc865fd5d4f86194b3899d09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87bf54bcdc865fd5d4f86194b3899d09">&#9670;&nbsp;</a></span>CreateMemCopy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMemCopy </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">MemCopyQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a7cbe2f3dee6fad6a92a384455676fa63">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a73e9a5c2c3eff38766f03adb98abdd26">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aa07df85c33d6e3ea4891b5f344df6964">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a7cbe2f3dee6fad6a92a384455676fa63">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01400">1400</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;{</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af0c99a5e2a6e4a67fec8b8c5906a3552"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0c99a5e2a6e4a67fec8b8c5906a3552">&#9670;&nbsp;</a></span>CreateMemImport()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMemImport </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mem_import_queue_descriptor.xhtml">MemImportQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ad16ff72d909eb48f3dc8e1015c4a5078">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a44d5ee8d1c0bd414bf1dfb60d94a62d8">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a1786f52370ba933427837a2179305773">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a44d5ee8d1c0bd414bf1dfb60d94a62d8">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01406">1406</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;{</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="acc3239cb7dd9434551a70d8534387069"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc3239cb7dd9434551a70d8534387069">&#9670;&nbsp;</a></span>CreateMerge()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMerge </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_merge_queue_descriptor.xhtml">MergeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ac05fd4710da8c304db555fb5f597d614">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01412">1412</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;{</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="addb710d76098d55ad2f56117b73a9f48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addb710d76098d55ad2f56117b73a9f48">&#9670;&nbsp;</a></span>CreateMerger()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMerger </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a308ba160745ba35e1de8d698d0139eb4">MergerQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ad4b8b34cc736f9d7778c6a2ab4fba25e">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a9f6500bc4fc71e20292c5d229afee4eb">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ad4b8b34cc736f9d7778c6a2ab4fba25e">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01418">1418</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;{</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8851ca32bea910cf9376d05527e3dbef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8851ca32bea910cf9376d05527e3dbef">&#9670;&nbsp;</a></span>CreateMinimum()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMinimum </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_minimum_queue_descriptor.xhtml">MinimumQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1ba2b05e3c2028d4bc3db29fc0edf122">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a39927b6e1faae50d9f804b435430bbf2">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a39927b6e1faae50d9f804b435430bbf2">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a39927b6e1faae50d9f804b435430bbf2">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01424">1424</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_minimum_layer_8cpp_source.xhtml#l00022">MinimumLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;{</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a756955d7436dd8f6e63cdf6367eb1694"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a756955d7436dd8f6e63cdf6367eb1694">&#9670;&nbsp;</a></span>CreateMultiplication()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMultiplication </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a848fc4ff47d5e9c68d2e26f6523b4e58">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a247e81465a607359f63756d13c417e70">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#af7ba09a42932a341c966f1ba1f596861">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a247e81465a607359f63756d13c417e70">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01430">1430</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00399">CompareMultiplicationTest()</a>, <a class="el" href="_multiplication_layer_8cpp_source.xhtml#l00022">MultiplicationLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;{</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a185c215631e1b01a6d41232410de4c46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a185c215631e1b01a6d41232410de4c46">&#9670;&nbsp;</a></span>CreateNormalization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateNormalization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_queue_descriptor.xhtml">NormalizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a6df587611b4c46b591527f3d594f4a11">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aca46fe4cdc107d912d822a7618d4d2db">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3334b1fbbf87863e3b40a6194b9e0199">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aca46fe4cdc107d912d822a7618d4d2db">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01436">1436</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00021">NormalizationLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;{</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="adb279112eb265e5531c4ac2194b6c898"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb279112eb265e5531c4ac2194b6c898">&#9670;&nbsp;</a></span>CreateOutput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateOutput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">OutputQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#afd952ccd68a1b2231b77db1f9131a61b">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">SampleDynamicWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01442">1442</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;{</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab0c956e4a638d0a2777ecb71953f7e27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0c956e4a638d0a2777ecb71953f7e27">&#9670;&nbsp;</a></span>CreatePad()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_queue_descriptor.xhtml">PadQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a06a69eab86af31e0daa17c99b9038bf1">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a8fb2b01fe17e49e997fe59d86e4d5c9a">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a8fb2b01fe17e49e997fe59d86e4d5c9a">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a8fb2b01fe17e49e997fe59d86e4d5c9a">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01448">1448</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_pad_layer_8cpp_source.xhtml#l00022">PadLayer::CreateWorkload()</a>, <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00020">Pad2dTestCommon()</a>, <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00093">Pad3dTestCommon()</a>, <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00177">Pad4dTestCommon()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;{</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2dcee0bc4bbae1f745324aed0f841a0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2dcee0bc4bbae1f745324aed0f841a0a">&#9670;&nbsp;</a></span>CreatePermute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePermute </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_queue_descriptor.xhtml">PermuteQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a32983845590ec2dc9e644491793fd557">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a7b6ac4b2de1550174ad661fa76ec3d2d">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a59399d21babdc3a17df004dfa64617ea">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a7b6ac4b2de1550174ad661fa76ec3d2d">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01454">1454</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_permute_layer_8cpp_source.xhtml#l00025">PermuteLayer::CreateWorkload()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00121">PermuteTensorData()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00019">SimplePermuteTestImpl()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;{</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6e95afd9a55700cbf6f9e8db8089f2f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e95afd9a55700cbf6f9e8db8089f2f2">&#9670;&nbsp;</a></span>CreatePooling2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePooling2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">Pooling2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#abf1f324933ada657d13faf8d1d32a907">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ae22c3b8013c1ee7a5459016c0595d444">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a6e05a05ea7ea2c384c94d6568f032614">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae22c3b8013c1ee7a5459016c0595d444">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01460">1460</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00454">AdditionAfterMaxPoolTest()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00027">Pooling2dLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;{</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a012306477c38a533edd29c422227cd8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a012306477c38a533edd29c422227cd8c">&#9670;&nbsp;</a></span>CreatePreCompiled()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePreCompiled </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pre_compiled_queue_descriptor.xhtml">PreCompiledQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a21a5aef5f1850d8b5f797d97632409b8">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a3f21c47a41cbbcfe7d74becd76766c80">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3f21c47a41cbbcfe7d74becd76766c80">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a3f21c47a41cbbcfe7d74becd76766c80">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01466">1466</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_pre_compiled_layer_8cpp_source.xhtml#l00031">PreCompiledLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;{</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="adf4a93f605e4e7dad6aee0b4d2159171"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf4a93f605e4e7dad6aee0b4d2159171">&#9670;&nbsp;</a></span>CreatePrelu()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePrelu </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_prelu_queue_descriptor.xhtml">PreluQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a8040319bef721ad05a9fdf75060aaafe">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ac4739f640f68405d2e5a4e4b716c3c59">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aca8d797b1e48d693de73e868b3aa41ec">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ac4739f640f68405d2e5a4e4b716c3c59">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01472">1472</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00021">PreluLayer::CreateWorkload()</a>, <a class="el" href="_prelu_test_impl_8hpp_source.xhtml#l00023">PreluTest()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;{</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab17bf35d906f8daad42be0a0799c72ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab17bf35d906f8daad42be0a0799c72ab">&#9670;&nbsp;</a></span>CreateQLstm()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateQLstm </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">QLstmQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a2edd58192b89ac27cf4be7d7ea6252d3">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a2edd58192b89ac27cf4be7d7ea6252d3">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a2edd58192b89ac27cf4be7d7ea6252d3">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01484">1484</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00022">QLstmLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;{</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1942c254ba89d17803e5a636aa927d90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1942c254ba89d17803e5a636aa927d90">&#9670;&nbsp;</a></span>CreateQuantize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateQuantize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantize_queue_descriptor.xhtml">QuantizeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ae51a441630e32e5a850d3d639f0e7847">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a1782959d8ba043acbc72d6a06c00a7f4">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a6a58a15e291291722dc9a4517d2974eb">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1782959d8ba043acbc72d6a06c00a7f4">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01478">1478</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00019">QuantizeLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;{</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab5ceda49651dcd53fb7eb05658b5a0cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5ceda49651dcd53fb7eb05658b5a0cb">&#9670;&nbsp;</a></span>CreateQuantizedLstm()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateQuantizedLstm </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml">QuantizedLstmQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#abd228c95f2ec95cbb2abcaa0dbacc018">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a166569e6ac31c22484612c77690c3eff">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a166569e6ac31c22484612c77690c3eff">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01490">1490</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00022">QuantizedLstmLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;{</div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4f9d9c79a100a0d057027d8524373962"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f9d9c79a100a0d057027d8524373962">&#9670;&nbsp;</a></span>CreateReshape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateReshape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_queue_descriptor.xhtml">ReshapeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a655697a3bf827352acadc5f1dd3a8a34">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a85d2e898648c795f462a15f5c03a67ac">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a85d2e898648c795f462a15f5c03a67ac">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a85d2e898648c795f462a15f5c03a67ac">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01496">1496</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00022">ReshapeLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;{</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a84377c94a59c589dbf419f838c4b9119"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84377c94a59c589dbf419f838c4b9119">&#9670;&nbsp;</a></span>CreateResize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateResize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_queue_descriptor.xhtml">ResizeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aa9390326e8445e71c5dee9858084a1b8">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01508">1508</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_resize_layer_8cpp_source.xhtml#l00026">ResizeLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;{</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7eb321c47cd90d2cc3823e74596f1239"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7eb321c47cd90d2cc3823e74596f1239">&#9670;&nbsp;</a></span>CreateResizeBilinear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateResizeBilinear </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_bilinear_queue_descriptor.xhtml">ResizeBilinearQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ae0895b3c5782c6094ce839e07cc17d58">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a12b5d302d3707fbbc0275a4683c59349">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae0895b3c5782c6094ce839e07cc17d58">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01502">1502</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;{</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2459b9d4f72d78eab86f9ec09384c491"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2459b9d4f72d78eab86f9ec09384c491">&#9670;&nbsp;</a></span>CreateRsqrt()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateRsqrt </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml">RsqrtQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a5d0b48104607726b76e2968da5a4feec">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#afddaf1bce21f092a34d877cffac411a3">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#afddaf1bce21f092a34d877cffac411a3">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#afddaf1bce21f092a34d877cffac411a3">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01514">1514</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00022">RsqrtLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;{</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a86658e2fc02a32acd4de20ef92242347"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86658e2fc02a32acd4de20ef92242347">&#9670;&nbsp;</a></span>CreateSlice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSlice </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_queue_descriptor.xhtml">SliceQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a67ee4f8373684cb67f033976fc563081">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#abda2c9b7c5fe4ca092d2224ba9679a06">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#abda2c9b7c5fe4ca092d2224ba9679a06">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#abda2c9b7c5fe4ca092d2224ba9679a06">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01520">1520</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_slice_layer_8cpp_source.xhtml#l00025">SliceLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;{</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8a843d44d2e81df87e414df3b3e688de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a843d44d2e81df87e414df3b3e688de">&#9670;&nbsp;</a></span>CreateSoftmax()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSoftmax </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">SoftmaxQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a6d49c282026484eb1c6e56f56f35348e">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a457c416483289cc7c8a8511a67d95816">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a457c416483289cc7c8a8511a67d95816">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a457c416483289cc7c8a8511a67d95816">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01526">1526</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00021">SoftmaxLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;{</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a44e7aebc021646becc3f32722e22553e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44e7aebc021646becc3f32722e22553e">&#9670;&nbsp;</a></span>CreateSpaceToBatchNd()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSpaceToBatchNd </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_queue_descriptor.xhtml">SpaceToBatchNdQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1c9cd3cd798df38358e9047ac4621fe2">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a1d1feb2b5c6a4c6701a3dee01e65bee4">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a1d1feb2b5c6a4c6701a3dee01e65bee4">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1d1feb2b5c6a4c6701a3dee01e65bee4">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01538">1538</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00027">SpaceToBatchNdLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;{</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a9bdc3801e1e964046730d49c0e11d1ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9bdc3801e1e964046730d49c0e11d1ce">&#9670;&nbsp;</a></span>CreateSpaceToDepth()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSpaceToDepth </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">SpaceToDepthQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4069efcce4abfd80a88827ea1509b2f8">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a2318d942f9615dff92fe75688bdd8c48">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a2318d942f9615dff92fe75688bdd8c48">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a2318d942f9615dff92fe75688bdd8c48">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01544">1544</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00027">SpaceToDepthLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;{</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac306abe0073a04300f2d96d0b5eb6218"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac306abe0073a04300f2d96d0b5eb6218">&#9670;&nbsp;</a></span>CreateSplitter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSplitter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_splitter_queue_descriptor.xhtml">SplitterQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a49428ff12e031e5af8bcc66161fa09fd">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aa98def0f9b9ff714a013f8083bbadf82">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aa98def0f9b9ff714a013f8083bbadf82">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aa98def0f9b9ff714a013f8083bbadf82">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01532">1532</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;{</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa06423ce3f34e4ec2d336889f8c0d79a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa06423ce3f34e4ec2d336889f8c0d79a">&#9670;&nbsp;</a></span>CreateStack()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateStack </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_queue_descriptor.xhtml">StackQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a90c2655fd294c445ca2727491c8a8c79">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a4d5371f67eabb04a38c69e97e67f1d35">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a4d5371f67eabb04a38c69e97e67f1d35">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a4d5371f67eabb04a38c69e97e67f1d35">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01550">1550</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_stack_layer_8cpp_source.xhtml#l00022">StackLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;{</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a21344e9f338e1d4c3d26825002a02754"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21344e9f338e1d4c3d26825002a02754">&#9670;&nbsp;</a></span>CreateStridedSlice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateStridedSlice </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_queue_descriptor.xhtml">StridedSliceQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a757d3084d3e11a1840bd2170eb990235">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a5c46866e2a0d83e350ff70c12d9613bf">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a5c46866e2a0d83e350ff70c12d9613bf">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a5c46866e2a0d83e350ff70c12d9613bf">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01556">1556</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00022">StridedSliceLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;{</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac043991b839903b2ba9da884e4020848"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac043991b839903b2ba9da884e4020848">&#9670;&nbsp;</a></span>CreateSubTensorHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&gt; CreateSubTensorHandle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> const &amp;&#160;</td>
          <td class="paramname"><em>subTensorShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int const *&#160;</td>
          <td class="paramname"><em>subTensorOrigin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#af7ed41b965e30999ff8250e09d7b5abe">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#af7ed41b965e30999ff8250e09d7b5abe">SampleDynamicWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#abefb9df9d7a54cf2f82047ea350d0388">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#abefb9df9d7a54cf2f82047ea350d0388">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a99251f9711c087d7c1b5a08236ef0201">WorkloadFactoryBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l01916">ConcatDifferentInputOutputQParamTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00272">Concatenate()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02072">ConcatTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02635">ConcatUint16Test()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02352">ConcatUint8DifferentQParamsTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02497">ConcatUint8Test()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>

</div>
</div>
<a id="a439305cf0a71fc85a0b93cc063100f91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a439305cf0a71fc85a0b93cc063100f91">&#9670;&nbsp;</a></span>CreateSubtraction()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSubtraction </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a088ed247c7ec3bc1603c60f1145014e8">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a26563dd3de8f08475d30c8c8389f1ddc">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a61d64ca308b8af42b422e13382329021">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a26563dd3de8f08475d30c8c8389f1ddc">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01562">1562</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_subtraction_layer_8cpp_source.xhtml#l00022">SubtractionLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;{</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab37f39b9e3e224ccde6b36adc876bb19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab37f39b9e3e224ccde6b36adc876bb19">&#9670;&nbsp;</a></span>CreateSwitch()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSwitch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_switch_queue_descriptor.xhtml">SwitchQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a032cba0444de559937381f17bcbe48f5">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01568">1568</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_switch_layer_8cpp_source.xhtml#l00019">SwitchLayer::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;{</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a15c140be4ddceffee16436f009d3ed94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15c140be4ddceffee16436f009d3ed94">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code><a class="el" href="_ref_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">SampleDynamicWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a526eaec84398bc8067f407769b31f4a9">WorkloadFactoryBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00454">AdditionAfterMaxPoolTest()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00245">AdditionBroadcast1ElementTestImpl()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00162">AdditionBroadcastTestImpl()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00023">BoundedReLuTestCommon()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00184">BoundedReLuUint8UpperAndLowerBoundTest()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01142">CompareActivationTestImpl()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00561">CompareAdditionTest()</a>, <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml#l00587">CompareBatchNormTest()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01279">CompareConvolution2dTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l02888">CompareDepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00399">CompareMultiplicationTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l01916">ConcatDifferentInputOutputQParamTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00272">Concatenate()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02072">ConcatTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02635">ConcatUint16Test()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02352">ConcatUint8DifferentQParamsTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02497">ConcatUint8Test()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00307">ConstantLinearActivationTestCommon()</a>, <a class="el" href="_convert_bf16_to_fp32_test_impl_8cpp_source.xhtml#l00013">ConvertBf16ToFp32Test()</a>, <a class="el" href="_convert_fp32_to_bf16_test_impl_8cpp_source.xhtml#l00013">ConvertFp32ToBf16Test()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00461">Convolution1dTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l03346">Convolution2dPerAxisQuantTest()</a>, <a class="el" href="_output_handler_8cpp_source.xhtml#l00021">OutputHandler::CreateTensorHandles()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01599">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01736">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l03570">DepthwiseConvolution2dPerAxisQuantTest()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01889">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml#l00041">ElementwiseTestHelper()</a>, <a class="el" href="_elementwise_unary_test_impl_8hpp_source.xhtml#l00035">ElementwiseUnaryTestHelper()</a>, <a class="el" href="_fake_quantization_test_impl_8cpp_source.xhtml#l00016">FakeQuantizationTest()</a>, <a class="el" href="_l2_normalization_test_impl_8cpp_source.xhtml#l00672">L2Normalization2dShapeTest()</a>, <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00020">Pad2dTestCommon()</a>, <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00093">Pad3dTestCommon()</a>, <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00177">Pad4dTestCommon()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00121">PermuteTensorData()</a>, <a class="el" href="_prelu_test_impl_8hpp_source.xhtml#l00023">PreluTest()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00392">SimpleActivationTest()</a>, <a class="el" href="_convert_fp16_to_fp32_test_impl_8cpp_source.xhtml#l00016">SimpleConvertFp16ToFp32Test()</a>, <a class="el" href="_convert_fp32_to_fp16_test_impl_8cpp_source.xhtml#l00014">SimpleConvertFp32ToFp16Test()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00368">SimpleConvolution2dNhwcTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00201">SimpleConvolution2dTestImpl()</a>, <a class="el" href="_floor_test_impl_8cpp_source.xhtml#l00015">SimpleFloorTest()</a>, <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00024">SimpleFullyConnectedTestImpl()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00019">SimplePermuteTestImpl()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00019">SimpleTransposeTestImpl()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00792">SqrtNNTest()</a>, <a class="el" href="_transpose_convolution2d_test_impl_8cpp_source.xhtml#l00561">TransposeConvolution2dPerAxisQuantTest()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>

</div>
</div>
<a id="af0b0226f767fd570877710b84c7caa2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0b0226f767fd570877710b84c7caa2a">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>dataLayout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code><a class="el" href="_ref_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">SampleDynamicWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a68f34fb8ec9a7921a1f6c17b4f5312e6">WorkloadFactoryBase</a>.</p>

</div>
</div>
<a id="a96217a8bbb66811608ce729fd49a3dd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96217a8bbb66811608ce729fd49a3dd2">&#9670;&nbsp;</a></span>CreateTranspose()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateTranspose </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_queue_descriptor.xhtml">TransposeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a07446244299bc12305593358695ea1b4">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ac302ae63e103b22d6ce4fef0f5513899">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aac9d1b722bcd5b59cc6760ca2607ef8e">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ac302ae63e103b22d6ce4fef0f5513899">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01574">1574</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00025">TransposeLayer::CreateWorkload()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00019">SimpleTransposeTestImpl()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;{</div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a12cccba82124cc4993868a3173a65167"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12cccba82124cc4993868a3173a65167">&#9670;&nbsp;</a></span>CreateTransposeConvolution2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateTransposeConvolution2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">TransposeConvolution2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#acb80cd4ff2c145b80554376643fc54db">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a29e02d375261a32c39635d6833a49333">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a29e02d375261a32c39635d6833a49333">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a29e02d375261a32c39635d6833a49333">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01580">1580</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00027">TransposeConvolution2dLayer::CreateWorkload()</a>, <a class="el" href="_transpose_convolution2d_test_impl_8cpp_source.xhtml#l00561">TransposeConvolution2dPerAxisQuantTest()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;{</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a9f7e4296485d2812e7996089149c96d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f7e4296485d2812e7996089149c96d1">&#9670;&nbsp;</a></span>GetBackendId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetBackendId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">SampleDynamicWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">NeonWorkloadFactory</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>

</div>
</div>
<a id="a74dc9ec1a223eab8b072368b2dacee87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74dc9ec1a223eab8b072368b2dacee87">&#9670;&nbsp;</a></span>IsLayerSupported() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td>
          <td class="paramname"><em>backendId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::Activation</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::Addition</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">armnn::ArgMinMax</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::BatchNormalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::BatchToSpaceNd</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::BFloat16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::Boolean</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">armnn::Comparison</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">armnn::Concat</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255">armnn::Constant</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a">armnn::ConvertBf16ToFp32</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">armnn::ConvertFp16ToFp32</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da">armnn::ConvertFp32ToBf16</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">armnn::ConvertFp32ToFp16</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::Convolution2d</a>, <a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3daa603905470e2a5b8c13e96b579ef0dba">armnn::Debug</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">armnn::DepthToSpace</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::DepthwiseConvolution2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::Dequantize</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">armnn::DetectionPostProcess</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::Division</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">armnn::ElementwiseUnary</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3489c7b05e180496cb2ce8ac73887f48">armnn::FakeQuantization</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::Float16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::Floor</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::FullyConnected</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">armnn::Gather</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00014">armnn::GetBiasTypeFromWeightsType()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00199">InputSlot::GetConnection()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00310">Layer::GetInputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00231">Layer::GetInputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#afcc1c3a20bd2860e0ddd21674389246f">IConnectableLayer::GetName()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00312">Layer::GetOutputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00232">Layer::GetOutputSlots()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">IOutputSlot::GetTensorInfo()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00063">OutputSlot::GetTensorInfo()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00259">Layer::GetType()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">armnn::InstanceNormalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">armnn::L2Normalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">armnn::LogSoftmax</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">armnn::Lstm</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00394">FullyConnectedDescriptor::m_BiasEnabled</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00102">LstmInputParamsInfo::m_CellBias</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00151">QuantizedLstmInputParamsInfo::m_CellBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00108">LstmInputParamsInfo::m_CellLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00098">LstmInputParamsInfo::m_CellToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00097">LstmInputParamsInfo::m_CellToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00099">LstmInputParamsInfo::m_CellToOutputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00101">LstmInputParamsInfo::m_ForgetGateBias</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00150">QuantizedLstmInputParamsInfo::m_ForgetGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00107">LstmInputParamsInfo::m_ForgetLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00100">LstmInputParamsInfo::m_InputGateBias</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00149">QuantizedLstmInputParamsInfo::m_InputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00106">LstmInputParamsInfo::m_InputLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00091">LstmInputParamsInfo::m_InputToCellWeights</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00141">QuantizedLstmInputParamsInfo::m_InputToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00090">LstmInputParamsInfo::m_InputToForgetWeights</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00140">QuantizedLstmInputParamsInfo::m_InputToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00089">LstmInputParamsInfo::m_InputToInputWeights</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00139">QuantizedLstmInputParamsInfo::m_InputToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00092">LstmInputParamsInfo::m_InputToOutputWeights</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00142">QuantizedLstmInputParamsInfo::m_InputToOutputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00103">LstmInputParamsInfo::m_OutputGateBias</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00152">QuantizedLstmInputParamsInfo::m_OutputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00109">LstmInputParamsInfo::m_OutputLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00105">LstmInputParamsInfo::m_ProjectionBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00104">LstmInputParamsInfo::m_ProjectionWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00095">LstmInputParamsInfo::m_RecurrentToCellWeights</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00146">QuantizedLstmInputParamsInfo::m_RecurrentToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00094">LstmInputParamsInfo::m_RecurrentToForgetWeights</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00145">QuantizedLstmInputParamsInfo::m_RecurrentToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00093">LstmInputParamsInfo::m_RecurrentToInputWeights</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00144">QuantizedLstmInputParamsInfo::m_RecurrentToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00096">LstmInputParamsInfo::m_RecurrentToOutputWeights</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00147">QuantizedLstmInputParamsInfo::m_RecurrentToOutputWeights</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">armnn::Maximum</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3d6c9ac08ada31c184094bbc67afe00d">armnn::Mean</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::MemCopy</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::MemImport</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00">armnn::Merge</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::Minimum</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::Multiplication</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">armnn::Normalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::Pad</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::Permute</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::Pooling2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1ba143ebe524d46181a4b53470693278">armnn::PreCompiled</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">armnn::Prelu</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">armnn::QLstm</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">armnn::Quantize</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">armnn::QuantizedLstm</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">armnn::Reshape</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">armnn::Resize</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">armnn::Slice</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::Softmax</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">armnn::SpaceToBatchNd</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">armnn::SpaceToDepth</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">armnn::Splitter</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">armnn::Stack</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a93bca63ecbb003649425dd0e4ba79a99">armnn::StandIn</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">armnn::StridedSlice</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::Subtraction</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abbc155fb2b111bf61c4f5ff892915e6b">armnn::Switch</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::Transpose</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">armnn::TransposeConvolution2d</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l00174">armnn::AttemptBackendAssignment()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l00316">LoadedNetwork::GetOutputTensorInfo()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00038">ClWorkloadFactory::IsLayerSupported()</a>, <a class="el" href="_neon_workload_factory_8cpp_source.xhtml#l00032">NeonWorkloadFactory::IsLayerSupported()</a>, <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00037">SampleDynamicWorkloadFactory::IsLayerSupported()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01192">IWorkloadFactory::IsLayerSupported()</a>, <a class="el" href="_ref_workload_factory_8cpp_source.xhtml#l00098">RefWorkloadFactory::IsLayerSupported()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    Optional&lt;std::string&amp;&gt; reason = outReasonIfUnsupported;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordtype">bool</span> result;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> Layer&amp; layer = *(PolymorphicDowncast&lt;const Layer*&gt;(&amp;connectableLayer));</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">auto</span> <span class="keyword">const</span>&amp; backendRegistry = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">if</span> (!backendRegistry.IsBackendRegistered(backendId))</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        std::stringstream ss;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        ss &lt;&lt; connectableLayer.GetName() &lt;&lt; <span class="stringliteral">&quot; is not supported on &quot;</span> &lt;&lt; backendId</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;           &lt;&lt; <span class="stringliteral">&quot; because this backend is not registered.&quot;</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        outReasonIfUnsupported = ss.str();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">auto</span> backendFactory = backendRegistry.GetFactory(backendId);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">auto</span> backendObject = backendFactory();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">auto</span> layerSupportObject = backendObject-&gt;GetLayerSupport();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">switch</span>(layer.GetType())</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">LayerType::Activation</a>:</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const ActivationLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            result = layerSupportObject-&gt;IsActivationSupported(</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                           OverrideDataType(input, dataType),</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                           OverrideDataType(output, dataType),</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                           cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                                           reason);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a>:</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input0 = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input1 = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            result = layerSupportObject-&gt;IsAdditionSupported(</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                        OverrideDataType(input0, dataType),</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                        OverrideDataType(input1, dataType),</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                        OverrideDataType(output, dataType),</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                        reason);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">LayerType::ArgMinMax</a>:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const ArgMinMaxLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keyword">const</span> ArgMinMaxDescriptor&amp; descriptor = cLayer-&gt;GetParameters();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            result = layerSupportObject-&gt;IsArgMinMaxSupported(</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    OverrideDataType(input, dataType),</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    OverrideDataType(output, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">DataType::Signed32</a>),</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    descriptor,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    reason);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">LayerType::BatchNormalization</a>:</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const BatchNormalizationLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; mean = cLayer-&gt;m_Mean-&gt;GetTensorInfo();</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; var = cLayer-&gt;m_Variance-&gt;GetTensorInfo();</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; beta = cLayer-&gt;m_Beta-&gt;GetTensorInfo();</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; gamma = cLayer-&gt;m_Gamma-&gt;GetTensorInfo();</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            result = layerSupportObject-&gt;IsBatchNormalizationSupported(</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                                   OverrideDataType(input, dataType),</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                                   OverrideDataType(output, dataType),</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                                   OverrideDataType(mean, dataType),</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                                   OverrideDataType(var, dataType),</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                                   OverrideDataType(beta, dataType),</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                                   OverrideDataType(gamma, dataType),</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                                   cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                                                   reason);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">LayerType::BatchToSpaceNd</a>:</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const BatchToSpaceNdLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            result = layerSupportObject-&gt;IsBatchToSpaceNdSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                                                   OverrideDataType(output, dataType),</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                                                   cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                                                   reason);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">LayerType::Comparison</a>:</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const ComparisonLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input0 = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input1 = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            result = layerSupportObject-&gt;IsComparisonSupported(OverrideDataType(input0, dataType),</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                                               OverrideDataType(input1, dataType),</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                                               OverrideDataType(output, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">DataType::Boolean</a>),</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                                               cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                                               reason);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255">LayerType::Constant</a>:</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            result = layerSupportObject-&gt;IsConstantSupported(OverrideDataType(output, dataType), reason);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a">LayerType::ConvertBf16ToFp32</a>:</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            result = layerSupportObject-&gt;IsConvertBf16ToFp32Supported(input, output, reason);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">LayerType::ConvertFp16ToFp32</a>:</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            result = layerSupportObject-&gt;IsConvertFp16ToFp32Supported(input, output, reason);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da">LayerType::ConvertFp32ToBf16</a>:</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            result = layerSupportObject-&gt;IsConvertFp32ToBf16Supported(input, output, reason);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">LayerType::ConvertFp32ToFp16</a>:</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            result = layerSupportObject-&gt;IsConvertFp32ToFp16Supported(input, output, reason);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">LayerType::Convolution2d</a>:</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const Convolution2dLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keyword">const</span> TensorInfo input  = OverrideDataType(layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                                       dataType);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keyword">const</span> TensorInfo output = OverrideDataType(layer.GetOutputSlot(0).GetTensorInfo(), dataType);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(cLayer-&gt;m_Weight.get() != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keyword">const</span> Convolution2dDescriptor&amp; descriptor  = cLayer-&gt;GetParameters();</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="comment">// Construct optional biases object based on the value of m_BiasEnabled</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            Optional&lt;TensorInfo&gt; biases;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keywordflow">if</span> (descriptor.m_BiasEnabled)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                biases =</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    OverrideDataType(cLayer-&gt;m_Bias-&gt;GetTensorInfo(), <a class="code" href="namespacearmnn.xhtml#a83c4a275acf59f62b8387f389d0929d5">GetBiasTypeFromWeightsType</a>(dataType));</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            result = layerSupportObject-&gt;IsConvolution2dSupported(</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                              input,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                              output,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                              descriptor,</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                              OverrideDataType(cLayer-&gt;m_Weight-&gt;GetTensorInfo(), dataType),</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                                              biases,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                              reason);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3daa603905470e2a5b8c13e96b579ef0dba">LayerType::Debug</a>:</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            result = layerSupportObject-&gt;IsDebugSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                                          OverrideDataType(output, dataType),</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                                          reason);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">LayerType::DepthToSpace</a>:</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const DepthToSpaceLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input  = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            result = layerSupportObject-&gt;IsDepthToSpaceSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                                 OverrideDataType(output, dataType),</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                                                 cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                                                 reason);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">LayerType::DepthwiseConvolution2d</a>:</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const DepthwiseConvolution2dLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = OverrideDataType(layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                                       dataType);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = OverrideDataType(layer.GetOutputSlot(0).GetTensorInfo(), dataType);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(cLayer-&gt;m_Weight.get() != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <span class="keyword">const</span> DepthwiseConvolution2dDescriptor&amp; descriptor = cLayer-&gt;GetParameters();</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            <span class="comment">// Construct optional biases object based on the value of m_BiasEnabled</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            Optional&lt;TensorInfo&gt; biases;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="keywordflow">if</span> (descriptor.m_BiasEnabled)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                biases =</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    OverrideDataType(cLayer-&gt;m_Bias-&gt;GetTensorInfo(), <a class="code" href="namespacearmnn.xhtml#a83c4a275acf59f62b8387f389d0929d5">GetBiasTypeFromWeightsType</a>(dataType));</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            result = layerSupportObject-&gt;IsDepthwiseConvolutionSupported(</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                                                     input,</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                                     output,</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                                     descriptor,</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                                                     OverrideDataType(cLayer-&gt;m_Weight-&gt;GetTensorInfo(), dataType),</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                                     biases,</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                                                     reason);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">LayerType::Dequantize</a>:</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            result = layerSupportObject-&gt;IsDequantizeSupported(input,</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                                               OverrideDataType(output, dataType),</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                                               reason);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">LayerType::DetectionPostProcess</a>:</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        {</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const DetectionPostProcessLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a> = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a> = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a> = cLayer-&gt;m_Anchors-&gt;GetTensorInfo();</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; detectionBoxes = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; detectionClasses = layer.GetOutputSlot(1).GetTensorInfo();</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; detectionScores = layer.GetOutputSlot(2).GetTensorInfo();</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; numDetections = layer.GetOutputSlot(3).GetTensorInfo();</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="keyword">const</span> DetectionPostProcessDescriptor&amp; descriptor = cLayer-&gt;GetParameters();</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            result = layerSupportObject-&gt;IsDetectionPostProcessSupported(boxEncodings,</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                                                         scores,</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                                                                         anchors,</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                                                         detectionBoxes,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                                                         detectionClasses,</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                                                         detectionScores,</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                                                         numDetections,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                                                         descriptor,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                                                         reason);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">LayerType::ElementwiseUnary</a>:</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const ElementwiseUnaryLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            result = layerSupportObject-&gt;IsElementwiseUnarySupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                                                     OverrideDataType(output, dataType),</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                                                     cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                                                     reason);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        }</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3489c7b05e180496cb2ce8ac73887f48">LayerType::FakeQuantization</a>:</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const FakeQuantizationLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            result = layerSupportObject-&gt;IsFakeQuantizationSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                                                     cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                                                                     reason);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        }</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">LayerType::Floor</a>:</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            result = layerSupportObject-&gt;IsFloorSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                                                          OverrideDataType(output, dataType),</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                                                          reason);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">LayerType::FullyConnected</a>:</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        {</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const FullyConnectedLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(cLayer-&gt;m_Weight.get() != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            TensorInfo biasInfo;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <span class="keyword">const</span> TensorInfo * biasInfoPtr = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="keyword">static</span> <span class="keyword">const</span> TensorInfo dummyBFloat16Bias(TensorShape({1,1,1,1}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">DataType::BFloat16</a>);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="keyword">static</span> <span class="keyword">const</span> TensorInfo dummyFloat16Bias(TensorShape({1,1,1,1}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            <span class="keyword">static</span> <span class="keyword">const</span> TensorInfo dummyFloat32Bias(TensorShape({1,1,1,1}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            <span class="keyword">static</span> <span class="keyword">const</span> TensorInfo dummyQA8Bias(TensorShape({1,1,1,1}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">DataType::Signed32</a>);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="keyword">const</span> FullyConnectedDescriptor&amp; descriptor = cLayer-&gt;GetParameters();</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <span class="keywordflow">if</span> (descriptor.m_BiasEnabled)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(cLayer-&gt;m_Bias.get() != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                biasInfo = OverrideDataType(cLayer-&gt;m_Bias-&gt;GetTensorInfo(), <a class="code" href="namespacearmnn.xhtml#a83c4a275acf59f62b8387f389d0929d5">GetBiasTypeFromWeightsType</a>(dataType));</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                biasInfoPtr = &amp;biasInfo;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            }</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            {</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <span class="comment">// If biases are not enabled pass a dummy tensorinfo for the validation</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                <span class="keywordflow">switch</span>(input.GetDataType())</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                {</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">DataType::BFloat16</a>:</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                    {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                        biasInfoPtr = &amp;dummyBFloat16Bias;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                    }</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>:</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                    {</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                        biasInfoPtr = &amp;dummyFloat16Bias;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                    }</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>:</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                    {</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                        biasInfoPtr = &amp;dummyFloat32Bias;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    }</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>:</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">DataType::QAsymmS8</a>:</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">DataType::QSymmS8</a>:</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">DataType::QSymmS16</a>:</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                    {</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                        biasInfoPtr = &amp;dummyQA8Bias;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    }</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    {</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Unexpected bias type&quot;</span>);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                    }</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                }</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            }</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            result = layerSupportObject-&gt;IsFullyConnectedSupported(</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                               OverrideDataType(input, dataType),</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                               OverrideDataType(output, dataType),</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                               OverrideDataType(cLayer-&gt;m_Weight-&gt;GetTensorInfo(), dataType),</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                               *biasInfoPtr,</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                               descriptor,</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                               reason);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        }</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">LayerType::Gather</a>:</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        {</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input0 = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input1 = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            result = layerSupportObject-&gt;IsGatherSupported(OverrideDataType(input0, dataType),</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                                           input1,</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                                           OverrideDataType(output, dataType),</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                                           reason);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        }</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a>:</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        {</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            result = layerSupportObject-&gt;IsInputSupported(OverrideDataType(input, dataType), reason);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">LayerType::InstanceNormalization</a>:</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        {</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const InstanceNormalizationLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="keyword">const</span> InstanceNormalizationDescriptor&amp; descriptor = cLayer-&gt;GetParameters();</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            result = layerSupportObject-&gt;IsInstanceNormalizationSupported(</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                OverrideDataType(input, dataType),</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                OverrideDataType(output, dataType),</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                descriptor,</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                reason);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        }</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">LayerType::L2Normalization</a>:</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        {</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const L2NormalizationLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            <span class="keyword">const</span> L2NormalizationDescriptor&amp; descriptor = cLayer-&gt;GetParameters();</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            result = layerSupportObject-&gt;IsL2NormalizationSupported(</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                                                OverrideDataType(input, dataType),</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                                                OverrideDataType(output, dataType),</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                                                descriptor,</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                                reason);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        }</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">LayerType::LogSoftmax</a>:</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        {</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const LogSoftmaxLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input  = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            result = layerSupportObject-&gt;IsLogSoftmaxSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                                                               OverrideDataType(output, dataType),</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                                               cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                                                               reason);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        }</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">LayerType::Lstm</a>:</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        {</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const LstmLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="keyword">const</span> LstmDescriptor&amp; descriptor = cLayer-&gt;GetParameters();</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            <span class="comment">// All inputs.</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = OverrideDataType(layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                                                       dataType);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; outputStateIn = OverrideDataType(layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                                               dataType);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; cellStateIn = OverrideDataType(layer.GetInputSlot(2).GetConnection()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                                                             dataType);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <span class="comment">// All outputs</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; scratchBuffer = OverrideDataType(layer.GetOutputSlot(0).GetTensorInfo(), dataType);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; outputStateOut = OverrideDataType(layer.GetOutputSlot(1).GetTensorInfo(), dataType);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; cellStateOut = OverrideDataType(layer.GetOutputSlot(2).GetTensorInfo(), dataType);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = OverrideDataType(layer.GetOutputSlot(3).GetTensorInfo(), dataType);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <span class="comment">// Basic parameters</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; inputToForgetWeights</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                    = OverrideDataType(cLayer-&gt;m_BasicParameters.m_InputToForgetWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; inputToCellWeights</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                    = OverrideDataType(cLayer-&gt;m_BasicParameters.m_InputToCellWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; inputToOutputWeights</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                    = OverrideDataType(cLayer-&gt;m_BasicParameters.m_InputToOutputWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; recurrentToForgetWeights</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                    = OverrideDataType(cLayer-&gt;m_BasicParameters.m_RecurrentToForgetWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; recurrentToCellWeights</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                    = OverrideDataType(cLayer-&gt;m_BasicParameters.m_RecurrentToCellWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; recurrentToOutputWeights</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                    = OverrideDataType(cLayer-&gt;m_BasicParameters.m_RecurrentToOutputWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; forgetGateBias</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                    = OverrideDataType(cLayer-&gt;m_BasicParameters.m_ForgetGateBias-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; cellBias</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                    = OverrideDataType(cLayer-&gt;m_BasicParameters.m_CellBias-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; outputGateBias</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                    = OverrideDataType(cLayer-&gt;m_BasicParameters.m_OutputGateBias-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            LstmInputParamsInfo paramsInfo;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            paramsInfo.m_InputToForgetWeights     = &amp;inputToForgetWeights;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            paramsInfo.m_InputToCellWeights       = &amp;inputToCellWeights;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            paramsInfo.m_InputToOutputWeights     = &amp;inputToOutputWeights;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            paramsInfo.m_RecurrentToForgetWeights = &amp;recurrentToForgetWeights;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            paramsInfo.m_RecurrentToCellWeights   = &amp;recurrentToCellWeights;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            paramsInfo.m_RecurrentToOutputWeights = &amp;recurrentToOutputWeights;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            paramsInfo.m_ForgetGateBias           = &amp;forgetGateBias;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            paramsInfo.m_CellBias                 = &amp;cellBias;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            paramsInfo.m_OutputGateBias           = &amp;outputGateBias;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            <span class="comment">// Optional parameters</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            TensorInfo optInputToInputWeights;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            TensorInfo optRecurrentToInputWeights;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            TensorInfo optCellToInputWeights;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            TensorInfo optInputGateBias;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            TensorInfo optProjectionWeights;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;            TensorInfo optProjectionBias;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            TensorInfo optCellToForgetWeights;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;            TensorInfo optCellToOutputWeights;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            TensorInfo optInputLayerNormWeights;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            TensorInfo optForgetLayerNormWeights;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;            TensorInfo optCellLayerNormWeights;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            TensorInfo optOutputLayerNormWeights;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;            <span class="keywordflow">if</span>(!descriptor.m_CifgEnabled)</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            {</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                optInputToInputWeights =</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                    OverrideDataType(cLayer-&gt;m_CifgParameters.m_InputToInputWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                paramsInfo.m_InputToInputWeights = &amp;optInputToInputWeights;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                optRecurrentToInputWeights =</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                    OverrideDataType(cLayer-&gt;m_CifgParameters.m_RecurrentToInputWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                paramsInfo.m_RecurrentToInputWeights = &amp;optRecurrentToInputWeights;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                optInputGateBias =</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                       OverrideDataType(cLayer-&gt;m_CifgParameters.m_InputGateBias-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                paramsInfo.m_InputGateBias = &amp;optInputGateBias;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            }</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <span class="keywordflow">if</span>(descriptor.m_ProjectionEnabled)</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            {</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                optProjectionWeights =</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                    OverrideDataType(cLayer-&gt;m_ProjectionParameters.m_ProjectionWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                paramsInfo.m_ProjectionWeights = &amp;optProjectionWeights;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                <span class="keywordflow">if</span> (cLayer-&gt;m_ProjectionParameters.m_ProjectionBias != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                {</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                    optProjectionBias =</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                        OverrideDataType(cLayer-&gt;m_ProjectionParameters.m_ProjectionBias-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                    paramsInfo.m_ProjectionBias = &amp;optProjectionBias;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                }</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            }</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            <span class="keywordflow">if</span>(descriptor.m_PeepholeEnabled)</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            {</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                <span class="keywordflow">if</span>(!descriptor.m_CifgEnabled)</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                {</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                    optCellToInputWeights =</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                            OverrideDataType(cLayer-&gt;m_PeepholeParameters.m_CellToInputWeights-&gt;GetTensorInfo(),</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                                             dataType);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                    paramsInfo.m_CellToInputWeights = &amp;optCellToInputWeights;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                }</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                optCellToForgetWeights =</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                    OverrideDataType(cLayer-&gt;m_PeepholeParameters.m_CellToForgetWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                paramsInfo.m_CellToForgetWeights = &amp;optCellToForgetWeights;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                optCellToOutputWeights =</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                    OverrideDataType(cLayer-&gt;m_PeepholeParameters.m_CellToOutputWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                paramsInfo.m_CellToOutputWeights = &amp;optCellToOutputWeights;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            }</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            <span class="keywordflow">if</span>(descriptor.m_LayerNormEnabled)</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            {</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                <span class="keywordflow">if</span> (!descriptor.m_CifgEnabled)</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                {</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                    optInputLayerNormWeights = OverrideDataType(</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                            cLayer-&gt;m_LayerNormParameters.m_InputLayerNormWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                    paramsInfo.m_InputLayerNormWeights = &amp;optInputLayerNormWeights;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                }</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                optForgetLayerNormWeights = OverrideDataType(</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                        cLayer-&gt;m_LayerNormParameters.m_ForgetLayerNormWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                paramsInfo.m_ForgetLayerNormWeights = &amp;optForgetLayerNormWeights;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                optCellLayerNormWeights = OverrideDataType(</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                        cLayer-&gt;m_LayerNormParameters.m_CellLayerNormWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                paramsInfo.m_CellLayerNormWeights = &amp;optCellLayerNormWeights;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                optOutputLayerNormWeights = OverrideDataType(</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                        cLayer-&gt;m_LayerNormParameters.m_OutputLayerNormWeights-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                paramsInfo.m_OutputLayerNormWeights = &amp;optOutputLayerNormWeights;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            }</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            result = layerSupportObject-&gt;IsLstmSupported(</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                                     input,</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                                     outputStateIn,</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                                     cellStateIn,</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                                     scratchBuffer,</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                                     outputStateOut,</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                                     cellStateOut,</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                                     output,</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                                     descriptor,</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                                     paramsInfo,</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                                     reason);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        }</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">LayerType::Maximum</a>:</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        {</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input0 = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input1 = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            result = layerSupportObject-&gt;IsMaximumSupported(OverrideDataType(input0, dataType),</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                                                            OverrideDataType(input1, dataType),</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                                                            OverrideDataType(output, dataType),</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                                                            reason);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        }</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">LayerType::MemCopy</a>:</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        {</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input  = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            result = layerSupportObject-&gt;IsMemCopySupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                                                            OverrideDataType(output, dataType),</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                                                            reason);</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        }</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">LayerType::MemImport</a>:</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        {</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input  = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;            result = layerSupportObject-&gt;IsMemImportSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                                                              OverrideDataType(output, dataType),</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                                                              reason);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        }</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00">LayerType::Merge</a>:</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        {</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input0 = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input1 = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;            result = layerSupportObject-&gt;IsMergeSupported(OverrideDataType(input0, dataType),</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                                                          OverrideDataType(input1, dataType),</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                                                          OverrideDataType(output, dataType),</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                                                          reason);</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        }</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">LayerType::Concat</a>:</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        {</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const ConcatLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;            <span class="comment">// Get vector of all inputs.</span></div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            <span class="keyword">auto</span> getTensorInfo = [&amp;dataType](<span class="keyword">const</span> InputSlot&amp; slot)</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                {</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                    <span class="keywordflow">return</span> OverrideDataType(slot.GetConnectedOutputSlot()-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                };</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            <span class="keyword">auto</span> beginI = boost::make_transform_iterator(layer.GetInputSlots().begin(), getTensorInfo);</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            <span class="keyword">auto</span> endI = boost::make_transform_iterator(layer.GetInputSlots().end(), getTensorInfo);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;            std::vector&lt;TensorInfo&gt; inputs(beginI, endI);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            <span class="keyword">auto</span> getTensorInfoPtr = [](<span class="keyword">const</span> TensorInfo&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                {</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                    <span class="keywordflow">return</span> &amp;<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                };</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            <span class="keyword">auto</span> beginPtr = boost::make_transform_iterator(inputs.begin(), getTensorInfoPtr);</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            <span class="keyword">auto</span> endPtr = boost::make_transform_iterator(inputs.end(), getTensorInfoPtr);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            std::vector&lt;const TensorInfo*&gt; inputPtrs(beginPtr, endPtr);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            result = layerSupportObject-&gt;IsConcatSupported(inputPtrs, output, cLayer-&gt;GetParameters(), reason);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        }</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">LayerType::Multiplication</a>:</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        {</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input0 = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input1 = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;            result = layerSupportObject-&gt;IsMultiplicationSupported(</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                                               OverrideDataType(input0, dataType),</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                                               OverrideDataType(input1, dataType),</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                                               OverrideDataType(output, dataType),</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                                               reason);</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        }</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">LayerType::Normalization</a>:</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        {</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const NormalizationLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            result = layerSupportObject-&gt;IsNormalizationSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                                                                  OverrideDataType(output, dataType),</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                                                                  cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                                                                  reason);</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        }</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>:</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        {</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            result = layerSupportObject-&gt;IsOutputSupported(OverrideDataType(output, dataType), reason);</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        }</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">LayerType::Permute</a>:</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        {</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const PermuteLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            result = layerSupportObject-&gt;IsPermuteSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                                                            OverrideDataType(output, dataType),</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                                                            cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                                                            reason);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        }</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">LayerType::Pad</a>:</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        {</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const PadLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            result = layerSupportObject-&gt;IsPadSupported(</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                                    OverrideDataType(input, dataType),</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                                    OverrideDataType(output, dataType),</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                                    cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                                    reason);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        }</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">LayerType::Pooling2d</a>:</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        {</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const Pooling2dLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;            result = layerSupportObject-&gt;IsPooling2dSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                                                              OverrideDataType(output, dataType),</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                                                              cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                                                              reason);</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        }</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1ba143ebe524d46181a4b53470693278">LayerType::PreCompiled</a>:</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;        {</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const PreCompiledLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            result = layerSupportObject-&gt;IsPreCompiledSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                                                                cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                                                                reason);</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        }</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">LayerType::Quantize</a>:</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;        {</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            result = layerSupportObject-&gt;IsQuantizeSupported(input, output, reason);</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        }</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">LayerType::QLstm</a>:</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        {</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const QLstmLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            <span class="keyword">const</span> QLstmDescriptor&amp; descriptor = cLayer-&gt;GetParameters();</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;            <span class="comment">// Inputs</span></div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; previousOutputIn = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; previousCellStateIn = layer.GetInputSlot(2).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            <span class="comment">// Outputs</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; outputStateOut = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; cellStateOut = layer.GetOutputSlot(1).GetTensorInfo();</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(2).GetTensorInfo();</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;            <span class="comment">// Lstm parameters</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            LstmInputParamsInfo paramsInfo;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;            <span class="comment">// Basic parameters</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;            paramsInfo.m_InputToForgetWeights = &amp;cLayer-&gt;m_BasicParameters.m_InputToForgetWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            paramsInfo.m_InputToCellWeights   = &amp;cLayer-&gt;m_BasicParameters.m_InputToCellWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;            paramsInfo.m_InputToOutputWeights = &amp;cLayer-&gt;m_BasicParameters.m_InputToOutputWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;            paramsInfo.m_RecurrentToForgetWeights =</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                    &amp;cLayer-&gt;m_BasicParameters.m_RecurrentToForgetWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;            paramsInfo.m_RecurrentToCellWeights   =</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                    &amp;cLayer-&gt;m_BasicParameters.m_RecurrentToCellWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;            paramsInfo.m_RecurrentToOutputWeights =</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                    &amp;cLayer-&gt;m_BasicParameters.m_RecurrentToOutputWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            paramsInfo.m_ForgetGateBias = &amp;cLayer-&gt;m_BasicParameters.m_ForgetGateBias-&gt;GetTensorInfo();</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;            paramsInfo.m_CellBias       = &amp;cLayer-&gt;m_BasicParameters.m_CellBias-&gt;GetTensorInfo();</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;            paramsInfo.m_OutputGateBias = &amp;cLayer-&gt;m_BasicParameters.m_OutputGateBias-&gt;GetTensorInfo();</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            <span class="keywordflow">if</span>(!descriptor.m_CifgEnabled)</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;            {</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                paramsInfo.m_InputToInputWeights = &amp;cLayer-&gt;m_CifgParameters.m_InputToInputWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                paramsInfo.m_RecurrentToInputWeights =</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                        &amp;cLayer-&gt;m_CifgParameters.m_RecurrentToInputWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                paramsInfo.m_InputGateBias = &amp;cLayer-&gt;m_CifgParameters.m_InputGateBias-&gt;GetTensorInfo();</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;            }</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;            <span class="keywordflow">if</span>(descriptor.m_ProjectionEnabled)</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;            {</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                paramsInfo.m_ProjectionWeights = &amp;cLayer-&gt;m_ProjectionParameters.m_ProjectionWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                <span class="comment">// Projection bias is optional even if projection is enabled</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                <span class="keywordflow">if</span> (cLayer-&gt;m_ProjectionParameters.m_ProjectionBias != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                {</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                    paramsInfo.m_ProjectionBias = &amp;cLayer-&gt;m_ProjectionParameters.m_ProjectionBias-&gt;GetTensorInfo();</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                }</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            }</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;            <span class="keywordflow">if</span>(descriptor.m_PeepholeEnabled)</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            {</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                <span class="keywordflow">if</span> (!descriptor.m_CifgEnabled)</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                {</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                    paramsInfo.m_CellToInputWeights =</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                            &amp;cLayer-&gt;m_PeepholeParameters.m_CellToInputWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                }</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                paramsInfo.m_CellToForgetWeights =</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                        &amp;cLayer-&gt;m_PeepholeParameters.m_CellToForgetWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                paramsInfo.m_CellToOutputWeights = &amp;cLayer-&gt;m_PeepholeParameters.m_CellToOutputWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;            }</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;            <span class="keywordflow">if</span>(descriptor.m_LayerNormEnabled)</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;            {</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                <span class="keywordflow">if</span> (!descriptor.m_CifgEnabled)</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                {</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                    paramsInfo.m_InputLayerNormWeights =</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                            &amp;cLayer-&gt;m_LayerNormParameters.m_InputLayerNormWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                }</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                paramsInfo.m_ForgetLayerNormWeights =</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;                        &amp;cLayer-&gt;m_LayerNormParameters.m_ForgetLayerNormWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                paramsInfo.m_CellLayerNormWeights =</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                        &amp;cLayer-&gt;m_LayerNormParameters.m_CellLayerNormWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                paramsInfo.m_OutputLayerNormWeights =</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                        &amp;cLayer-&gt;m_LayerNormParameters.m_OutputLayerNormWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;            }</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;            result = layerSupportObject-&gt;IsQLstmSupported(input,</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                                                          previousOutputIn,</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                                                          previousCellStateIn,</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                                                          outputStateOut,</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                                                          cellStateOut,</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                                                          output,</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                                                          descriptor,</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                                                          paramsInfo,</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                                                          reason);</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        }</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">LayerType::QuantizedLstm</a>:</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        {</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const QuantizedLstmLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;            <span class="comment">// Inputs</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; previousCellStateIn = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; previousOutputIn = layer.GetInputSlot(2).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;            <span class="comment">// Outputs</span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; cellStateOut = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(1).GetTensorInfo();</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;            <span class="comment">// QuantizedLstm parameters</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;            QuantizedLstmInputParamsInfo paramsInfo;</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;            paramsInfo.m_InputToInputWeights      =</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;                    &amp;cLayer-&gt;m_QuantizedLstmParameters.m_InputToInputWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;            paramsInfo.m_InputToForgetWeights     =</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;                    &amp;cLayer-&gt;m_QuantizedLstmParameters.m_InputToForgetWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;            paramsInfo.m_InputToCellWeights       =</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;                    &amp;cLayer-&gt;m_QuantizedLstmParameters.m_InputToCellWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;            paramsInfo.m_InputToOutputWeights     =</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                    &amp;cLayer-&gt;m_QuantizedLstmParameters.m_InputToOutputWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            paramsInfo.m_RecurrentToInputWeights  =</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                    &amp;cLayer-&gt;m_QuantizedLstmParameters.m_RecurrentToInputWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;            paramsInfo.m_RecurrentToForgetWeights =</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                    &amp;cLayer-&gt;m_QuantizedLstmParameters.m_RecurrentToForgetWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;            paramsInfo.m_RecurrentToCellWeights   =</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                    &amp;cLayer-&gt;m_QuantizedLstmParameters.m_RecurrentToCellWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;            paramsInfo.m_RecurrentToOutputWeights =</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                    &amp;cLayer-&gt;m_QuantizedLstmParameters.m_RecurrentToOutputWeights-&gt;GetTensorInfo();</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;            paramsInfo.m_InputGateBias            =</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                    &amp;cLayer-&gt;m_QuantizedLstmParameters.m_InputGateBias-&gt;GetTensorInfo();</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;            paramsInfo.m_ForgetGateBias           =</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                    &amp;cLayer-&gt;m_QuantizedLstmParameters.m_ForgetGateBias-&gt;GetTensorInfo();</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;            paramsInfo.m_CellBias                 =</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                    &amp;cLayer-&gt;m_QuantizedLstmParameters.m_CellBias-&gt;GetTensorInfo();</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;            paramsInfo.m_OutputGateBias           =</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;                    &amp;cLayer-&gt;m_QuantizedLstmParameters.m_OutputGateBias-&gt;GetTensorInfo();;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;            result = layerSupportObject-&gt;IsQuantizedLstmSupported(input,</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;                                                                  previousCellStateIn,</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;                                                                  previousOutputIn,</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;                                                                  cellStateOut,</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                                                                  output,</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                                                                  paramsInfo,</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                                                                  reason);</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;        }</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">LayerType::Division</a>:</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;        {</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input0 = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input1 = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;            result = layerSupportObject-&gt;IsDivisionSupported(</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                                         OverrideDataType(input0, dataType),</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                                         OverrideDataType(input1, dataType),</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                                         OverrideDataType(output, dataType),</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;                                         reason);</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;        }</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">LayerType::Reshape</a>:</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;        {</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const ReshapeLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;            result = layerSupportObject-&gt;IsReshapeSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;                                                            OverrideDataType(output, dataType),</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;                                                            cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;                                                            reason);</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;        }</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">LayerType::Resize</a>:</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        {</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const ResizeLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input  = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;            result = layerSupportObject-&gt;IsResizeSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;                                                           OverrideDataType(output, dataType),</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;                                                           cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;                                                           reason);</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;        }</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">LayerType::Slice</a>:</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;        {</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const SliceLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input  = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;            result = layerSupportObject-&gt;IsSliceSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                                                          OverrideDataType(output, dataType),</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                                                          cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                                                          reason);</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;        }</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">LayerType::Softmax</a>:</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;        {</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const SoftmaxLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;            result = layerSupportObject-&gt;IsSoftmaxSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                                                            OverrideDataType(output, dataType),</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                                                            cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                                                            reason);</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;        }</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">LayerType::SpaceToBatchNd</a>:</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;        {</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const SpaceToBatchNdLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;            result = layerSupportObject-&gt;IsSpaceToBatchNdSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                                                                   OverrideDataType(output, dataType),</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                                                                   cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                                                                   reason);</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;        }</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">LayerType::SpaceToDepth</a>:</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;        {</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const SpaceToDepthLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input  = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;            result = layerSupportObject-&gt;IsSpaceToDepthSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                                                                 OverrideDataType(output, dataType),</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;                                                                 cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;                                                                 reason);</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        }</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">LayerType::Splitter</a>:</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;        {</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const SplitterLayer*&gt;(&amp;layer);</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;            <span class="comment">// Get vector of all outputs.</span></div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;            <span class="keyword">auto</span> getTensorInfo = [&amp;dataType](<span class="keyword">const</span> OutputSlot&amp; slot)</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;            {</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                <span class="keywordflow">return</span> OverrideDataType(slot.GetTensorInfo(), dataType);</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;            };</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;            <span class="keyword">auto</span> beginI = boost::make_transform_iterator(layer.GetOutputSlots().begin(), getTensorInfo);</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;            <span class="keyword">auto</span> endI = boost::make_transform_iterator(layer.GetOutputSlots().end(), getTensorInfo);</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;            std::vector&lt;TensorInfo&gt; outputs(beginI, endI);</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;            <span class="keyword">const</span> std::vector&lt;std::reference_wrapper&lt;TensorInfo&gt;&gt; outputPtrs(outputs.begin(), outputs.end());</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;            result = layerSupportObject-&gt;IsSplitterSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;                                                             outputPtrs,</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                                                             cLayer-&gt;GetParameters(),</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                                                             reason);</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;        }</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">LayerType::Stack</a>:</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;        {</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const StackLayer*&gt;(&amp;layer);</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;            <span class="comment">// Get vector of all inputs.</span></div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;            <span class="keyword">auto</span> getTensorInfo = [&amp;dataType](<span class="keyword">const</span> InputSlot&amp; slot)</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;                {</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;                    <span class="keywordflow">return</span> OverrideDataType(slot.GetConnectedOutputSlot()-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                };</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;            <span class="keyword">auto</span> beginI = boost::make_transform_iterator(layer.GetInputSlots().begin(), getTensorInfo);</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;            <span class="keyword">auto</span> endI = boost::make_transform_iterator(layer.GetInputSlots().end(), getTensorInfo);</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;            std::vector&lt;TensorInfo&gt; inputs(beginI, endI);</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;            <span class="keyword">auto</span> getTensorInfoPtr = [](<span class="keyword">const</span> TensorInfo&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;                {</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;                    <span class="keywordflow">return</span> &amp;<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;                };</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;            <span class="keyword">auto</span> beginPtr = boost::make_transform_iterator(inputs.begin(), getTensorInfoPtr);</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;            <span class="keyword">auto</span> endPtr = boost::make_transform_iterator(inputs.end(), getTensorInfoPtr);</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;            std::vector&lt;const TensorInfo*&gt; inputPtrs(beginPtr, endPtr);</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;            result = layerSupportObject-&gt;IsStackSupported(inputPtrs, output, cLayer-&gt;GetParameters(), reason);</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;        }</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a93bca63ecbb003649425dd0e4ba79a99">LayerType::StandIn</a>:</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;        {</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const StandInLayer*&gt;(&amp;layer);</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;            <span class="comment">// Get vector of all inputs.</span></div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;            <span class="keyword">auto</span> getTensorInfoIn = [&amp;dataType](<span class="keyword">const</span> InputSlot&amp; slot)</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;                {</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;                    <span class="keywordflow">return</span> OverrideDataType(slot.GetConnectedOutputSlot()-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;                };</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;            <span class="keyword">auto</span> getTensorInfoOut = [&amp;dataType](<span class="keyword">const</span> OutputSlot&amp; slot)</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;                {</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;                    <span class="keywordflow">return</span> OverrideDataType(slot.GetTensorInfo(), dataType);</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;                };</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;            <span class="keyword">auto</span> beginI = boost::make_transform_iterator(layer.GetInputSlots().begin(), getTensorInfoIn);</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;            <span class="keyword">auto</span> endI = boost::make_transform_iterator(layer.GetInputSlots().end(), getTensorInfoIn);</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;            std::vector&lt;TensorInfo&gt; inputs(beginI, endI);</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;            <span class="keyword">auto</span> beginO = boost::make_transform_iterator(layer.GetOutputSlots().begin(), getTensorInfoOut);</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;            <span class="keyword">auto</span> endO = boost::make_transform_iterator(layer.GetOutputSlots().end(), getTensorInfoOut);</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;            std::vector&lt;TensorInfo&gt; outputs(beginO, endO);</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;            <span class="keyword">auto</span> getTensorInfoPtr = [](<span class="keyword">const</span> TensorInfo&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;                {</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                    <span class="keywordflow">return</span> &amp;<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;                };</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;            <span class="keyword">auto</span> beginPtrI = boost::make_transform_iterator(inputs.begin(), getTensorInfoPtr);</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;            <span class="keyword">auto</span> endPtrI = boost::make_transform_iterator(inputs.end(), getTensorInfoPtr);</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;            std::vector&lt;const TensorInfo*&gt; inputPtrs(beginPtrI, endPtrI);</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;            <span class="keyword">auto</span> beginPtrO = boost::make_transform_iterator(outputs.begin(), getTensorInfoPtr);</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;            <span class="keyword">auto</span> endPtrO = boost::make_transform_iterator(outputs.end(), getTensorInfoPtr);</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;            std::vector&lt;const TensorInfo*&gt; outputPtrs(beginPtrO, endPtrO);</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;            result = layerSupportObject-&gt;IsStandInSupported(inputPtrs,</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;                                                            outputPtrs,</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                                                            cLayer-&gt;GetParameters(),</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                                                            reason);</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;        }</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">LayerType::StridedSlice</a>:</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;        {</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const StridedSliceLayer*&gt;(&amp;layer);</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;            result = layerSupportObject-&gt;IsStridedSliceSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                                                                 OverrideDataType(output, dataType),</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;                                                                 cLayer-&gt;GetParameters(),</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;                                                                 reason);</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;        }</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">LayerType::Subtraction</a>:</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;        {</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input0 = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input1 = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;            result = layerSupportObject-&gt;IsSubtractionSupported(</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                                            OverrideDataType(input0, dataType),</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                                            OverrideDataType(input1, dataType),</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;                                            OverrideDataType(output, dataType),</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                                            reason);</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;        }</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abbc155fb2b111bf61c4f5ff892915e6b">LayerType::Switch</a>:</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;        {</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input0 = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input1 = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output0 = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output1 = layer.GetOutputSlot(1).GetTensorInfo();</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;            result = layerSupportObject-&gt;IsSwitchSupported(OverrideDataType(input0, dataType),</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;                                                           OverrideDataType(input1, dataType),</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                                                           OverrideDataType(output0, dataType),</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                                                           OverrideDataType(output1, dataType),</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                                                           reason);</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;        }</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3d6c9ac08ada31c184094bbc67afe00d">LayerType::Mean</a>:</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;        {</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const MeanLayer*&gt;(&amp;layer);</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;            result = layerSupportObject-&gt;IsMeanSupported(</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;                                     OverrideDataType(input, dataType),</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;                                     OverrideDataType(output, dataType),</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;                                     cLayer-&gt;GetParameters(),</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;                                     reason);</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;        }</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">LayerType::Minimum</a>:</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;        {</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input0 = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input1 = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;            result = layerSupportObject-&gt;IsMinimumSupported(OverrideDataType(input0, dataType),</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;                                                            OverrideDataType(input1, dataType),</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;                                                            OverrideDataType(output, dataType),</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;                                                            reason);</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;        }</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">LayerType::Prelu</a>:</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;        {</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input  = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; alpha  = layer.GetInputSlot(1).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;            result = layerSupportObject-&gt;IsPreluSupported(OverrideDataType(input,  dataType),</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;                                                          OverrideDataType(alpha,  dataType),</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;                                                          OverrideDataType(output, dataType),</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;                                                          reason);</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;        }</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">LayerType::Transpose</a>:</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;        {</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const TransposeLayer*&gt;(&amp;layer);</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; input = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; output = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;            result = layerSupportObject-&gt;IsTransposeSupported(OverrideDataType(input, dataType),</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;                                                              OverrideDataType(output, dataType),</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;                                                              cLayer-&gt;GetParameters(),</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;                                                              reason);</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;        }</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">LayerType::TransposeConvolution2d</a>:</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;        {</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;            <span class="keyword">auto</span> cLayer = PolymorphicDowncast&lt;const TransposeConvolution2dLayer*&gt;(&amp;layer);</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;            <span class="keyword">const</span> TensorInfo input  = OverrideDataType(layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo(),</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;                                                       dataType);</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;            <span class="keyword">const</span> TensorInfo output = OverrideDataType(layer.GetOutputSlot(0).GetTensorInfo(), dataType);</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;            <span class="keyword">const</span> TransposeConvolution2dDescriptor&amp; descriptor  = cLayer-&gt;GetParameters();</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;            Optional&lt;TensorInfo&gt; biases;</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;            <span class="keywordflow">if</span> (descriptor.m_BiasEnabled)</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;            {</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;                <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(cLayer-&gt;m_Bias.get() != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;                biases = OverrideDataType(cLayer-&gt;m_Bias-&gt;GetTensorInfo(),</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;                                          <a class="code" href="namespacearmnn.xhtml#a83c4a275acf59f62b8387f389d0929d5">GetBiasTypeFromWeightsType</a>(dataType));</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;            }</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(cLayer-&gt;m_Weight.get() != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;            <span class="keyword">const</span> TensorInfo weights = OverrideDataType(cLayer-&gt;m_Weight-&gt;GetTensorInfo(), dataType);</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;            result = layerSupportObject-&gt;IsTransposeConvolution2dSupported(input,</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;                                                                           output,</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;                                                                           descriptor,</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;                                                                           weights,</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;                                                                           biases,</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;                                                                           reason);</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;        }</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;        {</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;WorkloadFactory did not recognise type of layer.&quot;</span>);</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;            reason.value() = <span class="stringliteral">&quot;Unrecognised layer type&quot;</span>;</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;            result = <span class="keyword">false</span>;</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;        }</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    }</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">armnn::LayerType::TransposeConvolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">armnn::LayerType::ElementwiseUnary</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">armnn::LayerType::Concat</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">armnn::LayerType::Comparison</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3"><div class="ttname"><a href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::OutputShapeRounding::Floor</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::LayerType::BatchToSpaceNd</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">armnn::LayerType::Stack</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">armnn::LayerType::StridedSlice</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">armnn::LayerType::ConvertFp32ToFp16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">armnn::LayerType::Normalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">armnn::LayerType::SpaceToBatchNd</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::LayerType::FullyConnected</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ada422a73ac4e68bcb1b1b1f0b44028d9"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a></div><div class="ttdeci">std::vector&lt; float &gt; boxEncodings({ 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f })</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::LayerType::Multiplication</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">armnn::LayerType::InstanceNormalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00">armnn::LayerType::Merge</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">armnn::LayerType::L2Normalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">armnn::LayerType::Prelu</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">armnn::LayerType::Quantize</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83c4a275acf59f62b8387f389d0929d5"><div class="ttname"><a href="namespacearmnn.xhtml#a83c4a275acf59f62b8387f389d0929d5">armnn::GetBiasTypeFromWeightsType</a></div><div class="ttdeci">armnn::Optional&lt; armnn::DataType &gt; GetBiasTypeFromWeightsType(armnn::Optional&lt; armnn::DataType &gt; weightsType)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_rules_8hpp_source.xhtml#l00014">LayerSupportRules.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">armnn::LayerType::ConvertFp16ToFp32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da">armnn::LayerType::ConvertFp32ToBf16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">armnn::LayerType::DetectionPostProcess</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3d6c9ac08ada31c184094bbc67afe00d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3d6c9ac08ada31c184094bbc67afe00d">armnn::LayerType::Mean</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">armnn::LayerType::Gather</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::LayerType::Permute</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">armnn::LayerType::Resize</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a93a3ba385cad27c4774e5fe64c025d3daa603905470e2a5b8c13e96b579ef0dba"><div class="ttname"><a href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3daa603905470e2a5b8c13e96b579ef0dba">armnn::LogSeverity::Debug</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::LayerType::Convolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::LayerType::MemCopy</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::LayerType::Pad</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">armnn::LayerType::Maximum</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1ba143ebe524d46181a4b53470693278"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1ba143ebe524d46181a4b53470693278">armnn::LayerType::PreCompiled</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::LayerType::Softmax</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">armnn::LayerType::Reshape</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::LayerType::Pooling2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::LayerType::Dequantize</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::DataType::BFloat16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">armnn::LayerType::SpaceToDepth</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::LayerType::DepthwiseConvolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255">armnn::LayerType::Constant</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a93bca63ecbb003649425dd0e4ba79a99"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a93bca63ecbb003649425dd0e4ba79a99">armnn::LayerType::StandIn</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::LayerType::MemImport</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">armnn::LayerType::Splitter</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4abbc155fb2b111bf61c4f5ff892915e6b"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abbc155fb2b111bf61c4f5ff892915e6b">armnn::LayerType::Switch</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a0348e6bb67ace72535bd105219bb6237"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a></div><div class="ttdeci">std::vector&lt; float &gt; scores({ 0.0f, 0.9f, 0.8f, 0.0f, 0.75f, 0.72f, 0.0f, 0.6f, 0.5f, 0.0f, 0.93f, 0.95f, 0.0f, 0.5f, 0.4f, 0.0f, 0.3f, 0.2f })</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">armnn::LayerType::QuantizedLstm</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">armnn::LayerType::ArgMinMax</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">armnn::LayerType::Lstm</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::LayerType::BatchNormalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">armnn::LayerType::LogSoftmax</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3489c7b05e180496cb2ce8ac73887f48"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3489c7b05e180496cb2ce8ac73887f48">armnn::LayerType::FakeQuantization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::DataType::QSymmS8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">armnn::LayerType::DepthToSpace</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::LayerType::Minimum</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::LayerType::Transpose</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">armnn::LayerType::Slice</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::LayerType::Division</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a">armnn::LayerType::ConvertBf16ToFp32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">armnn::LayerType::QLstm</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ac0981848e4ae57729f14f72bd4caa9f8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a></div><div class="ttdeci">std::vector&lt; float &gt; anchors({ 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 100.5f, 1.0f, 1.0f })</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7d94ea841143b76fe08ccb308839bfd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d94ea841143b76fe08ccb308839bfd7">&#9670;&nbsp;</a></span>IsLayerSupported() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01192">1192</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_workload_factory_8cpp_source.xhtml#l00045">IWorkloadFactory::IsLayerSupported()</a>.</p>
<div class="fragment"><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;{</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    <span class="keyword">auto</span> layer = PolymorphicDowncast&lt;const Layer*&gt;(&amp;connectableLayer);</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IsLayerSupported</a>(layer-&gt;GetBackendId(), connectableLayer, dataType, outReasonIfUnsupported);</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a74dc9ec1a223eab8b072368b2dacee87"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">armnn::IWorkloadFactory::IsLayerSupported</a></div><div class="ttdeci">static bool IsLayerSupported(const BackendId &amp;backendId, const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l00045">WorkloadFactory.cpp:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a37f4eba7877deb34f4d8d64c9bcb9ab5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37f4eba7877deb34f4d8d64c9bcb9ab5">&#9670;&nbsp;</a></span>SupportsSubTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SupportsSubTensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_sample_dynamic_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">SampleDynamicWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aed0a782f32856bde72bc10d9381dc11e">WorkloadFactoryBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l01916">ConcatDifferentInputOutputQParamTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00272">Concatenate()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02072">ConcatTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02635">ConcatUint16Test()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02352">ConcatUint8DifferentQParamsTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02497">ConcatUint8Test()</a>, and <a class="el" href="_workload_factory_8hpp_source.xhtml#l00024">IWorkloadFactory::~IWorkloadFactory()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/backendsCommon/<a class="el" href="_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a></li>
<li>src/backends/backendsCommon/<a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:52 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
