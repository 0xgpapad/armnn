<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/neon/test/NeonEndToEndTests.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_neon_end_to_end_tests_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NeonEndToEndTests.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_neon_end_to_end_tests_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/EndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_activation_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/ActivationEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_arg_min_max_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/ArgMinMaxEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_comparison_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/ComparisonEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_concat_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/ConcatEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_depth_to_space_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/DepthToSpaceEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_dequantize_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/DequantizeEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_detection_post_process_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/DetectionPostProcessEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_elementwise_unary_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/ElementwiseUnaryEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_instance_normalization_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/InstanceNormalizationEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_prelu_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/PreluEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_q_lstm_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/QLstmEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_quantized_lstm_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/QuantizedLstmEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_space_to_depth_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/SpaceToDepthEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_splitter_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/SplitterEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_transpose_convolution2d_end_to_end_test_impl_8hpp.xhtml">backendsCommon/test/TransposeConvolution2dEndToEndTestImpl.hpp</a>&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;boost/test/unit_test.hpp&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<a class="code" href="_output_shape_of_squeeze_8cpp.xhtml#ae3a6cb217a792718f2bd0e8f45e3ca9e">BOOST_AUTO_TEST_SUITE</a>(NeonEndToEnd)</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">   28</a></span>&#160;<a class="code" href="namespacestd.xhtml">std</a>::vector&lt;<a class="code" href="namespacearmnn.xhtml">armnn</a>::<a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a> = {<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>};</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">// Abs</span></div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a1bca53809b6d4022cb7f994c5c4e64aa">   31</a></span>&#160;<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a1bca53809b6d4022cb7f994c5c4e64aa">BOOST_AUTO_TEST_CASE</a>(NeonAbsEndToEndTestFloat32)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    std::vector&lt;float&gt; expectedOutput =</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        1.f, 1.f, 1.f, 1.f, 5.f, 5.f, 5.f, 5.f,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        3.f, 3.f, 3.f, 3.f, 4.f, 4.f, 4.f, 4.f</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    };</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    ElementwiseUnarySimpleEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                                                             UnaryOperation::Abs,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                                             expectedOutput);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">// Constant</span></div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a8c80ce683482e071b23ad8c366ec2200">   45</a></span>&#160;<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a1bca53809b6d4022cb7f994c5c4e64aa">BOOST_AUTO_TEST_CASE</a>(ConstantUsage_Neon_Float32)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    BOOST_TEST(ConstantUsageFloat32Test(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#if defined(ARMNNREF_ENABLED)</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">// This test unit needs the reference backend, it&#39;s not available if the reference backend is not built</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a1bca53809b6d4022cb7f994c5c4e64aa">BOOST_AUTO_TEST_CASE</a>(FallbackToCpuRef)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// Create runtime in which test will run and allow fallback to CpuRef.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> <a class="code" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(options));</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// Builds up the structure of the network.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net(<a class="code" href="classarmnn_1_1_i_network.xhtml#a706f7345af3f18f4b16e226a672214c6">INetwork::Create</a>());</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input = net-&gt;AddInputLayer(0);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="comment">// This layer configuration isn&#39;t supported by CpuAcc but we allow fallback to CpuRef so it shoud pass.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> descriptor;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* pooling = net-&gt;AddNormalizationLayer(descriptor);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output = net-&gt;AddOutputLayer(0);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(pooling-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    pooling-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 1, 4, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    pooling-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 1, 4, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// optimize the network</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    std::vector&lt;BackendId&gt; backends = {<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">Compute::CpuAcc</a>, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">Compute::CpuRef</a>};</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*net, backends, runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">// Load it into the runtime. It should pass.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">NetworkId</a> netId;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    BOOST_TEST(runtime-&gt;LoadNetwork(netId, std::move(optNet)) == <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Status::Success</a>);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a08f6c3e931e3a82a80e275447a7cb31e">   90</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonGreaterSimpleEndToEndTest)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint8_t&gt; expectedOutput({ 0, 0, 0, 0,  1, 1, 1, 1,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                                0, 0, 0, 0,  0, 0, 0, 0 });</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    ComparisonSimpleEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                                       <a class="code" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                                       expectedOutput);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a14452124d5ae504d8875382c3634eb74">  100</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonGreaterSimpleEndToEndUint8Test)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint8_t&gt; expectedOutput({ 0, 0, 0, 0,  1, 1, 1, 1,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                                0, 0, 0, 0,  0, 0, 0, 0 });</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    ComparisonSimpleEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                                               <a class="code" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                                               expectedOutput);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#abf342e51b788bf8e2bf070d18bedae96">  110</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonGreaterBroadcastEndToEndTest)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint8_t&gt; expectedOutput({ 0, 1, 0, 0, 0, 1,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                                1, 1, 1, 1, 1, 1 });</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    ComparisonBroadcastEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                                          <a class="code" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                                          expectedOutput);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a32c60cefb795ce7d0a0d67eea23311ad">  120</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonGreaterBroadcastEndToEndUint8Test)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint8_t&gt; expectedOutput({ 0, 1, 0, 0, 0, 1,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                                1, 1, 1, 1, 1, 1 });</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    ComparisonBroadcastEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                                                                  <a class="code" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                                                                  expectedOutput);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#aa77db7cb5a8cdabc3f3f560258f4f21c">  130</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonConcatEndToEndDim0Test)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    ConcatDim0EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a9d3555adb8d3f83d5733f4ac8354b77c">  135</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonConcatEndToEndDim0Uint8Test)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;{</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    ConcatDim0EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a9daf87e1460f9304964fcc4f402fb259">  140</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonConcatEndToEndDim1Test)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    ConcatDim1EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a6a1f2d3bb6bb5dfae6042ba3bf0be92e">  145</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonConcatEndToEndDim1Uint8Test)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    ConcatDim1EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a53dfedd8cce454accdd7b637c4f8343a">  150</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonConcatEndToEndDim3Test)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    ConcatDim3EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a4ead8cf58c0c1bbd12cc5e6acfc08338">  155</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonConcatEndToEndDim3Uint8Test)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    ConcatDim3EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">// DepthToSpace</span></div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a27a746f7bc22538b810be0d5e945b26a">  161</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(DephtToSpaceEndToEndNchwFloat32)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;}</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a7cf4601d23d9558a0c8b9a5a330ae854">  166</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(DephtToSpaceEndToEndNchwFloat16)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::Float16&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#aca41e6b9e1bda61b09b635c5857aee91">  171</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(DephtToSpaceEndToEndNchwUint8)</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;{</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a66bf08ef789c18b8a63d0fceaefbeea1">  176</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(DephtToSpaceEndToEndNchwInt16)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;{</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a138933084e2ddb38faaa03ea6c435365">  181</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(DephtToSpaceEndToEndNhwcFloat32)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ae15bf71385d1355cc0d85af4d61a008e">  186</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(DephtToSpaceEndToEndNhwcFloat16)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::Float16&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a015b7b281e1718199b6ad08352840823">  191</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(DephtToSpaceEndToEndNhwcUint8)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a756295623f8ac16a2beb184a3030e3aa">  196</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(DephtToSpaceEndToEndNhwcInt16)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    DepthToSpaceEndToEnd&lt;armnn::DataType::QSymmS16&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">// Dequantize</span></div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a3cd60c9b4ecad211eecbf7804799ae95">  202</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(DequantizeEndToEndSimpleTest)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    DequantizeEndToEndSimple&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ad3804af7f4121ef26a388c1c9f81e06b">  207</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(DequantizeEndToEndOffsetTest)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;{</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    DequantizeEndToEndOffset&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;}</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ac98412306bed315d6f2ca2a92700b152">  212</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonEluEndToEndTestFloat32)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;{</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    EluEndToEndTest&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ae280cbcd69b0c44ac0de204b72fd68c3">  217</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonEluEndToEndTestFloat16)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    EluEndToEndTest&lt;armnn::DataType::Float16&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">// HardSwish</span></div><div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a2d04bebbc6cb7a08d94064f649a16615">  223</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonHardSwishEndToEndTestFloat32)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    HardSwishEndToEndTest&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;}</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a9e9675cf42f022c768d525614cd1a7d3">  228</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonHardSwishEndToEndTestFloat16)</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;{</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    HardSwishEndToEndTest&lt;armnn::DataType::Float16&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ae44d1eceb8276b1252db3ca53f624cf2">  233</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonHardSwishEndToEndTestQAsymmS8)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    HardSwishEndToEndTest&lt;armnn::DataType::QAsymmS8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ac2621fa95ec9ee4c0261f9d0a2c43e1c">  238</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonHardSwishEndToEndTestQAsymmU8)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;{</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    HardSwishEndToEndTest&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a6cf0bfeae35f405a5dc67ed57affd9d9">  243</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonPreluEndToEndFloat32Test)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    PreluEndToEndNegativeTest&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ab3c8acea06815a62e228bb9319ddcc60">  248</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonPreluEndToEndTestUint8Test)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;{</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    PreluEndToEndPositiveTest&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ae4dcafa0cac6f73ce4bd9fffa692280d">  253</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSpaceToDepthNhwcEndToEndTest1)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#ae2aeba7e1195292ca5a000a81c145629">SpaceToDepthNhwcEndToEndTest1</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#aa3b1a1d76c1d2d0cb3578af2472d5786">  258</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSpaceToDepthNchwEndToEndTest1)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;{</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#aa539d7b30c0a8064ab301a61c5a90fed">SpaceToDepthNchwEndToEndTest1</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ab921327fa50673c42e5d19699a8d7296">  263</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSpaceToDepthNhwcEndToEndTest2)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <a class="code" href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#a2da64f8783ac838e5c4aa76c0d2de8cb">SpaceToDepthNhwcEndToEndTest2</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ac58542c104ba70a65e4e125e12a801fa">  268</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSpaceToDepthNchwEndToEndTest2)</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;{</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <a class="code" href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#a00fc587ab0be7b4d988fcc1a9bdf5355">SpaceToDepthNchwEndToEndTest2</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ad3f31806f100cfeb7ea2ae529df55e34">  273</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter1dEndToEndTest)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;{</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    Splitter1dEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;}</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#aa71a3ef46b213ce5d270e60b0ecc8557">  278</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter1dEndToEndUint8Test)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;{</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    Splitter1dEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a5bf6ca74dabc25f0c014e6966be3956b">  283</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter2dDim0EndToEndTest)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;{</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    Splitter2dDim0EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a9f327ea14c666c031452bc317ab55023">  288</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter2dDim1EndToEndTest)</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;{</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    Splitter2dDim1EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;}</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ad1404f851fb9559ae9b3a403d21b7b6a">  293</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter2dDim0EndToEndUint8Test)</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;{</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    Splitter2dDim0EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a157ac52b020368f4e4a086011b3cf7c4">  298</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter2dDim1EndToEndUint8Test)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;{</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    Splitter2dDim1EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;}</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#aa69384e2c2aa50739b8fb8e9b2fffaec">  303</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter3dDim0EndToEndTest)</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;{</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    Splitter3dDim0EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ab481307a1087080d658579c421ccae14">  308</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter3dDim1EndToEndTest)</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;{</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    Splitter3dDim1EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ab80e6a797df04fbd1dadf34b5288effd">  313</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter3dDim2EndToEndTest)</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    Splitter3dDim2EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;}</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#abed8aefee4420b00529b765385109a07">  318</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter3dDim0EndToEndUint8Test)</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;{</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    Splitter3dDim0EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;}</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a54af9f6f8541f7b1aa36b68909c5a454">  323</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter3dDim1EndToEndUint8Test)</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;{</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    Splitter3dDim1EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ad03398894656de4577c25a38ebcacfc5">  328</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter3dDim2EndToEndUint8Test)</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;{</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    Splitter3dDim2EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;}</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a2b905de12806c3480d59907178cf5bc1">  333</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter4dDim0EndToEndTest)</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;{</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    Splitter4dDim0EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;}</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ad52602d8dc02485735ac085c0b8dbe0f">  338</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter4dDim1EndToEndTest)</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;{</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    Splitter4dDim1EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;}</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a579a7f2b91a1d20355c5c23a628bb531">  343</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter4dDim2EndToEndTest)</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;{</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    Splitter4dDim2EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;}</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#afb0e1534489f21f7fe9e5055c3d15cf0">  348</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter4dDim3EndToEndTest)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;{</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    Splitter4dDim3EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;}</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a519174862e574b4c5b16d854e9703a07">  353</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter4dDim0EndToEndUint8Test)</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;{</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    Splitter4dDim0EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a0832f9950ef62c1f45ae765072238d9e">  358</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter4dDim1EndToEndUint8Test)</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;{</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    Splitter4dDim1EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a8dc2c199ff4fa47a459e170886d1fee2">  363</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter4dDim2EndToEndUint8Test)</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;{</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    Splitter4dDim2EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;}</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a6befe939868d35975b47bce59eaa8b73">  368</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonSplitter4dDim3EndToEndUint8Test)</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;{</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    Splitter4dDim3EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a8e13f191eb837fdbb3390336154c8fc6">  373</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonQuantizedLstmEndToEndTest)</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;{</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <a class="code" href="_quantized_lstm_end_to_end_test_impl_8cpp.xhtml#a81b5bf2355bdbac79af06c1bc97adb52">QuantizedLstmEndToEnd</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;}</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a86faac93dccd9c6833273fbd7d1f3beb">  378</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonTransposeConvolution2dEndToEndFloatNchwTest)</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;{</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    TransposeConvolution2dEndToEnd&lt;armnn::DataType::Float32, armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;}</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a7afa245d3002692d0c5a51dae551f906">  384</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonTransposeConvolution2dEndToEndUint8NchwTest)</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;{</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    TransposeConvolution2dEndToEnd&lt;armnn::DataType::QAsymmU8, armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;}</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a7941253beab47fec145e4ba5d7b94b76">  390</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonTransposeConvolution2dEndToEndFloatNhwcTest)</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;{</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    TransposeConvolution2dEndToEnd&lt;armnn::DataType::Float32, armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ae3a453b6efdbf75df7f7b602ee83f1b6">  396</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonTransposeConvolution2dEndToEndUint8NhwcTest)</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;{</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    TransposeConvolution2dEndToEnd&lt;armnn::DataType::QAsymmU8, armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;}</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#aa17c111024b09c13383792b5ed933ab9">  402</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonImportNonAlignedInputPointerTest)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;{</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    ImportNonAlignedInputPointerTest(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;}</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ab9ce61b78b416e66d44acb22137f3999">  407</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonExportNonAlignedOutputPointerTest)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    ExportNonAlignedOutputPointerTest(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;}</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonImportAlignedPointerTest, * boost::unit_test::disabled())</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;{</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    ImportAlignedPointerTest(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;}</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonImportOnlyWorkload, * boost::unit_test::disabled())</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;{</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    ImportOnlyWorkload(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;}</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonExportOnlyWorkload, * boost::unit_test::disabled())</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;{</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    ExportOnlyWorkload(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;}</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonImportAndExportWorkload, * boost::unit_test::disabled())</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;{</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    ImportAndExportWorkload(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;}</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonExportOutputWithSeveralOutputSlotConnectionsTest, * boost::unit_test::disabled())</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;{</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    ExportOutputWithSeveralOutputSlotConnectionsTest(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;}</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">// InstanceNormalization</span></div><div class="line"><a name="l00438"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ae2dc0f1995ef18fadd72c9b6c74edce7">  438</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonInstanceNormalizationNchwEndToEndTest1)</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;{</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <a class="code" href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#a120f2896c50cfa77409d16ef6b1628eb">InstanceNormalizationNchwEndToEndTest1</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;}</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ad9decb65c57e3ac6f9996632242d29f2">  443</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonInstanceNormalizationNchwEndToEndTest2)</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;{</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <a class="code" href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#a3e262db2d488773b8824f73c4f6ab145">InstanceNormalizationNchwEndToEndTest2</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;}</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">// ArgMinMax</span></div><div class="line"><a name="l00449"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a1604bbaf3797f46764541e06142c486c">  449</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMaxSimpleTest)</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;{</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    ArgMaxEndToEndSimple&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;}</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a3f9c9924ee33ca3c1e82592f5a211f75">  454</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMinSimpleTest)</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;{</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    ArgMinEndToEndSimple&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;}</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a0b8b9ff47f75056211d8877a0cb43a05">  459</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMaxAxis0Test)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;{</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    ArgMaxAxis0EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;}</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a5f67f26350dfe7a8f74ddc1ddf600741">  464</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMinAxis0Test)</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;{</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    ArgMinAxis0EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;}</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ad792413aef241a122cffe07dd1552477">  469</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMaxAxis1Test)</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;{</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    ArgMaxAxis1EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;}</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div><div class="line"><a name="l00474"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a991623e504ae7897afef650efe5922a6">  474</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMinAxis1Test)</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;{</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    ArgMinAxis1EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;}</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ae47365701f186c00b63d50967d29fcd8">  479</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMaxAxis2Test)</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;{</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    ArgMaxAxis2EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;}</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a56bf4a940fe54032d30583f37dcbc173">  484</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMinAxis2Test)</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;{</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    ArgMinAxis2EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;}</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ab2f2a585b7c20e6410236bc087eac215">  489</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMaxAxis3Test)</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;{</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    ArgMaxAxis3EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;}</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a815b32e9701ab457eb99845aad24550c">  494</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMinAxis3Test)</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;{</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    ArgMinAxis3EndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;}</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a819925dc2f98ec56b046f90eb7c0dc43">  499</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMaxSimpleTestQuantisedAsymm8)</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;{</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    ArgMaxEndToEndSimple&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;}</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ad55af39009f2b0f0191b8854da60f86f">  504</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMinSimpleTestQuantisedAsymm8)</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;{</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    ArgMinEndToEndSimple&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;}</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#acd1426a216eb03ea1cf4b9b548ef3131">  509</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMaxAxis0TestQuantisedAsymm8)</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;{</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    ArgMaxAxis0EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;}</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#adc9fde6d755f2de04d92687f59392f2f">  514</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMinAxis0TestQuantisedAsymm8)</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;{</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    ArgMinAxis0EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;}</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a22ec28bd9719aec6676897e8ed8e8ef1">  519</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMaxAxis1TestQuantisedAsymm8)</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;{</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    ArgMaxAxis1EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;}</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#ac1cc3b02303e679b5a006f9b98e6aa79">  524</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMinAxis1TestQuantisedAsymm8)</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;{</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    ArgMinAxis1EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;}</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a4892abb94679c653f8cb78efb6f17152">  529</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMaxAxis2TestQuantisedAsymm8)</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;{</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    ArgMaxAxis2EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;}</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div><div class="line"><a name="l00534"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a227ad0d4d211bb83dd10360b0c64bd2b">  534</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMinAxis2TestQuantisedAsymm8)</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;{</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    ArgMinAxis2EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;}</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a59af9ee6527696d071e8dd804b2a72f8">  539</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMaxAxis3TestQuantisedAsymm8)</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;{</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    ArgMaxAxis3EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;}</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a1ce29f53a1fde801c350375814a6175f">  544</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonArgMinAxis3TestQuantisedAsymm8)</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;{</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    ArgMinAxis3EndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;}</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a5a648279551e2b9b3c53da0e99261e91">  549</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonStridedSliceInvalidSliceEndToEndTest)</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;{</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    StridedSliceInvalidSliceEndToEndTest(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;}</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonDetectionPostProcessRegularNmsTest, * boost::unit_test::disabled())</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;{</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>({</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                                        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                                        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                                        0.0f, -1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                                        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                                        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                                        0.0f, 0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                                    });</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>({</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                                  0.0f, 0.9f, 0.8f,</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                                  0.0f, 0.75f, 0.72f,</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                                  0.0f, 0.6f, 0.5f,</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                                  0.0f, 0.93f, 0.95f,</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                                  0.0f, 0.5f, 0.4f,</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                                  0.0f, 0.3f, 0.2f</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                              });</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>({</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                                   0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                                   0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                                   0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                                   0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                                   0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                                   0.5f, 100.5f, 1.0f, 1.0f</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                               });</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    DetectionPostProcessRegularNmsEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;}</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div><div class="line"><a name="l00583"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">  583</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a>(uint8_t* quant, <span class="keyword">const</span> <span class="keywordtype">float</span>* dequant, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; info)</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;{</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>(); i++)</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    {</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        quant[i] = armnn::Quantize&lt;uint8_t&gt;(dequant[i], info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a>(), info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>());</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    }</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;}</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonDetectionPostProcessRegularNmsUint8Test, * boost::unit_test::disabled())</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;{</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> boxEncodingsInfo({ 1, 6, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>({ 1, 6, 3 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>({ 6, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    boxEncodingsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(1.0f);</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    boxEncodingsInfo.SetQuantizationOffset(1);</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.01f);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(0);</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.5f);</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(0);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>({</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                                        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                                        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                                        0.0f, -1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                                        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                                        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                                        0.0f, 0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                                    });</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>({</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                                  0.0f, 0.9f, 0.8f,</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                                  0.0f, 0.75f, 0.72f,</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                                  0.0f, 0.6f, 0.5f,</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                                  0.0f, 0.93f, 0.95f,</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                                  0.0f, 0.5f, 0.4f,</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                                  0.0f, 0.3f, 0.2f</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                              });</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>({</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                                   0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                                   0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                                   0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                                   0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                                   0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                                   0.5f, 100.5f, 1.0f, 1.0f</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                               });</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>.size(), 0);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>.size(), 0);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>.size(), 0);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>.data(), boxEncodingsInfo);</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    DetectionPostProcessRegularNmsEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a>,</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                                                                             <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a>,</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                                                                             1.0f, 1, 0.01f, 0, 0.5f, 0);</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;}</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonDetectionPostProcessFastNmsTest, * boost::unit_test::disabled())</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;{</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>({</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                                        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                                        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                                        0.0f, -1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                                        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                                        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                                        0.0f, 0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                                    });</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>({</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                                  0.0f, 0.9f, 0.8f,</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                                  0.0f, 0.75f, 0.72f,</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                                  0.0f, 0.6f, 0.5f,</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                                  0.0f, 0.93f, 0.95f,</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                                  0.0f, 0.5f, 0.4f,</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                                  0.0f, 0.3f, 0.2f</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                              });</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>({</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                                   0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                                   0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                                   0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                                   0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                                   0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                                   0.5f, 100.5f, 1.0f, 1.0f</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                               });</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    DetectionPostProcessFastNmsEndToEnd&lt;armnn::DataType::Float32&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>);</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;}</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonDetectionPostProcessFastNmsUint8Test, * boost::unit_test::disabled())</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;{</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> boxEncodingsInfo({ 1, 6, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>({ 1, 6, 3 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>({ 6, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    boxEncodingsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(1.0f);</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    boxEncodingsInfo.SetQuantizationOffset(1);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.01f);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(0);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.5f);</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(0);</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>({</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                                        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                                        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                                        0.0f, -1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                                        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                                        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                                        0.0f, 0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                                    });</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>({</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                                  0.0f, 0.9f, 0.8f,</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                                  0.0f, 0.75f, 0.72f,</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                                  0.0f, 0.6f, 0.5f,</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                                  0.0f, 0.93f, 0.95f,</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                                  0.0f, 0.5f, 0.4f,</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                                  0.0f, 0.3f, 0.2f</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                              });</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    std::vector&lt;float&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>({</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                                   0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                                   0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                                   0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                                   0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                                   0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                                   0.5f, 100.5f, 1.0f, 1.0f</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                               });</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>.size(), 0);</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>.size(), 0);</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>.size(), 0);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>.data(), boxEncodingsInfo);</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a>);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a>.data(), <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a>);</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    DetectionPostProcessFastNmsEndToEnd&lt;armnn::DataType::QAsymmU8&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a>,</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                                                                          <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a>, <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a>,</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                                                                          1.0f, 1, 0.01f, 0, 0.5f, 0);</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;}</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div><div class="line"><a name="l00718"></a><span class="lineno"><a class="line" href="_neon_end_to_end_tests_8cpp.xhtml#a317ba2305b7e71edede00c48a68b825b">  718</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">BOOST_AUTO_TEST_CASE</a>(NeonQLstmEndToEndTest)</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;{</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <a class="code" href="_q_lstm_end_to_end_test_impl_8cpp.xhtml#a171b68282d4a922144ae3a6b0a27db17">QLstmEndToEnd</a>(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a>);</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;}</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<a class="code" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END</a>()</div><div class="ttc" id="_output_shape_of_squeeze_8cpp_xhtml_ae3a6cb217a792718f2bd0e8f45e3ca9e"><div class="ttname"><a href="_output_shape_of_squeeze_8cpp.xhtml#ae3a6cb217a792718f2bd0e8f45e3ca9e">BOOST_AUTO_TEST_SUITE</a></div><div class="ttdeci">BOOST_AUTO_TEST_SUITE(TensorflowLiteParser)</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a"><div class="ttname"><a href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">armnn::ComparisonOperation::Greater</a></div></div>
<div class="ttc" id="_space_to_depth_end_to_end_test_impl_8cpp_xhtml_aa539d7b30c0a8064ab301a61c5a90fed"><div class="ttname"><a href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#aa539d7b30c0a8064ab301a61c5a90fed">SpaceToDepthNchwEndToEndTest1</a></div><div class="ttdeci">void SpaceToDepthNchwEndToEndTest1(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_space_to_depth_end_to_end_test_impl_8cpp_source.xhtml#l00129">SpaceToDepthEndToEndTestImpl.cpp:129</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00031">Runtime.cpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="_elementwise_unary_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_elementwise_unary_end_to_end_test_impl_8hpp.xhtml">ElementwiseUnaryEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="_instance_normalization_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_instance_normalization_end_to_end_test_impl_8hpp.xhtml">InstanceNormalizationEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00025">IRuntime.hpp:25</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a358cb7cd3c0647b25be049fd734b8c22"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a358cb7cd3c0647b25be049fd734b8c22">anchorsInfo</a></div><div class="ttdeci">armnn::TensorInfo anchorsInfo({ 6, 4 }, armnn::DataType::Float32)</div></div>
<div class="ttc" id="_dequantize_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_dequantize_end_to_end_test_impl_8hpp.xhtml">DequantizeEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="_instance_normalization_end_to_end_test_impl_8cpp_xhtml_a120f2896c50cfa77409d16ef6b1628eb"><div class="ttname"><a href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#a120f2896c50cfa77409d16ef6b1628eb">InstanceNormalizationNchwEndToEndTest1</a></div><div class="ttdeci">void InstanceNormalizationNchwEndToEndTest1(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00168">InstanceNormalizationEndToEndTestImpl.cpp:168</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ada422a73ac4e68bcb1b1b1f0b44028d9"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a></div><div class="ttdeci">std::vector&lt; float &gt; boxEncodings({ 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f })</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83015160d8c67d5d77735eb0d4033d9a"><div class="ttname"><a href="namespacearmnn.xhtml#a83015160d8c67d5d77735eb0d4033d9a">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00020">IRuntime.hpp:20</a></div></div>
<div class="ttc" id="_prelu_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_prelu_end_to_end_test_impl_8hpp.xhtml">PreluEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_end_to_end_test_impl_8hpp.xhtml">EndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="_q_lstm_end_to_end_test_impl_8cpp_xhtml_a171b68282d4a922144ae3a6b0a27db17"><div class="ttname"><a href="_q_lstm_end_to_end_test_impl_8cpp.xhtml#a171b68282d4a922144ae3a6b0a27db17">QLstmEndToEnd</a></div><div class="ttdeci">void QLstmEndToEnd(const std::vector&lt; armnn::BackendId &gt; &amp;backends)</div><div class="ttdef"><b>Definition:</b> <a href="_q_lstm_end_to_end_test_impl_8cpp_source.xhtml#l00036">QLstmEndToEndTestImpl.cpp:36</a></div></div>
<div class="ttc" id="_arg_min_max_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_arg_min_max_end_to_end_test_impl_8hpp.xhtml">ArgMinMaxEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="_space_to_depth_end_to_end_test_impl_8cpp_xhtml_a2da64f8783ac838e5c4aa76c0d2de8cb"><div class="ttname"><a href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#a2da64f8783ac838e5c4aa76c0d2de8cb">SpaceToDepthNhwcEndToEndTest2</a></div><div class="ttdeci">void SpaceToDepthNhwcEndToEndTest2(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_space_to_depth_end_to_end_test_impl_8cpp_source.xhtml#l00160">SpaceToDepthEndToEndTestImpl.cpp:160</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="_space_to_depth_end_to_end_test_impl_8cpp_xhtml_ae2aeba7e1195292ca5a000a81c145629"><div class="ttname"><a href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#ae2aeba7e1195292ca5a000a81c145629">SpaceToDepthNhwcEndToEndTest1</a></div><div class="ttdeci">void SpaceToDepthNhwcEndToEndTest1(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_space_to_depth_end_to_end_test_impl_8cpp_source.xhtml#l00098">SpaceToDepthEndToEndTestImpl.cpp:98</a></div></div>
<div class="ttc" id="_space_to_depth_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_space_to_depth_end_to_end_test_impl_8hpp.xhtml">SpaceToDepthEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00147">BackendId.hpp:147</a></div></div>
<div class="ttc" id="_space_to_depth_end_to_end_test_impl_8cpp_xhtml_a00fc587ab0be7b4d988fcc1a9bdf5355"><div class="ttname"><a href="_space_to_depth_end_to_end_test_impl_8cpp.xhtml#a00fc587ab0be7b4d988fcc1a9bdf5355">SpaceToDepthNchwEndToEndTest2</a></div><div class="ttdeci">void SpaceToDepthNchwEndToEndTest2(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_space_to_depth_end_to_end_test_impl_8cpp_source.xhtml#l00191">SpaceToDepthEndToEndTestImpl.cpp:191</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="_quantized_lstm_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_quantized_lstm_end_to_end_test_impl_8hpp.xhtml">QuantizedLstmEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01003">Network.cpp:1003</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a99e26266538c44c9eb1d28f5095b79d8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a99e26266538c44c9eb1d28f5095b79d8">qBoxEncodings</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; qBoxEncodings(boxEncodings.size(), 0)</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a770b51078da02f44a819e9f95d8058b5"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">armnn::TensorInfo::GetQuantizationOffset</a></div><div class="ttdeci">int32_t GetQuantizationOffset() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00265">Tensor.cpp:265</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a047ca888c43bd7fb5702853bf72410d0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">armnn::TensorInfo::GetQuantizationScale</a></div><div class="ttdeci">float GetQuantizationScale() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00248">Tensor.cpp:248</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00573">INetwork.hpp:573</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00260">Tensor.cpp:260</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a9d5b9e392c2744826c8bb8df575975f1"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a9d5b9e392c2744826c8bb8df575975f1">qAnchors</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; qAnchors(anchors.size(), 0)</div></div>
<div class="ttc" id="_concat_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_concat_end_to_end_test_impl_8hpp.xhtml">ConcatEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a10d15f3df1ab52b3b915a4be1dbf386b"><div class="ttname"><a href="namespacearmnn.xhtml#a10d15f3df1ab52b3b915a4be1dbf386b">armnn::BOOST_AUTO_TEST_CASE</a></div><div class="ttdeci">BOOST_AUTO_TEST_CASE(CheckConvolution2dLayer)</div><div class="ttdef"><b>Definition:</b> <a href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00268">ConstTensorLayerVisitor.cpp:268</a></div></div>
<div class="ttc" id="_detection_post_process_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_detection_post_process_end_to_end_test_impl_8hpp.xhtml">DetectionPostProcessEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00042">IRuntime.hpp:42</a></div></div>
<div class="ttc" id="_profiler_tests_8cpp_xhtml_af7f71af5c6c124222dd1c42c5df892f4"><div class="ttname"><a href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END</a></div><div class="ttdeci">BOOST_AUTO_TEST_SUITE_END()</div></div>
<div class="ttc" id="_quantized_lstm_end_to_end_test_impl_8cpp_xhtml_a81b5bf2355bdbac79af06c1bc97adb52"><div class="ttname"><a href="_quantized_lstm_end_to_end_test_impl_8cpp.xhtml#a81b5bf2355bdbac79af06c1bc97adb52">QuantizedLstmEndToEnd</a></div><div class="ttdeci">void QuantizedLstmEndToEnd(const std::vector&lt; armnn::BackendId &gt; &amp;backends)</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_end_to_end_test_impl_8cpp_source.xhtml#l00179">QuantizedLstmEndToEndTestImpl.cpp:179</a></div></div>
<div class="ttc" id="_splitter_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_splitter_end_to_end_test_impl_8hpp.xhtml">SplitterEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="_q_lstm_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_q_lstm_end_to_end_test_impl_8hpp.xhtml">QLstmEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="_comparison_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_comparison_end_to_end_test_impl_8hpp.xhtml">ComparisonEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a0348e6bb67ace72535bd105219bb6237"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a></div><div class="ttdeci">std::vector&lt; float &gt; scores({ 0.0f, 0.9f, 0.8f, 0.0f, 0.75f, 0.72f, 0.0f, 0.6f, 0.5f, 0.0f, 0.93f, 0.95f, 0.0f, 0.5f, 0.4f, 0.0f, 0.3f, 0.2f })</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ab59caffe2ee6be46c08766c055420f17"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ab59caffe2ee6be46c08766c055420f17">defaultBackends</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; defaultBackends</div><div class="ttdef"><b>Definition:</b> <a href="_neon_end_to_end_tests_8cpp_source.xhtml#l00028">NeonEndToEndTests.cpp:28</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a></div><div class="ttdoc">CPU Execution: NEON: ArmCompute. </div></div>
<div class="ttc" id="_activation_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_activation_end_to_end_test_impl_8hpp.xhtml">ActivationEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="_depth_to_space_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_depth_to_space_end_to_end_test_impl_8hpp.xhtml">DepthToSpaceEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ad16c7915847aa89511b528d543e66fb2"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ad16c7915847aa89511b528d543e66fb2">qScores</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; qScores(scores.size(), 0)</div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a64c1dd1b6dd60be9f4a16db9c8f427a5"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a64c1dd1b6dd60be9f4a16db9c8f427a5">scoresInfo</a></div><div class="ttdeci">armnn::TensorInfo scoresInfo({ 1, 6, 3 }, armnn::DataType::Float32)</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a469c9be3a505d4ef240b1ae2478c5256"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a469c9be3a505d4ef240b1ae2478c5256">QuantizeData</a></div><div class="ttdeci">void QuantizeData(uint8_t *quant, const float *dequant, const TensorInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_end_to_end_tests_8cpp_source.xhtml#l00583">NeonEndToEndTests.cpp:583</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="_transpose_convolution2d_end_to_end_test_impl_8hpp_xhtml"><div class="ttname"><a href="_transpose_convolution2d_end_to_end_test_impl_8hpp.xhtml">TransposeConvolution2dEndToEndTestImpl.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00276">Tensor.cpp:276</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00101">INetwork.hpp:101</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
<div class="ttc" id="_file_only_profiling_decorator_tests_8cpp_xhtml_a6560146509197f3e197d8d36f76c1347"><div class="ttname"><a href="_file_only_profiling_decorator_tests_8cpp.xhtml#a6560146509197f3e197d8d36f76c1347">options</a></div><div class="ttdeci">armnn::Runtime::CreationOptions::ExternalProfilingOptions options</div><div class="ttdef"><b>Definition:</b> <a href="_file_only_profiling_decorator_tests_8cpp_source.xhtml#l00106">FileOnlyProfilingDecoratorTests.cpp:106</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a></div><div class="ttdoc">A NormalizationDescriptor for the NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00559">Descriptors.hpp:559</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a1bca53809b6d4022cb7f994c5c4e64aa"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a1bca53809b6d4022cb7f994c5c4e64aa">BOOST_AUTO_TEST_CASE</a></div><div class="ttdeci">BOOST_AUTO_TEST_CASE(NeonAbsEndToEndTestFloat32)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_end_to_end_tests_8cpp_source.xhtml#l00031">NeonEndToEndTests.cpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a706f7345af3f18f4b16e226a672214c6"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a706f7345af3f18f4b16e226a672214c6">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create()</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00050">Network.cpp:50</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00093">Tensor.hpp:93</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
<div class="ttc" id="_instance_normalization_end_to_end_test_impl_8cpp_xhtml_a3e262db2d488773b8824f73c4f6ab145"><div class="ttname"><a href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#a3e262db2d488773b8824f73c4f6ab145">InstanceNormalizationNchwEndToEndTest2</a></div><div class="ttdeci">void InstanceNormalizationNchwEndToEndTest2(const std::vector&lt; armnn::BackendId &gt; &amp;defaultBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00310">InstanceNormalizationEndToEndTestImpl.cpp:310</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ac0981848e4ae57729f14f72bd4caa9f8"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ac0981848e4ae57729f14f72bd4caa9f8">anchors</a></div><div class="ttdeci">std::vector&lt; float &gt; anchors({ 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 0.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 10.5f, 1.0f, 1.0f, 0.5f, 100.5f, 1.0f, 1.0f })</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_d86eb514662c7c08e168285f21d00ea1.xhtml">neon</a></li><li class="navelem"><a class="el" href="dir_c3e37ff99b1c352c48e2670d743526e1.xhtml">test</a></li><li class="navelem"><a class="el" href="_neon_end_to_end_tests_8cpp.xhtml">NeonEndToEndTests.cpp</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:45 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
