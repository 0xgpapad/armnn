<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/profiling/test/BufferTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_buffer_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">BufferTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_buffer_manager_8hpp_source.xhtml">BufferManager.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_packet_buffer_8hpp_source.xhtml">PacketBuffer.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_profiling_utils_8hpp_source.xhtml">ProfilingUtils.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_exceptions_8hpp_source.xhtml">armnn/Exceptions.hpp</a>&gt;</code><br />
<code>#include &lt;boost/test/unit_test.hpp&gt;</code><br />
</div>
<p><a href="_buffer_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a720f1c037e3e5811042403dd2728c2e1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_buffer_tests_8cpp.xhtml#a720f1c037e3e5811042403dd2728c2e1">BOOST_AUTO_TEST_CASE</a> (PacketBufferTest0)</td></tr>
<tr class="separator:a720f1c037e3e5811042403dd2728c2e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6941523268b8bc546335d99d46145c9d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_buffer_tests_8cpp.xhtml#a6941523268b8bc546335d99d46145c9d">BOOST_AUTO_TEST_CASE</a> (PacketBufferTest1)</td></tr>
<tr class="separator:a6941523268b8bc546335d99d46145c9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95f6d37cd755e51283003b234608aa17"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_buffer_tests_8cpp.xhtml#a95f6d37cd755e51283003b234608aa17">BOOST_AUTO_TEST_CASE</a> (PacketBufferReleaseTest)</td></tr>
<tr class="separator:a95f6d37cd755e51283003b234608aa17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cd267b74ef2744a6f82dd5a8c1a5574"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_buffer_tests_8cpp.xhtml#a7cd267b74ef2744a6f82dd5a8c1a5574">BOOST_AUTO_TEST_CASE</a> (PacketBufferCommitErrorTest)</td></tr>
<tr class="separator:a7cd267b74ef2744a6f82dd5a8c1a5574"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86862258c8afef94d2f056607a0c0200"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_buffer_tests_8cpp.xhtml#a86862258c8afef94d2f056607a0c0200">BOOST_AUTO_TEST_CASE</a> (BufferReserveTest)</td></tr>
<tr class="separator:a86862258c8afef94d2f056607a0c0200"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43fde2fc4bcca518a77ebfd8f8821227"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_buffer_tests_8cpp.xhtml#a43fde2fc4bcca518a77ebfd8f8821227">BOOST_AUTO_TEST_CASE</a> (BufferReserveExceedingSpaceTest)</td></tr>
<tr class="separator:a43fde2fc4bcca518a77ebfd8f8821227"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00c2343a85214ec555cfc471bfc8e853"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_buffer_tests_8cpp.xhtml#a00c2343a85214ec555cfc471bfc8e853">BOOST_AUTO_TEST_CASE</a> (BufferExhaustionTest)</td></tr>
<tr class="separator:a00c2343a85214ec555cfc471bfc8e853"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af90d08f15ef3c21f16f96f9a72cb6bea"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_buffer_tests_8cpp.xhtml#af90d08f15ef3c21f16f96f9a72cb6bea">BOOST_AUTO_TEST_CASE</a> (BufferReserveMultipleTest)</td></tr>
<tr class="separator:af90d08f15ef3c21f16f96f9a72cb6bea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c319134869249689156a52d90180307"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_buffer_tests_8cpp.xhtml#a1c319134869249689156a52d90180307">BOOST_AUTO_TEST_CASE</a> (BufferReleaseTest)</td></tr>
<tr class="separator:a1c319134869249689156a52d90180307"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ed4865edb3a4d00c250ab895b3d6414"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_buffer_tests_8cpp.xhtml#a5ed4865edb3a4d00c250ab895b3d6414">BOOST_AUTO_TEST_CASE</a> (BufferCommitTest)</td></tr>
<tr class="separator:a5ed4865edb3a4d00c250ab895b3d6414"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58c92808d6aca55c89b7dd1a7ef842a2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_buffer_tests_8cpp.xhtml#a58c92808d6aca55c89b7dd1a7ef842a2">BOOST_AUTO_TEST_CASE</a> (BufferMarkReadTest)</td></tr>
<tr class="separator:a58c92808d6aca55c89b7dd1a7ef842a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a720f1c037e3e5811042403dd2728c2e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a720f1c037e3e5811042403dd2728c2e1">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[1/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">PacketBufferTest0&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00018">18</a> of file <a class="el" href="_buffer_tests_8cpp_source.xhtml">BufferTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00197">armnn::profiling::ReadUint32()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00112">armnn::profiling::WriteUint32()</a>.</p>
<div class="fragment"><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> packetBuffer = std::make_unique&lt;PacketBuffer&gt;(512);</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    BOOST_TEST(packetBuffer-&gt;GetSize() == 0);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="comment">// Write data to the buffer</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">WriteUint32</a>(packetBuffer, 0, 10);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">WriteUint32</a>(packetBuffer, 4, 20);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">WriteUint32</a>(packetBuffer, 8, 30);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">WriteUint32</a>(packetBuffer, 12, 40);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="comment">// Commit</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    packetBuffer-&gt;Commit(16);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="comment">// Size of buffer is equal to committed data</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    BOOST_TEST(packetBuffer-&gt;GetSize() == 16);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="comment">// Read data from the buffer</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keyword">auto</span> readBuffer = packetBuffer-&gt;GetReadableData();</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    uint32_t readData0 = <a class="code" href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">ReadUint32</a>(readBuffer, 0);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    uint32_t readData1 = <a class="code" href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">ReadUint32</a>(readBuffer, 4);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    uint32_t readData2 = <a class="code" href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">ReadUint32</a>(readBuffer, 8);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    uint32_t readData3 = <a class="code" href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">ReadUint32</a>(readBuffer, 12);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Check that data is correct</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    BOOST_TEST(readData0 == 10);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    BOOST_TEST(readData1 == 20);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    BOOST_TEST(readData2 == 30);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    BOOST_TEST(readData3 == 40);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Mark read</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    packetBuffer-&gt;MarkRead();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// Size of buffer become 0 after marked read</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    BOOST_TEST(packetBuffer-&gt;GetSize() == 0);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a3e638748a39d46e2943dfcef94dcb828"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">armnn::profiling::WriteUint32</a></div><div class="ttdeci">void WriteUint32(const IPacketBufferPtr &amp;packetBuffer, unsigned int offset, uint32_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00112">ProfilingUtils.cpp:112</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ad56f4c3ea5e88279bb6ef1f31d9dc6df"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">armnn::profiling::ReadUint32</a></div><div class="ttdeci">uint32_t ReadUint32(const IPacketBufferPtr &amp;packetBuffer, unsigned int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00197">ProfilingUtils.cpp:197</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a14328d977cec3abadcfd5935f04f3409"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">armnn::profiling::IPacketBufferPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IPacketBuffer &gt; IPacketBufferPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_packet_buffer_8hpp_source.xhtml#l00040">IPacketBuffer.hpp:40</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6941523268b8bc546335d99d46145c9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6941523268b8bc546335d99d46145c9d">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[2/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">PacketBufferTest1&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="_buffer_tests_8cpp_source.xhtml">BufferTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00197">armnn::profiling::ReadUint32()</a>, and <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00112">armnn::profiling::WriteUint32()</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> packetBuffer = std::make_unique&lt;PacketBuffer&gt;(512);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    BOOST_TEST(packetBuffer-&gt;GetSize() == 0);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// Write data to the buffer using GetWritableData</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">auto</span> writeBuffer = packetBuffer-&gt;GetWritableData();</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">WriteUint32</a>(writeBuffer, 0, 10);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">WriteUint32</a>(writeBuffer, 4, 20);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">WriteUint32</a>(writeBuffer, 8, 30);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">WriteUint32</a>(writeBuffer, 12, 40);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    packetBuffer-&gt;Commit(16);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    BOOST_TEST(packetBuffer-&gt;GetSize() == 16);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// Read data from the buffer</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">auto</span> readBuffer = packetBuffer-&gt;GetReadableData();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    uint32_t readData0 = <a class="code" href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">ReadUint32</a>(readBuffer, 0);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    uint32_t readData1 = <a class="code" href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">ReadUint32</a>(readBuffer, 4);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    uint32_t readData2 = <a class="code" href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">ReadUint32</a>(readBuffer, 8);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    uint32_t readData3 = <a class="code" href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">ReadUint32</a>(readBuffer, 12);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    BOOST_TEST(readData0 == 10);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    BOOST_TEST(readData1 == 20);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    BOOST_TEST(readData2 == 30);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    BOOST_TEST(readData3 == 40);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    packetBuffer-&gt;MarkRead();</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    BOOST_TEST(packetBuffer-&gt;GetSize() == 0);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a3e638748a39d46e2943dfcef94dcb828"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">armnn::profiling::WriteUint32</a></div><div class="ttdeci">void WriteUint32(const IPacketBufferPtr &amp;packetBuffer, unsigned int offset, uint32_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00112">ProfilingUtils.cpp:112</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ad56f4c3ea5e88279bb6ef1f31d9dc6df"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">armnn::profiling::ReadUint32</a></div><div class="ttdeci">uint32_t ReadUint32(const IPacketBufferPtr &amp;packetBuffer, unsigned int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00197">ProfilingUtils.cpp:197</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a14328d977cec3abadcfd5935f04f3409"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">armnn::profiling::IPacketBufferPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IPacketBuffer &gt; IPacketBufferPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_packet_buffer_8hpp_source.xhtml#l00040">IPacketBuffer.hpp:40</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a95f6d37cd755e51283003b234608aa17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95f6d37cd755e51283003b234608aa17">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[3/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">PacketBufferReleaseTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00090">90</a> of file <a class="el" href="_buffer_tests_8cpp_source.xhtml">BufferTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00112">armnn::profiling::WriteUint32()</a>.</p>
<div class="fragment"><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                              {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> packetBuffer = std::make_unique&lt;PacketBuffer&gt;(512);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    BOOST_TEST(packetBuffer-&gt;GetSize() == 0);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">auto</span> writeBuffer = packetBuffer-&gt;GetWritableData();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">WriteUint32</a>(writeBuffer, 0, 10);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">WriteUint32</a>(writeBuffer, 4, 20);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">WriteUint32</a>(writeBuffer, 8, 30);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">WriteUint32</a>(writeBuffer, 12, 40);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    packetBuffer-&gt;Release();</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="comment">// Size of buffer become 0 after release</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    BOOST_TEST(packetBuffer-&gt;GetSize() == 0);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a3e638748a39d46e2943dfcef94dcb828"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a3e638748a39d46e2943dfcef94dcb828">armnn::profiling::WriteUint32</a></div><div class="ttdeci">void WriteUint32(const IPacketBufferPtr &amp;packetBuffer, unsigned int offset, uint32_t value)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00112">ProfilingUtils.cpp:112</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a14328d977cec3abadcfd5935f04f3409"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">armnn::profiling::IPacketBufferPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IPacketBuffer &gt; IPacketBufferPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_packet_buffer_8hpp_source.xhtml#l00040">IPacketBuffer.hpp:40</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7cd267b74ef2744a6f82dd5a8c1a5574"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cd267b74ef2744a6f82dd5a8c1a5574">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[4/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">PacketBufferCommitErrorTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00108">108</a> of file <a class="el" href="_buffer_tests_8cpp_source.xhtml">BufferTests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> packetBuffer = std::make_unique&lt;PacketBuffer&gt;(8);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="comment">// Cannot commit data bigger than the max size of the buffer</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    BOOST_CHECK_THROW(packetBuffer-&gt;Commit(16);, <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a>);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a14328d977cec3abadcfd5935f04f3409"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">armnn::profiling::IPacketBufferPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IPacketBuffer &gt; IPacketBufferPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_packet_buffer_8hpp_source.xhtml#l00040">IPacketBuffer.hpp:40</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a86862258c8afef94d2f056607a0c0200"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86862258c8afef94d2f056607a0c0200">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[5/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">BufferReserveTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00116">116</a> of file <a class="el" href="_buffer_tests_8cpp_source.xhtml">BufferTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00022">BufferManager::Reserve()</a>.</p>
<div class="fragment"><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">BufferManager</a> bufferManager(1, 512);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize = 0;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">auto</span> packetBuffer = bufferManager.Reserve(512, reservedSize);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// Successfully reserved the buffer with requested size</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    BOOST_TEST(reservedSize == 512);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    BOOST_TEST(packetBuffer.get());</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">armnn::profiling::BufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8hpp_source.xhtml#l00022">BufferManager.hpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a43fde2fc4bcca518a77ebfd8f8821227"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43fde2fc4bcca518a77ebfd8f8821227">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[6/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">BufferReserveExceedingSpaceTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00127">127</a> of file <a class="el" href="_buffer_tests_8cpp_source.xhtml">BufferTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00022">BufferManager::Reserve()</a>.</p>
<div class="fragment"><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;{</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">BufferManager</a> bufferManager(1, 512);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize = 0;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">// Cannot reserve buffer bigger than maximum buffer size</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">auto</span> reservedBuffer = bufferManager.Reserve(1024, reservedSize);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    BOOST_TEST(reservedSize == 0);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    BOOST_TEST(!reservedBuffer.get());</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">armnn::profiling::BufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8hpp_source.xhtml#l00022">BufferManager.hpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a00c2343a85214ec555cfc471bfc8e853"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00c2343a85214ec555cfc471bfc8e853">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[7/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">BufferExhaustionTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00138">138</a> of file <a class="el" href="_buffer_tests_8cpp_source.xhtml">BufferTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00022">BufferManager::Reserve()</a>.</p>
<div class="fragment"><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">BufferManager</a> bufferManager(1, 512);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize = 0;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">auto</span> packetBuffer = bufferManager.Reserve(512, reservedSize);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Successfully reserved the buffer with requested size</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    BOOST_TEST(reservedSize == 512);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    BOOST_TEST(packetBuffer.get());</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// Cannot reserve buffer when buffer is not available</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">auto</span> reservedBuffer = bufferManager.Reserve(512, reservedSize);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    BOOST_TEST(reservedSize == 0);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    BOOST_TEST(!reservedBuffer.get());</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">armnn::profiling::BufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8hpp_source.xhtml#l00022">BufferManager.hpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af90d08f15ef3c21f16f96f9a72cb6bea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af90d08f15ef3c21f16f96f9a72cb6bea">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[8/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">BufferReserveMultipleTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00154">154</a> of file <a class="el" href="_buffer_tests_8cpp_source.xhtml">BufferTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00022">BufferManager::Reserve()</a>.</p>
<div class="fragment"><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">BufferManager</a> bufferManager(3, 512);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize0 = 0;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">auto</span> packetBuffer0 = bufferManager.Reserve(512, reservedSize0);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Successfully reserved the buffer with requested size</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    BOOST_TEST(reservedSize0 == 512);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    BOOST_TEST(packetBuffer0.get());</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize1 = 0;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">auto</span> packetBuffer1 = bufferManager.Reserve(128, reservedSize1);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// Successfully reserved the buffer with requested size</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    BOOST_TEST(reservedSize1 == 128);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    BOOST_TEST(packetBuffer1.get());</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize2 = 0;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">auto</span> packetBuffer2 = bufferManager.Reserve(512, reservedSize2);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">// Successfully reserved the buffer with requested size</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    BOOST_TEST(reservedSize2 == 512);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    BOOST_TEST(packetBuffer2.get());</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="comment">// Cannot reserve when buffer is not available</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize3 = 0;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">auto</span> reservedBuffer = bufferManager.Reserve(512, reservedSize3);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    BOOST_TEST(reservedSize3 == 0);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    BOOST_TEST(!reservedBuffer.get());</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">armnn::profiling::BufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8hpp_source.xhtml#l00022">BufferManager.hpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1c319134869249689156a52d90180307"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c319134869249689156a52d90180307">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[9/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">BufferReleaseTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00185">185</a> of file <a class="el" href="_buffer_tests_8cpp_source.xhtml">BufferTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00067">BufferManager::Release()</a>, and <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00022">BufferManager::Reserve()</a>.</p>
<div class="fragment"><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;{</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">BufferManager</a> bufferManager(2, 512);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize0 = 0;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">auto</span> packetBuffer0 = bufferManager.Reserve(512, reservedSize0);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">// Successfully reserved the buffer with requested size</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    BOOST_TEST(reservedSize0 == 512);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    BOOST_TEST(packetBuffer0.get());</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize1 = 0;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">auto</span> packetBuffer1 = bufferManager.Reserve(128, reservedSize1);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// Successfully reserved the buffer with requested size</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    BOOST_TEST(reservedSize1 == 128);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    BOOST_TEST(packetBuffer1.get());</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// Cannot reserve when buffer is not available</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize2 = 0;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">auto</span> reservedBuffer = bufferManager.Reserve(512, reservedSize2);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    BOOST_TEST(reservedSize2 == 0);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    BOOST_TEST(!reservedBuffer.get());</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    bufferManager.Release(packetBuffer0);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="comment">// Buffer should become available after release</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keyword">auto</span> packetBuffer2 = bufferManager.Reserve(128, reservedSize2);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    BOOST_TEST(reservedSize2 == 128);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    BOOST_TEST(packetBuffer2.get());</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">armnn::profiling::BufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8hpp_source.xhtml#l00022">BufferManager.hpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5ed4865edb3a4d00c250ab895b3d6414"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ed4865edb3a4d00c250ab895b3d6414">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[10/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">BufferCommitTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00217">217</a> of file <a class="el" href="_buffer_tests_8cpp_source.xhtml">BufferTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00043">BufferManager::Commit()</a>, <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00088">BufferManager::GetReadableBuffer()</a>, and <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00022">BufferManager::Reserve()</a>.</p>
<div class="fragment"><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">BufferManager</a> bufferManager(2, 512);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize0 = 0;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keyword">auto</span> packetBuffer0 = bufferManager.Reserve(512, reservedSize0);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    BOOST_TEST(reservedSize0 == 512);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    BOOST_TEST(packetBuffer0.get());</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize1 = 0;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">auto</span> packetBuffer1 = bufferManager.Reserve(128, reservedSize1);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    BOOST_TEST(reservedSize1 == 128);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    BOOST_TEST(packetBuffer1.get());</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize2 = 0;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">auto</span> reservedBuffer = bufferManager.Reserve(512, reservedSize2);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    BOOST_TEST(reservedSize2 == 0);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    BOOST_TEST(!reservedBuffer.get());</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    bufferManager.Commit(packetBuffer0, 256);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">// Buffer should become readable after commit</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">auto</span> packetBuffer2 = bufferManager.GetReadableBuffer();</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    BOOST_TEST(packetBuffer2.get());</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    BOOST_TEST(packetBuffer2-&gt;GetSize() == 256);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="comment">// Buffer not set back to available list after commit</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize = 0;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    reservedBuffer = bufferManager.Reserve(512, reservedSize);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    BOOST_TEST(reservedSize == 0);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    BOOST_TEST(!reservedBuffer.get());</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">armnn::profiling::BufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8hpp_source.xhtml#l00022">BufferManager.hpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a58c92808d6aca55c89b7dd1a7ef842a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58c92808d6aca55c89b7dd1a7ef842a2">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[11/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">BufferMarkReadTest&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00251">251</a> of file <a class="el" href="_buffer_tests_8cpp_source.xhtml">BufferTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>, <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00043">BufferManager::Commit()</a>, <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00088">BufferManager::GetReadableBuffer()</a>, <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00101">BufferManager::MarkRead()</a>, and <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00022">BufferManager::Reserve()</a>.</p>
<div class="fragment"><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">BufferManager</a> bufferManager(2, 512);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize0 = 0;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">auto</span> packetBuffer0 = bufferManager.Reserve(512, reservedSize0);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    BOOST_TEST(reservedSize0 == 512);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    BOOST_TEST(packetBuffer0.get());</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize1 = 0;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">auto</span> packetBuffer1 = bufferManager.Reserve(128, reservedSize1);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    BOOST_TEST(reservedSize1 == 128);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    BOOST_TEST(packetBuffer1.get());</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="comment">// Cannot reserve when buffer is not available</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize2 = 0;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keyword">auto</span> reservedBuffer = bufferManager.Reserve(512, reservedSize2);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    BOOST_TEST(reservedSize2 == 0);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    BOOST_TEST(!reservedBuffer.get());</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    bufferManager.Commit(packetBuffer0, 256);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="comment">// Buffer should become readable after commit</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">auto</span> packetBuffer2 = bufferManager.GetReadableBuffer();</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    BOOST_TEST(packetBuffer2.get());</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    BOOST_TEST(packetBuffer2-&gt;GetSize() == 256);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="comment">// Buffer not set back to available list after commit</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    reservedBuffer = bufferManager.Reserve(512, reservedSize2);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    BOOST_TEST(reservedSize2 == 0);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    BOOST_TEST(!reservedBuffer.get());</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    bufferManager.MarkRead(packetBuffer2);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="comment">//Buffer should set back to available list after marked read and can be reserved</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">auto</span> readBuffer = bufferManager.GetReadableBuffer();</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    BOOST_TEST(!readBuffer);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize3 = 0;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">auto</span> packetBuffer3 = bufferManager.Reserve(56, reservedSize3);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    BOOST_TEST(reservedSize3 == 56);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    BOOST_TEST(packetBuffer3.get());</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">armnn::profiling::BufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8hpp_source.xhtml#l00022">BufferManager.hpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_637c692f14729569dd2eac0c18e2a54a.xhtml">profiling</a></li><li class="navelem"><a class="el" href="dir_6b1198f6e738611120ec65b09506d2f8.xhtml">test</a></li><li class="navelem"><a class="el" href="_buffer_tests_8cpp.xhtml">BufferTests.cpp</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:49 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
