<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/layerTests/BatchNormalizationTestImpl.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_batch_normalization_test_impl_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">BatchNormalizationTestImpl.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_batch_normalization_test_impl_8hpp_source.xhtml">BatchNormalizationTestImpl.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_quantize_helper_8hpp_source.xhtml">QuantizeHelper.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_resolve_type_8hpp_source.xhtml">ResolveType.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_ignore_unused_8hpp_source.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_data_layout_indexed_8hpp_source.xhtml">armnnUtils/DataLayoutIndexed.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_cpu_tensor_handle_8hpp_source.xhtml">backendsCommon/CpuTensorHandle.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_2backends_2_i_backend_internal_8hpp_source.xhtml">armnn/backends/IBackendInternal.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_workload_factory_8hpp_source.xhtml">backendsCommon/WorkloadFactory.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_tensor_copy_utils_8hpp_source.xhtml">backendsCommon/test/TensorCopyUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_workload_test_utils_8hpp_source.xhtml">backendsCommon/test/WorkloadTestUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_tensor_helpers_8hpp_source.xhtml">test/TensorHelpers.hpp</a>&gt;</code><br />
</div>
<p><a href="_batch_normalization_test_impl_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a95e3411d80e0eac3844844c017f03861"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_batch_normalization_test_impl_8cpp.xhtml#a95e3411d80e0eac3844844c017f03861">BatchNormFloat32Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a95e3411d80e0eac3844844c017f03861"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a449a360cd864483064ae2991db8edcd8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_batch_normalization_test_impl_8cpp.xhtml#a449a360cd864483064ae2991db8edcd8">BatchNormFloat32NhwcTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a449a360cd864483064ae2991db8edcd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fe6b55e33196820f9bf4759647c17df"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; <a class="el" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a>, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_batch_normalization_test_impl_8cpp.xhtml#a0fe6b55e33196820f9bf4759647c17df">BatchNormFloat16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a0fe6b55e33196820f9bf4759647c17df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7615443ac0887d4c282f53f7e49d889c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; <a class="el" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a>, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_batch_normalization_test_impl_8cpp.xhtml#a7615443ac0887d4c282f53f7e49d889c">BatchNormFloat16NhwcTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a7615443ac0887d4c282f53f7e49d889c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae90e750efd98b6fb3db4bd586df3daff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_batch_normalization_test_impl_8cpp.xhtml#ae90e750efd98b6fb3db4bd586df3daff">BatchNormUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:ae90e750efd98b6fb3db4bd586df3daff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a168bb6829b7b1bd091ab3800a055f7ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_batch_normalization_test_impl_8cpp.xhtml#a168bb6829b7b1bd091ab3800a055f7ee">BatchNormUint8NhwcTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a168bb6829b7b1bd091ab3800a055f7ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3fcd011e2fba798b1d5c8d4d2ee9ad8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_batch_normalization_test_impl_8cpp.xhtml#aa3fcd011e2fba798b1d5c8d4d2ee9ad8">BatchNormInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:aa3fcd011e2fba798b1d5c8d4d2ee9ad8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40379f76fb69d26e8543dd1494674335"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_batch_normalization_test_impl_8cpp.xhtml#a40379f76fb69d26e8543dd1494674335">BatchNormInt16NhwcTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager)</td></tr>
<tr class="separator:a40379f76fb69d26e8543dd1494674335"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39988d3dc5c636fa49e8192f26d72554"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_batch_normalization_test_impl_8cpp.xhtml#a39988d3dc5c636fa49e8192f26d72554">CompareBatchNormTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;refWorkloadFactory)</td></tr>
<tr class="separator:a39988d3dc5c636fa49e8192f26d72554"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a7615443ac0887d4c282f53f7e49d889c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7615443ac0887d4c282f53f7e49d889c">&#9670;&nbsp;</a></span>BatchNormFloat16NhwcTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;<a class="el" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a>, 4&gt; BatchNormFloat16NhwcTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml#l00349">349</a> of file <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml">BatchNormalizationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="comment">// BatchSize: 1</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="comment">// Height: 3</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="comment">// Width: 2</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="comment">// Channels: 2</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputOutputShape{ 1, 3, 2, 2 };</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    std::vector&lt;float&gt; inputValues</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="comment">// Batch 0, Height 0, Width (2) x Channel (2)</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        1.f,  1.f,</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        4.f,  1.f,</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="comment">// Batch 0, Height 1, Width (2) x Channel (2)</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        4.f,  4.f,</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        2.f,  1.f,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="comment">// Batch 0, Height 2, Width (2) x Channel (2)</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        1.f, -2.f,</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        6.f,  4.f</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    };</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    std::vector&lt;float&gt; expectedOutputValues</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    {</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="comment">// Batch 0, Height 0, Width (2) x Channel (2)</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        1.f, 3.f,</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        4.f, 3.f,</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="comment">// Batch 0, Height 1, Width (2) x Channel (2)</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        4.f, 4.f,</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        2.f, 3.f,</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="comment">// Batch 0, Height 2, Width (2) x Channel (2)</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        1.f, 2.f,</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        6.f, 4.f</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    };</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keywordflow">return</span> BatchNormTestImpl&lt;armnn::DataType::Float16&gt;(</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        workloadFactory,</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        memoryManager,</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        inputOutputShape,</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        inputValues,</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        expectedOutputValues,</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        0.f,</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        0,</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0fe6b55e33196820f9bf4759647c17df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fe6b55e33196820f9bf4759647c17df">&#9670;&nbsp;</a></span>BatchNormFloat16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;<a class="el" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a>, 4&gt; BatchNormFloat16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml#l00303">303</a> of file <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml">BatchNormalizationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;{</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="comment">// BatchSize: 1</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="comment">// Channels: 2</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="comment">// Height: 3</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="comment">// Width: 2</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputOutputShape{ 1, 2, 3, 2 };</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    std::vector&lt;float&gt; inputValues</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    {</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="comment">// Batch 0, Channel 0, Height (3) x Width (2)</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;         1.f, 4.f,</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;         4.f, 2.f,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;         1.f, 6.f,</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="comment">// Batch 0, Channel 1, Height (3) x Width (2)</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;         1.f, 1.f,</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;         4.f, 1.f,</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        -2.f, 4.f</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    };</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    std::vector&lt;float&gt; expectedOutputValues</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    {</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="comment">// Batch 0, Channel 0, Height (3) x Width (2)</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        1.f, 4.f,</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        4.f, 2.f,</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        1.f, 6.f,</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="comment">// Batch 0, Channel 1, Height (3) x Width (2)</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        3.f, 3.f,</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        4.f, 3.f,</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        2.f, 4.f</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    };</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keywordflow">return</span> BatchNormTestImpl&lt;armnn::DataType::Float16&gt;(</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        workloadFactory,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        memoryManager,</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        inputOutputShape,</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        inputValues,</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        expectedOutputValues,</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        0.f,</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        0,</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a449a360cd864483064ae2991db8edcd8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a449a360cd864483064ae2991db8edcd8">&#9670;&nbsp;</a></span>BatchNormFloat32NhwcTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; BatchNormFloat32NhwcTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml#l00253">253</a> of file <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml">BatchNormalizationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;{</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="comment">// BatchSize: 1</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// Height: 3</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="comment">// Width: 2</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="comment">// Channels: 2</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputOutputShape{ 1, 3, 2, 2 };</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    std::vector&lt;float&gt; inputValues</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="comment">// Batch 0, Height 0, Width (2) x Channel (2)</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        1.f,  1.f,</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        4.f,  1.f,</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="comment">// Batch 0, Height 1, Width (2) x Channel (2)</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        4.f,  4.f,</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        2.f,  1.f,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="comment">// Batch 0, Height 2, Width (2) x Channel (2)</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        1.f, -2.f,</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        6.f,  4.f</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    };</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    std::vector&lt;float&gt; expectedOutputValues</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    {</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="comment">// Batch 0, Height 0, Width (2) x Channel (2)</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        1.f, 3.f,</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        4.f, 3.f,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="comment">// Batch 0, Height 1, Width (2) x Channel (2)</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        4.f, 4.f,</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        2.f, 3.f,</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="comment">// Batch 0, Height 2, Width (2) x Channel (2)</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        1.f, 2.f,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        6.f, 4.f</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    };</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">return</span> BatchNormTestImpl&lt;armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        workloadFactory,</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        memoryManager,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        inputOutputShape,</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        inputValues,</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        expectedOutputValues,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        0.f,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        0,</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a95e3411d80e0eac3844844c017f03861"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95e3411d80e0eac3844844c017f03861">&#9670;&nbsp;</a></span>BatchNormFloat32Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; BatchNormFloat32Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml#l00207">207</a> of file <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml">BatchNormalizationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">// BatchSize: 1</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="comment">// Channels: 2</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">// Height: 3</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">// Width: 2</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputOutputShape{ 1, 2, 3, 2 };</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    std::vector&lt;float&gt; inputValues</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="comment">// Batch 0, Channel 0, Height (3) x Width (2)</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;         1.f, 4.f,</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;         4.f, 2.f,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;         1.f, 6.f,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="comment">// Batch 0, Channel 1, Height (3) x Width (2)</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;         1.f, 1.f,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;         4.f, 1.f,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        -2.f, 4.f</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    };</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    std::vector&lt;float&gt; expectedOutputValues</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="comment">// Batch 0, Channel 0, Height (3) x Width (2)</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        1.f, 4.f,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        4.f, 2.f,</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        1.f, 6.f,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="comment">// Batch 0, Channel 1, Height (3) x Width (2)</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        3.f, 3.f,</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        4.f, 3.f,</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        2.f, 4.f</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    };</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">return</span> BatchNormTestImpl&lt;armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        workloadFactory,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        memoryManager,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        inputOutputShape,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        inputValues,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        expectedOutputValues,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        0.f,</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        0,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a40379f76fb69d26e8543dd1494674335"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40379f76fb69d26e8543dd1494674335">&#9670;&nbsp;</a></span>BatchNormInt16NhwcTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; BatchNormInt16NhwcTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml#l00537">537</a> of file <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml">BatchNormalizationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;{</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="comment">// BatchSize: 1</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="comment">// Height: 3</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="comment">// Width: 2</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="comment">// Channels: 2</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputOutputShape{ 1, 3, 2, 2 };</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    std::vector&lt;float&gt; inputValues</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    {</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <span class="comment">// Batch 0, Height 0, Width (2) x Channel (2)</span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        1.f,  1.f,</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        4.f,  1.f,</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="comment">// Batch 0, Height 1, Width (2) x Channel (2)</span></div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        4.f,  4.f,</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        2.f,  1.f,</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        <span class="comment">// Batch 0, Height 2, Width (2) x Channel (2)</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        1.f, -2.f,</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        6.f,  4.f</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    };</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    std::vector&lt;float&gt; expectedOutputValues</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    {</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        <span class="comment">// Batch 0, Height 0, Width (2) x Channel (2)</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        1.f, 3.f,</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        4.f, 3.f,</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="comment">// Batch 0, Height 1, Width (2) x Channel (2)</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        4.f, 4.f,</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        2.f, 3.f,</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        <span class="comment">// Batch 0, Height 2, Width (2) x Channel (2)</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        1.f, 2.f,</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        6.f, 4.f</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    };</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="keywordflow">return</span> BatchNormTestImpl&lt;armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        workloadFactory,</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        memoryManager,</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        inputOutputShape,</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        inputValues,</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        expectedOutputValues,</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        1.f / 20.f,</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        50,</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa3fcd011e2fba798b1d5c8d4d2ee9ad8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3fcd011e2fba798b1d5c8d4d2ee9ad8">&#9670;&nbsp;</a></span>BatchNormInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; BatchNormInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml#l00491">491</a> of file <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml">BatchNormalizationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;{</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="comment">// BatchSize: 1</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="comment">// Channels: 2</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="comment">// Height: 3</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="comment">// Width: 2</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputOutputShape{ 1, 2, 3, 2 };</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    std::vector&lt;float&gt; inputValues</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    {</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        <span class="comment">// Batch 0, Channel 0, Height (3) x Width (2)</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;         1.f, 4.f,</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;         4.f, 2.f,</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;         1.f, 6.f,</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="comment">// Batch 0, Channel 1, Height (3) x Width (2)</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;         1.f, 1.f,</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;         4.f, 1.f,</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        -2.f, 4.f</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    };</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    std::vector&lt;float&gt; expectedOutputValues</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    {</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        <span class="comment">// Batch 0, Channel 0, Height (3) x Width (2)</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        1.f, 4.f,</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        4.f, 2.f,</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        1.f, 6.f,</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="comment">// Batch 0, Channel 1, Height (3) x Width (2)</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        3.f, 3.f,</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        4.f, 3.f,</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        2.f, 4.f</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    };</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordflow">return</span> BatchNormTestImpl&lt;armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        workloadFactory,</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        memoryManager,</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        inputOutputShape,</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        inputValues,</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        expectedOutputValues,</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        1.f / 20.f,</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        50,</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a168bb6829b7b1bd091ab3800a055f7ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a168bb6829b7b1bd091ab3800a055f7ee">&#9670;&nbsp;</a></span>BatchNormUint8NhwcTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; BatchNormUint8NhwcTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml#l00445">445</a> of file <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml">BatchNormalizationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;{</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="comment">// BatchSize: 1</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="comment">// Height: 3</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="comment">// Width: 2</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="comment">// Channels: 2</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputOutputShape{ 1, 3, 2, 2 };</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    std::vector&lt;float&gt; inputValues</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    {</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="comment">// Batch 0, Height 0, Width (2) x Channel (2)</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        1.f,  1.f,</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        4.f,  1.f,</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <span class="comment">// Batch 0, Height 1, Width (2) x Channel (2)</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        4.f,  4.f,</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        2.f,  1.f,</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <span class="comment">// Batch 0, Height 2, Width (2) x Channel (2)</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        1.f, -2.f,</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        6.f,  4.f</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    };</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    std::vector&lt;float&gt; expectedOutputValues</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    {</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <span class="comment">// Batch 0, Height 0, Width (2) x Channel (2)</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        1.f, 3.f,</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        4.f, 3.f,</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="comment">// Batch 0, Height 1, Width (2) x Channel (2)</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        4.f, 4.f,</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        2.f, 3.f,</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        <span class="comment">// Batch 0, Height 2, Width (2) x Channel (2)</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        1.f, 2.f,</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        6.f, 4.f</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    };</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keywordflow">return</span> BatchNormTestImpl&lt;armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        workloadFactory,</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        memoryManager,</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        inputOutputShape, inputValues, expectedOutputValues,</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;         1.f/20.f, 50, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae90e750efd98b6fb3db4bd586df3daff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae90e750efd98b6fb3db4bd586df3daff">&#9670;&nbsp;</a></span>BatchNormUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; BatchNormUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml#l00399">399</a> of file <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml">BatchNormalizationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>
<div class="fragment"><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;{</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="comment">// BatchSize: 1</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="comment">// Channels: 2</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="comment">// Height: 3</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="comment">// Width: 2</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputOutputShape{ 1, 2, 3, 2 };</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    std::vector&lt;float&gt; inputValues</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    {</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="comment">// Batch 0, Channel 0, Height (3) x Width (2)</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;         1.f, 4.f,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;         4.f, 2.f,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;         1.f, 6.f,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="comment">// Batch 0, Channel 1, Height (3) x Width (2)</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;         1.f, 1.f,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;         4.f, 1.f,</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        -2.f, 4.f</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    };</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    std::vector&lt;float&gt; expectedOutputValues</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    {</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="comment">// Batch 0, Channel 0, Height (3) x Width (2)</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        1.f, 4.f,</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        4.f, 2.f,</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        1.f, 6.f,</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        <span class="comment">// Batch 0, Channel 1, Height (3) x Width (2)</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        3.f, 3.f,</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        4.f, 3.f,</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        2.f, 4.f</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    };</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordflow">return</span> BatchNormTestImpl&lt;armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        workloadFactory,</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        memoryManager,</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        inputOutputShape,</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        inputValues,</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        expectedOutputValues,</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        1.f / 20.f,</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        50,</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a39988d3dc5c636fa49e8192f26d72554"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39988d3dc5c636fa49e8192f26d72554">&#9670;&nbsp;</a></span>CompareBatchNormTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float,4&gt; CompareBatchNormTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>refWorkloadFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml#l00587">587</a> of file <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml">BatchNormalizationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00019">AllocateAndCopyDataToITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00014">CopyDataFromITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00009">CopyDataToITensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01225">IWorkloadFactory::CreateBatchNormalization()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00281">BatchNormalizationQueueDescriptor::m_Beta</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00631">BatchNormalizationDescriptor::m_Eps</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00282">BatchNormalizationQueueDescriptor::m_Gamma</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00279">BatchNormalizationQueueDescriptor::m_Mean</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00049">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>, and <a class="el" href="_workload_data_8hpp_source.xhtml#l00280">BatchNormalizationQueueDescriptor::m_Variance</a>.</p>
<div class="fragment"><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;{</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width     = 2;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height    = 3;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channels  = 5;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 3;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[]       = {batchSize, channels, height, width};</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> tensorShape[] = {channels};</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    inputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, shape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, shape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    tensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(1, tensorShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="keyword">auto</span> input = MakeRandomTensor&lt;float, 4&gt;(inputTensorInfo, 21312);</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <span class="keyword">auto</span> mean     = MakeRandomTensor&lt;float, 1&gt;(tensorInfo, 123);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="keyword">auto</span> variance = MakeRandomTensor&lt;float, 1&gt;(tensorInfo, 234, 0.0f);</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keyword">auto</span> beta     = MakeRandomTensor&lt;float, 1&gt;(tensorInfo, 123);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="keyword">auto</span> gamma    = MakeRandomTensor&lt;float, 1&gt;(tensorInfo, 345);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float,4&gt;</a> ret(outputTensorInfo);</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle  = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandleRef  = refWorkloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandleRef = refWorkloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <a class="code" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">armnn::BatchNormalizationQueueDescriptor</a> data;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">armnn::ScopedCpuTensorHandle</a> meanTensor(tensorInfo);</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">armnn::ScopedCpuTensorHandle</a> varianceTensor(tensorInfo);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">armnn::ScopedCpuTensorHandle</a> betaTensor(tensorInfo);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">armnn::ScopedCpuTensorHandle</a> gammaTensor(tensorInfo);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;meanTensor, &amp;mean[0]);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;varianceTensor, &amp;variance[0]);</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;betaTensor, &amp;beta[0]);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;gammaTensor, &amp;gamma[0]);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    data.<a class="code" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml#a40051a7aa82f25df43cc4244de04a7ec">m_Mean</a>             = &amp;meanTensor;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    data.<a class="code" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml#a8cd8696bb773a02714d3fc095794ec54">m_Variance</a>         = &amp;varianceTensor;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    data.<a class="code" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml#ad5f8f205ba69eb186688ca1c2aec207c">m_Beta</a>             = &amp;betaTensor;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    data.<a class="code" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml#afbe59e02a5464703b865ea1ccfff49fd">m_Gamma</a>            = &amp;gammaTensor;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a11c821c7524251004a72ed13c510853c">m_Eps</a> = 0.01f;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <a class="code" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">armnn::BatchNormalizationQueueDescriptor</a> refData = data;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> refInfo = info;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    SetWorkloadInput(refData, refInfo, 0, inputTensorInfo, inputHandleRef.get());</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    SetWorkloadOutput(refData, refInfo, 0, outputTensorInfo, outputHandleRef.get());</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#abe1e0d40e23195022c0bc10a8aab55ea">CreateBatchNormalization</a>(data, info);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workloadRef = refWorkloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#abe1e0d40e23195022c0bc10a8aab55ea">CreateBatchNormalization</a>(refData, refInfo);</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    inputHandleRef-&gt;Allocate();</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    outputHandleRef-&gt;Allocate();</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), &amp;input[0][0][0][0]);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandleRef.get(), &amp;input[0][0][0][0]);</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    workload-&gt;PostAllocationConfigure();</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    workloadRef-&gt;PostAllocationConfigure();</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    workloadRef-&gt;Execute();</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;ret.output[0][0][0][0], outputHandle.get());</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <a class="code" href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a>(&amp;ret.outputExpected[0][0][0][0], outputHandleRef.get());</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_abe1e0d40e23195022c0bc10a8aab55ea"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#abe1e0d40e23195022c0bc10a8aab55ea">armnn::IWorkloadFactory::CreateBatchNormalization</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateBatchNormalization(const BatchNormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01225">WorkloadFactory.cpp:1225</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_queue_descriptor_xhtml_afbe59e02a5464703b865ea1ccfff49fd"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml#afbe59e02a5464703b865ea1ccfff49fd">armnn::BatchNormalizationQueueDescriptor::m_Gamma</a></div><div class="ttdeci">const ConstCpuTensorHandle * m_Gamma</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00282">WorkloadData.hpp:282</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_queue_descriptor_xhtml_ad5f8f205ba69eb186688ca1c2aec207c"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml#ad5f8f205ba69eb186688ca1c2aec207c">armnn::BatchNormalizationQueueDescriptor::m_Beta</a></div><div class="ttdeci">const ConstCpuTensorHandle * m_Beta</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00281">WorkloadData.hpp:281</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_queue_descriptor_xhtml_a40051a7aa82f25df43cc4244de04a7ec"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml#a40051a7aa82f25df43cc4244de04a7ec">armnn::BatchNormalizationQueueDescriptor::m_Mean</a></div><div class="ttdeci">const ConstCpuTensorHandle * m_Mean</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00279">WorkloadData.hpp:279</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml_a11c821c7524251004a72ed13c510853c"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a11c821c7524251004a72ed13c510853c">armnn::BatchNormalizationDescriptor::m_Eps</a></div><div class="ttdeci">float m_Eps</div><div class="ttdoc">Value to add to the variance. Used to avoid dividing by zero. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00631">Descriptors.hpp:631</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_queue_descriptor_xhtml_a8cd8696bb773a02714d3fc095794ec54"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml#a8cd8696bb773a02714d3fc095794ec54">armnn::BatchNormalizationQueueDescriptor::m_Variance</a></div><div class="ttdeci">const ConstCpuTensorHandle * m_Variance</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00280">WorkloadData.hpp:280</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00049">WorkloadData.hpp:49</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_afaaca8c3f3a467d124bba44067d2afa8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a></div><div class="ttdeci">void AllocateAndCopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00019">TensorCopyUtils.cpp:19</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_a99b626c58a926dc7d6df78d22ec186c8"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#a99b626c58a926dc7d6df78d22ec186c8">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *memory, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a15c140be4ddceffee16436f009d3ed94"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">armnn::IWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_scoped_cpu_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_scoped_cpu_tensor_handle.xhtml">armnn::ScopedCpuTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_cpu_tensor_handle_8hpp_source.xhtml#l00106">CpuTensorHandle.hpp:106</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">armnn::BatchNormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00269">WorkloadData.hpp:269</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about inputs and outputs to a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00030">LayerTestResult.hpp:30</a></div></div>
<div class="ttc" id="_tensor_copy_utils_8cpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="_tensor_copy_utils_8cpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_99a30439342d160875b21dac3498ad7f.xhtml">layerTests</a></li><li class="navelem"><a class="el" href="_batch_normalization_test_impl_8cpp.xhtml">BatchNormalizationTestImpl.cpp</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:48 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
