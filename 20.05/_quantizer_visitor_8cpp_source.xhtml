<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/QuantizerVisitor.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_quantizer_visitor_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">QuantizerVisitor.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_quantizer_visitor_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_network_8hpp.xhtml">Network.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_network_quantizer_utils_8hpp.xhtml">NetworkQuantizerUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_quantizer_visitor_8hpp.xhtml">QuantizerVisitor.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_static_range_visitor_8hpp.xhtml">StaticRangeVisitor.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_polymorphic_downcast_8hpp.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a72d00eb366b367af08007d472d5edebb">   16</a></span>&#160;<a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a72d00eb366b367af08007d472d5edebb">QuantizerVisitor::QuantizerVisitor</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_range_tracker.xhtml">RangeTracker</a>&amp; rangeTracker,</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml">IQuantizationScheme</a>* quantizationScheme,</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                                   <span class="keywordtype">bool</span> preserveType)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    : m_Ranges(rangeTracker)</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    , m_QuantizedNetwork(<a class="code" href="classarmnn_1_1_i_network.xhtml">INetwork</a>::Create())</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    , m_QuantizationScheme(quantizationScheme)</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    , m_PreserveType(preserveType)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;}</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keywordtype">void</span> QuantizerVisitor::SetQuantizedInputConnections(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* srcLayer,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                                                    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* quantizedLayer)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(srcLayer);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; srcLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">GetNumInputSlots</a>(); i++)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a>&amp; srcInputSlot = srcLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(i);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a>* inputSlot = PolymorphicDowncast&lt;const InputSlot*&gt;(&amp;srcInputSlot);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(inputSlot);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a>* outputSlot = inputSlot-&gt;<a class="code" href="classarmnn_1_1_input_slot.xhtml#a9effd325a6d512a3f8ff4bd207d53255">GetConnectedOutputSlot</a>();</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(outputSlot);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIdx = outputSlot-&gt;<a class="code" href="classarmnn_1_1_output_slot.xhtml#a27545b353e48a739981d345b64bb9dc9">CalculateIndexOnOwner</a>();</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>&amp; layerToFind = outputSlot-&gt;<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7ddaf04177053a536f0e7be83a642bc6">GetOwningLayer</a>();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keyword">auto</span> found = m_OriginalToQuantizedGuidMap.find(layerToFind.<a class="code" href="classarmnn_1_1_layer.xhtml#a8dc12f0ee5b232d397bd18ced1a72a64">GetGuid</a>());</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">if</span> (found == m_OriginalToQuantizedGuidMap.end())</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="comment">// Error in graph traversal order</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Error in graph traversal&quot;</span>);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="comment">// Connect the slots in the quantized model</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* prevQuantizedLayer = m_QuantizedGuidToLayerMap[found-&gt;second];</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a>&amp; newInputSlot = quantizedLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(i);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">IOutputSlot</a>&amp; newOutputSlot = prevQuantizedLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(slotIdx);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        newOutputSlot.<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(newInputSlot);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="comment">// Fetch the min/max ranges that were computed earlier</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keyword">auto</span> range = m_Ranges.<a class="code" href="classarmnn_1_1_range_tracker.xhtml#a507bae23f59e94b4161886ebe663cdf4">GetRange</a>(layerToFind.<a class="code" href="classarmnn_1_1_layer.xhtml#a8dc12f0ee5b232d397bd18ced1a72a64">GetGuid</a>(), slotIdx);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9b8e5a95f8c061bbbcdb036915dcb61a">OffsetScalePair</a> qParams = m_QuantizationScheme-&gt;<a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml#a6a5561395e9693f02258b49dfcc009b4">ComputeScheme</a>(range.first, range.second);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="comment">// Set the quantization params</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>(outputSlot-&gt;<a class="code" href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">GetTensorInfo</a>());</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.SetDataType(m_QuantizationScheme-&gt;<a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml#ad23181f9f8fcc85758f62c49fc7ca23f">GetDataType</a>());</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.SetQuantizationOffset(qParams.second);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.SetQuantizationScale(qParams.first);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        newOutputSlot.<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> QuantizerVisitor::CreateQuantizedBias(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* srcLayer,</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; weights,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; biases,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                                  std::vector&lt;int32_t&gt;&amp; backing)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(srcLayer);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a>&amp; srcInputSlot = srcLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">auto</span> inputSlot = PolymorphicDowncast&lt;const InputSlot*&gt;(&amp;srcInputSlot);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(inputSlot);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a>* outputSlot = inputSlot-&gt;GetConnectedOutputSlot();</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(outputSlot);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIdx = outputSlot-&gt;<a class="code" href="classarmnn_1_1_output_slot.xhtml#a27545b353e48a739981d345b64bb9dc9">CalculateIndexOnOwner</a>();</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>&amp; layerToFind = outputSlot-&gt;<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7ddaf04177053a536f0e7be83a642bc6">GetOwningLayer</a>();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">auto</span> found = m_OriginalToQuantizedGuidMap.find(layerToFind.<a class="code" href="classarmnn_1_1_layer.xhtml#a8dc12f0ee5b232d397bd18ced1a72a64">GetGuid</a>());</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">if</span> (found == m_OriginalToQuantizedGuidMap.end())</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="comment">// Error in graph traversal order</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Error in graph traversal&quot;</span>);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">return</span> biases.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">// Fetch the min/max ranges that were computed earlier</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">auto</span> range = m_Ranges.<a class="code" href="classarmnn_1_1_range_tracker.xhtml#a507bae23f59e94b4161886ebe663cdf4">GetRange</a>(layerToFind.<a class="code" href="classarmnn_1_1_layer.xhtml#a8dc12f0ee5b232d397bd18ced1a72a64">GetGuid</a>(), slotIdx);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a9b8e5a95f8c061bbbcdb036915dcb61a">OffsetScalePair</a> qParams = m_QuantizationScheme-&gt;<a class="code" href="structarmnn_1_1_i_quantization_scheme.xhtml#a6a5561395e9693f02258b49dfcc009b4">ComputeScheme</a>(range.first, range.second);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// Get the quantization scale based on input and weight scale</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">float</span> scale = qParams.first * weights.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a>();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Set up quantized bias tensor info and allocate space</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> qInfo(biases.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>().GetInfo().GetShape(), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">DataType::Signed32</a>, scale, 0);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    backing.resize(biases.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>().GetInfo().GetNumElements());</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">// Convert values to int32</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; backing.size(); ++i)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordtype">float</span> fp32Value = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span>*<span class="keyword">&gt;</span>(biases.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>().GetMemoryArea())[i];</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        backing[i] = <a class="code" href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">boost::numeric_cast</a>&lt;int32_t&gt;(fp32Value * ( 1 / scale ));</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>(qInfo, backing);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keywordtype">void</span> QuantizerVisitor::RecordLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* srcLayer, <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* quantizedLayer)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    m_OriginalToQuantizedGuidMap.insert(std::make_pair(srcLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#afb5e65c770f6cee222db8af7581541a6">GetGuid</a>(), quantizedLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#afb5e65c770f6cee222db8af7581541a6">GetGuid</a>()));</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    m_QuantizedGuidToLayerMap.insert(std::make_pair(quantizedLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#afb5e65c770f6cee222db8af7581541a6">GetGuid</a>(), quantizedLayer));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a4abca3536debe2dac00f1d6a0b14a435">  118</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a4abca3536debe2dac00f1d6a0b14a435">QuantizerVisitor::VisitAbsLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a237f88794e504388160a87813b66b9e3">VisitElementwiseUnaryLayer</a>(layer, <a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a>(<a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>), name);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#af493528dec93f39f5081dbefb40bff75">  123</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#af493528dec93f39f5081dbefb40bff75">QuantizerVisitor::VisitActivationLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a>&amp; activationDescriptor,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                            <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddActivationLayer(activationDescriptor, name);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a7cb4ef1bc9588c4319144460c288022f">  132</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a7cb4ef1bc9588c4319144460c288022f">QuantizerVisitor::VisitAdditionLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddAdditionLayer(name);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a2482bba03a17e59a8ead45530e8efea5">  139</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a2482bba03a17e59a8ead45530e8efea5">QuantizerVisitor::VisitArgMinMaxLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a>&amp; argMinMaxDescriptor,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                           <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;{</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddArgMinMaxLayer(argMinMaxDescriptor, name);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a1532cb8f551812e784ccc14faae407b9">  148</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a1532cb8f551812e784ccc14faae407b9">QuantizerVisitor::VisitBatchNormalizationLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a>&amp; desc,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; mean,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; variance,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; beta,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; gamma,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                                    <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    std::vector&lt;uint8_t&gt; meanBacking;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> qMean = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(mean, meanBacking);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    std::vector&lt;uint8_t&gt; varianceBacking;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> qVariance = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(variance, varianceBacking);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    std::vector&lt;uint8_t&gt; betaBacking;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> qBeta = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(beta, betaBacking);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    std::vector&lt;uint8_t&gt; gammaBacking;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> qGamma = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(gamma, gammaBacking);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddBatchNormalizationLayer(desc,</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                                                                 qMean,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                                                                 qVariance,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                                                                 qBeta,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                                                                 qGamma,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                                                                 name);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#af5d09e03a578afa9c0bb8afd11c65485">  179</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#af5d09e03a578afa9c0bb8afd11c65485">QuantizerVisitor::VisitBatchToSpaceNdLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a>&amp; batchToSpaceNdDescriptor,</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddBatchToSpaceNdLayer(batchToSpaceNdDescriptor, name);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a6a1adf7bf81e5cbb74b4cc4e8946c653">  188</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a6a1adf7bf81e5cbb74b4cc4e8946c653">QuantizerVisitor::VisitComparisonLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a>&amp; comparisonDescriptor,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                            <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddComparisonLayer(comparisonDescriptor, name);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#afb527e0c7c30b56da911fee8c7b7a011">  197</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#afb527e0c7c30b56da911fee8c7b7a011">QuantizerVisitor::VisitConcatLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a>&amp; originsDescriptor,</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                        <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;{</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddConcatLayer(originsDescriptor, name);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#aeb652d74e4b3596e85b22c2d52144f73">  206</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#aeb652d74e4b3596e85b22c2d52144f73">QuantizerVisitor::VisitConstantLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; input,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                          <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;{</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    std::vector&lt;uint8_t&gt; inputBacking;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> qInput = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(input, inputBacking);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddConstantLayer(qInput, name);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#ac2f379ba77b06095e0c024e232ec1fd4">  217</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#ac2f379ba77b06095e0c024e232ec1fd4">QuantizerVisitor::VisitConvolution2dLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a>&amp; convolution2dDescriptor,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; weights,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; biases,</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                               <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;{</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    std::vector&lt;uint8_t&gt; weightsBacking;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> qWeights = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(weights, weightsBacking);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a> optionalQBiases;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    std::vector&lt;int32_t&gt; biasesBacking;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">if</span> (biases.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>())</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> qBiases = CreateQuantizedBias(layer, qWeights, biases, biasesBacking);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        optionalQBiases = <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>(qBiases);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    }</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddConvolution2dLayer(convolution2dDescriptor,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                                                            qWeights,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                                            optionalQBiases,</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                                                            name);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#ac0daac0e6ce49805580a8a50a8d3d514">  243</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#ac0daac0e6ce49805580a8a50a8d3d514">QuantizerVisitor::VisitDepthToSpaceLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">DepthToSpaceDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                              <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;{</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddDepthToSpaceLayer(descriptor, name);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;}</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a554e88817e6fd98645388873a108f868">  252</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a554e88817e6fd98645388873a108f868">QuantizerVisitor::VisitDepthwiseConvolution2dLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a>&amp; desc,</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; weights,</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; biases,</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                                        <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    std::vector&lt;uint8_t&gt; weightsBacking;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> qWeights = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(weights, weightsBacking);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a> optionalQBiases;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    std::vector&lt;int32_t&gt; biasesBacking;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">if</span> (biases.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>())</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> qBiases = CreateQuantizedBias(layer, qWeights, biases, biasesBacking);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        optionalQBiases = <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>(qBiases);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddDepthwiseConvolution2dLayer(desc,</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                                                                     qWeights,</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                                                                                     optionalQBiases,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                                                                     name);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;}</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a237f88794e504388160a87813b66b9e3">  278</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a237f88794e504388160a87813b66b9e3">QuantizerVisitor::VisitElementwiseUnaryLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a>&amp; elementwiseUnaryDescriptor,</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;{</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddElementwiseUnaryLayer(elementwiseUnaryDescriptor, name);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#abbdd655f9e0bec625369079ed97f1328">  287</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#abbdd655f9e0bec625369079ed97f1328">QuantizerVisitor::VisitFullyConnectedLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a>&amp; desc,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; weights,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; biases,</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">char</span> *name)</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    std::vector&lt;uint8_t&gt; weightsBacking;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> qWeights = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(weights, weightsBacking);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a> optionalQBiases;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    std::vector&lt;int32_t&gt; biasesBacking;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">if</span> (biases.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>())</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> qBiases = CreateQuantizedBias(layer, qWeights, biases, biasesBacking);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        optionalQBiases = <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>(qBiases);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    }</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddFullyConnectedLayer(desc,</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                                                             qWeights,</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                                                             optionalQBiases,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                                                             name);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a2ca539d734553e606c0134940e444298">  313</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a2ca539d734553e606c0134940e444298">QuantizerVisitor::VisitInputLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer, <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> <span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> *name)</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType = layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>();</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* inputLayer = m_QuantizedNetwork-&gt;AddInputLayer(<span class="keywordtype">id</span>, name);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">if</span> (m_PreserveType &amp;&amp; (dataType == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a> || dataType == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>))</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    {</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* quantizeLayer = m_QuantizedNetwork-&gt;AddQuantizeLayer();</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        inputLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(quantizeLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        inputLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>());</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        RecordLayer(layer, quantizeLayer);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    }</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    {</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        RecordLayer(layer, inputLayer);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    }</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;}</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#ac6da520014db9cd2d4bede451e37ca0a">  331</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#ac6da520014db9cd2d4bede451e37ca0a">QuantizerVisitor::VisitInstanceNormalizationLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                                                       <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;{</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddInstanceNormalizationLayer(descriptor, name);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;}</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#abe0c29cd370a84c3e669d28dda18afb7">  340</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#abe0c29cd370a84c3e669d28dda18afb7">QuantizerVisitor::VisitLogSoftmaxLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">LogSoftmaxDescriptor</a>&amp; logSoftmaxDescriptor,</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                                            <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddLogSoftmaxLayer(logSoftmaxDescriptor, name);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a0a2f55bda910ccf8816d2678b7c980b6">  349</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a0a2f55bda910ccf8816d2678b7c980b6">QuantizerVisitor::VisitMeanLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a>&amp; meanDescriptor,</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddMeanLayer(meanDescriptor, name);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a1c587861e672cedaedd1f32bbce44afc">  358</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a1c587861e672cedaedd1f32bbce44afc">QuantizerVisitor::VisitMultiplicationLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;{</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddMultiplicationLayer(name);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;}</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#ab0946e6e13740185d7b7939720f347f1">  366</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#ab0946e6e13740185d7b7939720f347f1">QuantizerVisitor::VisitNormalizationLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a>&amp; normalizationDescriptor,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                               <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;{</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddNormalizationLayer(normalizationDescriptor, name);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#ac75d60924c52b96ea6f9567fcfa2db10">  375</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#ac75d60924c52b96ea6f9567fcfa2db10">QuantizerVisitor::VisitOutputLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer, <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> <span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;{</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a> = layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">GetConnection</a>()-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>();</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&amp; dataType = info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>();</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* outputLayer = m_QuantizedNetwork-&gt;AddOutputLayer(<span class="keywordtype">id</span>, name);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordflow">if</span> (m_PreserveType  &amp;&amp; (dataType == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a> || dataType == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>))</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    {</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* dequantizeLayer = m_QuantizedNetwork-&gt;AddDequantizeLayer();</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        RecordLayer(layer, dequantizeLayer);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        SetQuantizedInputConnections(layer, dequantizeLayer);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        dequantizeLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(outputLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        dequantizeLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(info);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    }</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    {</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        RecordLayer(layer, outputLayer);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        SetQuantizedInputConnections(layer, outputLayer);</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    }</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a0b4b2e9b5578bf50197c6929a6a48071">  396</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a0b4b2e9b5578bf50197c6929a6a48071">QuantizerVisitor::VisitPadLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a>&amp; padDescriptor,</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                     <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;{</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddPadLayer(padDescriptor, name);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;}</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a8667c9d0c42575e31c7a630fea8c7256">  405</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a8667c9d0c42575e31c7a630fea8c7256">QuantizerVisitor::VisitPermuteLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a>&amp; permuteDescriptor,</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddPermuteLayer(permuteDescriptor, name);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;}</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#aaee763832ceb783dcffde56e1c1a6d93">  414</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#aaee763832ceb783dcffde56e1c1a6d93">QuantizerVisitor::VisitPooling2dLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a>&amp; pooling2dDescriptor,</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                                           <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;{</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddPooling2dLayer(pooling2dDescriptor, name);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;}</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a34f5745a60988b4a109ec213f8d0cb77">  423</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a34f5745a60988b4a109ec213f8d0cb77">QuantizerVisitor::VisitPreluLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                                       <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;{</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddPreluLayer(name);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;}</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a4a7f7f33591fd91e8fb1c08d06c0733a">  431</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a4a7f7f33591fd91e8fb1c08d06c0733a">QuantizerVisitor::VisitReshapeLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a>&amp; reshapeDescriptor,</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;{</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddReshapeLayer(reshapeDescriptor, name);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;}</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a5abbca55c908440acecfa6e0f921092d">  440</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a5abbca55c908440acecfa6e0f921092d">QuantizerVisitor::VisitResizeBilinearLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">ResizeBilinearDescriptor</a>&amp; resizeBilinearDescriptor,</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;{</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> resizeDescriptor;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">m_Method</a>       = <a class="code" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">ResizeMethod::Bilinear</a>;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">m_TargetWidth</a>  = resizeBilinearDescriptor.<a class="code" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">m_TargetWidth</a>;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">m_TargetHeight</a> = resizeBilinearDescriptor.<a class="code" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">m_TargetHeight</a>;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>   = resizeBilinearDescriptor.<a class="code" href="structarmnn_1_1_resize_bilinear_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a7eea0e93f066099f3549fef15881a4cb">VisitResizeLayer</a>(layer, resizeDescriptor, name);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;}</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a7eea0e93f066099f3549fef15881a4cb">  453</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a7eea0e93f066099f3549fef15881a4cb">QuantizerVisitor::VisitResizeLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a>&amp; resizeDescriptor,</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                                        <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;{</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddResizeLayer(resizeDescriptor, name);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a990bfe643729a7dedcc55da1f7d1b3bf">  462</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a990bfe643729a7dedcc55da1f7d1b3bf">QuantizerVisitor::VisitRsqrtLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;{</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a237f88794e504388160a87813b66b9e3">VisitElementwiseUnaryLayer</a>(layer, <a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a>(<a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>), name);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;}</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a20a228046c2aacd8664e50841af84e2b">  467</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a20a228046c2aacd8664e50841af84e2b">QuantizerVisitor::VisitSliceLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a>&amp; sliceDescriptor,</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                                       <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;{</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddSliceLayer(sliceDescriptor, name);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;}</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a98f34d2511f43324833060154cbdba8d">  476</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a98f34d2511f43324833060154cbdba8d">QuantizerVisitor::VisitSoftmaxLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a>&amp; softmaxDescriptor,</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;{</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddSoftmaxLayer(softmaxDescriptor, name);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;}</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div><div class="line"><a name="l00485"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a8e327cc6432697fd55d6b91e554360d9">  485</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a8e327cc6432697fd55d6b91e554360d9">QuantizerVisitor::VisitSpaceToBatchNdLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a>&amp; spaceToBatchNdDescriptor,</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;{</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddSpaceToBatchNdLayer(spaceToBatchNdDescriptor, name);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;}</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a2c416fbd39598732dd3c6255ceaf1b66">  494</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a2c416fbd39598732dd3c6255ceaf1b66">QuantizerVisitor::VisitSpaceToDepthLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a>&amp; spaceToDepthDescriptor,</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                                              <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddSpaceToDepthLayer(spaceToDepthDescriptor, name);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;}</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#afbea8aa2295f2ab71ea5bb64ccd47871">  503</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#afbea8aa2295f2ab71ea5bb64ccd47871">QuantizerVisitor::VisitSplitterLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_views_descriptor.xhtml">SplitterDescriptor</a>&amp; splitterDescriptor,</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                                          <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;{</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddSplitterLayer(splitterDescriptor, name);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;}</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a1b4325b20242a2db0922f68aea195d00">  512</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a1b4325b20242a2db0922f68aea195d00">QuantizerVisitor::VisitStackLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a>&amp; stackDescriptor,</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                                       <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;{</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddStackLayer(stackDescriptor, name);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;}</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div><div class="line"><a name="l00521"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a61b7aa0305e7c45a625f7835fa26b9b6">  521</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a61b7aa0305e7c45a625f7835fa26b9b6">QuantizerVisitor::VisitStridedSliceLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a>&amp; stridedSliceDescriptor,</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                                              <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;{</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddStridedSliceLayer(stridedSliceDescriptor, name);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;}</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#abffdcc9b528d64b510103f5b280e246e">  530</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#abffdcc9b528d64b510103f5b280e246e">QuantizerVisitor::VisitSubtractionLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;{</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddSubtractionLayer(name);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;}</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00538"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a9e7ddd6c869af052317c6de0df53c942">  538</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a9e7ddd6c869af052317c6de0df53c942">QuantizerVisitor::VisitTransposeConvolution2dLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; weights,</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; biases,</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                                                        <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;{</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="comment">// quantize weights</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    std::vector&lt;uint8_t&gt; weightsBacking;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> qWeights = <a class="code" href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">CreateQuantizedConst</a>(weights, weightsBacking);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <span class="comment">// quantize biases</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    std::vector&lt;int32_t&gt; biasesBacking;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a> optionalQBiases;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keywordflow">if</span> (biases.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>())</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    {</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> qBiases = CreateQuantizedBias(layer, qWeights, biases, biasesBacking);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        optionalQBiases = <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>(qBiases);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    }</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddTransposeConvolution2dLayer(descriptor,</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                                                                                     qWeights,</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                                                                                     optionalQBiases,</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                                                                                     name);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;}</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;</div><div class="line"><a name="l00566"></a><span class="lineno"><a class="line" href="classarmnn_1_1_quantizer_visitor.xhtml#a8c918592332c5e8339d43a9288350964">  566</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_quantizer_visitor.xhtml#a8c918592332c5e8339d43a9288350964">QuantizerVisitor::VisitTransposeLayer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a>&amp; transposeDescriptor,</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                                           <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;{</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* newLayer = m_QuantizedNetwork-&gt;AddTransposeLayer(transposeDescriptor, name);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    RecordLayer(layer, newLayer);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    SetQuantizedInputConnections(layer, newLayer);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;}</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;} <span class="comment">//namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a2ca539d734553e606c0134940e444298"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a2ca539d734553e606c0134940e444298">armnn::QuantizerVisitor::VisitInputLayer</a></div><div class="ttdeci">void VisitInputLayer(const IConnectableLayer *layer, LayerBindingId id, const char *name=nullptr) override</div><div class="ttdoc">Function that an InputLayer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00313">QuantizerVisitor.cpp:313</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9b8e5a95f8c061bbbcdb036915dcb61a"><div class="ttname"><a href="namespacearmnn.xhtml#a9b8e5a95f8c061bbbcdb036915dcb61a">armnn::OffsetScalePair</a></div><div class="ttdeci">std::pair&lt; float, int &gt; OffsetScalePair</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00016">NetworkQuantizationScheme.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a9e7ddd6c869af052317c6de0df53c942"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a9e7ddd6c869af052317c6de0df53c942">armnn::QuantizerVisitor::VisitTransposeConvolution2dLayer</a></div><div class="ttdeci">void VisitTransposeConvolution2dLayer(const IConnectableLayer *layer, const TransposeConvolution2dDescriptor &amp;descriptor, const ConstTensor &amp;weights, const Optional&lt; ConstTensor &gt; &amp;biases, const char *name=nullptr) override</div><div class="ttdoc">Function that a 2D transpose convolution layer should call back to when its Accept(ILayerVisitor&amp;) fu...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00538">QuantizerVisitor.cpp:538</a></div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml">armnn::ViewsDescriptor</a></div><div class="ttdoc">A ViewsDescriptor for the SplitterLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00198">Descriptors.hpp:198</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a72d00eb366b367af08007d472d5edebb"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a72d00eb366b367af08007d472d5edebb">armnn::QuantizerVisitor::QuantizerVisitor</a></div><div class="ttdeci">QuantizerVisitor(const RangeTracker &amp;rangeTracker, const IQuantizationScheme *quantizationScheme, bool preserveType=false)</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00016">QuantizerVisitor.cpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a9c2cba04b6d7ace4fc2a2436b82a5a63"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">armnn::IConnectableLayer::GetNumInputSlots</a></div><div class="ttdeci">virtual unsigned int GetNumInputSlots() const =0</div><div class="ttdoc">Returns the number of connectable input slots. </div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a990bfe643729a7dedcc55da1f7d1b3bf"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a990bfe643729a7dedcc55da1f7d1b3bf">armnn::QuantizerVisitor::VisitRsqrtLayer</a></div><div class="ttdeci">void VisitRsqrtLayer(const IConnectableLayer *, const char *name=nullptr) override</div><div class="ttdoc">Function a Reciprocal of square root layer should call back to when its Accept(ILayerVisitor&amp;) functi...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00462">QuantizerVisitor.cpp:462</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">armnn::TransposeConvolution2dDescriptor</a></div><div class="ttdoc">A TransposeConvolution2dDescriptor for the TransposeConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01151">Descriptors.hpp:1151</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a></div><div class="ttdoc">A ReshapeDescriptor for the ReshapeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00770">Descriptors.hpp:770</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a0b4b2e9b5578bf50197c6929a6a48071"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a0b4b2e9b5578bf50197c6929a6a48071">armnn::QuantizerVisitor::VisitPadLayer</a></div><div class="ttdeci">void VisitPadLayer(const IConnectableLayer *, const PadDescriptor &amp;, const char *name=nullptr) override</div><div class="ttdoc">Function a pad layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00396">QuantizerVisitor.cpp:396</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00053">Tensor.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a1c587861e672cedaedd1f32bbce44afc"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a1c587861e672cedaedd1f32bbce44afc">armnn::QuantizerVisitor::VisitMultiplicationLayer</a></div><div class="ttdeci">void VisitMultiplicationLayer(const IConnectableLayer *layer, const char *name=nullptr) override</div><div class="ttdoc">Function that a multiplication layer should call back to when its Accept(ILayerVisitor&amp;) function is ...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00358">QuantizerVisitor.cpp:358</a></div></div>
<div class="ttc" id="structarmnn_1_1_comparison_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_comparison_descriptor.xhtml">armnn::ComparisonDescriptor</a></div><div class="ttdoc">A ComparisonDescriptor for the ComparisonLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00070">Descriptors.hpp:70</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_bilinear_descriptor_xhtml_adcf5037208faac36c0788239a073f75c"><div class="ttname"><a href="structarmnn_1_1_resize_bilinear_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">armnn::ResizeBilinearDescriptor::m_TargetWidth</a></div><div class="ttdeci">uint32_t m_TargetWidth</div><div class="ttdoc">Target width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00724">Descriptors.hpp:724</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_ac6da520014db9cd2d4bede451e37ca0a"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#ac6da520014db9cd2d4bede451e37ca0a">armnn::QuantizerVisitor::VisitInstanceNormalizationLayer</a></div><div class="ttdeci">void VisitInstanceNormalizationLayer(const IConnectableLayer *layer, const InstanceNormalizationDescriptor &amp;instanceNormalizationDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that an instance normalization layer should call back to when its Accept(ILayerVisitor&amp;) fun...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00331">QuantizerVisitor.cpp:331</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_bilinear_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_resize_bilinear_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::ResizeBilinearDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00728">Descriptors.hpp:728</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml">armnn::RangeTracker</a></div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8hpp_source.xhtml#l00017">RangeTracker.hpp:17</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00400">Descriptors.hpp:400</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a7ddaf04177053a536f0e7be83a642bc6"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a7ddaf04177053a536f0e7be83a642bc6">armnn::OutputSlot::GetOwningLayer</a></div><div class="ttdeci">Layer &amp; GetOwningLayer() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00115">Layer.hpp:115</a></div></div>
<div class="ttc" id="_quantizer_visitor_8hpp_xhtml"><div class="ttname"><a href="_quantizer_visitor_8hpp.xhtml">QuantizerVisitor.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a4a7f7f33591fd91e8fb1c08d06c0733a"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a4a7f7f33591fd91e8fb1c08d06c0733a">armnn::QuantizerVisitor::VisitReshapeLayer</a></div><div class="ttdeci">void VisitReshapeLayer(const IConnectableLayer *layer, const ReshapeDescriptor &amp;reshapeDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a reshape layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00431">QuantizerVisitor.cpp:431</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a869254cb56968986a78a79e1d6d4a86b"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">armnn::ResizeDescriptor::m_Method</a></div><div class="ttdeci">ResizeMethod m_Method</div><div class="ttdoc">The Interpolation method to use (Bilinear, NearestNeighbor). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00759">Descriptors.hpp:759</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a7cb4ef1bc9588c4319144460c288022f"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a7cb4ef1bc9588c4319144460c288022f">armnn::QuantizerVisitor::VisitAdditionLayer</a></div><div class="ttdeci">void VisitAdditionLayer(const IConnectableLayer *layer, const char *name=nullptr) override</div><div class="ttdoc">Function that an addition layer should call back to when its Accept(ILayerVisitor&amp;) function is invok...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00132">QuantizerVisitor.cpp:132</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_abe0c29cd370a84c3e669d28dda18afb7"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#abe0c29cd370a84c3e669d28dda18afb7">armnn::QuantizerVisitor::VisitLogSoftmaxLayer</a></div><div class="ttdeci">void VisitLogSoftmaxLayer(const IConnectableLayer *layer, const LogSoftmaxDescriptor &amp;logSoftmaxDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a log softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is inv...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00340">QuantizerVisitor.cpp:340</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="_static_range_visitor_8hpp_xhtml"><div class="ttname"><a href="_static_range_visitor_8hpp.xhtml">StaticRangeVisitor.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a></div><div class="ttdoc">Main network class which provides the interface for building up a neural network. ...</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00105">INetwork.hpp:105</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a5abbca55c908440acecfa6e0f921092d"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a5abbca55c908440acecfa6e0f921092d">armnn::QuantizerVisitor::VisitResizeBilinearLayer</a></div><div class="ttdeci">void VisitResizeBilinearLayer(const IConnectableLayer *layer, const ResizeBilinearDescriptor &amp;resizeDesc, const char *name=nullptr) override</div><div class="ttdoc">Function that a resize bilinear layer should call back to when its Accept(ILayerVisitor&amp;) function is...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00440">QuantizerVisitor.cpp:440</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a61b7aa0305e7c45a625f7835fa26b9b6"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a61b7aa0305e7c45a625f7835fa26b9b6">armnn::QuantizerVisitor::VisitStridedSliceLayer</a></div><div class="ttdeci">void VisitStridedSliceLayer(const IConnectableLayer *layer, const StridedSliceDescriptor &amp;stridedSliceDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a strided slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoke...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00521">QuantizerVisitor.cpp:521</a></div></div>
<div class="ttc" id="classarmnn_1_1_input_slot_xhtml"><div class="ttname"><a href="classarmnn_1_1_input_slot.xhtml">armnn::InputSlot</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00041">Layer.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2020 ARM Limited. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00025">00_introduction.dox:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a1b4325b20242a2db0922f68aea195d00"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a1b4325b20242a2db0922f68aea195d00">armnn::QuantizerVisitor::VisitStackLayer</a></div><div class="ttdeci">void VisitStackLayer(const IConnectableLayer *layer, const StackDescriptor &amp;stackDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a stack layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00512">QuantizerVisitor.cpp:512</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::SpaceToDepthDescriptor</a></div><div class="ttdoc">A SpaceToDepthDescriptor for the SpaceToDepthLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00822">Descriptors.hpp:822</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_quantization_scheme_xhtml_a6a5561395e9693f02258b49dfcc009b4"><div class="ttname"><a href="structarmnn_1_1_i_quantization_scheme.xhtml#a6a5561395e9693f02258b49dfcc009b4">armnn::IQuantizationScheme::ComputeScheme</a></div><div class="ttdeci">virtual OffsetScalePair ComputeScheme(double min, double max) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a1532cb8f551812e784ccc14faae407b9"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a1532cb8f551812e784ccc14faae407b9">armnn::QuantizerVisitor::VisitBatchNormalizationLayer</a></div><div class="ttdeci">void VisitBatchNormalizationLayer(const IConnectableLayer *layer, const BatchNormalizationDescriptor &amp;desc, const ConstTensor &amp;mean, const ConstTensor &amp;variance, const ConstTensor &amp;beta, const ConstTensor &amp;gamma, const char *name=nullptr) override</div><div class="ttdoc">Function that a batch normalization layer should call back to when its Accept(ILayerVisitor&amp;) functio...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00148">QuantizerVisitor.cpp:148</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_abffdcc9b528d64b510103f5b280e246e"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#abffdcc9b528d64b510103f5b280e246e">armnn::QuantizerVisitor::VisitSubtractionLayer</a></div><div class="ttdeci">void VisitSubtractionLayer(const IConnectableLayer *layer, const char *name=nullptr) override</div><div class="ttdoc">Function a subtraction layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00530">QuantizerVisitor.cpp:530</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a></div><div class="ttdoc">A BatchToSpaceNdDescriptor for the BatchToSpaceNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00665">Descriptors.hpp:665</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00171">Types.hpp:171</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a8e327cc6432697fd55d6b91e554360d9"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a8e327cc6432697fd55d6b91e554360d9">armnn::QuantizerVisitor::VisitSpaceToBatchNdLayer</a></div><div class="ttdeci">void VisitSpaceToBatchNdLayer(const IConnectableLayer *layer, const SpaceToBatchNdDescriptor &amp;spaceToBatchNdDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a space to batch layer should call back to when its Accept(ILayerVisitor&amp;) function is invok...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00485">QuantizerVisitor.cpp:485</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a4abca3536debe2dac00f1d6a0b14a435"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a4abca3536debe2dac00f1d6a0b14a435">armnn::QuantizerVisitor::VisitAbsLayer</a></div><div class="ttdeci">void VisitAbsLayer(const IConnectableLayer *layer, const char *name=nullptr) override</div><div class="ttdoc">Functions to quantize the individual layers, overridden from ILayerVisitor. </div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00118">QuantizerVisitor.cpp:118</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a></div><div class="ttdoc">A ResizeDescriptor for the ResizeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00732">Descriptors.hpp:732</a></div></div>
<div class="ttc" id="classarmnn_1_1_range_tracker_xhtml_a507bae23f59e94b4161886ebe663cdf4"><div class="ttname"><a href="classarmnn_1_1_range_tracker.xhtml#a507bae23f59e94b4161886ebe663cdf4">armnn::RangeTracker::GetRange</a></div><div class="ttdeci">MinMaxRange GetRange(LayerGuid guid, unsigned int idx) const</div><div class="ttdoc">Retrieve the Range for a particular output slot on a particular layer. </div><div class="ttdef"><b>Definition:</b> <a href="_range_tracker_8cpp_source.xhtml#l00029">RangeTracker.cpp:29</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml">armnn::StackDescriptor</a></div><div class="ttdoc">A StackDescriptor for the StackLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00962">Descriptors.hpp:962</a></div></div>
<div class="ttc" id="_polymorphic_downcast_8hpp_xhtml"><div class="ttname"><a href="_polymorphic_downcast_8hpp.xhtml">PolymorphicDowncast.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a554e88817e6fd98645388873a108f868"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a554e88817e6fd98645388873a108f868">armnn::QuantizerVisitor::VisitDepthwiseConvolution2dLayer</a></div><div class="ttdeci">void VisitDepthwiseConvolution2dLayer(const IConnectableLayer *layer, const DepthwiseConvolution2dDescriptor &amp;desc, const ConstTensor &amp;weights, const Optional&lt; ConstTensor &gt; &amp;biases, const char *name=nullptr) override</div><div class="ttdoc">Function that a 2D depthwise convolution layer with biases should call back to when its Accept(ILayer...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00252">QuantizerVisitor.cpp:252</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a7eea0e93f066099f3549fef15881a4cb"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a7eea0e93f066099f3549fef15881a4cb">armnn::QuantizerVisitor::VisitResizeLayer</a></div><div class="ttdeci">void VisitResizeLayer(const IConnectableLayer *layer, const ResizeDescriptor &amp;resizeDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a resize layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00453">QuantizerVisitor.cpp:453</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a></div><div class="ttdoc">A PadDescriptor for the PadLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00913">Descriptors.hpp:913</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00032">Types.hpp:32</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a></div><div class="ttdoc">An output connection slot for a layer. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00037">INetwork.hpp:37</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a></div><div class="ttdoc">An ArgMinMaxDescriptor for ArgMinMaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00051">Descriptors.hpp:51</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a047ca888c43bd7fb5702853bf72410d0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">armnn::TensorInfo::GetQuantizationScale</a></div><div class="ttdeci">float GetQuantizationScale() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00248">Tensor.cpp:248</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00095">Tensor.hpp:95</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml">armnn::OriginsDescriptor</a></div><div class="ttdoc">An OriginsDescriptor for the ConcatLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00155">Descriptors.hpp:155</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a></div><div class="ttdoc">A FullyConnectedDescriptor for the FullyConnectedLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00381">Descriptors.hpp:381</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_afb5e65c770f6cee222db8af7581541a6"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#afb5e65c770f6cee222db8af7581541a6">armnn::IConnectableLayer::GetGuid</a></div><div class="ttdeci">virtual LayerGuid GetGuid() const =0</div><div class="ttdoc">Returns the unique id of the layer. </div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a8c918592332c5e8339d43a9288350964"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a8c918592332c5e8339d43a9288350964">armnn::QuantizerVisitor::VisitTransposeLayer</a></div><div class="ttdeci">void VisitTransposeLayer(const IConnectableLayer *layer, const TransposeDescriptor &amp;descriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a transpose layer should call back to when its Accept(ILayerVisitor&amp;) function is invok...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00566">QuantizerVisitor.cpp:566</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00199">Tensor.hpp:199</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_ac0daac0e6ce49805580a8a50a8d3d514"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#ac0daac0e6ce49805580a8a50a8d3d514">armnn::QuantizerVisitor::VisitDepthToSpaceLayer</a></div><div class="ttdeci">void VisitDepthToSpaceLayer(const IConnectableLayer *layer, const DepthToSpaceDescriptor &amp;depthToSpaceDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a depth to space layer should call back to when its Accept(ILayerVisitor&amp;) function is invok...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00243">QuantizerVisitor.cpp:243</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_adcf5037208faac36c0788239a073f75c"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">armnn::ResizeDescriptor::m_TargetWidth</a></div><div class="ttdeci">uint32_t m_TargetWidth</div><div class="ttdoc">Target width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00754">Descriptors.hpp:754</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_afb527e0c7c30b56da911fee8c7b7a011"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#afb527e0c7c30b56da911fee8c7b7a011">armnn::QuantizerVisitor::VisitConcatLayer</a></div><div class="ttdeci">void VisitConcatLayer(const IConnectableLayer *layer, const OriginsDescriptor &amp;originsDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a concat layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00197">QuantizerVisitor.cpp:197</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml">armnn::OutputSlot</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00083">Layer.hpp:83</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_input_slot_xhtml_a9effd325a6d512a3f8ff4bd207d53255"><div class="ttname"><a href="classarmnn_1_1_input_slot.xhtml#a9effd325a6d512a3f8ff4bd207d53255">armnn::InputSlot::GetConnectedOutputSlot</a></div><div class="ttdeci">const OutputSlot * GetConnectedOutputSlot() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00055">Layer.hpp:55</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a37fa39012e90d568df7f774cd6d1e956"><div class="ttname"><a href="namespacearmnn.xhtml#a37fa39012e90d568df7f774cd6d1e956">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00033">NumericCast.hpp:33</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_ac2f379ba77b06095e0c024e232ec1fd4"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#ac2f379ba77b06095e0c024e232ec1fd4">armnn::QuantizerVisitor::VisitConvolution2dLayer</a></div><div class="ttdeci">void VisitConvolution2dLayer(const IConnectableLayer *layer, const Convolution2dDescriptor &amp;convolution2dDescriptor, const ConstTensor &amp;weights, const Optional&lt; ConstTensor &gt; &amp;biases, const char *name=nullptr) override</div><div class="ttdoc">Function that a 2D convolution layer should call back to when its Accept(ILayerVisitor&amp;) function is ...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00217">QuantizerVisitor.cpp:217</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a8667c9d0c42575e31c7a630fea8c7256"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a8667c9d0c42575e31c7a630fea8c7256">armnn::QuantizerVisitor::VisitPermuteLayer</a></div><div class="ttdeci">void VisitPermuteLayer(const IConnectableLayer *layer, const PermuteDescriptor &amp;permuteDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a permute layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00405">QuantizerVisitor.cpp:405</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00020">Descriptors.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a8aeddebdcf02e1832b22203c08a6b678"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">armnn::BaseTensor::GetInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00167">Tensor.hpp:167</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_bilinear_descriptor_xhtml_a46c3fa15c46fb0d1dcdc24d0ea5cb5cd"><div class="ttname"><a href="structarmnn_1_1_resize_bilinear_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">armnn::ResizeBilinearDescriptor::m_TargetHeight</a></div><div class="ttdeci">uint32_t m_TargetHeight</div><div class="ttdoc">Target height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00726">Descriptors.hpp:726</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a46c3fa15c46fb0d1dcdc24d0ea5cb5cd"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">armnn::ResizeDescriptor::m_TargetHeight</a></div><div class="ttdeci">uint32_t m_TargetHeight</div><div class="ttdoc">Target height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00756">Descriptors.hpp:756</a></div></div>
<div class="ttc" id="structarmnn_1_1_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_slice_descriptor.xhtml">armnn::SliceDescriptor</a></div><div class="ttdoc">A SliceDescriptor for the SliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00939">Descriptors.hpp:939</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a></div><div class="ttdoc">A SpaceToBatchNdDescriptor for the SpaceToBatchNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00790">Descriptors.hpp:790</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_af493528dec93f39f5081dbefb40bff75"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#af493528dec93f39f5081dbefb40bff75">armnn::QuantizerVisitor::VisitActivationLayer</a></div><div class="ttdeci">void VisitActivationLayer(const IConnectableLayer *layer, const ActivationDescriptor &amp;activationDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that an activation layer should call back to when its Accept(ILayerVisitor&amp;) function is inv...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00123">QuantizerVisitor.cpp:123</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a6a1adf7bf81e5cbb74b4cc4e8946c653"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a6a1adf7bf81e5cbb74b4cc4e8946c653">armnn::QuantizerVisitor::VisitComparisonLayer</a></div><div class="ttdeci">void VisitComparisonLayer(const IConnectableLayer *layer, const ComparisonDescriptor &amp;comparisonDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a Comparison layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00188">QuantizerVisitor.cpp:188</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_quantization_scheme_xhtml_ad23181f9f8fcc85758f62c49fc7ca23f"><div class="ttname"><a href="structarmnn_1_1_i_quantization_scheme.xhtml#ad23181f9f8fcc85758f62c49fc7ca23f">armnn::IQuantizationScheme::GetDataType</a></div><div class="ttdeci">virtual DataType GetDataType() const =0</div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">armnn::ElementwiseUnaryDescriptor</a></div><div class="ttdoc">A ElementwiseUnaryDescriptor for the ElementwiseUnaryLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00090">Descriptors.hpp:90</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a98f34d2511f43324833060154cbdba8d"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a98f34d2511f43324833060154cbdba8d">armnn::QuantizerVisitor::VisitSoftmaxLayer</a></div><div class="ttdeci">void VisitSoftmaxLayer(const IConnectableLayer *layer, const SoftmaxDescriptor &amp;softmaxDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a softmax layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00476">QuantizerVisitor.cpp:476</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a0a2f55bda910ccf8816d2678b7c980b6"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a0a2f55bda910ccf8816d2678b7c980b6">armnn::QuantizerVisitor::VisitMeanLayer</a></div><div class="ttdeci">void VisitMeanLayer(const IConnectableLayer *layer, const MeanDescriptor &amp;meanDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a Mean layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00349">QuantizerVisitor.cpp:349</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a2482bba03a17e59a8ead45530e8efea5"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a2482bba03a17e59a8ead45530e8efea5">armnn::QuantizerVisitor::VisitArgMinMaxLayer</a></div><div class="ttdeci">void VisitArgMinMaxLayer(const IConnectableLayer *layer, const ArgMinMaxDescriptor &amp;argMinMaxDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that an arg min max layer should call back to when its Accept(ILayerVisitor&amp;) function is in...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00139">QuantizerVisitor.cpp:139</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f"><div class="ttname"><a href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::ResizeMethod::Bilinear</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a237f88794e504388160a87813b66b9e3"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a237f88794e504388160a87813b66b9e3">armnn::QuantizerVisitor::VisitElementwiseUnaryLayer</a></div><div class="ttdeci">void VisitElementwiseUnaryLayer(const IConnectableLayer *layer, const ElementwiseUnaryDescriptor &amp;elementwiseUnaryDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a ElementwiseUnary layer should call back to when its Accept(ILayerVisitor&amp;) function is inv...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00278">QuantizerVisitor.cpp:278</a></div></div>
<div class="ttc" id="_network_8hpp_xhtml"><div class="ttname"><a href="_network_8hpp.xhtml">Network.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="structarmnn_1_1_mean_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a></div><div class="ttdoc">A MeanDescriptor for the MeanLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00889">Descriptors.hpp:889</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_input_slot_xhtml_a81fbf6103761e55061b62ba989b00f10"><div class="ttname"><a href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">armnn::IInputSlot::GetConnection</a></div><div class="ttdeci">virtual const IOutputSlot * GetConnection() const =0</div></div>
<div class="ttc" id="structarmnn_1_1_i_quantization_scheme_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_quantization_scheme.xhtml">armnn::IQuantizationScheme</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_quantization_scheme_8hpp_source.xhtml#l00018">NetworkQuantizationScheme.hpp:18</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a></div><div class="ttdoc">A TransposeDescriptor for the TransposeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01195">Descriptors.hpp:1195</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a></div><div class="ttdoc">A StridedSliceDescriptor for the StridedSliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01014">Descriptors.hpp:1014</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_aeb652d74e4b3596e85b22c2d52144f73"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#aeb652d74e4b3596e85b22c2d52144f73">armnn::QuantizerVisitor::VisitConstantLayer</a></div><div class="ttdeci">void VisitConstantLayer(const IConnectableLayer *layer, const ConstTensor &amp;input, const char *name=nullptr) override</div><div class="ttdoc">Function a layer with no inputs and a single output, which always corresponds to the passed in consta...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00206">QuantizerVisitor.cpp:206</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a9943775a364fc4ab53b85ac88f311886"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">armnn::IOutputSlot::GetTensorInfo</a></div><div class="ttdeci">virtual const TensorInfo &amp; GetTensorInfo() const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a2c416fbd39598732dd3c6255ceaf1b66"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a2c416fbd39598732dd3c6255ceaf1b66">armnn::QuantizerVisitor::VisitSpaceToDepthLayer</a></div><div class="ttdeci">void VisitSpaceToDepthLayer(const IConnectableLayer *layer, const SpaceToDepthDescriptor &amp;spaceToDepthDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function a space to depth layer should call back to when its Accept(ILayerVisitor&amp;) function is invok...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00494">QuantizerVisitor.cpp:494</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_af5d09e03a578afa9c0bb8afd11c65485"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#af5d09e03a578afa9c0bb8afd11c65485">armnn::QuantizerVisitor::VisitBatchToSpaceNdLayer</a></div><div class="ttdeci">void VisitBatchToSpaceNdLayer(const IConnectableLayer *layer, const BatchToSpaceNdDescriptor &amp;batchToSpaceNdDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a batch to space ND layer should call back to when its Accept(ILayerVisitor&amp;) function ...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00179">QuantizerVisitor.cpp:179</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00321">Descriptors.hpp:321</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a310dd804fd70eadb1e8854325e63f0bd"><div class="ttname"><a href="namespacearmnn.xhtml#a310dd804fd70eadb1e8854325e63f0bd">armnn::CreateQuantizedConst</a></div><div class="ttdeci">ConstTensor CreateQuantizedConst(const ConstTensor &amp;tensor, std::vector&lt; uint8_t &gt; &amp;backing)</div><div class="ttdef"><b>Definition:</b> <a href="_network_quantizer_utils_8cpp_source.xhtml#l00015">NetworkQuantizerUtils.cpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a></div><div class="ttdoc">A NormalizationDescriptor for the NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00559">Descriptors.hpp:559</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a20a228046c2aacd8664e50841af84e2b"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a20a228046c2aacd8664e50841af84e2b">armnn::QuantizerVisitor::VisitSliceLayer</a></div><div class="ttdeci">void VisitSliceLayer(const IConnectableLayer *layer, const SliceDescriptor &amp;sliceDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a slice layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00467">QuantizerVisitor.cpp:467</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_ac75d60924c52b96ea6f9567fcfa2db10"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#ac75d60924c52b96ea6f9567fcfa2db10">armnn::QuantizerVisitor::VisitOutputLayer</a></div><div class="ttdeci">void VisitOutputLayer(const IConnectableLayer *layer, LayerBindingId id, const char *name=nullptr) override</div><div class="ttdoc">Function an output layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00375">QuantizerVisitor.cpp:375</a></div></div>
<div class="ttc" id="_network_quantizer_utils_8hpp_xhtml"><div class="ttname"><a href="_network_quantizer_utils_8hpp.xhtml">NetworkQuantizerUtils.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::ResizeDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00761">Descriptors.hpp:761</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml">armnn::InstanceNormalizationDescriptor</a></div><div class="ttdoc">An InstanceNormalizationDescriptor for InstanceNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00637">Descriptors.hpp:637</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_bilinear_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_bilinear_descriptor.xhtml">armnn::ResizeBilinearDescriptor</a></div><div class="ttdoc">A ResizeBilinearDescriptor for the ResizeBilinearLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00715">Descriptors.hpp:715</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ada2ad7d1caeeb4ef6195c8925fad6a65"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">armnn::OutputSlot::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00063">Layer.cpp:63</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a></div><div class="ttdoc">A SoftmaxDescriptor for the SoftmaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00131">Descriptors.hpp:131</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_a34f5745a60988b4a109ec213f8d0cb77"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#a34f5745a60988b4a109ec213f8d0cb77">armnn::QuantizerVisitor::VisitPreluLayer</a></div><div class="ttdeci">void VisitPreluLayer(const IConnectableLayer *layer, const char *name=nullptr) override</div><div class="ttdoc">Function that a PReLU activation layer should call back to when its Accept(ILayerVisitor&amp;) function i...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00423">QuantizerVisitor.cpp:423</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_ab0946e6e13740185d7b7939720f347f1"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#ab0946e6e13740185d7b7939720f347f1">armnn::QuantizerVisitor::VisitNormalizationLayer</a></div><div class="ttdeci">void VisitNormalizationLayer(const IConnectableLayer *layer, const NormalizationDescriptor &amp;normalizationDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a normalization layer should call back to when its Accept(ILayerVisitor&amp;) function is i...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00366">QuantizerVisitor.cpp:366</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_input_slot_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_input_slot.xhtml">armnn::IInputSlot</a></div><div class="ttdoc">An input connection slot for a layer. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00024">INetwork.hpp:24</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a></div><div class="ttdoc">A DepthwiseConvolution2dDescriptor for the DepthwiseConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00452">Descriptors.hpp:452</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00209">Layer.hpp:209</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a></div><div class="ttdoc">A BatchNormalizationDescriptor for the BatchNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00618">Descriptors.hpp:618</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_aaee763832ceb783dcffde56e1c1a6d93"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#aaee763832ceb783dcffde56e1c1a6d93">armnn::QuantizerVisitor::VisitPooling2dLayer</a></div><div class="ttdeci">void VisitPooling2dLayer(const IConnectableLayer *layer, const Pooling2dDescriptor &amp;pooling2dDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a pooling layer should call back to when its Accept(ILayerVisitor&amp;) function is invoked...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00414">QuantizerVisitor.cpp:414</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a></div><div class="ttdoc">A PermuteDescriptor for the PermuteLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00110">Descriptors.hpp:110</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_abbdd655f9e0bec625369079ed97f1328"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#abbdd655f9e0bec625369079ed97f1328">armnn::QuantizerVisitor::VisitFullyConnectedLayer</a></div><div class="ttdeci">void VisitFullyConnectedLayer(const IConnectableLayer *layer, const FullyConnectedDescriptor &amp;desc, const ConstTensor &amp;weights, const Optional&lt; ConstTensor &gt; &amp;biases, const char *name=nullptr) override</div><div class="ttdoc">Function that a fully connected layer should call back to when its Accept(ILayerVisitor&amp;) function is...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00287">QuantizerVisitor.cpp:287</a></div></div>
<div class="ttc" id="classarmnn_1_1_quantizer_visitor_xhtml_afbea8aa2295f2ab71ea5bb64ccd47871"><div class="ttname"><a href="classarmnn_1_1_quantizer_visitor.xhtml#afbea8aa2295f2ab71ea5bb64ccd47871">armnn::QuantizerVisitor::VisitSplitterLayer</a></div><div class="ttdeci">void VisitSplitterLayer(const IConnectableLayer *layer, const SplitterDescriptor &amp;splitterDescriptor, const char *name=nullptr) override</div><div class="ttdoc">Function that a splitter layer should call back to when its Accept(ILayerVisitor&amp;) function is invoke...</div><div class="ttdef"><b>Definition:</b> <a href="_quantizer_visitor_8cpp_source.xhtml#l00503">QuantizerVisitor.cpp:503</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a8dc12f0ee5b232d397bd18ced1a72a64"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a8dc12f0ee5b232d397bd18ced1a72a64">armnn::Layer::GetGuid</a></div><div class="ttdeci">LayerGuid GetGuid() const final</div><div class="ttdoc">Returns the unique id of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00316">Layer.hpp:316</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a27545b353e48a739981d345b64bb9dc9"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a27545b353e48a739981d345b64bb9dc9">armnn::OutputSlot::CalculateIndexOnOwner</a></div><div class="ttdeci">unsigned int CalculateIndexOnOwner() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00126">Layer.cpp:126</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_quantizer_visitor_8cpp.xhtml">QuantizerVisitor.cpp</a></li>
    <li class="footer">Generated on Fri May 29 2020 10:20:41 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
