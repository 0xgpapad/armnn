<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: Member List</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classsdb_1_1_sample_dynamic_workload_factory.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">SampleDynamicWorkloadFactory Member List</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is the complete list of members for <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a>, including all inherited members.</p>
<table class="directory">
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a54a596adc0162c80f33a6cda4f33a6ef">AfterWorkloadsCreated</a>()</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">CreateActivation</a>(const ActivationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a73ac5e3f91727655f742643013215a2b">CreateAddition</a>(const armnn::AdditionQueueDescriptor &amp;descriptor, const armnn::WorkloadInfo &amp;info) const override</td><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac47803c9faacfb7c10219253b99f61ca">CreateArgMinMax</a>(const ArgMinMaxQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#abe1e0d40e23195022c0bc10a8aab55ea">CreateBatchNormalization</a>(const BatchNormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af00ce13ef7dabd17cc4186d0a4991757">CreateBatchToSpaceNd</a>(const BatchToSpaceNdQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a89d2e69fd045ebe42e4a7bc17585d47e">CreateCast</a>(const CastQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a90198d300d6a957ad32c9b7f6d9ba143">CreateChannelShuffle</a>(const ChannelShuffleQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3fa12033e9be37c529ac54a83ab43b36">CreateComparison</a>(const ComparisonQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a32bb8d6cf5fc028bf501252767c08b21">CreateConcat</a>(const ConcatQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a963bd7acce29a83d96daeb2cea34f2f7">CreateConstant</a>(const ConstantQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af8ecac7ffd75e39c5a651932c5eaa8d2">CreateConvertBf16ToFp32</a>(const ConvertBf16ToFp32QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a83e0a21747c1ce29b2083c1e3b1d88af">CreateConvertFp16ToFp32</a>(const ConvertFp16ToFp32QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a147654e5d9af7cec3ecd957c6bd4161e">CreateConvertFp32ToBf16</a>(const ConvertFp32ToBf16QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2b414a001b6b31d00bfe4056fd6740c5">CreateConvertFp32ToFp16</a>(const ConvertFp32ToFp16QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2184995027cd2c9f9980206de9658855">CreateConvolution2d</a>(const Convolution2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2120193449bfdb913edb0bf2719c33e4">CreateConvolution3d</a>(const Convolution3dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a00346a3754d9411bba2e29dc1f996ac6">CreateDebug</a>(const DebugQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3c3a47828ee252dca111605c9be4b072">CreateDepthToSpace</a>(const DepthToSpaceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#accb9759dfd2880efe0f8d2705ddee448">CreateDepthwiseConvolution2d</a>(const DepthwiseConvolution2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3243806bf6c89df8952cc0a3601e538b">CreateDequantize</a>(const DequantizeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ad0da07faa15302377aa97be89c57677c">CreateDetectionPostProcess</a>(const DetectionPostProcessQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a20bb773c7fd6253418bdedac1312cd19">CreateDivision</a>(const DivisionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a12d2c4e0f0b0d6b36d8a3e14bf69f9e4">CreateElementwiseUnary</a>(const ElementwiseUnaryQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a42581f3d1c22e64b7f3676ea20acab0e">CreateFakeQuantization</a>(const FakeQuantizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a40c882d6ffadc328ab14502b16d5e90c">CreateFill</a>(const FillQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa1a45333dc35cb5ba9ab71fca4f359e4">CreateFloor</a>(const FloorQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a1c193739520e08f686b347ff795ad2fe">CreateFullyConnected</a>(const FullyConnectedQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a91fe56cae7e970d90f6e7f54427e7d44">CreateGather</a>(const GatherQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a3e7b63e791ca559838c81aec0e18fb46">CreateInput</a>(const armnn::InputQueueDescriptor &amp;descriptor, const armnn::WorkloadInfo &amp;info) const override</td><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a96a3123d8a8290b01582d955cdcd75d5">CreateInstanceNormalization</a>(const InstanceNormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3c86f886e36ce943f1ebc241a37f0413">CreateL2Normalization</a>(const L2NormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a5f1d0ed7b67cd7fefa421d5fd1971d62">CreateLogicalBinary</a>(const LogicalBinaryQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a867b966277008b4bfb04326adb7a83b7">CreateLogicalUnary</a>(const ElementwiseUnaryQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#adbdc0563cc7d8b6c1e3c2fb6f13871bf">CreateLogSoftmax</a>(const LogSoftmaxQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab6bd7aaf685d4e956d780f8655a6f174">CreateLstm</a>(const LstmQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3fe27b35296a25984ab97319fd9a13d6">CreateMaximum</a>(const MaximumQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac63f8f12f80efbe37b789d1540649470">CreateMean</a>(const MeanQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a87bf54bcdc865fd5d4f86194b3899d09">CreateMemCopy</a>(const MemCopyQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af0c99a5e2a6e4a67fec8b8c5906a3552">CreateMemImport</a>(const MemImportQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#acc3239cb7dd9434551a70d8534387069">CreateMerge</a>(const MergeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a8851ca32bea910cf9376d05527e3dbef">CreateMinimum</a>(const MinimumQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a756955d7436dd8f6e63cdf6367eb1694">CreateMultiplication</a>(const MultiplicationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a185c215631e1b01a6d41232410de4c46">CreateNormalization</a>(const NormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#ac8ea7b9d330f8828aedb2374914808c3">CreateOutput</a>(const armnn::OutputQueueDescriptor &amp;descriptor, const armnn::WorkloadInfo &amp;info) const override</td><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab0c956e4a638d0a2777ecb71953f7e27">CreatePad</a>(const PadQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2dcee0bc4bbae1f745324aed0f841a0a">CreatePermute</a>(const PermuteQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a6e95afd9a55700cbf6f9e8db8089f2f2">CreatePooling2d</a>(const Pooling2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a012306477c38a533edd29c422227cd8c">CreatePreCompiled</a>(const PreCompiledQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#adf4a93f605e4e7dad6aee0b4d2159171">CreatePrelu</a>(const PreluQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab17bf35d906f8daad42be0a0799c72ab">CreateQLstm</a>(const QLstmQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a1942c254ba89d17803e5a636aa927d90">CreateQuantize</a>(const QuantizeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab5ceda49651dcd53fb7eb05658b5a0cb">CreateQuantizedLstm</a>(const QuantizedLstmQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15e6119396b9db114f07302da82f8429">CreateRank</a>(const RankQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aeb2f7d06ee044f9ead67dd51889f62ec">CreateReduce</a>(const ReduceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a4f9d9c79a100a0d057027d8524373962">CreateReshape</a>(const ReshapeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a84377c94a59c589dbf419f838c4b9119">CreateResize</a>(const ResizeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9f42b742bc1d5a2cdfca9c627ede45a3">CreateShape</a>(const ShapeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a86658e2fc02a32acd4de20ef92242347">CreateSlice</a>(const SliceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a8a843d44d2e81df87e414df3b3e688de">CreateSoftmax</a>(const SoftmaxQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a44e7aebc021646becc3f32722e22553e">CreateSpaceToBatchNd</a>(const SpaceToBatchNdQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9bdc3801e1e964046730d49c0e11d1ce">CreateSpaceToDepth</a>(const SpaceToDepthQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac306abe0073a04300f2d96d0b5eb6218">CreateSplitter</a>(const SplitterQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa06423ce3f34e4ec2d336889f8c0d79a">CreateStack</a>(const StackQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a21344e9f338e1d4c3d26825002a02754">CreateStridedSlice</a>(const StridedSliceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a803d8d97e76968a19caa6ca110af8bb7">CreateSubTensorHandle</a>(armnn::ITensorHandle &amp;parent, armnn::TensorShape const &amp;subTensorShape, unsigned int const *subTensorOrigin) const override</td><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a439305cf0a71fc85a0b93cc063100f91">CreateSubtraction</a>(const SubtractionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab37f39b9e3e224ccde6b36adc876bb19">CreateSwitch</a>(const SwitchQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#afeebce3ac305675b16d1065d0cb5a362">CreateTensorHandle</a>(const armnn::TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const override</td><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a729d5c6a0304731cb12830c69d25ec6a">CreateTensorHandle</a>(const armnn::TensorInfo &amp;tensorInfo, armnn::DataLayout dataLayout, const bool IsMemoryManaged=true) const override</td><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a96217a8bbb66811608ce729fd49a3dd2">CreateTranspose</a>(const TransposeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a12cccba82124cc4993868a3173a65167">CreateTransposeConvolution2d</a>(const TransposeConvolution2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a812e39048892d764ccf0c751c84c000f">CreateUnidirectionalSequenceLstm</a>(const UnidirectionalSequenceLstmQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#ae5dac93c38aa9f9108f89b7f4acc2beb">GetBackendId</a>() const override</td><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a58a47e731eae3f09651e3f2451920f0a">IsLayerSupported</a>(const armnn::IConnectableLayer &amp;layer, armnn::Optional&lt; armnn::DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</td><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></td><td class="entry"><span class="mlabel">static</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">armnn::IWorkloadFactory::IsLayerSupported</a>(const BackendId &amp;backendId, const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">static</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aeaff50773427132e1066a7de56a53db1">armnn::IWorkloadFactory::IsLayerSupported</a>(const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported, const ModelOptions &amp;modelOptions)</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">static</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a52ba8d60c6582a847ef7bc914116d394">armnn::IWorkloadFactory::IsLayerSupported</a>(const BackendId &amp;backendId, const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported, const ModelOptions &amp;modelOptions)</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">static</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a45ed6052be045e15e81d1377b1a92f24">SampleDynamicWorkloadFactory</a>(const std::shared_ptr&lt; SampleMemoryManager &gt; &amp;memoryManager)</td><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></td><td class="entry"><span class="mlabel">explicit</span></td></tr>
  <tr><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a95614d4751bdcb17307e50a091635efb">SampleDynamicWorkloadFactory</a>()</td><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">SupportsSubTensors</a>() const override</td><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aab62208f96483015c29ad58549efedd8">~IWorkloadFactory</a>()</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a1be7b0504ec103774af49b1ff1fbb6f5">~SampleDynamicWorkloadFactory</a>()</td><td class="entry"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
</table></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Wed Nov 17 2021 12:59:48 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
