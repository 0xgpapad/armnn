<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/aclCommon/ArmComputeSubgraphUtils.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_arm_compute_subgraph_utils_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ArmComputeSubgraphUtils.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_arm_compute_subgraph_utils_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2020 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_optimization_views_8hpp.xhtml">armnn/backends/OptimizationViews.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_assert_8hpp.xhtml">armnn/utility/Assert.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_arm_compute_utils_8hpp.xhtml">aclCommon/ArmComputeUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">// this helper only works if all layers where the inputs connect to are not selected</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">SubgraphView::InputSlots</a> <a class="code" href="_common_test_utils_8cpp.xhtml#a9892eac8f1b8ed9cea0baf643fb6d951">CreateInputsFrom</a>(<span class="keyword">const</span> std::vector&lt;Layer*&gt;&amp; layers)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">SubgraphView::InputSlots</a> result;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; layer : layers)</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it = layer-&gt;BeginInputSlots(); it != layer-&gt;EndInputSlots(); ++it)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            result.push_back(&amp;(*it));</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        }</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    }</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">// this helper only works if all layers where the outputs connect to are not selected</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a78293334750ec5279eb9c96d56deaf08">SubgraphView::OutputSlots</a> <a class="code" href="_common_test_utils_8cpp.xhtml#ae405c72b6d52a1bf4b3471032e76e3f0">CreateOutputsFrom</a>(<span class="keyword">const</span> std::vector&lt;Layer*&gt;&amp; layers)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a78293334750ec5279eb9c96d56deaf08">SubgraphView::OutputSlots</a> result;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; layer : layers)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it = layer-&gt;BeginOutputSlots(); it != layer-&gt;EndOutputSlots(); ++it)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            result.push_back(&amp;(*it));</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keywordtype">bool</span> checkDataTypeInputandOutput(<span class="keyword">const</span> <a class="code" href="namespacearmnn_serializer.xhtml#a9a8118be7780e95363d631cbca7e7800">Layer</a>&amp; layer)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">auto</span> inputInfo = layer.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">auto</span> outputInfo = layer.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordtype">bool</span> sameDataType = (inputInfo.GetDataType() == outputInfo.GetDataType());</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// Check is same quantization info (same scale and offset)</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">if</span> (sameDataType)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#ad44c007f21af2d0375e3ef9400a1b275">IsQuantizedType</a>(inputInfo.GetDataType()))</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordtype">bool</span> sameScale = (inputInfo.GetQuantizationScale() == outputInfo.GetQuantizationScale());</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordtype">bool</span> sameOffset = (inputInfo.GetQuantizationOffset() == outputInfo.GetQuantizationOffset());</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordflow">return</span> (sameScale &amp;&amp; sameOffset);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#aa1002c35597679b4f6624827524af04e">   80</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#aa1002c35597679b4f6624827524af04e">ReportUntouchedLayers</a>(<a class="code" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a>&amp; optimizationViews, std::map&lt;LayerGuid, Layer*&gt; untouched)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;{</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    std::vector&lt;Layer*&gt; untouchedVector;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; pair : untouched)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* layer = pair.second;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <a class="code" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> subgraphView(<a class="code" href="_common_test_utils_8cpp.xhtml#a9892eac8f1b8ed9cea0baf643fb6d951">CreateInputsFrom</a>({layer}),</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                  <a class="code" href="_common_test_utils_8cpp.xhtml#ae405c72b6d52a1bf4b3471032e76e3f0">CreateOutputsFrom</a>({layer}),</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                  {layer});</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        optimizationViews.<a class="code" href="classarmnn_1_1_optimization_views.xhtml#a28e41bdd6b719a3d60a1a0de2e1ebc95">AddUntouchedSubgraph</a>(std::move(subgraphView));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> LayerType&gt;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a206e4c8c8901966157ca1f3d22fc9f98">   94</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>* <a class="code" href="namespacearmnn.xhtml#a206e4c8c8901966157ca1f3d22fc9f98">FuseLayerWithoutParameters</a>(<a class="code" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a>&amp; optimizationViews,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                      <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>* baseLayer,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                      <a class="code" href="classarmnn_1_1_activation_layer.xhtml">ActivationLayer</a>* activationLayer,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                      <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a>&amp; activationDesc,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                      std::string name)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>* replacementLayer = optimizationViews.<a class="code" href="classarmnn_1_1_optimization_views.xhtml#a49800ad35ea869aa5569519760d3b339">GetGraph</a>().<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>&gt;(name.c_str());</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    replacementLayer-&gt;SetAdditionalInfoForObject(std::make_shared&lt;ActivationDescriptor&gt;(activationDesc));</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> substitutionSubgraph(<a class="code" href="_common_test_utils_8cpp.xhtml#a9892eac8f1b8ed9cea0baf643fb6d951">CreateInputsFrom</a>({baseLayer}),</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                      <a class="code" href="_common_test_utils_8cpp.xhtml#ae405c72b6d52a1bf4b3471032e76e3f0">CreateOutputsFrom</a>({activationLayer}),</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                      {baseLayer, activationLayer});</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> replacementSubgraph(replacementLayer);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    optimizationViews.<a class="code" href="classarmnn_1_1_optimization_views.xhtml#a57340147dcb1c0ae05fdf14ff7af8a01">AddSubstitution</a>({substitutionSubgraph, replacementSubgraph});</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">return</span> replacementLayer;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> LayerType&gt;</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a18dca5dd9da8c56745ca7dbbf3767078">  114</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>* <a class="code" href="namespacearmnn.xhtml#a18dca5dd9da8c56745ca7dbbf3767078">FuseLayerWithParameters</a>(<a class="code" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a>&amp; optimizationViews,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>* baseLayer,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                   <a class="code" href="classarmnn_1_1_activation_layer.xhtml">ActivationLayer</a>* activationLayer,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                   <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a>&amp; activationDesc,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                   std::string name)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>* replacementLayer = optimizationViews.<a class="code" href="classarmnn_1_1_optimization_views.xhtml#a49800ad35ea869aa5569519760d3b339">GetGraph</a>().<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>&gt;(baseLayer-&gt;GetParameters(),</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                                                                   name.c_str());</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    replacementLayer-&gt;SetAdditionalInfoForObject(std::make_shared&lt;ActivationDescriptor&gt;(activationDesc));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> substitutionSubgraph(<a class="code" href="_common_test_utils_8cpp.xhtml#a9892eac8f1b8ed9cea0baf643fb6d951">CreateInputsFrom</a>({baseLayer}),</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                                      <a class="code" href="_common_test_utils_8cpp.xhtml#ae405c72b6d52a1bf4b3471032e76e3f0">CreateOutputsFrom</a>({activationLayer}),</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                                      {baseLayer, activationLayer});</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> replacementSubgraph(replacementLayer);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    optimizationViews.<a class="code" href="classarmnn_1_1_optimization_views.xhtml#a57340147dcb1c0ae05fdf14ff7af8a01">AddSubstitution</a>({substitutionSubgraph, replacementSubgraph});</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">return</span> replacementLayer;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> LayerType&gt;</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a3294cfc170948cd3712b8aaf378d2d3f">  135</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>* <a class="code" href="namespacearmnn.xhtml#a3294cfc170948cd3712b8aaf378d2d3f">FuseLayerWithWeightsAndBiases</a>(<a class="code" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a>&amp; optimizationViews,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                         <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>* baseLayer,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                         <a class="code" href="classarmnn_1_1_activation_layer.xhtml">ActivationLayer</a>* activationLayer,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                         <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a>&amp; activationDesc,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                         std::string name)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>* replacementLayer = <a class="code" href="namespacearmnn.xhtml#a18dca5dd9da8c56745ca7dbbf3767078">FuseLayerWithParameters</a>(optimizationViews,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                                          baseLayer,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                                          activationLayer,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                                          activationDesc,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                                          name);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    replacementLayer-&gt;m_Weight = std::move(baseLayer-&gt;m_Weight);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    replacementLayer-&gt;m_Bias   = std::move(baseLayer-&gt;m_Bias);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> replacementLayer;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">// If reduce layer has multiple axes, add new layer for each axis to simulate the same behaviour</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">// as currently only one axis is supported.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> LayerType&gt;</div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a742eae3e50a1c95f2a579245b25c3802">  158</a></span>&#160;std::vector&lt;Layer*&gt; <a class="code" href="namespacearmnn.xhtml#a742eae3e50a1c95f2a579245b25c3802">ChainReduceLayers</a>(<a class="code" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a>&amp; optimizationViews,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                      <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>* baseLayer,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                      <a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a>&amp; desc)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// Vector of new chained layers, used for substitution.</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    std::vector&lt;Layer*&gt; layers;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// Vector of axes so each layer is reshaped correctly.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    std::vector&lt;uint32_t&gt; axes;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> recalulatedAxis = 0;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i != desc.<a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml#aa1c6fc8c96404252f1072632fc5acb59">m_vAxis</a>.size(); ++i)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="comment">// Get TensorInfo from base layer and reduce shape using axis.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> layerInfo = baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        axes.emplace_back(desc.<a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml#aa1c6fc8c96404252f1072632fc5acb59">m_vAxis</a>[i]);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; reducedTensorInfo = <a class="code" href="namespacearmnn.xhtml#a9d43aa01b882d8776ab9403eea3cf779">ComputeReductionTensorShape</a>(layerInfo,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                                                          axes,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                                                          desc.<a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml#a28e0548abfc4e79c48f29a3d11a062e9">m_KeepDims</a>);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="comment">// Create a vector for the single axis to be assigned to the descriptor.</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="comment">// Update axis if keepDims is set reduce layers correctly.</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        std::vector&lt;uint32_t&gt; singleAxis(1, desc.<a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml#aa1c6fc8c96404252f1072632fc5acb59">m_vAxis</a>[i] - recalulatedAxis);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="comment">// Create a descriptor and assign single axis.</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> newReduceDescriptor = baseLayer-&gt;GetParameters();</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        newReduceDescriptor.<a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml#aa1c6fc8c96404252f1072632fc5acb59">m_vAxis</a>.assign(singleAxis.begin(), singleAxis.end());</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="comment">// Add new layer to graph.</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        std::string layerName = <span class="stringliteral">&quot;reduce_layer_&quot;</span> + std::to_string(i);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* replacementLayer = optimizationViews.<a class="code" href="classarmnn_1_1_optimization_views.xhtml#a49800ad35ea869aa5569519760d3b339">GetGraph</a>().<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>&gt;(newReduceDescriptor,</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                                                                   layerName.c_str());</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="comment">// Connect previous layer with new layer.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="comment">// The first and last layer will be connected when the subgraph is replaced.</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">if</span> (!layers.empty())</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            layers[i - 1]-&gt;GetOutputSlot(0).Connect(replacementLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="comment">// Set updated tensorInfo for new layer.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        replacementLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(reducedTensorInfo);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">if</span> (!desc.<a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml#a28e0548abfc4e79c48f29a3d11a062e9">m_KeepDims</a>)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            recalulatedAxis++;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        layers.emplace_back(replacementLayer);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="comment">// Check if the TensorInfo from the last layer equals the inferred output from the original layer.</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(baseLayer-&gt;GetOutputSlot(0).GetTensorInfo() == layers.back()-&gt;GetOutputSlot().GetTensorInfo());</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">return</span> layers;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">// Substitute baseLayer with new subgraph</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> LayerType&gt;</div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a5cf10c667e47d1b81116a9c639712c85">  220</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a5cf10c667e47d1b81116a9c639712c85">ReplaceLayers</a>(<a class="code" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a>&amp; optimizationViews,</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                   <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>* baseLayer,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                   std::vector&lt;Layer*&gt;&amp; layers)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;{</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    std::list&lt;Layer*&gt; replacementLayers(layers.begin(), layers.end());</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> substitutionSubgraph(baseLayer);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> replacementSubgraph(<a class="code" href="_common_test_utils_8cpp.xhtml#a9892eac8f1b8ed9cea0baf643fb6d951">CreateInputsFrom</a>({replacementLayers.front()}),</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                     <a class="code" href="_common_test_utils_8cpp.xhtml#ae405c72b6d52a1bf4b3471032e76e3f0">CreateOutputsFrom</a>({replacementLayers.back()}),</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                     std::move(replacementLayers));</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    optimizationViews.<a class="code" href="classarmnn_1_1_optimization_views.xhtml#a57340147dcb1c0ae05fdf14ff7af8a01">AddSubstitution</a>({substitutionSubgraph, replacementSubgraph});</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="namespacearmnn_xhtml_a742eae3e50a1c95f2a579245b25c3802"><div class="ttname"><a href="namespacearmnn.xhtml#a742eae3e50a1c95f2a579245b25c3802">armnn::ChainReduceLayers</a></div><div class="ttdeci">std::vector&lt; Layer * &gt; ChainReduceLayers(OptimizationViews &amp;optimizationViews, LayerType *baseLayer, ReduceDescriptor &amp;desc)</div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00158">ArmComputeSubgraphUtils.hpp:158</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5cf10c667e47d1b81116a9c639712c85"><div class="ttname"><a href="namespacearmnn.xhtml#a5cf10c667e47d1b81116a9c639712c85">armnn::ReplaceLayers</a></div><div class="ttdeci">void ReplaceLayers(OptimizationViews &amp;optimizationViews, LayerType *baseLayer, std::vector&lt; Layer *&gt; &amp;layers)</div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00220">ArmComputeSubgraphUtils.hpp:220</a></div></div>
<div class="ttc" id="_arm_compute_utils_8hpp_xhtml"><div class="ttname"><a href="_arm_compute_utils_8hpp.xhtml">ArmComputeUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad44c007f21af2d0375e3ef9400a1b275"><div class="ttname"><a href="namespacearmnn.xhtml#ad44c007f21af2d0375e3ef9400a1b275">armnn::IsQuantizedType</a></div><div class="ttdeci">constexpr bool IsQuantizedType()</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00280">TypesUtils.hpp:280</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a7563c5b899e7d0ada08fd0fdb202f205"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">armnn::Graph::AddLayer</a></div><div class="ttdeci">LayerT * AddLayer(Args &amp;&amp;... args)</div><div class="ttdoc">Adds a new layer, of type LayerType, to the graph constructed with the arguments passed. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00417">Graph.hpp:417</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a9a8118be7780e95363d631cbca7e7800"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a9a8118be7780e95363d631cbca7e7800">armnnSerializer::Layer</a></div><div class="ttdeci">Layer</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_schema__generated_8h_source.xhtml#l01234">ArmnnSchema_generated.h:1234</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa1002c35597679b4f6624827524af04e"><div class="ttname"><a href="namespacearmnn.xhtml#aa1002c35597679b4f6624827524af04e">armnn::ReportUntouchedLayers</a></div><div class="ttdeci">void ReportUntouchedLayers(OptimizationViews &amp;optimizationViews, std::map&lt; LayerGuid, Layer *&gt; untouched)</div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00080">ArmComputeSubgraphUtils.hpp:80</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_descriptor_xhtml_a28e0548abfc4e79c48f29a3d11a062e9"><div class="ttname"><a href="structarmnn_1_1_reduce_descriptor.xhtml#a28e0548abfc4e79c48f29a3d11a062e9">armnn::ReduceDescriptor::m_KeepDims</a></div><div class="ttdeci">bool m_KeepDims</div><div class="ttdoc">if true then output shape has no change. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01412">Descriptors.hpp:1412</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_a78293334750ec5279eb9c96d56deaf08"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a78293334750ec5279eb9c96d56deaf08">armnn::SubgraphView::OutputSlots</a></div><div class="ttdeci">std::vector&lt; OutputSlot * &gt; OutputSlots</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_8hpp_source.xhtml#l00039">SubgraphView.hpp:39</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimization_views_xhtml_a57340147dcb1c0ae05fdf14ff7af8a01"><div class="ttname"><a href="classarmnn_1_1_optimization_views.xhtml#a57340147dcb1c0ae05fdf14ff7af8a01">armnn::OptimizationViews::AddSubstitution</a></div><div class="ttdeci">void AddSubstitution(SubstitutionPair &amp;&amp;substitution)</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00034">OptimizationViews.hpp:34</a></div></div>
<div class="ttc" id="classarmnn_1_1_activation_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_activation_layer.xhtml">armnn::ActivationLayer</a></div><div class="ttdoc">This layer represents an activation operation with the specified activation function. </div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_8hpp_source.xhtml#l00012">ActivationLayer.hpp:12</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimization_views_xhtml"><div class="ttname"><a href="classarmnn_1_1_optimization_views.xhtml">armnn::OptimizationViews</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00013">OptimizationViews.hpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a18dca5dd9da8c56745ca7dbbf3767078"><div class="ttname"><a href="namespacearmnn.xhtml#a18dca5dd9da8c56745ca7dbbf3767078">armnn::FuseLayerWithParameters</a></div><div class="ttdeci">LayerType * FuseLayerWithParameters(OptimizationViews &amp;optimizationViews, LayerType *baseLayer, ActivationLayer *activationLayer, ActivationDescriptor &amp;activationDesc, std::string name)</div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00114">ArmComputeSubgraphUtils.hpp:114</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml">armnn::SubgraphView</a></div><div class="ttdoc">The SubgraphView class represents a subgraph of a Graph. </div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_8hpp_source.xhtml#l00023">SubgraphView.hpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_acf8b8e23bf647836592982f97088d375"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">armnn::Layer::GetInputSlot</a></div><div class="ttdeci">const InputSlot &amp; GetInputSlot(unsigned int index) const override</div><div class="ttdoc">Get a const input slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00316">Layer.hpp:316</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a206e4c8c8901966157ca1f3d22fc9f98"><div class="ttname"><a href="namespacearmnn.xhtml#a206e4c8c8901966157ca1f3d22fc9f98">armnn::FuseLayerWithoutParameters</a></div><div class="ttdeci">LayerType * FuseLayerWithoutParameters(OptimizationViews &amp;optimizationViews, LayerType *baseLayer, ActivationLayer *activationLayer, ActivationDescriptor &amp;activationDesc, std::string name)</div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00094">ArmComputeSubgraphUtils.hpp:94</a></div></div>
<div class="ttc" id="_common_test_utils_8cpp_xhtml_a9892eac8f1b8ed9cea0baf643fb6d951"><div class="ttname"><a href="_common_test_utils_8cpp.xhtml#a9892eac8f1b8ed9cea0baf643fb6d951">CreateInputsFrom</a></div><div class="ttdeci">SubgraphView::InputSlots CreateInputsFrom(const std::vector&lt; Layer *&gt; &amp;layers)</div><div class="ttdef"><b>Definition:</b> <a href="_common_test_utils_8cpp_source.xhtml#l00012">CommonTestUtils.cpp:12</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reduce_descriptor.xhtml">armnn::ReduceDescriptor</a></div><div class="ttdoc">A ReduceDescriptor for the REDUCE operators. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01396">Descriptors.hpp:1396</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00025">Descriptors.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimization_views_xhtml_a28e41bdd6b719a3d60a1a0de2e1ebc95"><div class="ttname"><a href="classarmnn_1_1_optimization_views.xhtml#a28e41bdd6b719a3d60a1a0de2e1ebc95">armnn::OptimizationViews::AddUntouchedSubgraph</a></div><div class="ttdeci">void AddUntouchedSubgraph(SubgraphView &amp;&amp;subgraph)</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00044">OptimizationViews.hpp:44</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_optimization_views_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_optimization_views_8hpp.xhtml">OptimizationViews.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_a5cc65e15002dbc33a5c8a7d6680e9a9d"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">armnn::SubgraphView::InputSlots</a></div><div class="ttdeci">std::vector&lt; InputSlot * &gt; InputSlots</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_8hpp_source.xhtml#l00038">SubgraphView.hpp:38</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_descriptor_xhtml_aa1c6fc8c96404252f1072632fc5acb59"><div class="ttname"><a href="structarmnn_1_1_reduce_descriptor.xhtml#aa1c6fc8c96404252f1072632fc5acb59">armnn::ReduceDescriptor::m_vAxis</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; m_vAxis</div><div class="ttdoc">The indices of the dimensions to reduce. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01414">Descriptors.hpp:1414</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml"><div class="ttname"><a href="_assert_8hpp.xhtml">Assert.hpp</a></div></div>
<div class="ttc" id="_common_test_utils_8cpp_xhtml_ae405c72b6d52a1bf4b3471032e76e3f0"><div class="ttname"><a href="_common_test_utils_8cpp.xhtml#ae405c72b6d52a1bf4b3471032e76e3f0">CreateOutputsFrom</a></div><div class="ttdeci">SubgraphView::OutputSlots CreateOutputsFrom(const std::vector&lt; Layer *&gt; &amp;layers)</div><div class="ttdef"><b>Definition:</b> <a href="_common_test_utils_8cpp_source.xhtml#l00025">CommonTestUtils.cpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimization_views_xhtml_a49800ad35ea869aa5569519760d3b339"><div class="ttname"><a href="classarmnn_1_1_optimization_views.xhtml#a49800ad35ea869aa5569519760d3b339">armnn::OptimizationViews::GetGraph</a></div><div class="ttdeci">Graph &amp; GetGraph()</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00059">OptimizationViews.hpp:59</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a7e5c5771d741dd5473989047a9314728"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">armnn::OutputSlot::SetTensorInfo</a></div><div class="ttdeci">void SetTensorInfo(const TensorInfo &amp;tensorInfo) override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00058">Layer.cpp:58</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a3294cfc170948cd3712b8aaf378d2d3f"><div class="ttname"><a href="namespacearmnn.xhtml#a3294cfc170948cd3712b8aaf378d2d3f">armnn::FuseLayerWithWeightsAndBiases</a></div><div class="ttdeci">LayerType * FuseLayerWithWeightsAndBiases(OptimizationViews &amp;optimizationViews, LayerType *baseLayer, ActivationLayer *activationLayer, ActivationDescriptor &amp;activationDesc, std::string name)</div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00135">ArmComputeSubgraphUtils.hpp:135</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a0e36688a43c35668d8db5257274c68fe"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">armnn::Layer::GetOutputSlot</a></div><div class="ttdeci">const OutputSlot &amp; GetOutputSlot(unsigned int index=0) const override</div><div class="ttdoc">Get the const output slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00318">Layer.hpp:318</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9d43aa01b882d8776ab9403eea3cf779"><div class="ttname"><a href="namespacearmnn.xhtml#a9d43aa01b882d8776ab9403eea3cf779">armnn::ComputeReductionTensorShape</a></div><div class="ttdeci">const TensorInfo ComputeReductionTensorShape(const armnn::TensorInfo &amp;input, const std::vector&lt; uint32_t &gt; &amp;vAxis, const bool keepDims)</div><div class="ttdoc">Function to compute the output tensor shape based on the axes and if keepDims is set. </div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_utils_8hpp_source.xhtml#l00328">ArmComputeUtils.hpp:328</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00210">Layer.hpp:210</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">armnn::LayerType</a></div><div class="ttdeci">LayerType</div><div class="ttdoc">When adding a new layer, adapt also the LastLayer enum value in the enum class LayerType below...</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00443">Types.hpp:443</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_c13beb47b846b3a63741c705c772cf8d.xhtml">aclCommon</a></li><li class="navelem"><a class="el" href="_arm_compute_subgraph_utils_8hpp.xhtml">ArmComputeSubgraphUtils.hpp</a></li>
    <li class="footer">Generated on Wed Nov 17 2021 12:59:33 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
