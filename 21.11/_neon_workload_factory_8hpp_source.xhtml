<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/neon/NeonWorkloadFactory.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_neon_workload_factory_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NeonWorkloadFactory.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_neon_workload_factory_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_optional_8hpp.xhtml">armnn/Optional.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_backend_internal_8hpp.xhtml">armnn/backends/IBackendInternal.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_workload_factory_base_8hpp.xhtml">backendsCommon/WorkloadFactoryBase.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_base_memory_manager_8hpp.xhtml">aclCommon/BaseMemoryManager.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;arm_compute/runtime/IScheduler.h&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">// Neon workload factory.</span></div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_workload_factory.xhtml">   20</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml">NeonWorkloadFactory</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a19a681524fa55169540fcccb9dcefaa6">NeonWorkloadFactory</a>(<span class="keyword">const</span> std::shared_ptr&lt;NeonMemoryManager&gt;&amp; memoryManager);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a19a681524fa55169540fcccb9dcefaa6">NeonWorkloadFactory</a>(<span class="keyword">const</span> std::shared_ptr&lt;NeonMemoryManager&gt;&amp; memoryManager,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a>&amp; modelContextPtr);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">GetBackendId</a>() <span class="keyword">const override</span>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a9992ea7c353e8597fbd8ae426f4612ae">IsLayerSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>&amp; layer,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;DataType&gt;</a> dataType,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                 std::string&amp; outReasonIfUnsupported);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a9992ea7c353e8597fbd8ae426f4612ae">IsLayerSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>&amp; layer,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;DataType&gt;</a> dataType,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                 std::string&amp; outReasonIfUnsupported,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a>&amp; modelOptions);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">   39</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">SupportsSubTensors</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; }</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use ITensorHandleFactory::CreateSubTensorHandle instead&quot;</span>)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    std::unique_ptr&lt;ITensorHandle&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#abefb9df9d7a54cf2f82047ea350d0388">CreateSubTensorHandle</a>(<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&amp; parent,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                                         <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> <span class="keyword">const</span>&amp; subTensorShape,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span>* subTensorOrigin) <span class="keyword">const override</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use ITensorHandleFactory::CreateTensorHandle instead&quot;</span>)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    std::unique_ptr&lt;ITensorHandle&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">CreateTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo,</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                                      <span class="keyword">const</span> <span class="keywordtype">bool</span> IsMemoryManaged = <span class="keyword">true</span>) <span class="keyword">const override</span>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a>(<span class="stringliteral">&quot;Use ITensorHandleFactory::CreateTensorHandle instead&quot;</span>)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    std::unique_ptr&lt;ITensorHandle&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">CreateTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                                      <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                                                      <span class="keyword">const</span> <span class="keywordtype">bool</span> IsMemoryManaged = <span class="keyword">true</span>) <span class="keyword">const override</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#af5f7b0f6273c838b6b7d7de8447524f9">CreateActivation</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_queue_descriptor.xhtml">ActivationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) <span class="keyword">const override</span>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a46e1398968d2f4951ce1fd2b9b70fc5b">CreateAddition</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a3fffcec3624e83671b4623e22ca623e5">CreateArgMinMax</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_arg_min_max_queue_descriptor.xhtml">ArgMinMaxQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a3e5a5e967dfd56b9b1d55ec2739f2edd">CreateBatchNormalization</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">BatchNormalizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a1d54b5c774bdac45f22d1ec57d0a9f3f">CreateBatchToSpaceNd</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_to_space_nd_queue_descriptor.xhtml">BatchToSpaceNdQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) <span class="keyword">const override</span>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#aa2ccec6d14b8556cd635f7afb0d60034">CreateCast</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_cast_queue_descriptor.xhtml">CastQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#acde0a135ba4d66b771cfb2ac7aa3856e">CreateChannelShuffle</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_channel_shuffle_queue_descriptor.xhtml">ChannelShuffleQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a3d6501ad29a91db467a01ed0e36a96d2">CreateComparison</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_comparison_queue_descriptor.xhtml">ComparisonQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; Info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a6c8caa2fb12f36f83fde85da03a87c42">CreateConcat</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_concat_queue_descriptor.xhtml">ConcatQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#aa6ef3324f715ccf62d235aa54118d174">CreateConstant</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_constant_queue_descriptor.xhtml">ConstantQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#aade1930aedd59e037337410381f7011d">CreateConvertBf16ToFp32</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor.xhtml">ConvertBf16ToFp32QueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#aefe6a68cb6d7ba517d7988195680c831">CreateConvertFp16ToFp32</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">ConvertFp16ToFp32QueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a4e70ecb5f981d7c07971bd0740f53c05">CreateConvertFp32ToBf16</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor.xhtml">ConvertFp32ToBf16QueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a33b291201b6716e295afb17c1eb0864e">CreateConvertFp32ToFp16</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">ConvertFp32ToFp16QueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a004cfce1311cd19d48b6705f4d80aa6c">CreateConvolution2d</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#ae8c233450162434ad36c57805c474d08">CreateConvolution3d</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution3d_queue_descriptor.xhtml">Convolution3dQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#aca1333805c6665111154f10cc72c8234">CreateDebug</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_debug_queue_descriptor.xhtml">DebugQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#af77fb45622aedb3f2ee36b412fea8735">CreateDepthToSpace</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depth_to_space_queue_descriptor.xhtml">DepthToSpaceQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a48ebe514c1ca3e41edccdd7682bf38ca">CreateDepthwiseConvolution2d</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">DepthwiseConvolution2dQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#ab345edf481dd64a3ced4c0808d4ee844">CreateDequantize</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_dequantize_queue_descriptor.xhtml">DequantizeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a3a2d9b8e1156605172ada1472e9460cd">CreateDetectionPostProcess</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">DetectionPostProcessQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a94a90252763f05b6c957f68f84e65c66">CreateDivision</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_division_queue_descriptor.xhtml">DivisionQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    </div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a447013b9d70a1d74196449d1a3f56acc">CreateElementwiseUnary</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; Info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a2b793964f2c501b9ea343ffe310fc89e">CreateFill</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fill_queue_descriptor.xhtml">FillQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#aac4c7cd17cf3dc3a23fd4a21933c60cb">CreateFloor</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_floor_queue_descriptor.xhtml">FloorQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a3b1e84836871f27a15add7f08736f139">CreateFullyConnected</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">FullyConnectedQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a674b6d6de1db47959ad36831976ca3aa">CreateGather</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_gather_queue_descriptor.xhtml">GatherQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">CreateInput</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">InputQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a5c2f4f703e07407e70c30cc770d02d6b">CreateInstanceNormalization</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_instance_normalization_queue_descriptor.xhtml">InstanceNormalizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a1c511b4b70bc0b6cccbef2285ba292bc">CreateL2Normalization</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">L2NormalizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a6d9da6f30bce6aa09040e7e37485a3dc">CreateLogicalBinary</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_logical_binary_queue_descriptor.xhtml">LogicalBinaryQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a95c212cdbcf2af9a845f19467c2f2f2e">CreateLogSoftmax</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">LogSoftmaxQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a0dce100ea0fc5c44798736a4d879bd4d">CreateLstm</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#ae2c6c12059f9cde37ff6bb8f682e9ceb">CreateMaximum</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_maximum_queue_descriptor.xhtml">MaximumQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#aba5032787777bf0074ce70e2c2423d49">CreateMean</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mean_queue_descriptor.xhtml">MeanQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; Info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#aa07df85c33d6e3ea4891b5f344df6964">CreateMemCopy</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">MemCopyQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a1786f52370ba933427837a2179305773">CreateMemImport</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_import_queue_descriptor.xhtml">MemImportQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a39927b6e1faae50d9f804b435430bbf2">CreateMinimum</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_minimum_queue_descriptor.xhtml">MinimumQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#af7ba09a42932a341c966f1ba1f596861">CreateMultiplication</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a3334b1fbbf87863e3b40a6194b9e0199">CreateNormalization</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_normalization_queue_descriptor.xhtml">NormalizationQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">CreateOutput</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">OutputQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a8fb2b01fe17e49e997fe59d86e4d5c9a">CreatePad</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pad_queue_descriptor.xhtml">PadQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a59399d21babdc3a17df004dfa64617ea">CreatePermute</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_permute_queue_descriptor.xhtml">PermuteQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a6e05a05ea7ea2c384c94d6568f032614">CreatePooling2d</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">Pooling2dQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a3f21c47a41cbbcfe7d74becd76766c80">CreatePreCompiled</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pre_compiled_queue_descriptor.xhtml">PreCompiledQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#aca8d797b1e48d693de73e868b3aa41ec">CreatePrelu</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_prelu_queue_descriptor.xhtml">PreluQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a2edd58192b89ac27cf4be7d7ea6252d3">CreateQLstm</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">QLstmQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a6a58a15e291291722dc9a4517d2974eb">CreateQuantize</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_quantize_queue_descriptor.xhtml">QuantizeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a166569e6ac31c22484612c77690c3eff">CreateQuantizedLstm</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml">QuantizedLstmQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#ac732fb2a7a5cc332339aa8686dd7e928">CreateRank</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_rank_queue_descriptor.xhtml">RankQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#aab44d0205a3daac5eebf14c6672924f5">CreateReduce</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reduce_queue_descriptor.xhtml">ReduceQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a85d2e898648c795f462a15f5c03a67ac">CreateReshape</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reshape_queue_descriptor.xhtml">ReshapeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">CreateResize</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_queue_descriptor.xhtml">ResizeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#abda2c9b7c5fe4ca092d2224ba9679a06">CreateSlice</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_slice_queue_descriptor.xhtml">SliceQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a457c416483289cc7c8a8511a67d95816">CreateSoftmax</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">SoftmaxQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a1d1feb2b5c6a4c6701a3dee01e65bee4">CreateSpaceToBatchNd</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_batch_nd_queue_descriptor.xhtml">SpaceToBatchNdQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a2318d942f9615dff92fe75688bdd8c48">CreateSpaceToDepth</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">SpaceToDepthQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#aa98def0f9b9ff714a013f8083bbadf82">CreateSplitter</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_splitter_queue_descriptor.xhtml">SplitterQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a4d5371f67eabb04a38c69e97e67f1d35">CreateStack</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stack_queue_descriptor.xhtml">StackQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a5c46866e2a0d83e350ff70c12d9613bf">CreateStridedSlice</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_strided_slice_queue_descriptor.xhtml">StridedSliceQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a61d64ca308b8af42b422e13382329021">CreateSubtraction</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#aac9d1b722bcd5b59cc6760ca2607ef8e">CreateTranspose</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_queue_descriptor.xhtml">TransposeQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a29e02d375261a32c39635d6833a49333">CreateTransposeConvolution2d</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">TransposeConvolution2dQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info) <span class="keyword">const override</span>;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordtype">void</span> SetNumberOfThreads();</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">mutable</span> std::shared_ptr&lt;NeonMemoryManager&gt; m_MemoryManager;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> m_ModelContextPtr;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;};</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="structarmnn_1_1_multiplication_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">armnn::MultiplicationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00269">WorkloadData.hpp:269</a></div></div>
<div class="ttc" id="structarmnn_1_1_cast_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_cast_queue_descriptor.xhtml">armnn::CastQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00158">WorkloadData.hpp:158</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_af77fb45622aedb3f2ee36b412fea8735"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#af77fb45622aedb3f2ee36b412fea8735">armnn::NeonWorkloadFactory::CreateDepthToSpace</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDepthToSpace(const DepthToSpaceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00270">NeonWorkloadFactory.cpp:270</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_queue_descriptor.xhtml">armnn::InstanceNormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00368">WorkloadData.hpp:368</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_aca1333805c6665111154f10cc72c8234"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#aca1333805c6665111154f10cc72c8234">armnn::NeonWorkloadFactory::CreateDebug</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDebug(const DebugQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00264">NeonWorkloadFactory.cpp:264</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_permute_queue_descriptor.xhtml">armnn::PermuteQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00185">WorkloadData.hpp:185</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a0dce100ea0fc5c44798736a4d879bd4d"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a0dce100ea0fc5c44798736a4d879bd4d">armnn::NeonWorkloadFactory::CreateLstm</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateLstm(const LstmQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00400">NeonWorkloadFactory.cpp:400</a></div></div>
<div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_aa2ccec6d14b8556cd635f7afb0d60034"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#aa2ccec6d14b8556cd635f7afb0d60034">armnn::NeonWorkloadFactory::CreateCast</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateCast(const CastQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00164">NeonWorkloadFactory.cpp:164</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_acde0a135ba4d66b771cfb2ac7aa3856e"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#acde0a135ba4d66b771cfb2ac7aa3856e">armnn::NeonWorkloadFactory::CreateChannelShuffle</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateChannelShuffle(const ChannelShuffleQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00170">NeonWorkloadFactory.cpp:170</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantize_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_quantize_queue_descriptor.xhtml">armnn::QuantizeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00304">WorkloadData.hpp:304</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00061">INetwork.hpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a95c212cdbcf2af9a845f19467c2f2f2e"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a95c212cdbcf2af9a845f19467c2f2f2e">armnn::NeonWorkloadFactory::CreateLogSoftmax</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateLogSoftmax(const LogSoftmaxQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00380">NeonWorkloadFactory.cpp:380</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00049">Types.hpp:49</a></div></div>
<div class="ttc" id="structarmnn_1_1_maximum_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_maximum_queue_descriptor.xhtml">armnn::MaximumQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00287">WorkloadData.hpp:287</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">armnn::DetectionPostProcessQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00244">WorkloadData.hpp:244</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a674b6d6de1db47959ad36831976ca3aa"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a674b6d6de1db47959ad36831976ca3aa">armnn::NeonWorkloadFactory::CreateGather</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateGather(const GatherQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00354">NeonWorkloadFactory.cpp:354</a></div></div>
<div class="ttc" id="structarmnn_1_1_gather_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_gather_queue_descriptor.xhtml">armnn::GatherQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00525">WorkloadData.hpp:525</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a3334b1fbbf87863e3b40a6194b9e0199"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a3334b1fbbf87863e3b40a6194b9e0199">armnn::NeonWorkloadFactory::CreateNormalization</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateNormalization(const NormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00452">NeonWorkloadFactory.cpp:452</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="structarmnn_1_1_splitter_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_splitter_queue_descriptor.xhtml">armnn::SplitterQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00101">WorkloadData.hpp:101</a></div></div>
<div class="ttc" id="structarmnn_1_1_constant_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_constant_queue_descriptor.xhtml">armnn::ConstantQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00383">WorkloadData.hpp:383</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a3b1e84836871f27a15add7f08736f139"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a3b1e84836871f27a15add7f08736f139">armnn::NeonWorkloadFactory::CreateFullyConnected</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateFullyConnected(const FullyConnectedQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00348">NeonWorkloadFactory.cpp:348</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml">armnn::QuantizedLstmQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00632">WorkloadData.hpp:632</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a3d6501ad29a91db467a01ed0e36a96d2"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a3d6501ad29a91db467a01ed0e36a96d2">armnn::NeonWorkloadFactory::CreateComparison</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateComparison(const ComparisonQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00176">NeonWorkloadFactory.cpp:176</a></div></div>
<div class="ttc" id="_i_backend_internal_8hpp_xhtml"><div class="ttname"><a href="_i_backend_internal_8hpp.xhtml">IBackendInternal.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a8fb2b01fe17e49e997fe59d86e4d5c9a"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a8fb2b01fe17e49e997fe59d86e4d5c9a">armnn::NeonWorkloadFactory::CreatePad</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePad(const PadQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00465">NeonWorkloadFactory.cpp:465</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a29e02d375261a32c39635d6833a49333"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a29e02d375261a32c39635d6833a49333">armnn::NeonWorkloadFactory::CreateTransposeConvolution2d</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateTransposeConvolution2d(const TransposeConvolution2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00591">NeonWorkloadFactory.cpp:591</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5b6893cda5b69359a4244c06054da18f"><div class="ttname"><a href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">armnn::ModelOptions</a></div><div class="ttdeci">std::vector&lt; BackendOptions &gt; ModelOptions</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00017">BackendOptions.hpp:17</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor.xhtml">armnn::ConvertBf16ToFp32QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00467">WorkloadData.hpp:467</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a1786f52370ba933427837a2179305773"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a1786f52370ba933427837a2179305773">armnn::NeonWorkloadFactory::CreateMemImport</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMemImport(const MemImportQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00429">NeonWorkloadFactory.cpp:429</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a1c511b4b70bc0b6cccbef2285ba292bc"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a1c511b4b70bc0b6cccbef2285ba292bc">armnn::NeonWorkloadFactory::CreateL2Normalization</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateL2Normalization(const L2NormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00373">NeonWorkloadFactory.cpp:373</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_aefe6a68cb6d7ba517d7988195680c831"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#aefe6a68cb6d7ba517d7988195680c831">armnn::NeonWorkloadFactory::CreateConvertFp16ToFp32</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvertFp16ToFp32(const ConvertFp16ToFp32QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00201">NeonWorkloadFactory.cpp:201</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a5c46866e2a0d83e350ff70c12d9613bf"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a5c46866e2a0d83e350ff70c12d9613bf">armnn::NeonWorkloadFactory::CreateStridedSlice</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateStridedSlice(const StridedSliceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00573">NeonWorkloadFactory.cpp:573</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a39927b6e1faae50d9f804b435430bbf2"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a39927b6e1faae50d9f804b435430bbf2">armnn::NeonWorkloadFactory::CreateMinimum</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMinimum(const MinimumQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00440">NeonWorkloadFactory.cpp:440</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution3d_queue_descriptor.xhtml">armnn::Convolution3dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00212">WorkloadData.hpp:212</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stack_queue_descriptor.xhtml">armnn::StackQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00142">WorkloadData.hpp:142</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_af7ba09a42932a341c966f1ba1f596861"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#af7ba09a42932a341c966f1ba1f596861">armnn::NeonWorkloadFactory::CreateMultiplication</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMultiplication(const MultiplicationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00446">NeonWorkloadFactory.cpp:446</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a6a58a15e291291722dc9a4517d2974eb"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a6a58a15e291291722dc9a4517d2974eb">armnn::NeonWorkloadFactory::CreateQuantize</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateQuantize(const QuantizeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00501">NeonWorkloadFactory.cpp:501</a></div></div>
<div class="ttc" id="structarmnn_1_1_addition_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00263">WorkloadData.hpp:263</a></div></div>
<div class="ttc" id="structarmnn_1_1_minimum_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_minimum_queue_descriptor.xhtml">armnn::MinimumQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00498">WorkloadData.hpp:498</a></div></div>
<div class="ttc" id="_base_memory_manager_8hpp_xhtml"><div class="ttname"><a href="_base_memory_manager_8hpp.xhtml">BaseMemoryManager.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml">armnn::NeonWorkloadFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8hpp_source.xhtml#l00020">NeonWorkloadFactory.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">armnn::FullyConnectedQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00170">WorkloadData.hpp:170</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_abefb9df9d7a54cf2f82047ea350d0388"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#abefb9df9d7a54cf2f82047ea350d0388">armnn::NeonWorkloadFactory::CreateSubTensorHandle</a></div><div class="ttdeci">std::unique_ptr&lt; ITensorHandle &gt; CreateSubTensorHandle(ITensorHandle &amp;parent, TensorShape const &amp;subTensorShape, unsigned int const *subTensorOrigin) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00086">NeonWorkloadFactory.cpp:86</a></div></div>
<div class="ttc" id="structarmnn_1_1_prelu_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_prelu_queue_descriptor.xhtml">armnn::PreluQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00557">WorkloadData.hpp:557</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a004cfce1311cd19d48b6705f4d80aa6c"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a004cfce1311cd19d48b6705f4d80aa6c">armnn::NeonWorkloadFactory::CreateConvolution2d</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvolution2d(const Convolution2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00222">NeonWorkloadFactory.cpp:222</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_queue_descriptor.xhtml">armnn::BatchToSpaceNdQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00487">WorkloadData.hpp:487</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_queue_descriptor.xhtml">armnn::SoftmaxQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00095">WorkloadData.hpp:95</a></div></div>
<div class="ttc" id="structarmnn_1_1_division_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_division_queue_descriptor.xhtml">armnn::DivisionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00275">WorkloadData.hpp:275</a></div></div>
<div class="ttc" id="structarmnn_1_1_subtraction_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">armnn::SubtractionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00281">WorkloadData.hpp:281</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pad_queue_descriptor.xhtml">armnn::PadQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00299">WorkloadData.hpp:299</a></div></div>
<div class="ttc" id="structarmnn_1_1_concat_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_concat_queue_descriptor.xhtml">armnn::ConcatQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00120">WorkloadData.hpp:120</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875"><div class="ttname"><a href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::LogSeverity::Info</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">armnn::SpaceToDepthQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00405">WorkloadData.hpp:405</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a19a681524fa55169540fcccb9dcefaa6"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a19a681524fa55169540fcccb9dcefaa6">armnn::NeonWorkloadFactory::NeonWorkloadFactory</a></div><div class="ttdeci">NeonWorkloadFactory(const std::shared_ptr&lt; NeonMemoryManager &gt; &amp;memoryManager)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00073">NeonWorkloadFactory.cpp:73</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a85d2e898648c795f462a15f5c03a67ac"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a85d2e898648c795f462a15f5c03a67ac">armnn::NeonWorkloadFactory::CreateReshape</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateReshape(const ReshapeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00525">NeonWorkloadFactory.cpp:525</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_queue_descriptor.xhtml">armnn::ResizeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00349">WorkloadData.hpp:349</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a9992ea7c353e8597fbd8ae426f4612ae"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a9992ea7c353e8597fbd8ae426f4612ae">armnn::NeonWorkloadFactory::IsLayerSupported</a></div><div class="ttdeci">static bool IsLayerSupported(const Layer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00034">NeonWorkloadFactory.cpp:34</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_queue_descriptor.xhtml">armnn::SpaceToBatchNdQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00400">WorkloadData.hpp:400</a></div></div>
<div class="ttc" id="structarmnn_1_1_floor_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_floor_queue_descriptor.xhtml">armnn::FloorQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00410">WorkloadData.hpp:410</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a33b291201b6716e295afb17c1eb0864e"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a33b291201b6716e295afb17c1eb0864e">armnn::NeonWorkloadFactory::CreateConvertFp32ToFp16</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvertFp32ToFp16(const ConvertFp32ToFp16QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00215">NeonWorkloadFactory.cpp:215</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a457c416483289cc7c8a8511a67d95816"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a457c416483289cc7c8a8511a67d95816">armnn::NeonWorkloadFactory::CreateSoftmax</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSoftmax(const SoftmaxQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00543">NeonWorkloadFactory.cpp:543</a></div></div>
<div class="ttc" id="_optional_8hpp_xhtml"><div class="ttname"><a href="_optional_8hpp.xhtml">Optional.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_queue_descriptor.xhtml">armnn::LstmQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00415">WorkloadData.hpp:415</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_abda2c9b7c5fe4ca092d2224ba9679a06"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#abda2c9b7c5fe4ca092d2224ba9679a06">armnn::NeonWorkloadFactory::CreateSlice</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSlice(const SliceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00537">NeonWorkloadFactory.cpp:537</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a4d0238968a7643dbb170547dd22bba54"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">armnn::IBackendInternal::IBackendSpecificModelContextPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IBackendModelContext &gt; IBackendSpecificModelContextPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00096">IBackendInternal.hpp:96</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a166569e6ac31c22484612c77690c3eff"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a166569e6ac31c22484612c77690c3eff">armnn::NeonWorkloadFactory::CreateQuantizedLstm</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateQuantizedLstm(const QuantizedLstmQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00507">NeonWorkloadFactory.cpp:507</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00015">ITensorHandle.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_aed0a782f32856bde72bc10d9381dc11e"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">armnn::NeonWorkloadFactory::SupportsSubTensors</a></div><div class="ttdeci">bool SupportsSubTensors() const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8hpp_source.xhtml#l00039">NeonWorkloadFactory.hpp:39</a></div></div>
<div class="ttc" id="structarmnn_1_1_comparison_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_comparison_queue_descriptor.xhtml">armnn::ComparisonQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00684">WorkloadData.hpp:684</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_ae2cd7e29596b68884bfaade25f8f0dc0"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">armnn::NeonWorkloadFactory::GetBackendId</a></div><div class="ttdeci">const BackendId &amp; GetBackendId() const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00049">NeonWorkloadFactory.cpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_aa98def0f9b9ff714a013f8083bbadf82"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#aa98def0f9b9ff714a013f8083bbadf82">armnn::NeonWorkloadFactory::CreateSplitter</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSplitter(const SplitterQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00561">NeonWorkloadFactory.cpp:561</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">armnn::ConvertFp16ToFp32QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00477">WorkloadData.hpp:477</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a2b793964f2c501b9ea343ffe310fc89e"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a2b793964f2c501b9ea343ffe310fc89e">armnn::NeonWorkloadFactory::CreateFill</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateFill(const FillQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00336">NeonWorkloadFactory.cpp:336</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_ab345edf481dd64a3ced4c0808d4ee844"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#ab345edf481dd64a3ced4c0808d4ee844">armnn::NeonWorkloadFactory::CreateDequantize</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDequantize(const DequantizeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00282">NeonWorkloadFactory.cpp:282</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_aa07df85c33d6e3ea4891b5f344df6964"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#aa07df85c33d6e3ea4891b5f344df6964">armnn::NeonWorkloadFactory::CreateMemCopy</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMemCopy(const MemCopyQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00418">NeonWorkloadFactory.cpp:418</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_ae8c233450162434ad36c57805c474d08"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#ae8c233450162434ad36c57805c474d08">armnn::NeonWorkloadFactory::CreateConvolution3d</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvolution3d(const Convolution3dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00243">NeonWorkloadFactory.cpp:243</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reduce_queue_descriptor.xhtml">armnn::ReduceQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00699">WorkloadData.hpp:699</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a5c2f4f703e07407e70c30cc770d02d6b"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a5c2f4f703e07407e70c30cc770d02d6b">armnn::NeonWorkloadFactory::CreateInstanceNormalization</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateInstanceNormalization(const InstanceNormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00366">NeonWorkloadFactory.cpp:366</a></div></div>
<div class="ttc" id="structarmnn_1_1_rank_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_rank_queue_descriptor.xhtml">armnn::RankQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00334">WorkloadData.hpp:334</a></div></div>
<div class="ttc" id="structarmnn_1_1_logical_binary_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_logical_binary_queue_descriptor.xhtml">armnn::LogicalBinaryQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00694">WorkloadData.hpp:694</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a3f21c47a41cbbcfe7d74becd76766c80"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a3f21c47a41cbbcfe7d74becd76766c80">armnn::NeonWorkloadFactory::CreatePreCompiled</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePreCompiled(const PreCompiledQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00483">NeonWorkloadFactory.cpp:483</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a6d9da6f30bce6aa09040e7e37485a3dc"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a6d9da6f30bce6aa09040e7e37485a3dc">armnn::NeonWorkloadFactory::CreateLogicalBinary</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateLogicalBinary(const LogicalBinaryQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00386">NeonWorkloadFactory.cpp:386</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a5d463f116733f47ce2bab08e430d1ba2"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">armnn::NeonWorkloadFactory::CreateOutput</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateOutput(const OutputQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00459">NeonWorkloadFactory.cpp:459</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">armnn::ConvertFp32ToFp16QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00482">WorkloadData.hpp:482</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a4e70ecb5f981d7c07971bd0740f53c05"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a4e70ecb5f981d7c07971bd0740f53c05">armnn::NeonWorkloadFactory::CreateConvertFp32ToBf16</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvertFp32ToBf16(const ConvertFp32ToBf16QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00208">NeonWorkloadFactory.cpp:208</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_aa6ef3324f715ccf62d235aa54118d174"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#aa6ef3324f715ccf62d235aa54118d174">armnn::NeonWorkloadFactory::CreateConstant</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConstant(const ConstantQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00188">NeonWorkloadFactory.cpp:188</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a4d5371f67eabb04a38c69e97e67f1d35"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a4d5371f67eabb04a38c69e97e67f1d35">armnn::NeonWorkloadFactory::CreateStack</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateStack(const StackQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00567">NeonWorkloadFactory.cpp:567</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_aac4c7cd17cf3dc3a23fd4a21933c60cb"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#aac4c7cd17cf3dc3a23fd4a21933c60cb">armnn::NeonWorkloadFactory::CreateFloor</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateFloor(const FloorQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00342">NeonWorkloadFactory.cpp:342</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">armnn::TransposeConvolution2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00562">WorkloadData.hpp:562</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">armnn::Convolution2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00197">WorkloadData.hpp:197</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_af5f7b0f6273c838b6b7d7de8447524f9"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#af5f7b0f6273c838b6b7d7de8447524f9">armnn::NeonWorkloadFactory::CreateActivation</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateActivation(const ActivationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00134">NeonWorkloadFactory.cpp:134</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a48ebe514c1ca3e41edccdd7682bf38ca"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a48ebe514c1ca3e41edccdd7682bf38ca">armnn::NeonWorkloadFactory::CreateDepthwiseConvolution2d</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDepthwiseConvolution2d(const DepthwiseConvolution2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00276">NeonWorkloadFactory.cpp:276</a></div></div>
<div class="ttc" id="structarmnn_1_1_mem_copy_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">armnn::MemCopyQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00076">WorkloadData.hpp:76</a></div></div>
<div class="ttc" id="structarmnn_1_1_fill_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fill_queue_descriptor.xhtml">armnn::FillQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00164">WorkloadData.hpp:164</a></div></div>
<div class="ttc" id="structarmnn_1_1_slice_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_slice_queue_descriptor.xhtml">armnn::SliceQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00674">WorkloadData.hpp:674</a></div></div>
<div class="ttc" id="structarmnn_1_1_depth_to_space_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depth_to_space_queue_descriptor.xhtml">armnn::DepthToSpaceQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00679">WorkloadData.hpp:679</a></div></div>
<div class="ttc" id="structarmnn_1_1_l2_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">armnn::L2NormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00373">WorkloadData.hpp:373</a></div></div>
<div class="ttc" id="_workload_factory_base_8hpp_xhtml"><div class="ttname"><a href="_workload_factory_base_8hpp.xhtml">WorkloadFactoryBase.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_queue_descriptor.xhtml">armnn::TransposeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00575">WorkloadData.hpp:575</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_strided_slice_queue_descriptor.xhtml">armnn::StridedSliceQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00492">WorkloadData.hpp:492</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">armnn::QLstmQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00580">WorkloadData.hpp:580</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_queue_descriptor.xhtml">armnn::ArgMinMaxQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00153">WorkloadData.hpp:153</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a94a90252763f05b6c957f68f84e65c66"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a94a90252763f05b6c957f68f84e65c66">armnn::NeonWorkloadFactory::CreateDivision</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDivision(const DivisionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00294">NeonWorkloadFactory.cpp:294</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_aab44d0205a3daac5eebf14c6672924f5"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#aab44d0205a3daac5eebf14c6672924f5">armnn::NeonWorkloadFactory::CreateReduce</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateReduce(const ReduceQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00519">NeonWorkloadFactory.cpp:519</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a7b06edab4eef1822445e4201a1262635"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">armnn::NeonWorkloadFactory::CreateInput</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateInput(const InputQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00360">NeonWorkloadFactory.cpp:360</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">armnn::BatchNormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00316">WorkloadData.hpp:316</a></div></div>
<div class="ttc" id="structarmnn_1_1_mem_import_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mem_import_queue_descriptor.xhtml">armnn::MemImportQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00084">WorkloadData.hpp:84</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a2edd58192b89ac27cf4be7d7ea6252d3"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a2edd58192b89ac27cf4be7d7ea6252d3">armnn::NeonWorkloadFactory::CreateQLstm</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateQLstm(const QLstmQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00495">NeonWorkloadFactory.cpp:495</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor.xhtml">armnn::ConvertFp32ToBf16QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00472">WorkloadData.hpp:472</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a3e5a5e967dfd56b9b1d55ec2739f2edd"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a3e5a5e967dfd56b9b1d55ec2739f2edd">armnn::NeonWorkloadFactory::CreateBatchNormalization</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateBatchNormalization(const BatchNormalizationQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00152">NeonWorkloadFactory.cpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a447013b9d70a1d74196449d1a3f56acc"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a447013b9d70a1d74196449d1a3f56acc">armnn::NeonWorkloadFactory::CreateElementwiseUnary</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateElementwiseUnary(const ElementwiseUnaryQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00300">NeonWorkloadFactory.cpp:300</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about TensorInfos of a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a3f15b1b391dd86de376ce541eadca3fa"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">armnn::NeonWorkloadFactory::CreateResize</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateResize(const ResizeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00531">NeonWorkloadFactory.cpp:531</a></div></div>
<div class="ttc" id="structarmnn_1_1_channel_shuffle_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_channel_shuffle_queue_descriptor.xhtml">armnn::ChannelShuffleQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00761">WorkloadData.hpp:761</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_a76fb13a018f8e01087a7ae0eb23509e1"><div class="ttname"><a href="_deprecated_8hpp.xhtml#a76fb13a018f8e01087a7ae0eb23509e1">ARMNN_DEPRECATED_MSG</a></div><div class="ttdeci">#define ARMNN_DEPRECATED_MSG(message)</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00043">Deprecated.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a6c8caa2fb12f36f83fde85da03a87c42"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a6c8caa2fb12f36f83fde85da03a87c42">armnn::NeonWorkloadFactory::CreateConcat</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConcat(const ConcatQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00182">NeonWorkloadFactory.cpp:182</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a6e05a05ea7ea2c384c94d6568f032614"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a6e05a05ea7ea2c384c94d6568f032614">armnn::NeonWorkloadFactory::CreatePooling2d</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePooling2d(const Pooling2dQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00477">NeonWorkloadFactory.cpp:477</a></div></div>
<div class="ttc" id="structarmnn_1_1_pre_compiled_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pre_compiled_queue_descriptor.xhtml">armnn::PreCompiledQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00530">WorkloadData.hpp:530</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a1d54b5c774bdac45f22d1ec57d0a9f3f"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a1d54b5c774bdac45f22d1ec57d0a9f3f">armnn::NeonWorkloadFactory::CreateBatchToSpaceNd</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateBatchToSpaceNd(const BatchToSpaceNdQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00158">NeonWorkloadFactory.cpp:158</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a46e1398968d2f4951ce1fd2b9b70fc5b"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a46e1398968d2f4951ce1fd2b9b70fc5b">armnn::NeonWorkloadFactory::CreateAddition</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateAddition(const AdditionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00140">NeonWorkloadFactory.cpp:140</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a3a2d9b8e1156605172ada1472e9460cd"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a3a2d9b8e1156605172ada1472e9460cd">armnn::NeonWorkloadFactory::CreateDetectionPostProcess</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDetectionPostProcess(const DetectionPostProcessQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00288">NeonWorkloadFactory.cpp:288</a></div></div>
<div class="ttc" id="classarmnn_1_1_workload_factory_base_xhtml"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml">armnn::WorkloadFactoryBase</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00013">WorkloadFactoryBase.hpp:13</a></div></div>
<div class="ttc" id="structarmnn_1_1_dequantize_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_dequantize_queue_descriptor.xhtml">armnn::DequantizeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00542">WorkloadData.hpp:542</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">armnn::Pooling2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00191">WorkloadData.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a61d64ca308b8af42b422e13382329021"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a61d64ca308b8af42b422e13382329021">armnn::NeonWorkloadFactory::CreateSubtraction</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSubtraction(const SubtractionQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00579">NeonWorkloadFactory.cpp:579</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_ae2c6c12059f9cde37ff6bb8f682e9ceb"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#ae2c6c12059f9cde37ff6bb8f682e9ceb">armnn::NeonWorkloadFactory::CreateMaximum</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMaximum(const MaximumQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00406">NeonWorkloadFactory.cpp:406</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_aba5032787777bf0074ce70e2c2423d49"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#aba5032787777bf0074ce70e2c2423d49">armnn::NeonWorkloadFactory::CreateMean</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMean(const MeanQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;Info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00412">NeonWorkloadFactory.cpp:412</a></div></div>
<div class="ttc" id="structarmnn_1_1_mean_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mean_queue_descriptor.xhtml">armnn::MeanQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00293">WorkloadData.hpp:293</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_aade1930aedd59e037337410381f7011d"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#aade1930aedd59e037337410381f7011d">armnn::NeonWorkloadFactory::CreateConvertBf16ToFp32</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvertBf16ToFp32(const ConvertBf16ToFp32QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00194">NeonWorkloadFactory.cpp:194</a></div></div>
<div class="ttc" id="structarmnn_1_1_log_softmax_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">armnn::LogSoftmaxQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00378">WorkloadData.hpp:378</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_ac732fb2a7a5cc332339aa8686dd7e928"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#ac732fb2a7a5cc332339aa8686dd7e928">armnn::NeonWorkloadFactory::CreateRank</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateRank(const RankQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00513">NeonWorkloadFactory.cpp:513</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a3fffcec3624e83671b4623e22ca623e5"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a3fffcec3624e83671b4623e22ca623e5">armnn::NeonWorkloadFactory::CreateArgMinMax</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateArgMinMax(const ArgMinMaxQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00146">NeonWorkloadFactory.cpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_aca8d797b1e48d693de73e868b3aa41ec"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#aca8d797b1e48d693de73e868b3aa41ec">armnn::NeonWorkloadFactory::CreatePrelu</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePrelu(const PreluQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00489">NeonWorkloadFactory.cpp:489</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reshape_queue_descriptor.xhtml">armnn::ReshapeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00395">WorkloadData.hpp:395</a></div></div>
<div class="ttc" id="structarmnn_1_1_debug_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_debug_queue_descriptor.xhtml">armnn::DebugQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00509">WorkloadData.hpp:509</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">armnn::ElementwiseUnaryQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00689">WorkloadData.hpp:689</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_aac9d1b722bcd5b59cc6760ca2607ef8e"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#aac9d1b722bcd5b59cc6760ca2607ef8e">armnn::NeonWorkloadFactory::CreateTranspose</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateTranspose(const TransposeQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00585">NeonWorkloadFactory.cpp:585</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a1d1feb2b5c6a4c6701a3dee01e65bee4"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a1d1feb2b5c6a4c6701a3dee01e65bee4">armnn::NeonWorkloadFactory::CreateSpaceToBatchNd</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSpaceToBatchNd(const SpaceToBatchNdQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00549">NeonWorkloadFactory.cpp:549</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00210">Layer.hpp:210</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">armnn::DepthwiseConvolution2dQueueDescriptor</a></div><div class="ttdoc">Depthwise Convolution 2D layer workload data. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00230">WorkloadData.hpp:230</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00148">WorkloadData.hpp:148</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a2318d942f9615dff92fe75688bdd8c48"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a2318d942f9615dff92fe75688bdd8c48">armnn::NeonWorkloadFactory::CreateSpaceToDepth</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSpaceToDepth(const SpaceToDepthQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00555">NeonWorkloadFactory.cpp:555</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a59399d21babdc3a17df004dfa64617ea"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a59399d21babdc3a17df004dfa64617ea">armnn::NeonWorkloadFactory::CreatePermute</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePermute(const PermuteQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00471">NeonWorkloadFactory.cpp:471</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_workload_factory_xhtml_a7239477811c44d4398f0c2d291d9ea76"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">armnn::NeonWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00111">NeonWorkloadFactory.cpp:111</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_normalization_queue_descriptor.xhtml">armnn::NormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00257">WorkloadData.hpp:257</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_d86eb514662c7c08e168285f21d00ea1.xhtml">neon</a></li><li class="navelem"><a class="el" href="_neon_workload_factory_8hpp.xhtml">NeonWorkloadFactory.hpp</a></li>
    <li class="footer">Generated on Wed Nov 17 2021 12:59:35 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
